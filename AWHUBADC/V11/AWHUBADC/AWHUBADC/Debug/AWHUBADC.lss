
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00803e00  00001567  0000161b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001566  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  00009566  00001566  0000161a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000f0  00803e7a  00803e7a  00001695  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016c8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  00001708  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000071a3  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028c1  00000000  00000000  00008b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021ec  00000000  00000000  0000b424  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004b8  00000000  00000000  0000d610  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000240a  00000000  00000000  0000dac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001fa4  00000000  00000000  0000fed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e0  00000000  00000000  00011e76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e7 e6       	ldi	r30, 0x67	; 103
      48:	f5 e1       	ldi	r31, 0x15	; 21
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	aa 37       	cpi	r26, 0x7A	; 122
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2f e3       	ldi	r18, 0x3F	; 63
      58:	aa e7       	ldi	r26, 0x7A	; 122
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	aa 36       	cpi	r26, 0x6A	; 106
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	29 d0       	rcall	.+82     	; 0xba <main>
      68:	7c ca       	rjmp	.-2824   	; 0xfffff562 <__eeprom_end+0xff7ef562>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
      6c:	58 d5       	rcall	.+2736   	; 0xb1e <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6bed>
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f6ea3>
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <ConfigPIT>:

uint8_t sleepTimeSequence = T_2048;

void ConfigPIT(uint8_t timeSequence)
{
	RTC.PITCTRLA = timeSequence 
      ac:	81 60       	ori	r24, 0x01	; 1
      ae:	e0 e4       	ldi	r30, 0x40	; 64
      b0:	f1 e0       	ldi	r31, 0x01	; 1
      b2:	80 8b       	std	Z+16, r24	; 0x10
	| 1 << RTC_PITEN_bp;
	RTC.PITINTFLAGS = RTC_PI_bm;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	83 8b       	std	Z+19, r24	; 0x13
      b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
	atmel_start_init();
      ba:	d8 df       	rcall	.-80     	; 0x6c <atmel_start_init>
	
	batVar = FLASH_0_read_eeprom_byte(0);
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	91 d5       	rcall	.+2850   	; 0xbe4 <FLASH_0_read_eeprom_byte>
	batVar = batVar > 6 ? 7 : batVar;
      c2:	c8 2f       	mov	r28, r24
      c4:	88 30       	cpi	r24, 0x08	; 8
      c6:	08 f0       	brcs	.+2      	; 0xca <main+0x10>
      c8:	c7 e0       	ldi	r28, 0x07	; 7
      ca:	c0 93 7a 3e 	sts	0x3E7A, r28	; 0x803e7a <__data_end>
	BatteryLevelCounter = ((uint64_t)((float)BatteryLevelCounter * (float)batVar)) >> 3;
      ce:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
      d2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
      d6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
      da:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
      de:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
      e2:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
      e6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
      ea:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
      ee:	f0 d8       	rcall	.-3616   	; 0xfffff2d0 <__eeprom_end+0xff7ef2d0>
      f0:	6b 01       	movw	r12, r22
      f2:	7c 01       	movw	r14, r24
      f4:	6c 2f       	mov	r22, r28
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	ac d8       	rcall	.-3752   	; 0xfffff256 <__eeprom_end+0xff7ef256>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	c7 01       	movw	r24, r14
     104:	b6 01       	movw	r22, r12
     106:	83 d9       	rcall	.-3322   	; 0xfffff40e <__eeprom_end+0xff7ef40e>
     108:	40 d8       	rcall	.-3968   	; 0xfffff18a <__eeprom_end+0xff7ef18a>
     10a:	03 e0       	ldi	r16, 0x03	; 3
     10c:	f9 d9       	rcall	.-3086   	; 0xfffff500 <__eeprom_end+0xff7ef500>
     10e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     112:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     116:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     11a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     11e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     122:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     126:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     12a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     12e:	89 b1       	in	r24, 0x09	; 9
     130:	8f 7e       	andi	r24, 0xEF	; 239
     132:	89 b9       	out	0x09, r24	; 9
	
	DATA_set_level(false);
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM8;
     134:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f7ba5>
     138:	ef e5       	ldi	r30, 0x5F	; 95
     13a:	fe e3       	ldi	r31, 0x3E	; 62
     13c:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM9;
     13e:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f7ba6>
     142:	87 83       	std	Z+7, r24	; 0x07
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     144:	46 e0       	ldi	r20, 0x06	; 6
     146:	6a e1       	ldi	r22, 0x1A	; 26
     148:	cf 01       	movw	r24, r30
     14a:	63 d6       	rcall	.+3270   	; 0xe12 <SX1243Init>
	
	while(true) 
	{
		#if B_STYLE == (0)
		BatteryLevelCounter -= (BAT_ADC_CONSTANT >> sleepTimeSequence);
     14c:	e9 e3       	ldi	r30, 0x39	; 57
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     154:	02 c0       	rjmp	.+4      	; 0x15a <main+0xa0>
     156:	f5 95       	asr	r31
     158:	e7 95       	ror	r30
     15a:	0a 94       	dec	r0
     15c:	e2 f7       	brpl	.-8      	; 0x156 <main+0x9c>
     15e:	1f 2f       	mov	r17, r31
     160:	11 0f       	add	r17, r17
     162:	11 0b       	sbc	r17, r17
     164:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     168:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     16c:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     170:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     174:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     178:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     17c:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     180:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     184:	ae 2e       	mov	r10, r30
     186:	bf 2e       	mov	r11, r31
     188:	c1 2e       	mov	r12, r17
     18a:	d1 2e       	mov	r13, r17
     18c:	e1 2e       	mov	r14, r17
     18e:	f1 2e       	mov	r15, r17
     190:	01 2f       	mov	r16, r17
     192:	d2 d9       	rcall	.-3164   	; 0xfffff538 <__eeprom_end+0xff7ef538>
     194:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     198:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     19c:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     1a0:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     1a4:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     1a8:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     1ac:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     1b0:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		#endif
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     1b4:	c0 90 01 3e 	lds	r12, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     1b8:	d0 90 02 3e 	lds	r13, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     1bc:	e0 90 03 3e 	lds	r14, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     1c0:	f0 90 04 3e 	lds	r15, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     1c4:	e1 e8       	ldi	r30, 0x81	; 129
     1c6:	ce 16       	cp	r12, r30
     1c8:	e1 e5       	ldi	r30, 0x51	; 81
     1ca:	de 06       	cpc	r13, r30
     1cc:	e1 e0       	ldi	r30, 0x01	; 1
     1ce:	ee 06       	cpc	r14, r30
     1d0:	f1 04       	cpc	r15, r1
     1d2:	f8 f0       	brcs	.+62     	; 0x212 <__DATA_REGION_LENGTH__+0x12>
		{
			double var = (double)BatteryLevelCounter / (double)BAT_FULL_CAPACITY;
     1d4:	7d d8       	rcall	.-3846   	; 0xfffff2d0 <__eeprom_end+0xff7ef2d0>
     1d6:	21 e9       	ldi	r18, 0x91	; 145
     1d8:	39 e7       	ldi	r19, 0x79	; 121
     1da:	4b e0       	ldi	r20, 0x0B	; 11
     1dc:	50 e5       	ldi	r21, 0x50	; 80
     1de:	5e d7       	rcall	.+3772   	; 0x109c <__divsf3>
			batVar = (uint8_t)(var * 9.0f);
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	40 e1       	ldi	r20, 0x10	; 16
     1e6:	51 e4       	ldi	r21, 0x41	; 65
     1e8:	12 d9       	rcall	.-3548   	; 0xfffff40e <__eeprom_end+0xff7ef40e>
     1ea:	06 d8       	rcall	.-4084   	; 0xfffff1f8 <__eeprom_end+0xff7ef1f8>
			batVar = batVar > 6 ? 7 : batVar;
     1ec:	68 30       	cpi	r22, 0x08	; 8
     1ee:	08 f0       	brcs	.+2      	; 0x1f2 <main+0x138>
     1f0:	67 e0       	ldi	r22, 0x07	; 7
     1f2:	60 93 7a 3e 	sts	0x3E7A, r22	; 0x803e7a <__data_end>
			FLASH_0_write_eeprom_byte(0, batVar);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	f8 d4       	rcall	.+2544   	; 0xbec <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     1fc:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <BatteryLevelCalculateCounter>
     200:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     204:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     208:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
}

static inline void RSTCTRL_clear_reset_cause(void)
{
	RSTCTRL.RSTFR
	    = RSTCTRL_UPDIRF_bm | RSTCTRL_SWRF_bm | RSTCTRL_WDRF_bm | RSTCTRL_EXTRF_bm | RSTCTRL_BORF_bm | RSTCTRL_PORF_bm;
     20c:	8f e3       	ldi	r24, 0x3F	; 63
     20e:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <payloadBufferStartByte+0x7f6ada>
			RSTCTRL_clear_reset_cause();
		}
		BatteryLevelCalculateCounter++;
     212:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     216:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     21a:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     21e:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	a1 1d       	adc	r26, r1
     226:	b1 1d       	adc	r27, r1
     228:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <BatteryLevelCalculateCounter>
     22c:	90 93 02 3e 	sts	0x3E02, r25	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     230:	a0 93 03 3e 	sts	0x3E03, r26	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     234:	b0 93 04 3e 	sts	0x3E04, r27	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     238:	24 e1       	ldi	r18, 0x14	; 20
     23a:	34 e0       	ldi	r19, 0x04	; 4
     23c:	f9 01       	movw	r30, r18
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     244:	c4 e3       	ldi	r28, 0x34	; 52
     246:	d4 e0       	ldi	r29, 0x04	; 4
     248:	88 81       	ld	r24, Y
     24a:	88 60       	ori	r24, 0x08	; 8
     24c:	88 83       	st	Y, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     24e:	a5 e1       	ldi	r26, 0x15	; 21
     250:	b4 e0       	ldi	r27, 0x04	; 4
     252:	8c 91       	ld	r24, X
     254:	88 60       	ori	r24, 0x08	; 8
     256:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     258:	45 e3       	ldi	r20, 0x35	; 53
     25a:	54 e0       	ldi	r21, 0x04	; 4
     25c:	fa 01       	movw	r30, r20
     25e:	80 81       	ld	r24, Z
     260:	88 60       	ori	r24, 0x08	; 8
     262:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     264:	80 b1       	in	r24, 0x00	; 0
     266:	8f 7e       	andi	r24, 0xEF	; 239
     268:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     26a:	84 b1       	in	r24, 0x04	; 4
     26c:	8f 7e       	andi	r24, 0xEF	; 239
     26e:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     270:	80 b1       	in	r24, 0x00	; 0
     272:	8f 7d       	andi	r24, 0xDF	; 223
     274:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     276:	84 b1       	in	r24, 0x04	; 4
     278:	8f 7d       	andi	r24, 0xDF	; 223
     27a:	84 b9       	out	0x04, r24	; 4
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     27c:	b2 b0       	in	r11, 0x02	; 2
		SB1_set_dir(PORT_DIR_IN);
		SB2_set_dir(PORT_DIR_IN);
		PSD1_set_dir(PORT_DIR_IN);
		PSD2_set_dir(PORT_DIR_IN);
		
		uint8_t In_SB1  = !SB1_get_level();
     27e:	b6 94       	lsr	r11
     280:	b6 94       	lsr	r11
     282:	b6 94       	lsr	r11
     284:	b6 94       	lsr	r11
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	9b 2d       	mov	r25, r11
     28a:	98 27       	eor	r25, r24
     28c:	91 70       	andi	r25, 0x01	; 1
     28e:	b9 2e       	mov	r11, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     290:	a6 b0       	in	r10, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     292:	a6 94       	lsr	r10
     294:	a6 94       	lsr	r10
     296:	a6 94       	lsr	r10
     298:	a6 94       	lsr	r10
     29a:	9a 2d       	mov	r25, r10
     29c:	98 27       	eor	r25, r24
     29e:	91 70       	andi	r25, 0x01	; 1
     2a0:	a9 2e       	mov	r10, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     2a2:	92 b0       	in	r9, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
     2a4:	96 94       	lsr	r9
     2a6:	96 94       	lsr	r9
     2a8:	96 94       	lsr	r9
     2aa:	96 94       	lsr	r9
     2ac:	96 94       	lsr	r9
     2ae:	99 2d       	mov	r25, r9
     2b0:	98 27       	eor	r25, r24
     2b2:	91 70       	andi	r25, 0x01	; 1
     2b4:	99 2e       	mov	r9, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     2b6:	06 b1       	in	r16, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
     2b8:	02 95       	swap	r16
     2ba:	06 95       	lsr	r16
     2bc:	07 70       	andi	r16, 0x07	; 7
     2be:	08 27       	eor	r16, r24
     2c0:	01 70       	andi	r16, 0x01	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2c2:	f9 01       	movw	r30, r18
     2c4:	80 81       	ld	r24, Z
     2c6:	87 7f       	andi	r24, 0xF7	; 247
     2c8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2ca:	88 81       	ld	r24, Y
     2cc:	87 7f       	andi	r24, 0xF7	; 247
     2ce:	88 83       	st	Y, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2d0:	8c 91       	ld	r24, X
     2d2:	87 7f       	andi	r24, 0xF7	; 247
     2d4:	8c 93       	st	X, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2d6:	fa 01       	movw	r30, r20
     2d8:	80 81       	ld	r24, Z
     2da:	87 7f       	andi	r24, 0xF7	; 247
     2dc:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2de:	81 b1       	in	r24, 0x01	; 1
     2e0:	8f 7e       	andi	r24, 0xEF	; 239
     2e2:	81 b9       	out	0x01, r24	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2e4:	85 b1       	in	r24, 0x05	; 5
     2e6:	8f 7e       	andi	r24, 0xEF	; 239
     2e8:	85 b9       	out	0x05, r24	; 5
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2ea:	81 b1       	in	r24, 0x01	; 1
     2ec:	8f 7d       	andi	r24, 0xDF	; 223
     2ee:	81 b9       	out	0x01, r24	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2f0:	85 b1       	in	r24, 0x05	; 5
     2f2:	8f 7d       	andi	r24, 0xDF	; 223
     2f4:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     2f6:	80 b1       	in	r24, 0x00	; 0
     2f8:	80 61       	ori	r24, 0x10	; 16
     2fa:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     2fc:	84 b1       	in	r24, 0x04	; 4
     2fe:	80 61       	ori	r24, 0x10	; 16
     300:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     302:	80 b1       	in	r24, 0x00	; 0
     304:	80 62       	ori	r24, 0x20	; 32
     306:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     308:	84 b1       	in	r24, 0x04	; 4
     30a:	80 62       	ori	r24, 0x20	; 32
     30c:	84 b9       	out	0x04, r24	; 4
		SB2_set_dir(PORT_DIR_OUT);
		PSD1_set_dir(PORT_DIR_OUT);
		PSD2_set_dir(PORT_DIR_OUT);
		
		#if B_STYLE == (0)
		QTOUCH_GetSensorValue(0, true);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	55 d6       	rcall	.+3242   	; 0xfbe <QTOUCH_GetSensorValue>
		
		for(uint8_t j = 0; j < 2; j++)
     314:	10 e0       	ldi	r17, 0x00	; 0
     316:	11 c2       	rjmp	.+1058   	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
		{
			QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle = SAMPLE_COUNT;
     318:	c1 2f       	mov	r28, r17
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	87 e2       	ldi	r24, 0x27	; 39
     31e:	8c 9f       	mul	r24, r28
     320:	f0 01       	movw	r30, r0
     322:	8d 9f       	mul	r24, r29
     324:	f0 0d       	add	r31, r0
     326:	11 24       	eor	r1, r1
     328:	e3 5f       	subi	r30, 0xF3	; 243
     32a:	f1 4c       	sbci	r31, 0xC1	; 193
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	83 a3       	std	Z+35, r24	; 0x23
     332:	94 a3       	std	Z+36, r25	; 0x24
			QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc = 0;
     334:	17 8e       	std	Z+31, r1	; 0x1f
     336:	10 a2       	std	Z+32, r1	; 0x20
     338:	11 a2       	std	Z+33, r1	; 0x21
     33a:	12 a2       	std	Z+34, r1	; 0x22
			while(--QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle)
     33c:	20 c0       	rjmp	.+64     	; 0x37e <__DATA_REGION_LENGTH__+0x17e>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	81 2f       	mov	r24, r17
     342:	3d d6       	rcall	.+3194   	; 0xfbe <QTOUCH_GetSensorValue>
     344:	6b 01       	movw	r12, r22
     346:	7c 01       	movw	r14, r24
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	81 2f       	mov	r24, r17
     34c:	38 d6       	rcall	.+3184   	; 0xfbe <QTOUCH_GetSensorValue>
     34e:	c6 1a       	sub	r12, r22
     350:	d7 0a       	sbc	r13, r23
     352:	e8 0a       	sbc	r14, r24
     354:	f9 0a       	sbc	r15, r25
     356:	87 e2       	ldi	r24, 0x27	; 39
     358:	8c 9f       	mul	r24, r28
     35a:	f0 01       	movw	r30, r0
     35c:	8d 9f       	mul	r24, r29
     35e:	f0 0d       	add	r31, r0
     360:	11 24       	eor	r1, r1
     362:	e3 5f       	subi	r30, 0xF3	; 243
     364:	f1 4c       	sbci	r31, 0xC1	; 193
     366:	87 8d       	ldd	r24, Z+31	; 0x1f
     368:	90 a1       	ldd	r25, Z+32	; 0x20
     36a:	a1 a1       	ldd	r26, Z+33	; 0x21
     36c:	b2 a1       	ldd	r27, Z+34	; 0x22
     36e:	c8 0e       	add	r12, r24
     370:	d9 1e       	adc	r13, r25
     372:	ea 1e       	adc	r14, r26
     374:	fb 1e       	adc	r15, r27
     376:	c7 8e       	std	Z+31, r12	; 0x1f
     378:	d0 a2       	std	Z+32, r13	; 0x20
     37a:	e1 a2       	std	Z+33, r14	; 0x21
     37c:	f2 a2       	std	Z+34, r15	; 0x22
		
		for(uint8_t j = 0; j < 2; j++)
		{
			QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle = SAMPLE_COUNT;
			QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc = 0;
			while(--QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle)
     37e:	87 e2       	ldi	r24, 0x27	; 39
     380:	8c 9f       	mul	r24, r28
     382:	f0 01       	movw	r30, r0
     384:	8d 9f       	mul	r24, r29
     386:	f0 0d       	add	r31, r0
     388:	11 24       	eor	r1, r1
     38a:	e3 5f       	subi	r30, 0xF3	; 243
     38c:	f1 4c       	sbci	r31, 0xC1	; 193
     38e:	83 a1       	ldd	r24, Z+35	; 0x23
     390:	94 a1       	ldd	r25, Z+36	; 0x24
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	83 a3       	std	Z+35, r24	; 0x23
     396:	94 a3       	std	Z+36, r25	; 0x24
     398:	89 2b       	or	r24, r25
     39a:	89 f6       	brne	.-94     	; 0x33e <__DATA_REGION_LENGTH__+0x13e>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
			}
			
			QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  = (QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  >> QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider) * QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier +
     39c:	87 e2       	ldi	r24, 0x27	; 39
     39e:	8c 9f       	mul	r24, r28
     3a0:	f0 01       	movw	r30, r0
     3a2:	8d 9f       	mul	r24, r29
     3a4:	f0 0d       	add	r31, r0
     3a6:	11 24       	eor	r1, r1
     3a8:	e3 5f       	subi	r30, 0xF3	; 243
     3aa:	f1 4c       	sbci	r31, 0xC1	; 193
     3ac:	87 89       	ldd	r24, Z+23	; 0x17
     3ae:	90 8d       	ldd	r25, Z+24	; 0x18
     3b0:	a1 8d       	ldd	r26, Z+25	; 0x19
     3b2:	b2 8d       	ldd	r27, Z+26	; 0x1a
     3b4:	f5 a0       	ldd	r15, Z+37	; 0x25
     3b6:	9c 01       	movw	r18, r24
     3b8:	ad 01       	movw	r20, r26
     3ba:	0f 2c       	mov	r0, r15
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__DATA_REGION_LENGTH__+0x1c6>
     3be:	56 95       	lsr	r21
     3c0:	47 95       	ror	r20
     3c2:	37 95       	ror	r19
     3c4:	27 95       	ror	r18
     3c6:	0a 94       	dec	r0
     3c8:	d2 f7       	brpl	.-12     	; 0x3be <__DATA_REGION_LENGTH__+0x1be>
     3ca:	a6 a1       	ldd	r26, Z+38	; 0x26
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	8c d8       	rcall	.-3816   	; 0xfffff4e8 <__eeprom_end+0xff7ef4e8>
													   ((QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc << SAMPLE_MULTIPLIER) >> (SAMPLE_DIVIDER + QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider));
     3d0:	47 8c       	ldd	r4, Z+31	; 0x1f
     3d2:	50 a0       	ldd	r5, Z+32	; 0x20
     3d4:	61 a0       	ldd	r6, Z+33	; 0x21
     3d6:	72 a0       	ldd	r7, Z+34	; 0x22
     3d8:	44 0c       	add	r4, r4
     3da:	55 1c       	adc	r5, r5
     3dc:	66 1c       	adc	r6, r6
     3de:	77 1c       	adc	r7, r7
     3e0:	a3 01       	movw	r20, r6
     3e2:	92 01       	movw	r18, r4
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <__DATA_REGION_LENGTH__+0x1ee>
     3e6:	56 95       	lsr	r21
     3e8:	47 95       	ror	r20
     3ea:	37 95       	ror	r19
     3ec:	27 95       	ror	r18
     3ee:	fa 94       	dec	r15
     3f0:	d2 f7       	brpl	.-12     	; 0x3e6 <__DATA_REGION_LENGTH__+0x1e6>
			while(--QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle)
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
			}
			
			QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  = (QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  >> QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider) * QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier +
     3f2:	dc 01       	movw	r26, r24
     3f4:	cb 01       	movw	r24, r22
     3f6:	82 0f       	add	r24, r18
     3f8:	93 1f       	adc	r25, r19
     3fa:	a4 1f       	adc	r26, r20
     3fc:	b5 1f       	adc	r27, r21
     3fe:	87 8b       	std	Z+23, r24	; 0x17
     400:	90 8f       	std	Z+24, r25	; 0x18
     402:	a1 8f       	std	Z+25, r26	; 0x19
     404:	b2 8f       	std	Z+26, r27	; 0x1a
													   ((QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc << SAMPLE_MULTIPLIER) >> (SAMPLE_DIVIDER + QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider));
			
			QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue - QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine;
     406:	c4 80       	ldd	r12, Z+4	; 0x04
     408:	d5 80       	ldd	r13, Z+5	; 0x05
     40a:	e6 80       	ldd	r14, Z+6	; 0x06
     40c:	f7 80       	ldd	r15, Z+7	; 0x07
     40e:	8c 19       	sub	r24, r12
     410:	9d 09       	sbc	r25, r13
     412:	ae 09       	sbc	r26, r14
     414:	bf 09       	sbc	r27, r15
     416:	80 83       	st	Z, r24
     418:	91 83       	std	Z+1, r25	; 0x01
     41a:	a2 83       	std	Z+2, r26	; 0x02
     41c:	b3 83       	std	Z+3, r27	; 0x03
			
			if(QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue < QTOUCHADC_REFERANCE_FILTER_P[j].NegativeThreshold)
     41e:	c7 84       	ldd	r12, Z+15	; 0x0f
     420:	d0 88       	ldd	r13, Z+16	; 0x10
     422:	e1 88       	ldd	r14, Z+17	; 0x11
     424:	f2 88       	ldd	r15, Z+18	; 0x12
     426:	8c 15       	cp	r24, r12
     428:	9d 05       	cpc	r25, r13
     42a:	ae 05       	cpc	r26, r14
     42c:	bf 05       	cpc	r27, r15
     42e:	b4 f4       	brge	.+44     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
     430:	87 e2       	ldi	r24, 0x27	; 39
     432:	8c 9f       	mul	r24, r28
     434:	f0 01       	movw	r30, r0
     436:	8d 9f       	mul	r24, r29
     438:	f0 0d       	add	r31, r0
     43a:	11 24       	eor	r1, r1
     43c:	e3 5f       	subi	r30, 0xF3	; 243
     43e:	f1 4c       	sbci	r31, 0xC1	; 193
     440:	87 89       	ldd	r24, Z+23	; 0x17
     442:	90 8d       	ldd	r25, Z+24	; 0x18
     444:	a1 8d       	ldd	r26, Z+25	; 0x19
     446:	b2 8d       	ldd	r27, Z+26	; 0x1a
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter = 0;
     450:	15 86       	std	Z+13, r1	; 0x0d
				QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = 0;
     452:	10 82       	st	Z, r1
     454:	11 82       	std	Z+1, r1	; 0x01
     456:	12 82       	std	Z+2, r1	; 0x02
     458:	13 82       	std	Z+3, r1	; 0x03
     45a:	14 c1       	rjmp	.+552    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
			}
			else if(!QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate)
     45c:	27 e2       	ldi	r18, 0x27	; 39
     45e:	2c 9f       	mul	r18, r28
     460:	f0 01       	movw	r30, r0
     462:	2d 9f       	mul	r18, r29
     464:	f0 0d       	add	r31, r0
     466:	11 24       	eor	r1, r1
     468:	e3 5f       	subi	r30, 0xF3	; 243
     46a:	f1 4c       	sbci	r31, 0xC1	; 193
     46c:	20 85       	ldd	r18, Z+8	; 0x08
     46e:	21 11       	cpse	r18, r1
     470:	88 c0       	rjmp	.+272    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
			{					
				QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue = QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue < QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue ? QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue : QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue;
     472:	27 e2       	ldi	r18, 0x27	; 39
     474:	2c 9f       	mul	r18, r28
     476:	f0 01       	movw	r30, r0
     478:	2d 9f       	mul	r18, r29
     47a:	f0 0d       	add	r31, r0
     47c:	11 24       	eor	r1, r1
     47e:	e3 5f       	subi	r30, 0xF3	; 243
     480:	f1 4c       	sbci	r31, 0xC1	; 193
     482:	c1 84       	ldd	r12, Z+9	; 0x09
     484:	d2 84       	ldd	r13, Z+10	; 0x0a
     486:	e3 84       	ldd	r14, Z+11	; 0x0b
     488:	f4 84       	ldd	r15, Z+12	; 0x0c
     48a:	8c 15       	cp	r24, r12
     48c:	9d 05       	cpc	r25, r13
     48e:	ae 05       	cpc	r26, r14
     490:	bf 05       	cpc	r27, r15
     492:	10 f4       	brcc	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     494:	d7 01       	movw	r26, r14
     496:	c6 01       	movw	r24, r12
     498:	27 e2       	ldi	r18, 0x27	; 39
     49a:	2c 9f       	mul	r18, r28
     49c:	f0 01       	movw	r30, r0
     49e:	2d 9f       	mul	r18, r29
     4a0:	f0 0d       	add	r31, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	e3 5f       	subi	r30, 0xF3	; 243
     4a6:	f1 4c       	sbci	r31, 0xC1	; 193
     4a8:	81 87       	std	Z+9, r24	; 0x09
     4aa:	92 87       	std	Z+10, r25	; 0x0a
     4ac:	a3 87       	std	Z+11, r26	; 0x0b
     4ae:	b4 87       	std	Z+12, r27	; 0x0c
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter += QTOUCHADC_REFERANCE_FILTER_P[j].Counter < QTOUCHADC_REFERANCE_FILTER_P[j].CounterLimit ? 1 : -QTOUCHADC_REFERANCE_FILTER_P[j].Counter;
     4b0:	85 85       	ldd	r24, Z+13	; 0x0d
     4b2:	96 85       	ldd	r25, Z+14	; 0x0e
     4b4:	89 17       	cp	r24, r25
     4b6:	18 f0       	brcs	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b8:	98 2f       	mov	r25, r24
     4ba:	91 95       	neg	r25
     4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 0f       	add	r24, r25
     4c2:	97 e2       	ldi	r25, 0x27	; 39
     4c4:	9c 9f       	mul	r25, r28
     4c6:	f0 01       	movw	r30, r0
     4c8:	9d 9f       	mul	r25, r29
     4ca:	f0 0d       	add	r31, r0
     4cc:	11 24       	eor	r1, r1
     4ce:	e3 5f       	subi	r30, 0xF3	; 243
     4d0:	f1 4c       	sbci	r31, 0xC1	; 193
     4d2:	85 87       	std	Z+13, r24	; 0x0d
				if (QTOUCHADC_REFERANCE_FILTER_P[j].Counter == 0 && QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue < QTOUCHADC_REFERANCE_FILTER_P[j].FilterValue)
     4d4:	81 11       	cpse	r24, r1
     4d6:	2d c0       	rjmp	.+90     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4d8:	87 e2       	ldi	r24, 0x27	; 39
     4da:	8c 9f       	mul	r24, r28
     4dc:	f0 01       	movw	r30, r0
     4de:	8d 9f       	mul	r24, r29
     4e0:	f0 0d       	add	r31, r0
     4e2:	11 24       	eor	r1, r1
     4e4:	e3 5f       	subi	r30, 0xF3	; 243
     4e6:	f1 4c       	sbci	r31, 0xC1	; 193
     4e8:	41 85       	ldd	r20, Z+9	; 0x09
     4ea:	52 85       	ldd	r21, Z+10	; 0x0a
     4ec:	63 85       	ldd	r22, Z+11	; 0x0b
     4ee:	74 85       	ldd	r23, Z+12	; 0x0c
     4f0:	83 89       	ldd	r24, Z+19	; 0x13
     4f2:	94 89       	ldd	r25, Z+20	; 0x14
     4f4:	a5 89       	ldd	r26, Z+21	; 0x15
     4f6:	b6 89       	ldd	r27, Z+22	; 0x16
     4f8:	48 17       	cp	r20, r24
     4fa:	59 07       	cpc	r21, r25
     4fc:	6a 07       	cpc	r22, r26
     4fe:	7b 07       	cpc	r23, r27
     500:	c0 f4       	brcc	.+48     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
				{
					QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue + QTOUCHADC_REFERANCE_FILTER_P[j].FilterValue;
     502:	27 e2       	ldi	r18, 0x27	; 39
     504:	2c 9f       	mul	r18, r28
     506:	f0 01       	movw	r30, r0
     508:	2d 9f       	mul	r18, r29
     50a:	f0 0d       	add	r31, r0
     50c:	11 24       	eor	r1, r1
     50e:	e3 5f       	subi	r30, 0xF3	; 243
     510:	f1 4c       	sbci	r31, 0xC1	; 193
     512:	47 89       	ldd	r20, Z+23	; 0x17
     514:	50 8d       	ldd	r21, Z+24	; 0x18
     516:	61 8d       	ldd	r22, Z+25	; 0x19
     518:	72 8d       	ldd	r23, Z+26	; 0x1a
     51a:	84 0f       	add	r24, r20
     51c:	95 1f       	adc	r25, r21
     51e:	a6 1f       	adc	r26, r22
     520:	b7 1f       	adc	r27, r23
     522:	84 83       	std	Z+4, r24	; 0x04
     524:	95 83       	std	Z+5, r25	; 0x05
     526:	a6 83       	std	Z+6, r26	; 0x06
     528:	b7 83       	std	Z+7, r27	; 0x07
					QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = 0;
     52a:	10 82       	st	Z, r1
     52c:	11 82       	std	Z+1, r1	; 0x01
     52e:	12 82       	std	Z+2, r1	; 0x02
     530:	13 82       	std	Z+3, r1	; 0x03
				}
				QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue = QTOUCHADC_REFERANCE_FILTER_P[j].Counter == 0 ? 0 : QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue;
     532:	87 e2       	ldi	r24, 0x27	; 39
     534:	8c 9f       	mul	r24, r28
     536:	f0 01       	movw	r30, r0
     538:	8d 9f       	mul	r24, r29
     53a:	f0 0d       	add	r31, r0
     53c:	11 24       	eor	r1, r1
     53e:	e3 5f       	subi	r30, 0xF3	; 243
     540:	f1 4c       	sbci	r31, 0xC1	; 193
     542:	85 85       	ldd	r24, Z+13	; 0x0d
     544:	88 23       	and	r24, r24
     546:	69 f0       	breq	.+26     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     548:	87 e2       	ldi	r24, 0x27	; 39
     54a:	8c 9f       	mul	r24, r28
     54c:	f0 01       	movw	r30, r0
     54e:	8d 9f       	mul	r24, r29
     550:	f0 0d       	add	r31, r0
     552:	11 24       	eor	r1, r1
     554:	e3 5f       	subi	r30, 0xF3	; 243
     556:	f1 4c       	sbci	r31, 0xC1	; 193
     558:	41 85       	ldd	r20, Z+9	; 0x09
     55a:	52 85       	ldd	r21, Z+10	; 0x0a
     55c:	63 85       	ldd	r22, Z+11	; 0x0b
     55e:	74 85       	ldd	r23, Z+12	; 0x0c
     560:	03 c0       	rjmp	.+6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	ba 01       	movw	r22, r20
     568:	87 e2       	ldi	r24, 0x27	; 39
     56a:	8c 9f       	mul	r24, r28
     56c:	f0 01       	movw	r30, r0
     56e:	8d 9f       	mul	r24, r29
     570:	f0 0d       	add	r31, r0
     572:	11 24       	eor	r1, r1
     574:	e3 5f       	subi	r30, 0xF3	; 243
     576:	f1 4c       	sbci	r31, 0xC1	; 193
     578:	41 87       	std	Z+9, r20	; 0x09
     57a:	52 87       	std	Z+10, r21	; 0x0a
     57c:	63 87       	std	Z+11, r22	; 0x0b
     57e:	74 87       	std	Z+12, r23	; 0x0c
     580:	81 c0       	rjmp	.+258    	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
			}
			else
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine = QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue >= QTOUCHADC_REFERANCE_FILTER_P[j].NegativeThreshold ? QTOUCHADC_REFERANCE_FILTER_P[j].RawValue : QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine;
     582:	8c 15       	cp	r24, r12
     584:	9d 05       	cpc	r25, r13
     586:	ae 05       	cpc	r26, r14
     588:	bf 05       	cpc	r27, r15
     58a:	6c f0       	brlt	.+26     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     58c:	87 e2       	ldi	r24, 0x27	; 39
     58e:	8c 9f       	mul	r24, r28
     590:	f0 01       	movw	r30, r0
     592:	8d 9f       	mul	r24, r29
     594:	f0 0d       	add	r31, r0
     596:	11 24       	eor	r1, r1
     598:	e3 5f       	subi	r30, 0xF3	; 243
     59a:	f1 4c       	sbci	r31, 0xC1	; 193
     59c:	47 89       	ldd	r20, Z+23	; 0x17
     59e:	50 8d       	ldd	r21, Z+24	; 0x18
     5a0:	61 8d       	ldd	r22, Z+25	; 0x19
     5a2:	72 8d       	ldd	r23, Z+26	; 0x1a
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5a6:	87 e2       	ldi	r24, 0x27	; 39
     5a8:	8c 9f       	mul	r24, r28
     5aa:	f0 01       	movw	r30, r0
     5ac:	8d 9f       	mul	r24, r29
     5ae:	f0 0d       	add	r31, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	e3 5f       	subi	r30, 0xF3	; 243
     5b4:	f1 4c       	sbci	r31, 0xC1	; 193
     5b6:	44 81       	ldd	r20, Z+4	; 0x04
     5b8:	55 81       	ldd	r21, Z+5	; 0x05
     5ba:	66 81       	ldd	r22, Z+6	; 0x06
     5bc:	77 81       	ldd	r23, Z+7	; 0x07
     5be:	87 e2       	ldi	r24, 0x27	; 39
     5c0:	8c 9f       	mul	r24, r28
     5c2:	f0 01       	movw	r30, r0
     5c4:	8d 9f       	mul	r24, r29
     5c6:	f0 0d       	add	r31, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	e3 5f       	subi	r30, 0xF3	; 243
     5cc:	f1 4c       	sbci	r31, 0xC1	; 193
     5ce:	44 83       	std	Z+4, r20	; 0x04
     5d0:	55 83       	std	Z+5, r21	; 0x05
     5d2:	66 83       	std	Z+6, r22	; 0x06
     5d4:	77 83       	std	Z+7, r23	; 0x07
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter += (QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue <= 0 && QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue >= QTOUCHADC_REFERANCE_FILTER_P[j].NegativeThreshold) ? 1 : -QTOUCHADC_REFERANCE_FILTER_P[j].Counter;
     5d6:	85 85       	ldd	r24, Z+13	; 0x0d
     5d8:	40 81       	ld	r20, Z
     5da:	51 81       	ldd	r21, Z+1	; 0x01
     5dc:	62 81       	ldd	r22, Z+2	; 0x02
     5de:	73 81       	ldd	r23, Z+3	; 0x03
     5e0:	14 16       	cp	r1, r20
     5e2:	15 06       	cpc	r1, r21
     5e4:	16 06       	cpc	r1, r22
     5e6:	17 06       	cpc	r1, r23
     5e8:	8c f0       	brlt	.+34     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5ea:	97 e2       	ldi	r25, 0x27	; 39
     5ec:	9c 9f       	mul	r25, r28
     5ee:	f0 01       	movw	r30, r0
     5f0:	9d 9f       	mul	r25, r29
     5f2:	f0 0d       	add	r31, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	e3 5f       	subi	r30, 0xF3	; 243
     5f8:	f1 4c       	sbci	r31, 0xC1	; 193
     5fa:	c7 84       	ldd	r12, Z+15	; 0x0f
     5fc:	d0 88       	ldd	r13, Z+16	; 0x10
     5fe:	e1 88       	ldd	r14, Z+17	; 0x11
     600:	f2 88       	ldd	r15, Z+18	; 0x12
     602:	4c 15       	cp	r20, r12
     604:	5d 05       	cpc	r21, r13
     606:	6e 05       	cpc	r22, r14
     608:	7f 05       	cpc	r23, r15
     60a:	1c f4       	brge	.+6      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
     60c:	98 2f       	mov	r25, r24
     60e:	91 95       	neg	r25
     610:	01 c0       	rjmp	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	89 0f       	add	r24, r25
     616:	97 e2       	ldi	r25, 0x27	; 39
     618:	9c 9f       	mul	r25, r28
     61a:	f0 01       	movw	r30, r0
     61c:	9d 9f       	mul	r25, r29
     61e:	f0 0d       	add	r31, r0
     620:	11 24       	eor	r1, r1
     622:	e3 5f       	subi	r30, 0xF3	; 243
     624:	f1 4c       	sbci	r31, 0xC1	; 193
     626:	85 87       	std	Z+13, r24	; 0x0d
				QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate = QTOUCHADC_REFERANCE_FILTER_P[j].Counter > (QTOUCHADC_REFERANCE_FILTER_P[j].CounterLimit >> 1) ? false : QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate;
     628:	96 85       	ldd	r25, Z+14	; 0x0e
     62a:	96 95       	lsr	r25
     62c:	98 17       	cp	r25, r24
     62e:	50 f0       	brcs	.+20     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     630:	87 e2       	ldi	r24, 0x27	; 39
     632:	8c 9f       	mul	r24, r28
     634:	f0 01       	movw	r30, r0
     636:	8d 9f       	mul	r24, r29
     638:	f0 0d       	add	r31, r0
     63a:	11 24       	eor	r1, r1
     63c:	e3 5f       	subi	r30, 0xF3	; 243
     63e:	f1 4c       	sbci	r31, 0xC1	; 193
     640:	80 85       	ldd	r24, Z+8	; 0x08
     642:	01 c0       	rjmp	.+2      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	97 e2       	ldi	r25, 0x27	; 39
     648:	9c 9f       	mul	r25, r28
     64a:	f0 01       	movw	r30, r0
     64c:	9d 9f       	mul	r25, r29
     64e:	f0 0d       	add	r31, r0
     650:	11 24       	eor	r1, r1
     652:	e3 5f       	subi	r30, 0xF3	; 243
     654:	f1 4c       	sbci	r31, 0xC1	; 193
     656:	80 87       	std	Z+8, r24	; 0x08
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter = QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate == false ? 0 : QTOUCHADC_REFERANCE_FILTER_P[j].Counter;
     658:	88 23       	and	r24, r24
     65a:	51 f0       	breq	.+20     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     65c:	87 e2       	ldi	r24, 0x27	; 39
     65e:	8c 9f       	mul	r24, r28
     660:	f0 01       	movw	r30, r0
     662:	8d 9f       	mul	r24, r29
     664:	f0 0d       	add	r31, r0
     666:	11 24       	eor	r1, r1
     668:	e3 5f       	subi	r30, 0xF3	; 243
     66a:	f1 4c       	sbci	r31, 0xC1	; 193
     66c:	95 85       	ldd	r25, Z+13	; 0x0d
     66e:	01 c0       	rjmp	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	87 e2       	ldi	r24, 0x27	; 39
     674:	8c 9f       	mul	r24, r28
     676:	f0 01       	movw	r30, r0
     678:	8d 9f       	mul	r24, r29
     67a:	f0 0d       	add	r31, r0
     67c:	11 24       	eor	r1, r1
     67e:	e3 5f       	subi	r30, 0xF3	; 243
     680:	f1 4c       	sbci	r31, 0xC1	; 193
     682:	95 87       	std	Z+13, r25	; 0x0d
			}
			QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue < 0 ? 0 : QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue;
     684:	87 e2       	ldi	r24, 0x27	; 39
     686:	8c 9f       	mul	r24, r28
     688:	f0 01       	movw	r30, r0
     68a:	8d 9f       	mul	r24, r29
     68c:	f0 0d       	add	r31, r0
     68e:	11 24       	eor	r1, r1
     690:	e3 5f       	subi	r30, 0xF3	; 243
     692:	f1 4c       	sbci	r31, 0xC1	; 193
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	a2 81       	ldd	r26, Z+2	; 0x02
     69a:	b3 81       	ldd	r27, Z+3	; 0x03
     69c:	bb 23       	and	r27, r27
     69e:	1c f4       	brge	.+6      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	dc 01       	movw	r26, r24
     6a6:	27 e2       	ldi	r18, 0x27	; 39
     6a8:	2c 9f       	mul	r18, r28
     6aa:	f0 01       	movw	r30, r0
     6ac:	2d 9f       	mul	r18, r29
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	e3 5f       	subi	r30, 0xF3	; 243
     6b4:	f1 4c       	sbci	r31, 0xC1	; 193
     6b6:	80 83       	st	Z, r24
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	a2 83       	std	Z+2, r26	; 0x02
     6bc:	b3 83       	std	Z+3, r27	; 0x03
			
			
			isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[j].RawValue > (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue + DATA_CHANGE_CONSTANT) || QTOUCHADC_REFERANCE_FILTER_P[j].RawValue < (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue - DATA_CHANGE_CONSTANT);
     6be:	80 91 7b 3e 	lds	r24, 0x3E7B	; 0x803e7b <isDataChanged>
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	47 89       	ldd	r20, Z+23	; 0x17
     6c6:	50 8d       	ldd	r21, Z+24	; 0x18
     6c8:	61 8d       	ldd	r22, Z+25	; 0x19
     6ca:	72 8d       	ldd	r23, Z+26	; 0x1a
     6cc:	c3 8c       	ldd	r12, Z+27	; 0x1b
     6ce:	d4 8c       	ldd	r13, Z+28	; 0x1c
     6d0:	e5 8c       	ldd	r14, Z+29	; 0x1d
     6d2:	f6 8c       	ldd	r15, Z+30	; 0x1e
     6d4:	26 01       	movw	r4, r12
     6d6:	37 01       	movw	r6, r14
     6d8:	34 e1       	ldi	r19, 0x14	; 20
     6da:	43 0e       	add	r4, r19
     6dc:	51 1c       	adc	r5, r1
     6de:	61 1c       	adc	r6, r1
     6e0:	71 1c       	adc	r7, r1
     6e2:	44 16       	cp	r4, r20
     6e4:	55 06       	cpc	r5, r21
     6e6:	66 06       	cpc	r6, r22
     6e8:	77 06       	cpc	r7, r23
     6ea:	68 f0       	brcs	.+26     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
     6ec:	e4 e1       	ldi	r30, 0x14	; 20
     6ee:	ce 1a       	sub	r12, r30
     6f0:	d1 08       	sbc	r13, r1
     6f2:	e1 08       	sbc	r14, r1
     6f4:	f1 08       	sbc	r15, r1
     6f6:	4c 15       	cp	r20, r12
     6f8:	5d 05       	cpc	r21, r13
     6fa:	6e 05       	cpc	r22, r14
     6fc:	7f 05       	cpc	r23, r15
     6fe:	30 f4       	brcc	.+12     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	05 c0       	rjmp	.+10     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	82 2b       	or	r24, r18
     712:	93 2b       	or	r25, r19
     714:	21 e0       	ldi	r18, 0x01	; 1
     716:	89 2b       	or	r24, r25
     718:	09 f4       	brne	.+2      	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	20 93 7b 3e 	sts	0x3E7B, r18	; 0x803e7b <isDataChanged>
			QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
     720:	87 e2       	ldi	r24, 0x27	; 39
     722:	8c 9f       	mul	r24, r28
     724:	f0 01       	movw	r30, r0
     726:	8d 9f       	mul	r24, r29
     728:	f0 0d       	add	r31, r0
     72a:	11 24       	eor	r1, r1
     72c:	e3 5f       	subi	r30, 0xF3	; 243
     72e:	f1 4c       	sbci	r31, 0xC1	; 193
     730:	43 8f       	std	Z+27, r20	; 0x1b
     732:	54 8f       	std	Z+28, r21	; 0x1c
     734:	65 8f       	std	Z+29, r22	; 0x1d
     736:	76 8f       	std	Z+30, r23	; 0x1e
		PSD2_set_dir(PORT_DIR_OUT);
		
		#if B_STYLE == (0)
		QTOUCH_GetSensorValue(0, true);
		
		for(uint8_t j = 0; j < 2; j++)
     738:	1f 5f       	subi	r17, 0xFF	; 255
     73a:	12 30       	cpi	r17, 0x02	; 2
     73c:	08 f4       	brcc	.+2      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
     73e:	ec cd       	rjmp	.-1064   	; 0x318 <__DATA_REGION_LENGTH__+0x118>
		#endif
		//ATtiny817
		//isDataChanged = true;
		
		#if B_STYLE == (0)
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((In_PSD2       << 1) & 0x02) | ((In_PSD1       << 0) & 0x01)) & 0x0F)));
     740:	50 91 67 3e 	lds	r21, 0x3E67	; 0x803e67 <payloadBuffer+0x8>
     744:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <payloadBufferStartByte+0x7f6ada>
     748:	88 23       	and	r24, r24
     74a:	11 f0       	breq	.+4      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     74c:	40 e8       	ldi	r20, 0x80	; 128
     74e:	01 c0       	rjmp	.+2      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	60 91 7a 3e 	lds	r22, 0x3E7A	; 0x803e7a <__data_end>
     756:	f0 e1       	ldi	r31, 0x10	; 16
     758:	6f 9f       	mul	r22, r31
     75a:	b0 01       	movw	r22, r0
     75c:	11 24       	eor	r1, r1
     75e:	2a 2d       	mov	r18, r10
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	22 0f       	add	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	22 0f       	add	r18, r18
     76c:	33 1f       	adc	r19, r19
     76e:	8b 2d       	mov	r24, r11
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	00 0f       	add	r16, r16
     77e:	11 1f       	adc	r17, r17
     780:	28 70       	andi	r18, 0x08	; 8
     782:	84 70       	andi	r24, 0x04	; 4
     784:	82 2b       	or	r24, r18
     786:	02 70       	andi	r16, 0x02	; 2
     788:	08 2b       	or	r16, r24
     78a:	90 2a       	or	r9, r16
     78c:	06 2f       	mov	r16, r22
     78e:	00 77       	andi	r16, 0x70	; 112
     790:	80 2f       	mov	r24, r16
     792:	84 2b       	or	r24, r20
     794:	09 2d       	mov	r16, r9
     796:	08 2b       	or	r16, r24
     798:	00 93 81 3e 	sts	0x3E81, r16	; 0x803e81 <seatFlagStatus>
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	50 13       	cpse	r21, r16
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	80 91 7b 3e 	lds	r24, 0x3E7B	; 0x803e7b <isDataChanged>
     7a8:	89 2b       	or	r24, r25
		isDataChanged = QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate || QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate ? false : isDataChanged;	
     7aa:	90 91 15 3e 	lds	r25, 0x3E15	; 0x803e15 <QTOUCHADC_REFERANCE_FILTER_P+0x8>
     7ae:	91 11       	cpse	r25, r1
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     7b2:	90 91 3c 3e 	lds	r25, 0x3E3C	; 0x803e3c <QTOUCHADC_REFERANCE_FILTER_P+0x2f>
     7b6:	99 23       	and	r25, r25
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	91 70       	andi	r25, 0x01	; 1
     7c6:	09 f4       	brne	.+2      	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
		#else
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((Const_In_PSD2 << 1) & 0x02) | ((Const_In_PSD1 << 0) & 0x01)) & 0x0F)));
		#endif
			
		repeatDataCounter = (isDataChanged && (repeatDataCounter <= (TRANSMIT_COUNT >> 1))) || (dataRefreshCounter == 0) ? TRANSMIT_COUNT : repeatDataCounter;
     7ca:	88 23       	and	r24, r24
     7cc:	21 f0       	breq	.+8      	; 0x7d6 <__LOCK_REGION_LENGTH__+0x3d6>
     7ce:	80 91 5e 3e 	lds	r24, 0x3E5E	; 0x803e5e <repeatDataCounter>
     7d2:	89 30       	cpi	r24, 0x09	; 9
     7d4:	48 f0       	brcs	.+18     	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
     7d6:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <dataRefreshCounter>
     7da:	90 91 5d 3e 	lds	r25, 0x3E5D	; 0x803e5d <dataRefreshCounter+0x1>
     7de:	89 2b       	or	r24, r25
     7e0:	29 f0       	breq	.+10     	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
     7e2:	20 91 5e 3e 	lds	r18, 0x3E5E	; 0x803e5e <repeatDataCounter>
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
     7e8:	20 e1       	ldi	r18, 0x10	; 16
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
     7ec:	20 e1       	ldi	r18, 0x10	; 16
     7ee:	20 93 5e 3e 	sts	0x3E5E, r18	; 0x803e5e <repeatDataCounter>
		dataRefreshCounter -= (dataRefreshCounter > 0) && (repeatDataCounter == 0) ? 1 : DATA_REFRESH_TIME;
     7f2:	80 91 5c 3e 	lds	r24, 0x3E5C	; 0x803e5c <dataRefreshCounter>
     7f6:	90 91 5d 3e 	lds	r25, 0x3E5D	; 0x803e5d <dataRefreshCounter+0x1>
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	29 f0       	breq	.+10     	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
     7fe:	22 23       	and	r18, r18
     800:	31 f0       	breq	.+12     	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
     802:	4c e2       	ldi	r20, 0x2C	; 44
     804:	51 e0       	ldi	r21, 0x01	; 1
     806:	05 c0       	rjmp	.+10     	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     808:	4c e2       	ldi	r20, 0x2C	; 44
     80a:	51 e0       	ldi	r21, 0x01	; 1
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__LOCK_REGION_LENGTH__+0x412>
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	84 1b       	sub	r24, r20
     814:	95 0b       	sbc	r25, r21
     816:	80 93 5c 3e 	sts	0x3E5C, r24	; 0x803e5c <dataRefreshCounter>
     81a:	90 93 5d 3e 	sts	0x3E5D, r25	; 0x803e5d <dataRefreshCounter+0x1>
		isDataChanged = false;		
     81e:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <isDataChanged>
		
		if(repeatDataCounter && payloadReady == false)
     822:	22 23       	and	r18, r18
     824:	c9 f1       	breq	.+114    	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
     826:	90 91 7e 3e 	lds	r25, 0x3E7E	; 0x803e7e <payloadReady>
     82a:	91 11       	cpse	r25, r1
     82c:	35 c0       	rjmp	.+106    	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
		{
			if (payloadCounterUNCHANGE > 2)
     82e:	80 91 7c 3e 	lds	r24, 0x3E7C	; 0x803e7c <payloadCounterUNCHANGE>
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	40 f1       	brcs	.+80     	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
			{
				payloadBuffer[payloadBufferStartByte +  3 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 8) & 0x00FF);
     836:	20 91 7d 3e 	lds	r18, 0x3E7D	; 0x803e7d <payloadCounter>
     83a:	42 2f       	mov	r20, r18
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	ed e0       	ldi	r30, 0x0D	; 13
     840:	fe e3       	ldi	r31, 0x3E	; 62
     842:	30 81       	ld	r19, Z
     844:	61 81       	ldd	r22, Z+1	; 0x01
     846:	da 01       	movw	r26, r20
     848:	a8 59       	subi	r26, 0x98	; 152
     84a:	b1 4c       	sbci	r27, 0xC1	; 193
     84c:	6c 93       	st	X, r22
				payloadBuffer[payloadBufferStartByte +  4 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 0) & 0x00FF);
     84e:	da 01       	movw	r26, r20
     850:	a7 59       	subi	r26, 0x97	; 151
     852:	b1 4c       	sbci	r27, 0xC1	; 193
     854:	3c 93       	st	X, r19
				payloadBuffer[payloadBufferStartByte + 11 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 8) & 0x00FF);
     856:	37 a1       	ldd	r19, Z+39	; 0x27
     858:	60 a5       	ldd	r22, Z+40	; 0x28
     85a:	fa 01       	movw	r30, r20
     85c:	e0 59       	subi	r30, 0x90	; 144
     85e:	f1 4c       	sbci	r31, 0xC1	; 193
     860:	60 83       	st	Z, r22
				payloadBuffer[payloadBufferStartByte + 12 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 0) & 0x00FF);
     862:	fa 01       	movw	r30, r20
     864:	ef 58       	subi	r30, 0x8F	; 143
     866:	f1 4c       	sbci	r31, 0xC1	; 193
     868:	30 83       	st	Z, r19
				
				payloadCounter += payloadCounter < 6 ? 2 : -payloadCounter;
     86a:	26 30       	cpi	r18, 0x06	; 6
     86c:	18 f0       	brcs	.+6      	; 0x874 <__LOCK_REGION_LENGTH__+0x474>
     86e:	32 2f       	mov	r19, r18
     870:	31 95       	neg	r19
     872:	01 c0       	rjmp	.+2      	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
     874:	32 e0       	ldi	r19, 0x02	; 2
     876:	23 0f       	add	r18, r19
     878:	20 93 7d 3e 	sts	0x3E7D, r18	; 0x803e7d <payloadCounter>
				payloadReady = 	payloadCounter == 0 ? true : payloadReady;
     87c:	21 11       	cpse	r18, r1
     87e:	01 c0       	rjmp	.+2      	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	90 93 7e 3e 	sts	0x3E7E, r25	; 0x803e7e <payloadReady>
			}
			payloadCounterUNCHANGE += payloadCounterUNCHANGE < 6 ? 1 : -payloadCounterUNCHANGE;
     886:	86 30       	cpi	r24, 0x06	; 6
     888:	18 f0       	brcs	.+6      	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     88a:	98 2f       	mov	r25, r24
     88c:	91 95       	neg	r25
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	89 0f       	add	r24, r25
     894:	80 93 7c 3e 	sts	0x3E7C, r24	; 0x803e7c <payloadCounterUNCHANGE>
		}
		
		if(startupDelay == 0 && payloadReady)
     898:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <startupDelay>
     89c:	81 11       	cpse	r24, r1
     89e:	53 c0       	rjmp	.+166    	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     8a0:	80 91 7e 3e 	lds	r24, 0x3E7E	; 0x803e7e <payloadReady>
     8a4:	88 23       	and	r24, r24
     8a6:	09 f4       	brne	.+2      	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     8a8:	4e c0       	rjmp	.+156    	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
		{
			payloadBuffer[payloadBufferStartByte +  2] = seatFlagStatus;
     8aa:	cf e5       	ldi	r28, 0x5F	; 95
     8ac:	de e3       	ldi	r29, 0x3E	; 62
     8ae:	08 87       	std	Y+8, r16	; 0x08
			payloadBuffer[payloadBufferStartByte + 19] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 2]);
     8b0:	87 e6       	ldi	r24, 0x67	; 103
     8b2:	9e e3       	ldi	r25, 0x3E	; 62
     8b4:	f1 d2       	rcall	.+1506   	; 0xe98 <SX1243CRC8>
     8b6:	89 8f       	std	Y+25, r24	; 0x19
			
			bool transmitterStatus = SX1243Process() == SX_OK;
     8b8:	23 d3       	rcall	.+1606   	; 0xf00 <SX1243Process>
			repeatDataCounter -= transmitterStatus ? 1 : -1;
     8ba:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <repeatDataCounter>
     8be:	81 11       	cpse	r24, r1
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
     8c2:	21 e0       	ldi	r18, 0x01	; 1
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	92 1b       	sub	r25, r18
     8ca:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <repeatDataCounter>
			payloadReady = transmitterStatus ? false : payloadReady;
     8ce:	88 23       	and	r24, r24
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <__LOCK_REGION_LENGTH__+0x4d8>
     8d2:	80 91 7e 3e 	lds	r24, 0x3E7E	; 0x803e7e <payloadReady>
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	80 93 7e 3e 	sts	0x3E7E, r24	; 0x803e7e <payloadReady>
			BatteryLevelCounter -= (BAT_TRANSMIT_CONSTANT >> sleepTimeSequence);
     8de:	e0 e1       	ldi	r30, 0x10	; 16
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
     8e8:	f5 95       	asr	r31
     8ea:	e7 95       	ror	r30
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
     8f0:	1f 2f       	mov	r17, r31
     8f2:	11 0f       	add	r17, r17
     8f4:	11 0b       	sbc	r17, r17
     8f6:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     8fa:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     8fe:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     902:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     906:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     90a:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     90e:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     912:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     916:	ae 2e       	mov	r10, r30
     918:	bf 2e       	mov	r11, r31
     91a:	c1 2e       	mov	r12, r17
     91c:	d1 2e       	mov	r13, r17
     91e:	e1 2e       	mov	r14, r17
     920:	f1 2e       	mov	r15, r17
     922:	01 2f       	mov	r16, r17
     924:	09 d6       	rcall	.+3090   	; 0x1538 <__subdi3>
     926:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     92a:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     92e:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     932:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     936:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     93a:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     93e:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     942:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		}
		
		if(startupDelay == 0)
     946:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <startupDelay>
     94a:	81 11       	cpse	r24, r1
     94c:	46 c0       	rjmp	.+140    	; 0x9da <__LOCK_REGION_LENGTH__+0x5da>
		{
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     94e:	c0 e5       	ldi	r28, 0x50	; 80
     950:	d0 e0       	ldi	r29, 0x00	; 0
     952:	88 81       	ld	r24, Y
     954:	89 7f       	andi	r24, 0xF9	; 249
     956:	84 60       	ori	r24, 0x04	; 4
     958:	88 83       	st	Y, r24
			cli();
     95a:	f8 94       	cli
			sleepTimeSequence = repeatDataCounter >= 0 ? T_256 : T_2048;
     95c:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
			ConfigPIT(GET_PERIODIC_TIMER_VALUE(sleepTimeSequence));
     960:	88 e3       	ldi	r24, 0x38	; 56
     962:	a4 db       	rcall	.-2232   	; 0xac <ConfigPIT>
			
			sleep_enable();
     964:	88 81       	ld	r24, Y
     966:	81 60       	ori	r24, 0x01	; 1
     968:	88 83       	st	Y, r24
			sei();
     96a:	78 94       	sei
			sleep_cpu();
     96c:	88 95       	sleep
			sleep_disable();
     96e:	88 81       	ld	r24, Y
     970:	8e 7f       	andi	r24, 0xFE	; 254
     972:	88 83       	st	Y, r24
			cli();
     974:	f8 94       	cli
			BatteryLevelCounter -= (BAT_SLEEP_CONSTANT >> sleepTimeSequence);
     976:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__LOCK_REGION_LENGTH__+0x580>
     97c:	d5 95       	asr	r29
     97e:	c7 95       	ror	r28
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <__LOCK_REGION_LENGTH__+0x57c>
     984:	1d 2f       	mov	r17, r29
     986:	11 0f       	add	r17, r17
     988:	11 0b       	sbc	r17, r17
     98a:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     98e:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     992:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     996:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     99a:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     99e:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     9a2:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     9a6:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     9aa:	ac 2e       	mov	r10, r28
     9ac:	bd 2e       	mov	r11, r29
     9ae:	c1 2e       	mov	r12, r17
     9b0:	d1 2e       	mov	r13, r17
     9b2:	e1 2e       	mov	r14, r17
     9b4:	f1 2e       	mov	r15, r17
     9b6:	01 2f       	mov	r16, r17
     9b8:	bf d5       	rcall	.+2942   	; 0x1538 <__subdi3>
     9ba:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     9be:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     9c2:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     9c6:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     9ca:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     9ce:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     9d2:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     9d6:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     9da:	80 b1       	in	r24, 0x00	; 0
     9dc:	87 7f       	andi	r24, 0xF7	; 247
     9de:	80 b9       	out	0x00, r24	; 0
		}
		
		CBT_set_dir(PORT_DIR_IN);
		if(CBT_get_level() == false)
     9e0:	13 9b       	sbis	0x02, 3	; 2
     9e2:	0b c0       	rjmp	.+22     	; 0x9fa <__LOCK_REGION_LENGTH__+0x5fa>
     9e4:	24 c0       	rjmp	.+72     	; 0xa2e <__LOCK_REGION_LENGTH__+0x62e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e6:	e3 e2       	ldi	r30, 0x23	; 35
     9e8:	f4 ef       	ldi	r31, 0xF4	; 244
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <__LOCK_REGION_LENGTH__+0x5ea>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__LOCK_REGION_LENGTH__+0x5f0>
     9f0:	00 00       	nop
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
     9f2:	8a b1       	in	r24, 0x0a	; 10
     9f4:	80 61       	ori	r24, 0x10	; 16
     9f6:	8a b9       	out	0x0a, r24	; 10
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__LOCK_REGION_LENGTH__+0x5fc>
     9fa:	94 e6       	ldi	r25, 0x64	; 100
		{
			uint8_t timeOut = 100;
			while(CBT_get_level() == false && --timeOut)
     9fc:	13 99       	sbic	0x02, 3	; 2
     9fe:	02 c0       	rjmp	.+4      	; 0xa04 <__LOCK_REGION_LENGTH__+0x604>
     a00:	91 50       	subi	r25, 0x01	; 1
     a02:	89 f7       	brne	.-30     	; 0x9e6 <__LOCK_REGION_LENGTH__+0x5e6>
			{
				_delay_ms(50);
				DATA_toggle_level();
			}
			if(timeOut < 1)
     a04:	91 11       	cpse	r25, r1
     a06:	0e c0       	rjmp	.+28     	; 0xa24 <__LOCK_REGION_LENGTH__+0x624>
			{
				FLASH_0_write_eeprom_byte(0, 100);
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	ee d0       	rcall	.+476    	; 0xbec <FLASH_0_write_eeprom_byte>
				while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     a10:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7a9c>
     a14:	81 fd       	sbrc	r24, 1
     a16:	fc cf       	rjmp	.-8      	; 0xa10 <__LOCK_REGION_LENGTH__+0x610>
     a18:	89 e6       	ldi	r24, 0x69	; 105
     a1a:	98 e1       	ldi	r25, 0x18	; 24
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <__LOCK_REGION_LENGTH__+0x61c>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <__LOCK_REGION_LENGTH__+0x622>
     a22:	00 00       	nop
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	68 ed       	ldi	r22, 0xD8	; 216
     a28:	81 e4       	ldi	r24, 0x41	; 65
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	f9 d0       	rcall	.+498    	; 0xc20 <protected_write_io>
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     a2e:	e3 e1       	ldi	r30, 0x13	; 19
     a30:	f4 e0       	ldi	r31, 0x04	; 4
     a32:	80 81       	ld	r24, Z
     a34:	88 60       	ori	r24, 0x08	; 8
     a36:	80 83       	st	Z, r24
			}
			RSTCTRL_reset();
		}
		CBT_set_dir(PORT_DIR_OFF);
		
		startupDelay -= startupDelay > 0 ? 1 : 0;
     a38:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <startupDelay>
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	81 11       	cpse	r24, r1
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <__LOCK_REGION_LENGTH__+0x644>
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	89 1b       	sub	r24, r25
     a46:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <startupDelay>
	}
     a4a:	80 cb       	rjmp	.-2304   	; 0x14c <main+0x92>

00000a4c <ADC_0_init>:
     a4c:	e0 e0       	ldi	r30, 0x00	; 0
     a4e:	f6 e0       	ldi	r31, 0x06	; 6
     a50:	82 e5       	ldi	r24, 0x52	; 82
     a52:	82 83       	std	Z+2, r24	; 0x02
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 83       	st	Z, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	08 95       	ret

00000a5c <ADC_0_start_conversion>:
     a5c:	e0 e0       	ldi	r30, 0x00	; 0
     a5e:	f6 e0       	ldi	r31, 0x06	; 6
     a60:	86 83       	std	Z+6, r24	; 0x06
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 87       	std	Z+8, r24	; 0x08
     a66:	08 95       	ret

00000a68 <ADC_0_is_conversion_done>:
     a68:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f70a5>
     a6c:	81 70       	andi	r24, 0x01	; 1
     a6e:	08 95       	ret

00000a70 <ADC_0_get_conversion_result>:
     a70:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f70aa>
     a74:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f70ab>
     a78:	08 95       	ret

00000a7a <ADC_0_get_conversion>:
     a7a:	f0 df       	rcall	.-32     	; 0xa5c <ADC_0_start_conversion>
     a7c:	f5 df       	rcall	.-22     	; 0xa68 <ADC_0_is_conversion_done>
     a7e:	88 23       	and	r24, r24
     a80:	e9 f3       	breq	.-6      	; 0xa7c <ADC_0_get_conversion+0x2>
     a82:	f6 df       	rcall	.-20     	; 0xa70 <ADC_0_get_conversion_result>
     a84:	e0 e0       	ldi	r30, 0x00	; 0
     a86:	f6 e0       	ldi	r31, 0x06	; 6
     a88:	23 85       	ldd	r18, Z+11	; 0x0b
     a8a:	21 60       	ori	r18, 0x01	; 1
     a8c:	23 87       	std	Z+11, r18	; 0x0b
     a8e:	08 95       	ret

00000a90 <BOD_init>:
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	08 95       	ret

00000a94 <CLKCTRL_init>:
     a94:	43 e0       	ldi	r20, 0x03	; 3
     a96:	68 ed       	ldi	r22, 0xD8	; 216
     a98:	81 e6       	ldi	r24, 0x61	; 97
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	c1 d0       	rcall	.+386    	; 0xc20 <protected_write_io>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	08 95       	ret

00000aa2 <CPUINT_init>:
     aa2:	78 94       	sei
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	08 95       	ret

00000aa8 <mcu_init>:
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <mcu_init+0x14>
     aac:	e8 2f       	mov	r30, r24
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	e0 5f       	subi	r30, 0xF0	; 240
     ab2:	fb 4f       	sbci	r31, 0xFB	; 251
     ab4:	90 81       	ld	r25, Z
     ab6:	98 60       	ori	r25, 0x08	; 8
     ab8:	90 83       	st	Z, r25
     aba:	8f 5f       	subi	r24, 0xFF	; 255
     abc:	88 30       	cpi	r24, 0x08	; 8
     abe:	b0 f3       	brcs	.-20     	; 0xaac <mcu_init+0x4>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 c0       	rjmp	.+16     	; 0xad4 <mcu_init+0x2c>
     ac4:	e8 2f       	mov	r30, r24
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	e0 5d       	subi	r30, 0xD0	; 208
     aca:	fb 4f       	sbci	r31, 0xFB	; 251
     acc:	90 81       	ld	r25, Z
     ace:	98 60       	ori	r25, 0x08	; 8
     ad0:	90 83       	st	Z, r25
     ad2:	8f 5f       	subi	r24, 0xFF	; 255
     ad4:	88 30       	cpi	r24, 0x08	; 8
     ad6:	b0 f3       	brcs	.-20     	; 0xac4 <mcu_init+0x1c>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 c0       	rjmp	.+16     	; 0xaec <mcu_init+0x44>
     adc:	e8 2f       	mov	r30, r24
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	e0 5b       	subi	r30, 0xB0	; 176
     ae2:	fb 4f       	sbci	r31, 0xFB	; 251
     ae4:	90 81       	ld	r25, Z
     ae6:	98 60       	ori	r25, 0x08	; 8
     ae8:	90 83       	st	Z, r25
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	88 30       	cpi	r24, 0x08	; 8
     aee:	b0 f3       	brcs	.-20     	; 0xadc <mcu_init+0x34>
     af0:	08 95       	ret

00000af2 <ADC_0_initialization>:
     af2:	e6 e1       	ldi	r30, 0x16	; 22
     af4:	f4 e0       	ldi	r31, 0x04	; 4
     af6:	80 81       	ld	r24, Z
     af8:	88 7f       	andi	r24, 0xF8	; 248
     afa:	84 60       	ori	r24, 0x04	; 4
     afc:	80 83       	st	Z, r24
     afe:	80 81       	ld	r24, Z
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	80 83       	st	Z, r24
     b04:	e0 e3       	ldi	r30, 0x30	; 48
     b06:	f4 e0       	ldi	r31, 0x04	; 4
     b08:	80 81       	ld	r24, Z
     b0a:	88 7f       	andi	r24, 0xF8	; 248
     b0c:	84 60       	ori	r24, 0x04	; 4
     b0e:	80 83       	st	Z, r24
     b10:	80 81       	ld	r24, Z
     b12:	87 7f       	andi	r24, 0xF7	; 247
     b14:	80 83       	st	Z, r24
     b16:	9a df       	rcall	.-204    	; 0xa4c <ADC_0_init>
     b18:	08 95       	ret

00000b1a <FLASH_0_initialization>:
     b1a:	62 d0       	rcall	.+196    	; 0xbe0 <FLASH_0_init>
     b1c:	08 95       	ret

00000b1e <system_init>:
     b1e:	c4 df       	rcall	.-120    	; 0xaa8 <mcu_init>
     b20:	80 b1       	in	r24, 0x00	; 0
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	80 b9       	out	0x00, r24	; 0
     b26:	e3 e1       	ldi	r30, 0x13	; 19
     b28:	f4 e0       	ldi	r31, 0x04	; 4
     b2a:	80 81       	ld	r24, Z
     b2c:	88 60       	ori	r24, 0x08	; 8
     b2e:	80 83       	st	Z, r24
     b30:	80 b1       	in	r24, 0x00	; 0
     b32:	8f 7e       	andi	r24, 0xEF	; 239
     b34:	80 b9       	out	0x00, r24	; 0
     b36:	e4 e1       	ldi	r30, 0x14	; 20
     b38:	f4 e0       	ldi	r31, 0x04	; 4
     b3a:	80 81       	ld	r24, Z
     b3c:	88 60       	ori	r24, 0x08	; 8
     b3e:	80 83       	st	Z, r24
     b40:	80 b1       	in	r24, 0x00	; 0
     b42:	8f 7d       	andi	r24, 0xDF	; 223
     b44:	80 b9       	out	0x00, r24	; 0
     b46:	e5 e1       	ldi	r30, 0x15	; 21
     b48:	f4 e0       	ldi	r31, 0x04	; 4
     b4a:	80 81       	ld	r24, Z
     b4c:	88 60       	ori	r24, 0x08	; 8
     b4e:	80 83       	st	Z, r24
     b50:	81 b1       	in	r24, 0x01	; 1
     b52:	8f 77       	andi	r24, 0x7F	; 127
     b54:	81 b9       	out	0x01, r24	; 1
     b56:	80 b1       	in	r24, 0x00	; 0
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	80 b9       	out	0x00, r24	; 0
     b5c:	84 b1       	in	r24, 0x04	; 4
     b5e:	8d 7f       	andi	r24, 0xFD	; 253
     b60:	84 b9       	out	0x04, r24	; 4
     b62:	e1 e3       	ldi	r30, 0x31	; 49
     b64:	f4 e0       	ldi	r31, 0x04	; 4
     b66:	80 81       	ld	r24, Z
     b68:	87 7f       	andi	r24, 0xF7	; 247
     b6a:	80 83       	st	Z, r24
     b6c:	84 b1       	in	r24, 0x04	; 4
     b6e:	8f 7e       	andi	r24, 0xEF	; 239
     b70:	84 b9       	out	0x04, r24	; 4
     b72:	e4 e3       	ldi	r30, 0x34	; 52
     b74:	f4 e0       	ldi	r31, 0x04	; 4
     b76:	80 81       	ld	r24, Z
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	80 83       	st	Z, r24
     b7c:	84 b1       	in	r24, 0x04	; 4
     b7e:	8f 7d       	andi	r24, 0xDF	; 223
     b80:	84 b9       	out	0x04, r24	; 4
     b82:	e5 e3       	ldi	r30, 0x35	; 53
     b84:	f4 e0       	ldi	r31, 0x04	; 4
     b86:	80 81       	ld	r24, Z
     b88:	88 60       	ori	r24, 0x08	; 8
     b8a:	80 83       	st	Z, r24
     b8c:	88 b1       	in	r24, 0x08	; 8
     b8e:	8d 7f       	andi	r24, 0xFD	; 253
     b90:	88 b9       	out	0x08, r24	; 8
     b92:	e1 e5       	ldi	r30, 0x51	; 81
     b94:	f4 e0       	ldi	r31, 0x04	; 4
     b96:	80 81       	ld	r24, Z
     b98:	88 60       	ori	r24, 0x08	; 8
     b9a:	80 83       	st	Z, r24
     b9c:	88 b1       	in	r24, 0x08	; 8
     b9e:	8b 7f       	andi	r24, 0xFB	; 251
     ba0:	88 b9       	out	0x08, r24	; 8
     ba2:	e2 e5       	ldi	r30, 0x52	; 82
     ba4:	f4 e0       	ldi	r31, 0x04	; 4
     ba6:	80 81       	ld	r24, Z
     ba8:	88 60       	ori	r24, 0x08	; 8
     baa:	80 83       	st	Z, r24
     bac:	89 b1       	in	r24, 0x09	; 9
     bae:	87 7f       	andi	r24, 0xF7	; 247
     bb0:	89 b9       	out	0x09, r24	; 9
     bb2:	88 b1       	in	r24, 0x08	; 8
     bb4:	88 60       	ori	r24, 0x08	; 8
     bb6:	88 b9       	out	0x08, r24	; 8
     bb8:	89 b1       	in	r24, 0x09	; 9
     bba:	8f 7e       	andi	r24, 0xEF	; 239
     bbc:	89 b9       	out	0x09, r24	; 9
     bbe:	88 b1       	in	r24, 0x08	; 8
     bc0:	80 61       	ori	r24, 0x10	; 16
     bc2:	88 b9       	out	0x08, r24	; 8
     bc4:	89 b1       	in	r24, 0x09	; 9
     bc6:	8f 7d       	andi	r24, 0xDF	; 223
     bc8:	89 b9       	out	0x09, r24	; 9
     bca:	88 b1       	in	r24, 0x08	; 8
     bcc:	80 62       	ori	r24, 0x20	; 32
     bce:	88 b9       	out	0x08, r24	; 8
     bd0:	61 df       	rcall	.-318    	; 0xa94 <CLKCTRL_init>
     bd2:	2a d0       	rcall	.+84     	; 0xc28 <RTC_0_init>
     bd4:	8e df       	rcall	.-228    	; 0xaf2 <ADC_0_initialization>
     bd6:	a1 df       	rcall	.-190    	; 0xb1a <FLASH_0_initialization>
     bd8:	64 df       	rcall	.-312    	; 0xaa2 <CPUINT_init>
     bda:	3c d0       	rcall	.+120    	; 0xc54 <SLPCTRL_init>
     bdc:	59 df       	rcall	.-334    	; 0xa90 <BOD_init>
     bde:	08 95       	ret

00000be0 <FLASH_0_init>:
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	08 95       	ret

00000be4 <FLASH_0_read_eeprom_byte>:
     be4:	9c 5e       	subi	r25, 0xEC	; 236
     be6:	fc 01       	movw	r30, r24
     be8:	80 81       	ld	r24, Z
     bea:	08 95       	ret

00000bec <FLASH_0_write_eeprom_byte>:
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
     bf4:	16 2f       	mov	r17, r22
     bf6:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7a9c>
     bfa:	81 fd       	sbrc	r24, 1
     bfc:	fc cf       	rjmp	.-8      	; 0xbf6 <FLASH_0_write_eeprom_byte+0xa>
     bfe:	44 e0       	ldi	r20, 0x04	; 4
     c00:	6d e9       	ldi	r22, 0x9D	; 157
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	90 e1       	ldi	r25, 0x10	; 16
     c06:	0c d0       	rcall	.+24     	; 0xc20 <protected_write_io>
     c08:	dc 5e       	subi	r29, 0xEC	; 236
     c0a:	18 83       	st	Y, r17
     c0c:	43 e0       	ldi	r20, 0x03	; 3
     c0e:	6d e9       	ldi	r22, 0x9D	; 157
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e1       	ldi	r25, 0x10	; 16
     c14:	05 d0       	rcall	.+10     	; 0xc20 <protected_write_io>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	08 95       	ret

00000c20 <protected_write_io>:
     c20:	fc 01       	movw	r30, r24
     c22:	64 bf       	out	0x34, r22	; 52
     c24:	40 83       	st	Z, r20
     c26:	08 95       	ret

00000c28 <RTC_0_init>:
     c28:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6bdb>
     c2c:	81 11       	cpse	r24, r1
     c2e:	fc cf       	rjmp	.-8      	; 0xc28 <RTC_0_init>
     c30:	e0 e4       	ldi	r30, 0x40	; 64
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	88 e7       	ldi	r24, 0x78	; 120
     c36:	80 83       	st	Z, r24
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	87 83       	std	Z+7, r24	; 0x07
     c3c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6beb>
     c40:	81 11       	cpse	r24, r1
     c42:	fc cf       	rjmp	.-8      	; 0xc3c <RTC_0_init+0x14>
     c44:	e0 e4       	ldi	r30, 0x40	; 64
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	89 e4       	ldi	r24, 0x49	; 73
     c4a:	80 8b       	std	Z+16, r24	; 0x10
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	82 8b       	std	Z+18, r24	; 0x12
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	08 95       	ret

00000c54 <SLPCTRL_init>:
     c54:	85 e0       	ldi	r24, 0x05	; 5
     c56:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6aea>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret

00000c5e <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     c5e:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     c60:	11 c0       	rjmp	.+34     	; 0xc84 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c62:	29 b1       	in	r18, 0x09	; 9
     c64:	27 7f       	andi	r18, 0xF7	; 247
     c66:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     c68:	29 2f       	mov	r18, r25
     c6a:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     c6c:	21 f0       	breq	.+8      	; 0xc76 <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     c6e:	29 b1       	in	r18, 0x09	; 9
     c70:	20 61       	ori	r18, 0x10	; 16
     c72:	29 b9       	out	0x09, r18	; 9
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c76:	29 b1       	in	r18, 0x09	; 9
     c78:	2f 7e       	andi	r18, 0xEF	; 239
     c7a:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     c7c:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     c7e:	29 b1       	in	r18, 0x09	; 9
     c80:	28 60       	ori	r18, 0x08	; 8
     c82:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     c84:	91 11       	cpse	r25, r1
     c86:	ed cf       	rjmp	.-38     	; 0xc62 <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c88:	89 b1       	in	r24, 0x09	; 9
     c8a:	87 7f       	andi	r24, 0xF7	; 247
     c8c:	89 b9       	out	0x09, r24	; 9
     c8e:	08 95       	ret

00000c90 <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	6a 01       	movw	r12, r20
     c9a:	7b 01       	movw	r14, r22
	switch(instruction)
     c9c:	88 23       	and	r24, r24
     c9e:	19 f0       	breq	.+6      	; 0xca6 <SX1243Write+0x16>
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	21 f0       	breq	.+8      	; 0xcac <SX1243Write+0x1c>
     ca4:	16 c0       	rjmp	.+44     	; 0xcd2 <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	da df       	rcall	.-76     	; 0xc5e <SpiOut>
		break;
     caa:	0a c0       	rjmp	.+20     	; 0xcc0 <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     cac:	db 01       	movw	r26, r22
     cae:	ca 01       	movw	r24, r20
     cb0:	88 27       	eor	r24, r24
     cb2:	99 27       	eor	r25, r25
     cb4:	a7 70       	andi	r26, 0x07	; 7
     cb6:	bb 27       	eor	r27, r27
     cb8:	bc 01       	movw	r22, r24
     cba:	cd 01       	movw	r24, r26
     cbc:	88 61       	ori	r24, 0x18	; 24
     cbe:	cf df       	rcall	.-98     	; 0xc5e <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     cc0:	8d 2d       	mov	r24, r13
     cc2:	cd df       	rcall	.-102    	; 0xc5e <SpiOut>
	SpiOut(data & 0xFF);
     cc4:	8c 2d       	mov	r24, r12
     cc6:	cb df       	rcall	.-106    	; 0xc5e <SpiOut>
     cc8:	89 b1       	in	r24, 0x09	; 9
     cca:	8f 7e       	andi	r24, 0xEF	; 239
     ccc:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	08 95       	ret

00000cde <SX1243Reset>:
     cde:	89 b1       	in	r24, 0x09	; 9
     ce0:	8f 7d       	andi	r24, 0xDF	; 223
     ce2:	89 b9       	out	0x09, r24	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ce4:	86 ea       	ldi	r24, 0xA6	; 166
     ce6:	8a 95       	dec	r24
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <SX1243Reset+0x8>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <SX1243Reset+0xe>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     cec:	89 b1       	in	r24, 0x09	; 9
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	89 b9       	out	0x09, r24	; 9
     cf2:	08 95       	ret

00000cf4 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	76 c0       	rjmp	.+236    	; 0xde4 <Sx1243ConvertBuffer+0xf0>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     cf8:	9c 01       	movw	r18, r24
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	22 0f       	add	r18, r18
     d00:	33 1f       	adc	r19, r19
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	e0 91 65 3f 	lds	r30, 0x3F65	; 0x803f65 <TxParam+0x13>
     d0a:	f0 91 66 3f 	lds	r31, 0x3F66	; 0x803f66 <TxParam+0x14>
     d0e:	e8 0f       	add	r30, r24
     d10:	f9 1f       	adc	r31, r25
     d12:	40 81       	ld	r20, Z
     d14:	44 23       	and	r20, r20
     d16:	1c f4       	brge	.+6      	; 0xd1e <Sx1243ConvertBuffer+0x2a>
     d18:	49 b1       	in	r20, 0x09	; 9
     d1a:	40 61       	ori	r20, 0x10	; 16
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <Sx1243ConvertBuffer+0x2e>
     d1e:	49 b1       	in	r20, 0x09	; 9
     d20:	4f 7e       	andi	r20, 0xEF	; 239
     d22:	d9 01       	movw	r26, r18
     d24:	ae 57       	subi	r26, 0x7E	; 126
     d26:	b1 4c       	sbci	r27, 0xC1	; 193
     d28:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     d2a:	d9 01       	movw	r26, r18
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	40 81       	ld	r20, Z
     d30:	46 ff       	sbrs	r20, 6
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <Sx1243ConvertBuffer+0x46>
     d34:	49 b1       	in	r20, 0x09	; 9
     d36:	40 61       	ori	r20, 0x10	; 16
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <Sx1243ConvertBuffer+0x4a>
     d3a:	49 b1       	in	r20, 0x09	; 9
     d3c:	4f 7e       	andi	r20, 0xEF	; 239
     d3e:	ae 57       	subi	r26, 0x7E	; 126
     d40:	b1 4c       	sbci	r27, 0xC1	; 193
     d42:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     d44:	d9 01       	movw	r26, r18
     d46:	12 96       	adiw	r26, 0x02	; 2
     d48:	40 81       	ld	r20, Z
     d4a:	45 ff       	sbrs	r20, 5
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <Sx1243ConvertBuffer+0x60>
     d4e:	49 b1       	in	r20, 0x09	; 9
     d50:	40 61       	ori	r20, 0x10	; 16
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <Sx1243ConvertBuffer+0x64>
     d54:	49 b1       	in	r20, 0x09	; 9
     d56:	4f 7e       	andi	r20, 0xEF	; 239
     d58:	ae 57       	subi	r26, 0x7E	; 126
     d5a:	b1 4c       	sbci	r27, 0xC1	; 193
     d5c:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     d5e:	d9 01       	movw	r26, r18
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	40 81       	ld	r20, Z
     d64:	44 ff       	sbrs	r20, 4
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <Sx1243ConvertBuffer+0x7a>
     d68:	49 b1       	in	r20, 0x09	; 9
     d6a:	40 61       	ori	r20, 0x10	; 16
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <Sx1243ConvertBuffer+0x7e>
     d6e:	49 b1       	in	r20, 0x09	; 9
     d70:	4f 7e       	andi	r20, 0xEF	; 239
     d72:	ae 57       	subi	r26, 0x7E	; 126
     d74:	b1 4c       	sbci	r27, 0xC1	; 193
     d76:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     d78:	d9 01       	movw	r26, r18
     d7a:	14 96       	adiw	r26, 0x04	; 4
     d7c:	40 81       	ld	r20, Z
     d7e:	43 ff       	sbrs	r20, 3
     d80:	03 c0       	rjmp	.+6      	; 0xd88 <Sx1243ConvertBuffer+0x94>
     d82:	49 b1       	in	r20, 0x09	; 9
     d84:	40 61       	ori	r20, 0x10	; 16
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <Sx1243ConvertBuffer+0x98>
     d88:	49 b1       	in	r20, 0x09	; 9
     d8a:	4f 7e       	andi	r20, 0xEF	; 239
     d8c:	ae 57       	subi	r26, 0x7E	; 126
     d8e:	b1 4c       	sbci	r27, 0xC1	; 193
     d90:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     d92:	d9 01       	movw	r26, r18
     d94:	15 96       	adiw	r26, 0x05	; 5
     d96:	40 81       	ld	r20, Z
     d98:	42 ff       	sbrs	r20, 2
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <Sx1243ConvertBuffer+0xae>
     d9c:	49 b1       	in	r20, 0x09	; 9
     d9e:	40 61       	ori	r20, 0x10	; 16
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <Sx1243ConvertBuffer+0xb2>
     da2:	49 b1       	in	r20, 0x09	; 9
     da4:	4f 7e       	andi	r20, 0xEF	; 239
     da6:	ae 57       	subi	r26, 0x7E	; 126
     da8:	b1 4c       	sbci	r27, 0xC1	; 193
     daa:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     dac:	d9 01       	movw	r26, r18
     dae:	16 96       	adiw	r26, 0x06	; 6
     db0:	40 81       	ld	r20, Z
     db2:	41 ff       	sbrs	r20, 1
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <Sx1243ConvertBuffer+0xc8>
     db6:	49 b1       	in	r20, 0x09	; 9
     db8:	40 61       	ori	r20, 0x10	; 16
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <Sx1243ConvertBuffer+0xcc>
     dbc:	49 b1       	in	r20, 0x09	; 9
     dbe:	4f 7e       	andi	r20, 0xEF	; 239
     dc0:	ae 57       	subi	r26, 0x7E	; 126
     dc2:	b1 4c       	sbci	r27, 0xC1	; 193
     dc4:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     dc6:	29 5f       	subi	r18, 0xF9	; 249
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	40 81       	ld	r20, Z
     dcc:	40 ff       	sbrs	r20, 0
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <Sx1243ConvertBuffer+0xe2>
     dd0:	49 b1       	in	r20, 0x09	; 9
     dd2:	40 61       	ori	r20, 0x10	; 16
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <Sx1243ConvertBuffer+0xe6>
     dd6:	49 b1       	in	r20, 0x09	; 9
     dd8:	4f 7e       	andi	r20, 0xEF	; 239
     dda:	f9 01       	movw	r30, r18
     ddc:	ee 57       	subi	r30, 0x7E	; 126
     dde:	f1 4c       	sbci	r31, 0xC1	; 193
     de0:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	20 91 64 3f 	lds	r18, 0x3F64	; 0x803f64 <TxParam+0x12>
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	82 17       	cp	r24, r18
     dec:	93 07       	cpc	r25, r19
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <Sx1243ConvertBuffer+0xfe>
     df0:	83 cf       	rjmp	.-250    	; 0xcf8 <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}
     df2:	08 95       	ret

00000df4 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
     df4:	e2 e5       	ldi	r30, 0x52	; 82
     df6:	ff e3       	ldi	r31, 0x3F	; 63
     df8:	83 8b       	std	Z+19, r24	; 0x13
     dfa:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
     dfc:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
     dfe:	80 ed       	ldi	r24, 0xD0	; 208
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	80 93 7f 3e 	sts	0x3E7F, r24	; 0x803e7f <fastBufSize>
     e06:	90 93 80 3e 	sts	0x3E80, r25	; 0x803e80 <fastBufSize+0x1>
	Sx1243ConvertBuffer(0);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	73 df       	rcall	.-282    	; 0xcf4 <Sx1243ConvertBuffer>
	return SX_OK;
}
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	08 95       	ret

00000e12 <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	8c 01       	movw	r16, r24
     e1c:	d6 2f       	mov	r29, r22
     e1e:	c4 2f       	mov	r28, r20
	SX1243Reset();
     e20:	5e df       	rcall	.-324    	; 0xcde <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
     e22:	e2 e5       	ldi	r30, 0x52	; 82
     e24:	ff e3       	ldi	r31, 0x3F	; 63
     e26:	10 8a       	std	Z+16, r1	; 0x10
     e28:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
     e2a:	16 86       	std	Z+14, r1	; 0x0e
     e2c:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e2       	ldi	r25, 0x20	; 32
     e32:	84 87       	std	Z+12, r24	; 0x0c
     e34:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	98 e0       	ldi	r25, 0x08	; 8
     e3a:	82 87       	std	Z+10, r24	; 0x0a
     e3c:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
     e3e:	10 86       	std	Z+8, r1	; 0x08
     e40:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
     e42:	16 82       	std	Z+6, r1	; 0x06
     e44:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	84 83       	std	Z+4, r24	; 0x04
     e4c:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
     e4e:	87 e2       	ldi	r24, 0x27	; 39
     e50:	96 e6       	ldi	r25, 0x66	; 102
     e52:	a4 e0       	ldi	r26, 0x04	; 4
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	80 83       	st	Z, r24
     e58:	91 83       	std	Z+1, r25	; 0x01
     e5a:	a2 83       	std	Z+2, r26	; 0x02
     e5c:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	98 e2       	ldi	r25, 0x28	; 40
     e62:	85 8b       	std	Z+21, r24	; 0x15
     e64:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
     e66:	4c 2f       	mov	r20, r28
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	d8 01       	movw	r26, r16
     e6c:	a4 0f       	add	r26, r20
     e6e:	b5 1f       	adc	r27, r21
     e70:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1];
     e72:	4f 5f       	subi	r20, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	d8 01       	movw	r26, r16
     e78:	a4 0f       	add	r26, r20
     e7a:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
     e7c:	8c 91       	ld	r24, X
     e7e:	89 27       	eor	r24, r25
     e80:	9b ed       	ldi	r25, 0xDB	; 219
     e82:	89 27       	eor	r24, r25
     e84:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
     e86:	6d 2f       	mov	r22, r29
     e88:	c8 01       	movw	r24, r16
     e8a:	b4 df       	rcall	.-152    	; 0xdf4 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^
     ea8:	d0 90 69 3f 	lds	r13, 0x3F69	; 0x803f69 <TxParam+0x17>
					buffer[ 0]		  ^
     eac:	80 81       	ld	r24, Z
					buffer[ 1]		  ^
     eae:	e1 80       	ldd	r14, Z+1	; 0x01
					buffer[ 2]		  ^
     eb0:	f2 80       	ldd	r15, Z+2	; 0x02
					buffer[ 3]		  ^
     eb2:	03 81       	ldd	r16, Z+3	; 0x03
					buffer[ 4]		  ^
     eb4:	14 81       	ldd	r17, Z+4	; 0x04
					buffer[ 5]		  ^
     eb6:	d5 81       	ldd	r29, Z+5	; 0x05
					buffer[ 6]		  ^
     eb8:	c6 81       	ldd	r28, Z+6	; 0x06
					buffer[ 7]		  ^
     eba:	b7 81       	ldd	r27, Z+7	; 0x07
					buffer[ 8]		  ^
     ebc:	a0 85       	ldd	r26, Z+8	; 0x08
					buffer[ 9]		  ^
     ebe:	71 85       	ldd	r23, Z+9	; 0x09
					buffer[10]		  ^
     ec0:	62 85       	ldd	r22, Z+10	; 0x0a
					buffer[11]		  ^
     ec2:	53 85       	ldd	r21, Z+11	; 0x0b
					buffer[12]		  ^
     ec4:	44 85       	ldd	r20, Z+12	; 0x0c
					buffer[13]		  ^
     ec6:	35 85       	ldd	r19, Z+13	; 0x0d
					buffer[14]		  ^
     ec8:	26 85       	ldd	r18, Z+14	; 0x0e
					buffer[15]		  ^
     eca:	97 85       	ldd	r25, Z+15	; 0x0f
					buffer[16]);
     ecc:	e0 89       	ldd	r30, Z+16	; 0x10
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^
     ece:	8d 25       	eor	r24, r13
     ed0:	8e 25       	eor	r24, r14
     ed2:	8f 25       	eor	r24, r15
     ed4:	80 27       	eor	r24, r16
     ed6:	81 27       	eor	r24, r17
     ed8:	8d 27       	eor	r24, r29
     eda:	8c 27       	eor	r24, r28
     edc:	8b 27       	eor	r24, r27
     ede:	8a 27       	eor	r24, r26
     ee0:	87 27       	eor	r24, r23
     ee2:	86 27       	eor	r24, r22
     ee4:	85 27       	eor	r24, r21
     ee6:	84 27       	eor	r24, r20
     ee8:	83 27       	eor	r24, r19
     eea:	82 27       	eor	r24, r18
     eec:	89 27       	eor	r24, r25
					buffer[12]		  ^
					buffer[13]		  ^
					buffer[14]		  ^
					buffer[15]		  ^
					buffer[16]);
}
     eee:	8e 27       	eor	r24, r30
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	08 95       	ret

00000f00 <SX1243Process>:


//ATtiny817
U8 SX1243Process()
{
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;
	
	TxParam.Config |= 0x8000;
     f06:	c2 e5       	ldi	r28, 0x52	; 82
     f08:	df e3       	ldi	r29, 0x3F	; 63
     f0a:	4d 89       	ldd	r20, Y+21	; 0x15
     f0c:	5e 89       	ldd	r21, Y+22	; 0x16
     f0e:	50 68       	ori	r21, 0x80	; 128
     f10:	4d 8b       	std	Y+21, r20	; 0x15
     f12:	5e 8b       	std	Y+22, r21	; 0x16
	state |= SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	ba de       	rcall	.-652    	; 0xc90 <SX1243Write>
     f1c:	18 2f       	mov	r17, r24
	state |= SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
     f1e:	48 81       	ld	r20, Y
     f20:	59 81       	ldd	r21, Y+1	; 0x01
     f22:	6a 81       	ldd	r22, Y+2	; 0x02
     f24:	7b 81       	ldd	r23, Y+3	; 0x03
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	b3 de       	rcall	.-666    	; 0xc90 <SX1243Write>
     f2a:	18 2b       	or	r17, r24
	TxParam.Config &= 0x7FFF;
     f2c:	8d 89       	ldd	r24, Y+21	; 0x15
     f2e:	9e 89       	ldd	r25, Y+22	; 0x16
     f30:	9f 77       	andi	r25, 0x7F	; 127
     f32:	8d 8b       	std	Y+21, r24	; 0x15
     f34:	9e 8b       	std	Y+22, r25	; 0x16


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
     f36:	80 91 66 95 	lds	r24, 0x9566	; 0x809566 <__bss_end+0x55fc>
     f3a:	8e 5f       	subi	r24, 0xFE	; 254
     f3c:	db de       	rcall	.-586    	; 0xcf4 <Sx1243ConvertBuffer>
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     f3e:	e2 e5       	ldi	r30, 0x52	; 82
     f40:	f4 e0       	ldi	r31, 0x04	; 4
     f42:	80 81       	ld	r24, Z
     f44:	88 60       	ori	r24, 0x08	; 8
     f46:	80 83       	st	Z, r24

//ATtiny817
U8 SX1243Process()
{
	U8 state = SX_OK;
	U16 j = 0;
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <SX1243Process+0x5a>
     f4e:	80 e1       	ldi	r24, 0x10	; 16
     f50:	8a 95       	dec	r24
     f52:	f1 f7       	brne	.-4      	; 0xf50 <SX1243Process+0x50>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <SX1243Process+0x56>
	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
	{
		_delay_us(10);
		j++;
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
	TxParam.Config &= 0x7FFF;


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     f5a:	52 99       	sbic	0x0a, 2	; 10
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <SX1243Process+0x64>
     f5e:	2c 3d       	cpi	r18, 0xDC	; 220
     f60:	31 05       	cpc	r19, r1
     f62:	a8 f3       	brcs	.-22     	; 0xf4e <SX1243Process+0x4e>
	{
		_delay_us(10);
		j++;
	}
	state = j >= TRANSMITTER_READY_TIMEOUT ? SX_ERROR : state;
     f64:	2c 3d       	cpi	r18, 0xDC	; 220
     f66:	31 05       	cpc	r19, r1
     f68:	08 f0       	brcs	.+2      	; 0xf6c <SX1243Process+0x6c>
     f6a:	11 e0       	ldi	r17, 0x01	; 1
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     f6c:	e2 e5       	ldi	r30, 0x52	; 82
     f6e:	f4 e0       	ldi	r31, 0x04	; 4
     f70:	80 81       	ld	r24, Z
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 83       	st	Z, r24
	TX_READY_set_pull_mode(PORT_PULL_OFF);
	
	if (j < TRANSMITTER_READY_TIMEOUT)
     f76:	2c 3d       	cpi	r18, 0xDC	; 220
     f78:	31 05       	cpc	r19, r1
     f7a:	78 f0       	brcs	.+30     	; 0xf9a <SX1243Process+0x9a>
			j++;
		}
	}
	else
	{
		state = SX_ERROR;
     f7c:	11 e0       	ldi	r17, 0x01	; 1
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <SX1243Process+0xac>
	{
		j = 0;
		
		while (j < fastBufSize)
		{
			VPORTC.OUT = fastBuf[j];
     f80:	f9 01       	movw	r30, r18
     f82:	ee 57       	subi	r30, 0x7E	; 126
     f84:	f1 4c       	sbci	r31, 0xC1	; 193
     f86:	90 81       	ld	r25, Z
     f88:	99 b9       	out	0x09, r25	; 9
			if ((fastBuf[j] & 0xEF) == 0x00)
     f8a:	90 81       	ld	r25, Z
     f8c:	9f 7e       	andi	r25, 0xEF	; 239
     f8e:	11 f4       	brne	.+4      	; 0xf94 <SX1243Process+0x94>
			{
				_NOP();
     f90:	00 00       	nop
				_NOP();
     f92:	00 00       	nop
			}
			j++;
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <SX1243Process+0x9e>
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
	
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		
		while (j < fastBufSize)
     f9e:	40 91 7f 3e 	lds	r20, 0x3E7F	; 0x803e7f <fastBufSize>
     fa2:	50 91 80 3e 	lds	r21, 0x3E80	; 0x803e80 <fastBufSize+0x1>
     fa6:	24 17       	cp	r18, r20
     fa8:	35 07       	cpc	r19, r21
     faa:	50 f3       	brcs	.-44     	; 0xf80 <SX1243Process+0x80>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     fac:	89 b1       	in	r24, 0x09	; 9
     fae:	8f 7e       	andi	r24, 0xEF	; 239
     fb0:	89 b9       	out	0x09, r24	; 9
	{
		state = SX_ERROR;
	}
	
	DATA_set_level(0);
	SX1243Reset();
     fb2:	95 de       	rcall	.-726    	; 0xcde <SX1243Reset>
	{
		SX1243Reset();
	}*/
		
	return state;
     fb4:	81 2f       	mov	r24, r17
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	08 95       	ret

00000fbe <QTOUCH_GetSensorValue>:

int32_t QTOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	int32_t var = 0;
	
	switch (touchPin)
     fbe:	88 23       	and	r24, r24
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <QTOUCH_GetSensorValue+0xa>
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f1       	breq	.+104    	; 0x102e <QTOUCH_GetSensorValue+0x70>
     fc6:	66 c0       	rjmp	.+204    	; 0x1094 <QTOUCH_GetSensorValue+0xd6>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     fc8:	66 23       	and	r22, r22
     fca:	21 f0       	breq	.+8      	; 0xfd4 <QTOUCH_GetSensorValue+0x16>
		VPORTB.OUT |= (1 << pin);
     fcc:	85 b1       	in	r24, 0x05	; 5
     fce:	82 60       	ori	r24, 0x02	; 2
     fd0:	85 b9       	out	0x05, r24	; 5
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <QTOUCH_GetSensorValue+0x1c>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     fd4:	85 b1       	in	r24, 0x05	; 5
     fd6:	8d 7f       	andi	r24, 0xFD	; 253
     fd8:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     fda:	84 b1       	in	r24, 0x04	; 4
     fdc:	82 60       	ori	r24, 0x02	; 2
     fde:	84 b9       	out	0x04, r24	; 4
			* Set PARTNER pin state for charging or discharging ADC sample capacitance.
			* If dir == true sample capacitance charged else discharged.
			*/
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     fe0:	8a e0       	ldi	r24, 0x0A	; 10
     fe2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f70a0>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     fe6:	61 30       	cpi	r22, 0x01	; 1
     fe8:	21 f0       	breq	.+8      	; 0xff2 <QTOUCH_GetSensorValue+0x34>
		VPORTA.OUT |= (1 << pin);
     fea:	81 b1       	in	r24, 0x01	; 1
     fec:	80 64       	ori	r24, 0x40	; 64
     fee:	81 b9       	out	0x01, r24	; 1
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <QTOUCH_GetSensorValue+0x3a>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     ff2:	81 b1       	in	r24, 0x01	; 1
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     ff8:	80 b1       	in	r24, 0x00	; 0
     ffa:	80 64       	ori	r24, 0x40	; 64
     ffc:	80 b9       	out	0x00, r24	; 0
     ffe:	85 e0       	ldi	r24, 0x05	; 5
    1000:	8a 95       	dec	r24
    1002:	f1 f7       	brne	.-4      	; 0x1000 <QTOUCH_GetSensorValue+0x42>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1004:	80 b1       	in	r24, 0x00	; 0
    1006:	8f 7b       	andi	r24, 0xBF	; 191
    1008:	80 b9       	out	0x00, r24	; 0
			
			/*!
			* Set SENSOR pin to ADC input and complete conversion.
			*/
			SX_set_dir(PORT_DIR_IN);
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	36 dd       	rcall	.-1428   	; 0xa7a <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    100e:	2a e0       	ldi	r18, 0x0A	; 10
    1010:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f70a0>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1014:	25 b1       	in	r18, 0x05	; 5
    1016:	22 60       	ori	r18, 0x02	; 2
    1018:	25 b9       	out	0x05, r18	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    101a:	21 b1       	in	r18, 0x01	; 1
    101c:	20 64       	ori	r18, 0x40	; 64
    101e:	21 b9       	out	0x01, r18	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1020:	20 b1       	in	r18, 0x00	; 0
    1022:	20 64       	ori	r18, 0x40	; 64
    1024:	20 b9       	out	0x00, r18	; 0
			*/
			PARTNER_set_level(true);
			SX_set_level(true);
			SX_set_dir(PORT_DIR_OUT);
			
			return var;
    1026:	bc 01       	movw	r22, r24
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    102e:	66 23       	and	r22, r22
    1030:	21 f0       	breq	.+8      	; 0x103a <QTOUCH_GetSensorValue+0x7c>
		VPORTB.OUT |= (1 << pin);
    1032:	85 b1       	in	r24, 0x05	; 5
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	85 b9       	out	0x05, r24	; 5
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <QTOUCH_GetSensorValue+0x82>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    103a:	85 b1       	in	r24, 0x05	; 5
    103c:	8d 7f       	andi	r24, 0xFD	; 253
    103e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1040:	84 b1       	in	r24, 0x04	; 4
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	84 b9       	out	0x04, r24	; 4
			* Set PARTNER pin state for charging or discharging ADC sample capacitance.
			* If dir == true sample capacitance charged else discharged.
			*/
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    1046:	8a e0       	ldi	r24, 0x0A	; 10
    1048:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f70a0>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    104c:	61 30       	cpi	r22, 0x01	; 1
    104e:	21 f0       	breq	.+8      	; 0x1058 <QTOUCH_GetSensorValue+0x9a>
		VPORTB.OUT |= (1 << pin);
    1050:	85 b1       	in	r24, 0x05	; 5
    1052:	81 60       	ori	r24, 0x01	; 1
    1054:	85 b9       	out	0x05, r24	; 5
    1056:	03 c0       	rjmp	.+6      	; 0x105e <QTOUCH_GetSensorValue+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1058:	85 b1       	in	r24, 0x05	; 5
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    105e:	84 b1       	in	r24, 0x04	; 4
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	84 b9       	out	0x04, r24	; 4
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	8a 95       	dec	r24
    1068:	f1 f7       	brne	.-4      	; 0x1066 <QTOUCH_GetSensorValue+0xa8>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    106a:	84 b1       	in	r24, 0x04	; 4
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	84 b9       	out	0x04, r24	; 4
			
			/*!
			* Set SENSOR pin to ADC input and complete conversion.
			*/
			SY_set_dir(PORT_DIR_IN);
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
    1070:	8b e0       	ldi	r24, 0x0B	; 11
    1072:	03 dd       	rcall	.-1530   	; 0xa7a <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;			
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f70a0>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    107a:	25 b1       	in	r18, 0x05	; 5
    107c:	22 60       	ori	r18, 0x02	; 2
    107e:	25 b9       	out	0x05, r18	; 5
    1080:	25 b1       	in	r18, 0x05	; 5
    1082:	21 60       	ori	r18, 0x01	; 1
    1084:	25 b9       	out	0x05, r18	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1086:	24 b1       	in	r18, 0x04	; 4
    1088:	21 60       	ori	r18, 0x01	; 1
    108a:	24 b9       	out	0x04, r18	; 4
			*/
			PARTNER_set_level(true);
			SY_set_level(true);
			SY_set_dir(PORT_DIR_OUT);
			
			return var;
    108c:	bc 01       	movw	r22, r24
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	08 95       	ret
		* Do nothing! 
		*/
		break;
	}
	
	return var;
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	cb 01       	movw	r24, r22
}
    109a:	08 95       	ret

0000109c <__divsf3>:
    109c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__divsf3x>
    10a0:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_round>
    10a4:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_pscB>
    10a8:	58 f0       	brcs	.+22     	; 0x10c0 <__divsf3+0x24>
    10aa:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscA>
    10ae:	40 f0       	brcs	.+16     	; 0x10c0 <__divsf3+0x24>
    10b0:	29 f4       	brne	.+10     	; 0x10bc <__divsf3+0x20>
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <__divsf3+0x24>
    10b6:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_inf>
    10ba:	51 11       	cpse	r21, r1
    10bc:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    10c0:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__fp_nan>

000010c4 <__divsf3x>:
    10c4:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_split3>
    10c8:	68 f3       	brcs	.-38     	; 0x10a4 <__divsf3+0x8>

000010ca <__divsf3_pse>:
    10ca:	99 23       	and	r25, r25
    10cc:	b1 f3       	breq	.-20     	; 0x10ba <__divsf3+0x1e>
    10ce:	55 23       	and	r21, r21
    10d0:	91 f3       	breq	.-28     	; 0x10b6 <__divsf3+0x1a>
    10d2:	95 1b       	sub	r25, r21
    10d4:	55 0b       	sbc	r21, r21
    10d6:	bb 27       	eor	r27, r27
    10d8:	aa 27       	eor	r26, r26
    10da:	62 17       	cp	r22, r18
    10dc:	73 07       	cpc	r23, r19
    10de:	84 07       	cpc	r24, r20
    10e0:	38 f0       	brcs	.+14     	; 0x10f0 <__divsf3_pse+0x26>
    10e2:	9f 5f       	subi	r25, 0xFF	; 255
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	44 1f       	adc	r20, r20
    10ec:	aa 1f       	adc	r26, r26
    10ee:	a9 f3       	breq	.-22     	; 0x10da <__divsf3_pse+0x10>
    10f0:	35 d0       	rcall	.+106    	; 0x115c <__divsf3_pse+0x92>
    10f2:	0e 2e       	mov	r0, r30
    10f4:	3a f0       	brmi	.+14     	; 0x1104 <__divsf3_pse+0x3a>
    10f6:	e0 e8       	ldi	r30, 0x80	; 128
    10f8:	32 d0       	rcall	.+100    	; 0x115e <__divsf3_pse+0x94>
    10fa:	91 50       	subi	r25, 0x01	; 1
    10fc:	50 40       	sbci	r21, 0x00	; 0
    10fe:	e6 95       	lsr	r30
    1100:	00 1c       	adc	r0, r0
    1102:	ca f7       	brpl	.-14     	; 0x10f6 <__divsf3_pse+0x2c>
    1104:	2b d0       	rcall	.+86     	; 0x115c <__divsf3_pse+0x92>
    1106:	fe 2f       	mov	r31, r30
    1108:	29 d0       	rcall	.+82     	; 0x115c <__divsf3_pse+0x92>
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	bb 1f       	adc	r27, r27
    1112:	26 17       	cp	r18, r22
    1114:	37 07       	cpc	r19, r23
    1116:	48 07       	cpc	r20, r24
    1118:	ab 07       	cpc	r26, r27
    111a:	b0 e8       	ldi	r27, 0x80	; 128
    111c:	09 f0       	breq	.+2      	; 0x1120 <__divsf3_pse+0x56>
    111e:	bb 0b       	sbc	r27, r27
    1120:	80 2d       	mov	r24, r0
    1122:	bf 01       	movw	r22, r30
    1124:	ff 27       	eor	r31, r31
    1126:	93 58       	subi	r25, 0x83	; 131
    1128:	5f 4f       	sbci	r21, 0xFF	; 255
    112a:	3a f0       	brmi	.+14     	; 0x113a <__divsf3_pse+0x70>
    112c:	9e 3f       	cpi	r25, 0xFE	; 254
    112e:	51 05       	cpc	r21, r1
    1130:	78 f0       	brcs	.+30     	; 0x1150 <__divsf3_pse+0x86>
    1132:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_inf>
    1136:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    113a:	5f 3f       	cpi	r21, 0xFF	; 255
    113c:	e4 f3       	brlt	.-8      	; 0x1136 <__divsf3_pse+0x6c>
    113e:	98 3e       	cpi	r25, 0xE8	; 232
    1140:	d4 f3       	brlt	.-12     	; 0x1136 <__divsf3_pse+0x6c>
    1142:	86 95       	lsr	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	b7 95       	ror	r27
    114a:	f7 95       	ror	r31
    114c:	9f 5f       	subi	r25, 0xFF	; 255
    114e:	c9 f7       	brne	.-14     	; 0x1142 <__divsf3_pse+0x78>
    1150:	88 0f       	add	r24, r24
    1152:	91 1d       	adc	r25, r1
    1154:	96 95       	lsr	r25
    1156:	87 95       	ror	r24
    1158:	97 f9       	bld	r25, 7
    115a:	08 95       	ret
    115c:	e1 e0       	ldi	r30, 0x01	; 1
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	88 1f       	adc	r24, r24
    1164:	bb 1f       	adc	r27, r27
    1166:	62 17       	cp	r22, r18
    1168:	73 07       	cpc	r23, r19
    116a:	84 07       	cpc	r24, r20
    116c:	ba 07       	cpc	r27, r26
    116e:	20 f0       	brcs	.+8      	; 0x1178 <__divsf3_pse+0xae>
    1170:	62 1b       	sub	r22, r18
    1172:	73 0b       	sbc	r23, r19
    1174:	84 0b       	sbc	r24, r20
    1176:	ba 0b       	sbc	r27, r26
    1178:	ee 1f       	adc	r30, r30
    117a:	88 f7       	brcc	.-30     	; 0x115e <__divsf3_pse+0x94>
    117c:	e0 95       	com	r30
    117e:	08 95       	ret

00001180 <__fixsfdi>:
    1180:	be e3       	ldi	r27, 0x3E	; 62
    1182:	04 d0       	rcall	.+8      	; 0x118c <__fixunssfdi+0x2>
    1184:	08 f4       	brcc	.+2      	; 0x1188 <__fixsfdi+0x8>
    1186:	90 e8       	ldi	r25, 0x80	; 128
    1188:	08 95       	ret

0000118a <__fixunssfdi>:
    118a:	bf e3       	ldi	r27, 0x3F	; 63
    118c:	22 27       	eor	r18, r18
    118e:	33 27       	eor	r19, r19
    1190:	a9 01       	movw	r20, r18
    1192:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_splitA>
    1196:	60 f1       	brcs	.+88     	; 0x11f0 <__fixunssfdi+0x66>
    1198:	9f 57       	subi	r25, 0x7F	; 127
    119a:	48 f1       	brcs	.+82     	; 0x11ee <__fixunssfdi+0x64>
    119c:	b9 17       	cp	r27, r25
    119e:	40 f1       	brcs	.+80     	; 0x11f0 <__fixunssfdi+0x66>
    11a0:	bf e3       	ldi	r27, 0x3F	; 63
    11a2:	b9 1b       	sub	r27, r25
    11a4:	99 27       	eor	r25, r25
    11a6:	b8 50       	subi	r27, 0x08	; 8
    11a8:	3a f4       	brpl	.+14     	; 0x11b8 <__fixunssfdi+0x2e>
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	b3 95       	inc	r27
    11b4:	d2 f3       	brmi	.-12     	; 0x11aa <__fixunssfdi+0x20>
    11b6:	16 c0       	rjmp	.+44     	; 0x11e4 <__fixunssfdi+0x5a>
    11b8:	b8 50       	subi	r27, 0x08	; 8
    11ba:	4a f0       	brmi	.+18     	; 0x11ce <__fixunssfdi+0x44>
    11bc:	23 2f       	mov	r18, r19
    11be:	34 2f       	mov	r19, r20
    11c0:	45 2f       	mov	r20, r21
    11c2:	56 2f       	mov	r21, r22
    11c4:	67 2f       	mov	r22, r23
    11c6:	78 2f       	mov	r23, r24
    11c8:	88 27       	eor	r24, r24
    11ca:	b8 50       	subi	r27, 0x08	; 8
    11cc:	ba f7       	brpl	.-18     	; 0x11bc <__fixunssfdi+0x32>
    11ce:	b8 5f       	subi	r27, 0xF8	; 248
    11d0:	49 f0       	breq	.+18     	; 0x11e4 <__fixunssfdi+0x5a>
    11d2:	86 95       	lsr	r24
    11d4:	77 95       	ror	r23
    11d6:	67 95       	ror	r22
    11d8:	57 95       	ror	r21
    11da:	47 95       	ror	r20
    11dc:	37 95       	ror	r19
    11de:	27 95       	ror	r18
    11e0:	ba 95       	dec	r27
    11e2:	b9 f7       	brne	.-18     	; 0x11d2 <__fixunssfdi+0x48>
    11e4:	16 f4       	brtc	.+4      	; 0x11ea <__fixunssfdi+0x60>
    11e6:	0e 94 af 09 	call	0x135e	; 0x135e <__fp_negdi>
    11ea:	88 94       	clc
    11ec:	08 95       	ret
    11ee:	88 94       	clc
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	cb 01       	movw	r24, r22
    11f6:	08 95       	ret

000011f8 <__fixunssfsi>:
    11f8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__fp_splitA>
    11fc:	88 f0       	brcs	.+34     	; 0x1220 <__fixunssfsi+0x28>
    11fe:	9f 57       	subi	r25, 0x7F	; 127
    1200:	98 f0       	brcs	.+38     	; 0x1228 <__fixunssfsi+0x30>
    1202:	b9 2f       	mov	r27, r25
    1204:	99 27       	eor	r25, r25
    1206:	b7 51       	subi	r27, 0x17	; 23
    1208:	b0 f0       	brcs	.+44     	; 0x1236 <__fixunssfsi+0x3e>
    120a:	e1 f0       	breq	.+56     	; 0x1244 <__fixunssfsi+0x4c>
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	1a f0       	brmi	.+6      	; 0x121c <__fixunssfsi+0x24>
    1216:	ba 95       	dec	r27
    1218:	c9 f7       	brne	.-14     	; 0x120c <__fixunssfsi+0x14>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <__fixunssfsi+0x4c>
    121c:	b1 30       	cpi	r27, 0x01	; 1
    121e:	91 f0       	breq	.+36     	; 0x1244 <__fixunssfsi+0x4c>
    1220:	0e 94 00 0a 	call	0x1400	; 0x1400 <__fp_zero>
    1224:	b1 e0       	ldi	r27, 0x01	; 1
    1226:	08 95       	ret
    1228:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_zero>
    122c:	67 2f       	mov	r22, r23
    122e:	78 2f       	mov	r23, r24
    1230:	88 27       	eor	r24, r24
    1232:	b8 5f       	subi	r27, 0xF8	; 248
    1234:	39 f0       	breq	.+14     	; 0x1244 <__fixunssfsi+0x4c>
    1236:	b9 3f       	cpi	r27, 0xF9	; 249
    1238:	cc f3       	brlt	.-14     	; 0x122c <__fixunssfsi+0x34>
    123a:	86 95       	lsr	r24
    123c:	77 95       	ror	r23
    123e:	67 95       	ror	r22
    1240:	b3 95       	inc	r27
    1242:	d9 f7       	brne	.-10     	; 0x123a <__fixunssfsi+0x42>
    1244:	3e f4       	brtc	.+14     	; 0x1254 <__fixunssfsi+0x5c>
    1246:	90 95       	com	r25
    1248:	80 95       	com	r24
    124a:	70 95       	com	r23
    124c:	61 95       	neg	r22
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__floatunsisf>:
    1256:	e8 94       	clt
    1258:	09 c0       	rjmp	.+18     	; 0x126c <__floatsisf+0x12>

0000125a <__floatsisf>:
    125a:	97 fb       	bst	r25, 7
    125c:	3e f4       	brtc	.+14     	; 0x126c <__floatsisf+0x12>
    125e:	90 95       	com	r25
    1260:	80 95       	com	r24
    1262:	70 95       	com	r23
    1264:	61 95       	neg	r22
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	8f 4f       	sbci	r24, 0xFF	; 255
    126a:	9f 4f       	sbci	r25, 0xFF	; 255
    126c:	99 23       	and	r25, r25
    126e:	a9 f0       	breq	.+42     	; 0x129a <__floatsisf+0x40>
    1270:	f9 2f       	mov	r31, r25
    1272:	96 e9       	ldi	r25, 0x96	; 150
    1274:	bb 27       	eor	r27, r27
    1276:	93 95       	inc	r25
    1278:	f6 95       	lsr	r31
    127a:	87 95       	ror	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	b7 95       	ror	r27
    1282:	f1 11       	cpse	r31, r1
    1284:	f8 cf       	rjmp	.-16     	; 0x1276 <__floatsisf+0x1c>
    1286:	fa f4       	brpl	.+62     	; 0x12c6 <__floatsisf+0x6c>
    1288:	bb 0f       	add	r27, r27
    128a:	11 f4       	brne	.+4      	; 0x1290 <__floatsisf+0x36>
    128c:	60 ff       	sbrs	r22, 0
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <__floatsisf+0x6c>
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	16 c0       	rjmp	.+44     	; 0x12c6 <__floatsisf+0x6c>
    129a:	88 23       	and	r24, r24
    129c:	11 f0       	breq	.+4      	; 0x12a2 <__floatsisf+0x48>
    129e:	96 e9       	ldi	r25, 0x96	; 150
    12a0:	11 c0       	rjmp	.+34     	; 0x12c4 <__floatsisf+0x6a>
    12a2:	77 23       	and	r23, r23
    12a4:	21 f0       	breq	.+8      	; 0x12ae <__floatsisf+0x54>
    12a6:	9e e8       	ldi	r25, 0x8E	; 142
    12a8:	87 2f       	mov	r24, r23
    12aa:	76 2f       	mov	r23, r22
    12ac:	05 c0       	rjmp	.+10     	; 0x12b8 <__floatsisf+0x5e>
    12ae:	66 23       	and	r22, r22
    12b0:	71 f0       	breq	.+28     	; 0x12ce <__floatsisf+0x74>
    12b2:	96 e8       	ldi	r25, 0x86	; 134
    12b4:	86 2f       	mov	r24, r22
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	2a f0       	brmi	.+10     	; 0x12c6 <__floatsisf+0x6c>
    12bc:	9a 95       	dec	r25
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	da f7       	brpl	.-10     	; 0x12bc <__floatsisf+0x62>
    12c6:	88 0f       	add	r24, r24
    12c8:	96 95       	lsr	r25
    12ca:	87 95       	ror	r24
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__floatundisf>:
    12d0:	e8 94       	clt

000012d2 <__fp_di2sf>:
    12d2:	f9 2f       	mov	r31, r25
    12d4:	96 eb       	ldi	r25, 0xB6	; 182
    12d6:	ff 23       	and	r31, r31
    12d8:	81 f0       	breq	.+32     	; 0x12fa <__fp_di2sf+0x28>
    12da:	12 16       	cp	r1, r18
    12dc:	13 06       	cpc	r1, r19
    12de:	14 06       	cpc	r1, r20
    12e0:	44 0b       	sbc	r20, r20
    12e2:	93 95       	inc	r25
    12e4:	f6 95       	lsr	r31
    12e6:	87 95       	ror	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	57 95       	ror	r21
    12ee:	40 40       	sbci	r20, 0x00	; 0
    12f0:	ff 23       	and	r31, r31
    12f2:	b9 f7       	brne	.-18     	; 0x12e2 <__fp_di2sf+0x10>
    12f4:	1b c0       	rjmp	.+54     	; 0x132c <__fp_di2sf+0x5a>
    12f6:	99 27       	eor	r25, r25
    12f8:	08 95       	ret
    12fa:	88 23       	and	r24, r24
    12fc:	51 f4       	brne	.+20     	; 0x1312 <__fp_di2sf+0x40>
    12fe:	98 50       	subi	r25, 0x08	; 8
    1300:	d2 f7       	brpl	.-12     	; 0x12f6 <__fp_di2sf+0x24>
    1302:	87 2b       	or	r24, r23
    1304:	76 2f       	mov	r23, r22
    1306:	65 2f       	mov	r22, r21
    1308:	54 2f       	mov	r21, r20
    130a:	43 2f       	mov	r20, r19
    130c:	32 2f       	mov	r19, r18
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	b1 f3       	breq	.-20     	; 0x12fe <__fp_di2sf+0x2c>
    1312:	12 16       	cp	r1, r18
    1314:	13 06       	cpc	r1, r19
    1316:	14 06       	cpc	r1, r20
    1318:	44 0b       	sbc	r20, r20
    131a:	88 23       	and	r24, r24
    131c:	3a f0       	brmi	.+14     	; 0x132c <__fp_di2sf+0x5a>
    131e:	9a 95       	dec	r25
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	ca f7       	brpl	.-14     	; 0x131e <__fp_di2sf+0x4c>
    132c:	55 23       	and	r21, r21
    132e:	4a f4       	brpl	.+18     	; 0x1342 <__fp_di2sf+0x70>
    1330:	44 0f       	add	r20, r20
    1332:	55 1f       	adc	r21, r21
    1334:	11 f4       	brne	.+4      	; 0x133a <__fp_di2sf+0x68>
    1336:	60 ff       	sbrs	r22, 0
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <__fp_di2sf+0x70>
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    1342:	88 0f       	add	r24, r24
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	97 f9       	bld	r25, 7
    134a:	08 95       	ret

0000134c <__fp_inf>:
    134c:	97 f9       	bld	r25, 7
    134e:	9f 67       	ori	r25, 0x7F	; 127
    1350:	80 e8       	ldi	r24, 0x80	; 128
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	08 95       	ret

00001358 <__fp_nan>:
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	80 ec       	ldi	r24, 0xC0	; 192
    135c:	08 95       	ret

0000135e <__fp_negdi>:
    135e:	90 95       	com	r25
    1360:	80 95       	com	r24
    1362:	70 95       	com	r23
    1364:	60 95       	com	r22
    1366:	50 95       	com	r21
    1368:	40 95       	com	r20
    136a:	30 95       	com	r19
    136c:	21 95       	neg	r18
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	4f 4f       	sbci	r20, 0xFF	; 255
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	6f 4f       	sbci	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	8f 4f       	sbci	r24, 0xFF	; 255
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	08 95       	ret

0000137e <__fp_pscA>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	16 16       	cp	r1, r22
    1384:	17 06       	cpc	r1, r23
    1386:	18 06       	cpc	r1, r24
    1388:	09 06       	cpc	r0, r25
    138a:	08 95       	ret

0000138c <__fp_pscB>:
    138c:	00 24       	eor	r0, r0
    138e:	0a 94       	dec	r0
    1390:	12 16       	cp	r1, r18
    1392:	13 06       	cpc	r1, r19
    1394:	14 06       	cpc	r1, r20
    1396:	05 06       	cpc	r0, r21
    1398:	08 95       	ret

0000139a <__fp_round>:
    139a:	09 2e       	mov	r0, r25
    139c:	03 94       	inc	r0
    139e:	00 0c       	add	r0, r0
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <__fp_round+0xc>
    13a2:	88 23       	and	r24, r24
    13a4:	52 f0       	brmi	.+20     	; 0x13ba <__fp_round+0x20>
    13a6:	bb 0f       	add	r27, r27
    13a8:	40 f4       	brcc	.+16     	; 0x13ba <__fp_round+0x20>
    13aa:	bf 2b       	or	r27, r31
    13ac:	11 f4       	brne	.+4      	; 0x13b2 <__fp_round+0x18>
    13ae:	60 ff       	sbrs	r22, 0
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <__fp_round+0x20>
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__fp_split3>:
    13bc:	57 fd       	sbrc	r21, 7
    13be:	90 58       	subi	r25, 0x80	; 128
    13c0:	44 0f       	add	r20, r20
    13c2:	55 1f       	adc	r21, r21
    13c4:	59 f0       	breq	.+22     	; 0x13dc <__fp_splitA+0x10>
    13c6:	5f 3f       	cpi	r21, 0xFF	; 255
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <__fp_splitA+0x1a>
    13ca:	47 95       	ror	r20

000013cc <__fp_splitA>:
    13cc:	88 0f       	add	r24, r24
    13ce:	97 fb       	bst	r25, 7
    13d0:	99 1f       	adc	r25, r25
    13d2:	61 f0       	breq	.+24     	; 0x13ec <__fp_splitA+0x20>
    13d4:	9f 3f       	cpi	r25, 0xFF	; 255
    13d6:	79 f0       	breq	.+30     	; 0x13f6 <__fp_splitA+0x2a>
    13d8:	87 95       	ror	r24
    13da:	08 95       	ret
    13dc:	12 16       	cp	r1, r18
    13de:	13 06       	cpc	r1, r19
    13e0:	14 06       	cpc	r1, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	f2 cf       	rjmp	.-28     	; 0x13ca <__fp_split3+0xe>
    13e6:	46 95       	lsr	r20
    13e8:	f1 df       	rcall	.-30     	; 0x13cc <__fp_splitA>
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <__fp_splitA+0x30>
    13ec:	16 16       	cp	r1, r22
    13ee:	17 06       	cpc	r1, r23
    13f0:	18 06       	cpc	r1, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	f1 cf       	rjmp	.-30     	; 0x13d8 <__fp_splitA+0xc>
    13f6:	86 95       	lsr	r24
    13f8:	71 05       	cpc	r23, r1
    13fa:	61 05       	cpc	r22, r1
    13fc:	08 94       	sec
    13fe:	08 95       	ret

00001400 <__fp_zero>:
    1400:	e8 94       	clt

00001402 <__fp_szero>:
    1402:	bb 27       	eor	r27, r27
    1404:	66 27       	eor	r22, r22
    1406:	77 27       	eor	r23, r23
    1408:	cb 01       	movw	r24, r22
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret

0000140e <__mulsf3>:
    140e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__mulsf3x>
    1412:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_round>
    1416:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscA>
    141a:	38 f0       	brcs	.+14     	; 0x142a <__mulsf3+0x1c>
    141c:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_pscB>
    1420:	20 f0       	brcs	.+8      	; 0x142a <__mulsf3+0x1c>
    1422:	95 23       	and	r25, r21
    1424:	11 f0       	breq	.+4      	; 0x142a <__mulsf3+0x1c>
    1426:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_inf>
    142a:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__fp_nan>
    142e:	11 24       	eor	r1, r1
    1430:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>

00001434 <__mulsf3x>:
    1434:	0e 94 de 09 	call	0x13bc	; 0x13bc <__fp_split3>
    1438:	70 f3       	brcs	.-36     	; 0x1416 <__mulsf3+0x8>

0000143a <__mulsf3_pse>:
    143a:	95 9f       	mul	r25, r21
    143c:	c1 f3       	breq	.-16     	; 0x142e <__mulsf3+0x20>
    143e:	95 0f       	add	r25, r21
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	55 1f       	adc	r21, r21
    1444:	62 9f       	mul	r22, r18
    1446:	f0 01       	movw	r30, r0
    1448:	72 9f       	mul	r23, r18
    144a:	bb 27       	eor	r27, r27
    144c:	f0 0d       	add	r31, r0
    144e:	b1 1d       	adc	r27, r1
    1450:	63 9f       	mul	r22, r19
    1452:	aa 27       	eor	r26, r26
    1454:	f0 0d       	add	r31, r0
    1456:	b1 1d       	adc	r27, r1
    1458:	aa 1f       	adc	r26, r26
    145a:	64 9f       	mul	r22, r20
    145c:	66 27       	eor	r22, r22
    145e:	b0 0d       	add	r27, r0
    1460:	a1 1d       	adc	r26, r1
    1462:	66 1f       	adc	r22, r22
    1464:	82 9f       	mul	r24, r18
    1466:	22 27       	eor	r18, r18
    1468:	b0 0d       	add	r27, r0
    146a:	a1 1d       	adc	r26, r1
    146c:	62 1f       	adc	r22, r18
    146e:	73 9f       	mul	r23, r19
    1470:	b0 0d       	add	r27, r0
    1472:	a1 1d       	adc	r26, r1
    1474:	62 1f       	adc	r22, r18
    1476:	83 9f       	mul	r24, r19
    1478:	a0 0d       	add	r26, r0
    147a:	61 1d       	adc	r22, r1
    147c:	22 1f       	adc	r18, r18
    147e:	74 9f       	mul	r23, r20
    1480:	33 27       	eor	r19, r19
    1482:	a0 0d       	add	r26, r0
    1484:	61 1d       	adc	r22, r1
    1486:	23 1f       	adc	r18, r19
    1488:	84 9f       	mul	r24, r20
    148a:	60 0d       	add	r22, r0
    148c:	21 1d       	adc	r18, r1
    148e:	82 2f       	mov	r24, r18
    1490:	76 2f       	mov	r23, r22
    1492:	6a 2f       	mov	r22, r26
    1494:	11 24       	eor	r1, r1
    1496:	9f 57       	subi	r25, 0x7F	; 127
    1498:	50 40       	sbci	r21, 0x00	; 0
    149a:	9a f0       	brmi	.+38     	; 0x14c2 <__mulsf3_pse+0x88>
    149c:	f1 f0       	breq	.+60     	; 0x14da <__mulsf3_pse+0xa0>
    149e:	88 23       	and	r24, r24
    14a0:	4a f0       	brmi	.+18     	; 0x14b4 <__mulsf3_pse+0x7a>
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	bb 1f       	adc	r27, r27
    14a8:	66 1f       	adc	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	91 50       	subi	r25, 0x01	; 1
    14b0:	50 40       	sbci	r21, 0x00	; 0
    14b2:	a9 f7       	brne	.-22     	; 0x149e <__mulsf3_pse+0x64>
    14b4:	9e 3f       	cpi	r25, 0xFE	; 254
    14b6:	51 05       	cpc	r21, r1
    14b8:	80 f0       	brcs	.+32     	; 0x14da <__mulsf3_pse+0xa0>
    14ba:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_inf>
    14be:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_szero>
    14c2:	5f 3f       	cpi	r21, 0xFF	; 255
    14c4:	e4 f3       	brlt	.-8      	; 0x14be <__mulsf3_pse+0x84>
    14c6:	98 3e       	cpi	r25, 0xE8	; 232
    14c8:	d4 f3       	brlt	.-12     	; 0x14be <__mulsf3_pse+0x84>
    14ca:	86 95       	lsr	r24
    14cc:	77 95       	ror	r23
    14ce:	67 95       	ror	r22
    14d0:	b7 95       	ror	r27
    14d2:	f7 95       	ror	r31
    14d4:	e7 95       	ror	r30
    14d6:	9f 5f       	subi	r25, 0xFF	; 255
    14d8:	c1 f7       	brne	.-16     	; 0x14ca <__mulsf3_pse+0x90>
    14da:	fe 2b       	or	r31, r30
    14dc:	88 0f       	add	r24, r24
    14de:	91 1d       	adc	r25, r1
    14e0:	96 95       	lsr	r25
    14e2:	87 95       	ror	r24
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret

000014e8 <__muluhisi3>:
    14e8:	30 d0       	rcall	.+96     	; 0x154a <__umulhisi3>
    14ea:	a5 9f       	mul	r26, r21
    14ec:	90 0d       	add	r25, r0
    14ee:	b4 9f       	mul	r27, r20
    14f0:	90 0d       	add	r25, r0
    14f2:	a4 9f       	mul	r26, r20
    14f4:	80 0d       	add	r24, r0
    14f6:	91 1d       	adc	r25, r1
    14f8:	11 24       	eor	r1, r1
    14fa:	08 95       	ret

000014fc <__ashrdi3>:
    14fc:	97 fb       	bst	r25, 7
    14fe:	10 f8       	bld	r1, 0

00001500 <__lshrdi3>:
    1500:	16 94       	lsr	r1
    1502:	00 08       	sbc	r0, r0
    1504:	0f 93       	push	r16
    1506:	08 30       	cpi	r16, 0x08	; 8
    1508:	98 f0       	brcs	.+38     	; 0x1530 <__lshrdi3+0x30>
    150a:	08 50       	subi	r16, 0x08	; 8
    150c:	23 2f       	mov	r18, r19
    150e:	34 2f       	mov	r19, r20
    1510:	45 2f       	mov	r20, r21
    1512:	56 2f       	mov	r21, r22
    1514:	67 2f       	mov	r22, r23
    1516:	78 2f       	mov	r23, r24
    1518:	89 2f       	mov	r24, r25
    151a:	90 2d       	mov	r25, r0
    151c:	f4 cf       	rjmp	.-24     	; 0x1506 <__lshrdi3+0x6>
    151e:	05 94       	asr	r0
    1520:	97 95       	ror	r25
    1522:	87 95       	ror	r24
    1524:	77 95       	ror	r23
    1526:	67 95       	ror	r22
    1528:	57 95       	ror	r21
    152a:	47 95       	ror	r20
    152c:	37 95       	ror	r19
    152e:	27 95       	ror	r18
    1530:	0a 95       	dec	r16
    1532:	aa f7       	brpl	.-22     	; 0x151e <__lshrdi3+0x1e>
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <__subdi3>:
    1538:	2a 19       	sub	r18, r10
    153a:	3b 09       	sbc	r19, r11
    153c:	4c 09       	sbc	r20, r12
    153e:	5d 09       	sbc	r21, r13
    1540:	6e 09       	sbc	r22, r14
    1542:	7f 09       	sbc	r23, r15
    1544:	80 0b       	sbc	r24, r16
    1546:	91 0b       	sbc	r25, r17
    1548:	08 95       	ret

0000154a <__umulhisi3>:
    154a:	a2 9f       	mul	r26, r18
    154c:	b0 01       	movw	r22, r0
    154e:	b3 9f       	mul	r27, r19
    1550:	c0 01       	movw	r24, r0
    1552:	a3 9f       	mul	r26, r19
    1554:	01 d0       	rcall	.+2      	; 0x1558 <__umulhisi3+0xe>
    1556:	b2 9f       	mul	r27, r18
    1558:	70 0d       	add	r23, r0
    155a:	81 1d       	adc	r24, r1
    155c:	11 24       	eor	r1, r1
    155e:	91 1d       	adc	r25, r1
    1560:	08 95       	ret

00001562 <_exit>:
    1562:	f8 94       	cli

00001564 <__stop_program>:
    1564:	ff cf       	rjmp	.-2      	; 0x1564 <__stop_program>
