
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00803e00  000017bb  0000186f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ba  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  000097ba  000017ba  0000186e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000f2  00803e8a  00803e8a  000018f9  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  00001968  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000721a  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028c1  00000000  00000000  00008e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002326  00000000  00000000  0000b6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004b8  00000000  00000000  0000da24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000024bf  00000000  00000000  0000dedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001fc2  00000000  00000000  0001039b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e0  00000000  00000000  0001235d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	eb eb       	ldi	r30, 0xBB	; 187
      48:	f7 e1       	ldi	r31, 0x17	; 23
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	aa 38       	cpi	r26, 0x8A	; 138
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2f e3       	ldi	r18, 0x3F	; 63
      58:	aa e8       	ldi	r26, 0x8A	; 138
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ac 37       	cpi	r26, 0x7C	; 124
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	29 d0       	rcall	.+82     	; 0xba <main>
      68:	a6 cb       	rjmp	.-2228   	; 0xfffff7b6 <__eeprom_end+0xff7ef7b6>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
      6c:	82 d6       	rcall	.+3332   	; 0xd72 <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6999>
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f6c4f>
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <ConfigPIT>:

uint8_t sleepTimeSequence = T_2048;

void ConfigPIT(uint8_t timeSequence)
{
	RTC.PITCTRLA = timeSequence 
      ac:	81 60       	ori	r24, 0x01	; 1
      ae:	e0 e4       	ldi	r30, 0x40	; 64
      b0:	f1 e0       	ldi	r31, 0x01	; 1
      b2:	80 8b       	std	Z+16, r24	; 0x10
	| 1 << RTC_PITEN_bp;
	RTC.PITINTFLAGS = RTC_PI_bm;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	83 8b       	std	Z+19, r24	; 0x13
      b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
	atmel_start_init();
      ba:	d8 df       	rcall	.-80     	; 0x6c <atmel_start_init>
	
	batVar = FLASH_0_read_eeprom_byte(0);
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	bb d6       	rcall	.+3446   	; 0xe38 <FLASH_0_read_eeprom_byte>
	batVar = batVar > 6 ? 7 : batVar;
      c2:	c8 2f       	mov	r28, r24
      c4:	88 30       	cpi	r24, 0x08	; 8
      c6:	08 f0       	brcs	.+2      	; 0xca <main+0x10>
      c8:	c7 e0       	ldi	r28, 0x07	; 7
      ca:	c0 93 8a 3e 	sts	0x3E8A, r28	; 0x803e8a <__data_end>
	BatteryLevelCounter = ((uint64_t)((float)BatteryLevelCounter * (float)batVar)) >> 3;
      ce:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
      d2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
      d6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
      da:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
      de:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
      e2:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
      e6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
      ea:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
      ee:	1a da       	rcall	.-3020   	; 0xfffff524 <__eeprom_end+0xff7ef524>
      f0:	6b 01       	movw	r12, r22
      f2:	7c 01       	movw	r14, r24
      f4:	6c 2f       	mov	r22, r28
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	d6 d9       	rcall	.-3156   	; 0xfffff4aa <__eeprom_end+0xff7ef4aa>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	c7 01       	movw	r24, r14
     104:	b6 01       	movw	r22, r12
     106:	ad da       	rcall	.-2726   	; 0xfffff662 <__eeprom_end+0xff7ef662>
     108:	6a d9       	rcall	.-3372   	; 0xfffff3de <__eeprom_end+0xff7ef3de>
     10a:	03 e0       	ldi	r16, 0x03	; 3
     10c:	23 db       	rcall	.-2490   	; 0xfffff754 <__eeprom_end+0xff7ef754>
     10e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     112:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     116:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     11a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     11e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     122:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     126:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     12a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     12e:	89 b1       	in	r24, 0x09	; 9
     130:	8f 7e       	andi	r24, 0xEF	; 239
     132:	89 b9       	out	0x09, r24	; 9
	
	DATA_set_level(false);
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM8;
     134:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f7951>
     138:	ef e6       	ldi	r30, 0x6F	; 111
     13a:	fe e3       	ldi	r31, 0x3E	; 62
     13c:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM9;
     13e:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f7952>
     142:	87 83       	std	Z+7, r24	; 0x07
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     144:	46 e0       	ldi	r20, 0x06	; 6
     146:	6a e1       	ldi	r22, 0x1A	; 26
     148:	cf 01       	movw	r24, r30
     14a:	8d d7       	rcall	.+3866   	; 0x1066 <SX1243Init>
	
	while(true) 
	{
		#if B_STYLE == (0)
		BatteryLevelCounter -= ((QTOUCHADC_REFERANCE_FILTER_P[0].LoopCycle + QTOUCHADC_REFERANCE_FILTER_P[1].LoopCycle) >> (sleepTimeSequence + 1));
     14c:	ed e0       	ldi	r30, 0x0D	; 13
     14e:	fe e3       	ldi	r31, 0x3E	; 62
     150:	21 84       	ldd	r2, Z+9	; 0x09
     152:	32 84       	ldd	r3, Z+10	; 0x0a
     154:	80 ad       	ldd	r24, Z+56	; 0x38
     156:	91 ad       	ldd	r25, Z+57	; 0x39
     158:	28 0e       	add	r2, r24
     15a:	39 1e       	adc	r3, r25
     15c:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	01 96       	adiw	r24, 0x01	; 1
     164:	02 c0       	rjmp	.+4      	; 0x16a <main+0xb0>
     166:	36 94       	lsr	r3
     168:	27 94       	ror	r2
     16a:	8a 95       	dec	r24
     16c:	e2 f7       	brpl	.-8      	; 0x166 <main+0xac>
     16e:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     172:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     176:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     17a:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     17e:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     182:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     186:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     18a:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     18e:	a2 2c       	mov	r10, r2
     190:	b3 2c       	mov	r11, r3
     192:	c1 2c       	mov	r12, r1
     194:	d1 2c       	mov	r13, r1
     196:	e1 2c       	mov	r14, r1
     198:	f1 2c       	mov	r15, r1
     19a:	00 e0       	ldi	r16, 0x00	; 0
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	f6 da       	rcall	.-2580   	; 0xfffff78c <__eeprom_end+0xff7ef78c>
     1a0:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     1a4:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     1a8:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     1ac:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     1b0:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     1b4:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     1b8:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     1bc:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		#endif
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     1c0:	c0 90 01 3e 	lds	r12, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     1c4:	d0 90 02 3e 	lds	r13, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     1c8:	e0 90 03 3e 	lds	r14, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     1cc:	f0 90 04 3e 	lds	r15, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     1d0:	e1 e8       	ldi	r30, 0x81	; 129
     1d2:	ce 16       	cp	r12, r30
     1d4:	e1 e5       	ldi	r30, 0x51	; 81
     1d6:	de 06       	cpc	r13, r30
     1d8:	e1 e0       	ldi	r30, 0x01	; 1
     1da:	ee 06       	cpc	r14, r30
     1dc:	f1 04       	cpc	r15, r1
     1de:	f8 f0       	brcs	.+62     	; 0x21e <__DATA_REGION_LENGTH__+0x1e>
		{
			double var = (double)BatteryLevelCounter / (double)BAT_FULL_CAPACITY;
     1e0:	a1 d9       	rcall	.-3262   	; 0xfffff524 <__eeprom_end+0xff7ef524>
     1e2:	21 e9       	ldi	r18, 0x91	; 145
     1e4:	39 e7       	ldi	r19, 0x79	; 121
     1e6:	4b e0       	ldi	r20, 0x0B	; 11
     1e8:	50 e5       	ldi	r21, 0x50	; 80
     1ea:	82 d8       	rcall	.-3836   	; 0xfffff2f0 <__eeprom_end+0xff7ef2f0>
			batVar = (uint8_t)(var * 9.0f);
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	40 e1       	ldi	r20, 0x10	; 16
     1f2:	51 e4       	ldi	r21, 0x41	; 65
     1f4:	36 da       	rcall	.-2964   	; 0xfffff662 <__eeprom_end+0xff7ef662>
     1f6:	2a d9       	rcall	.-3500   	; 0xfffff44c <__eeprom_end+0xff7ef44c>
			batVar = batVar > 6 ? 7 : batVar;
     1f8:	68 30       	cpi	r22, 0x08	; 8
     1fa:	08 f0       	brcs	.+2      	; 0x1fe <main+0x144>
     1fc:	67 e0       	ldi	r22, 0x07	; 7
     1fe:	60 93 8a 3e 	sts	0x3E8A, r22	; 0x803e8a <__data_end>
			FLASH_0_write_eeprom_byte(0, batVar);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	1c d6       	rcall	.+3128   	; 0xe40 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     208:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <BatteryLevelCalculateCounter>
     20c:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     210:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     214:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
}

static inline void RSTCTRL_clear_reset_cause(void)
{
	RSTCTRL.RSTFR
	    = RSTCTRL_UPDIRF_bm | RSTCTRL_SWRF_bm | RSTCTRL_WDRF_bm | RSTCTRL_EXTRF_bm | RSTCTRL_BORF_bm | RSTCTRL_PORF_bm;
     218:	8f e3       	ldi	r24, 0x3F	; 63
     21a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <payloadBufferStartByte+0x7f6886>
			RSTCTRL_clear_reset_cause();
		}
		BatteryLevelCalculateCounter++;
     21e:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     222:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     226:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     22a:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	a1 1d       	adc	r26, r1
     232:	b1 1d       	adc	r27, r1
     234:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <BatteryLevelCalculateCounter>
     238:	90 93 02 3e 	sts	0x3E02, r25	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     23c:	a0 93 03 3e 	sts	0x3E03, r26	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     240:	b0 93 04 3e 	sts	0x3E04, r27	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     244:	e4 e1       	ldi	r30, 0x14	; 20
     246:	f4 e0       	ldi	r31, 0x04	; 4
     248:	80 81       	ld	r24, Z
     24a:	88 60       	ori	r24, 0x08	; 8
     24c:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     24e:	e4 e3       	ldi	r30, 0x34	; 52
     250:	f4 e0       	ldi	r31, 0x04	; 4
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     258:	e5 e1       	ldi	r30, 0x15	; 21
     25a:	f4 e0       	ldi	r31, 0x04	; 4
     25c:	80 81       	ld	r24, Z
     25e:	88 60       	ori	r24, 0x08	; 8
     260:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     262:	e5 e3       	ldi	r30, 0x35	; 53
     264:	f4 e0       	ldi	r31, 0x04	; 4
     266:	80 81       	ld	r24, Z
     268:	88 60       	ori	r24, 0x08	; 8
     26a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     26c:	80 b1       	in	r24, 0x00	; 0
     26e:	8f 7e       	andi	r24, 0xEF	; 239
     270:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     272:	84 b1       	in	r24, 0x04	; 4
     274:	8f 7e       	andi	r24, 0xEF	; 239
     276:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     278:	80 b1       	in	r24, 0x00	; 0
     27a:	8f 7d       	andi	r24, 0xDF	; 223
     27c:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     27e:	84 b1       	in	r24, 0x04	; 4
     280:	8f 7d       	andi	r24, 0xDF	; 223
     282:	84 b9       	out	0x04, r24	; 4
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     284:	02 b1       	in	r16, 0x02	; 2
		SB1_set_dir(PORT_DIR_IN);
		SB2_set_dir(PORT_DIR_IN);
		PSD1_set_dir(PORT_DIR_IN);
		PSD2_set_dir(PORT_DIR_IN);
		
		uint8_t In_SB1  = !SB1_get_level();
     286:	02 95       	swap	r16
     288:	0f 70       	andi	r16, 0x0F	; 15
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	08 27       	eor	r16, r24
     28e:	01 70       	andi	r16, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     290:	b6 b0       	in	r11, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     292:	b6 94       	lsr	r11
     294:	b6 94       	lsr	r11
     296:	b6 94       	lsr	r11
     298:	b6 94       	lsr	r11
     29a:	8b 25       	eor	r24, r11
     29c:	81 70       	andi	r24, 0x01	; 1
     29e:	b8 2e       	mov	r11, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     2a0:	82 b1       	in	r24, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
     2a2:	99 24       	eor	r9, r9
     2a4:	93 94       	inc	r9
     2a6:	28 2f       	mov	r18, r24
     2a8:	20 72       	andi	r18, 0x20	; 32
     2aa:	85 fd       	sbrc	r24, 5
     2ac:	91 2c       	mov	r9, r1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     2ae:	86 b1       	in	r24, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
     2b0:	aa 24       	eor	r10, r10
     2b2:	a3 94       	inc	r10
     2b4:	98 2f       	mov	r25, r24
     2b6:	90 72       	andi	r25, 0x20	; 32
     2b8:	85 fd       	sbrc	r24, 5
     2ba:	a1 2c       	mov	r10, r1
		
		if(!In_PSD1)
     2bc:	22 23       	and	r18, r18
     2be:	69 f0       	breq	.+26     	; 0x2da <__DATA_REGION_LENGTH__+0xda>
		{
			QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter++;
     2c0:	ed e0       	ldi	r30, 0x0D	; 13
     2c2:	fe e3       	ldi	r31, 0x3E	; 62
     2c4:	83 81       	ldd	r24, Z+3	; 0x03
     2c6:	8f 5f       	subi	r24, 0xFF	; 255
     2c8:	83 83       	std	Z+3, r24	; 0x03
			if(QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter >= SENSOR_ACTIVITY_DEBONCE)
     2ca:	85 30       	cpi	r24, 0x05	; 5
     2cc:	a8 f0       	brcs	.+42     	; 0x2f8 <__DATA_REGION_LENGTH__+0xf8>
			{
				QTOUCHADC_REFERANCE_FILTER_P[0].Activity = false;
     2ce:	10 82       	st	Z, r1
				QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue = 0;
     2d0:	13 a6       	std	Z+43, r1	; 0x2b
     2d2:	14 a6       	std	Z+44, r1	; 0x2c
     2d4:	15 a6       	std	Z+45, r1	; 0x2d
     2d6:	16 a6       	std	Z+46, r1	; 0x2e
     2d8:	0f c0       	rjmp	.+30     	; 0x2f8 <__DATA_REGION_LENGTH__+0xf8>
			}
		}
		else if(QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter || !QTOUCHADC_REFERANCE_FILTER_P[0].Activity)
     2da:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <QTOUCHADC_REFERANCE_FILTER_P+0x3>
     2de:	81 11       	cpse	r24, r1
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <__DATA_REGION_LENGTH__+0xea>
     2e2:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <QTOUCHADC_REFERANCE_FILTER_P>
     2e6:	81 11       	cpse	r24, r1
     2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <__DATA_REGION_LENGTH__+0xf8>
		{
			QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter = 0;
     2ea:	ed e0       	ldi	r30, 0x0D	; 13
     2ec:	fe e3       	ldi	r31, 0x3E	; 62
     2ee:	13 82       	std	Z+3, r1	; 0x03
			QTOUCHADC_REFERANCE_FILTER_P[0].Activity = true;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 83       	st	Z, r24
			QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate = QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate = true;
     2f4:	80 ab       	std	Z+48, r24	; 0x30
     2f6:	81 83       	std	Z+1, r24	; 0x01
			//QTOUCHADC_REFERANCE_FILTER_P[0].SenseCalibrate = QTOUCHADC_REFERANCE_FILTER_P[1].SenseCalibrate = true;
		}
		
		if(!In_PSD2)
     2f8:	99 23       	and	r25, r25
     2fa:	91 f0       	breq	.+36     	; 0x320 <__DATA_REGION_LENGTH__+0x120>
		{
			QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter++;
     2fc:	ed e0       	ldi	r30, 0x0D	; 13
     2fe:	fe e3       	ldi	r31, 0x3E	; 62
     300:	82 a9       	ldd	r24, Z+50	; 0x32
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	82 ab       	std	Z+50, r24	; 0x32
			if(QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter >= SENSOR_ACTIVITY_DEBONCE)
     306:	85 30       	cpi	r24, 0x05	; 5
     308:	d0 f0       	brcs	.+52     	; 0x33e <__DATA_REGION_LENGTH__+0x13e>
			{
				QTOUCHADC_REFERANCE_FILTER_P[1].Activity = false;
     30a:	10 92 3c 3e 	sts	0x3E3C, r1	; 0x803e3c <QTOUCHADC_REFERANCE_FILTER_P+0x2f>
				QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue = 0;
     30e:	10 92 67 3e 	sts	0x3E67, r1	; 0x803e67 <QTOUCHADC_REFERANCE_FILTER_P+0x5a>
     312:	10 92 68 3e 	sts	0x3E68, r1	; 0x803e68 <QTOUCHADC_REFERANCE_FILTER_P+0x5b>
     316:	10 92 69 3e 	sts	0x3E69, r1	; 0x803e69 <QTOUCHADC_REFERANCE_FILTER_P+0x5c>
     31a:	10 92 6a 3e 	sts	0x3E6A, r1	; 0x803e6a <QTOUCHADC_REFERANCE_FILTER_P+0x5d>
     31e:	0f c0       	rjmp	.+30     	; 0x33e <__DATA_REGION_LENGTH__+0x13e>
			}
		}
		else if(QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter || !QTOUCHADC_REFERANCE_FILTER_P[1].Activity)
     320:	80 91 3f 3e 	lds	r24, 0x3E3F	; 0x803e3f <QTOUCHADC_REFERANCE_FILTER_P+0x32>
     324:	81 11       	cpse	r24, r1
     326:	04 c0       	rjmp	.+8      	; 0x330 <__DATA_REGION_LENGTH__+0x130>
     328:	80 91 3c 3e 	lds	r24, 0x3E3C	; 0x803e3c <QTOUCHADC_REFERANCE_FILTER_P+0x2f>
     32c:	81 11       	cpse	r24, r1
     32e:	07 c0       	rjmp	.+14     	; 0x33e <__DATA_REGION_LENGTH__+0x13e>
		{
			QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter = 0;
     330:	ed e0       	ldi	r30, 0x0D	; 13
     332:	fe e3       	ldi	r31, 0x3E	; 62
     334:	12 aa       	std	Z+50, r1	; 0x32
			QTOUCHADC_REFERANCE_FILTER_P[1].Activity = true;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	87 a7       	std	Z+47, r24	; 0x2f
			QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate = QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate = true;
     33a:	80 ab       	std	Z+48, r24	; 0x30
     33c:	81 83       	std	Z+1, r24	; 0x01
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     33e:	e4 e1       	ldi	r30, 0x14	; 20
     340:	f4 e0       	ldi	r31, 0x04	; 4
     342:	80 81       	ld	r24, Z
     344:	87 7f       	andi	r24, 0xF7	; 247
     346:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     348:	e4 e3       	ldi	r30, 0x34	; 52
     34a:	f4 e0       	ldi	r31, 0x04	; 4
     34c:	80 81       	ld	r24, Z
     34e:	87 7f       	andi	r24, 0xF7	; 247
     350:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     352:	e5 e1       	ldi	r30, 0x15	; 21
     354:	f4 e0       	ldi	r31, 0x04	; 4
     356:	80 81       	ld	r24, Z
     358:	87 7f       	andi	r24, 0xF7	; 247
     35a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     35c:	e5 e3       	ldi	r30, 0x35	; 53
     35e:	f4 e0       	ldi	r31, 0x04	; 4
     360:	80 81       	ld	r24, Z
     362:	87 7f       	andi	r24, 0xF7	; 247
     364:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     366:	81 b1       	in	r24, 0x01	; 1
     368:	8f 7e       	andi	r24, 0xEF	; 239
     36a:	81 b9       	out	0x01, r24	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     36c:	85 b1       	in	r24, 0x05	; 5
     36e:	8f 7e       	andi	r24, 0xEF	; 239
     370:	85 b9       	out	0x05, r24	; 5
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     372:	81 b1       	in	r24, 0x01	; 1
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	81 b9       	out	0x01, r24	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     378:	85 b1       	in	r24, 0x05	; 5
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     37e:	80 b1       	in	r24, 0x00	; 0
     380:	80 61       	ori	r24, 0x10	; 16
     382:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     384:	84 b1       	in	r24, 0x04	; 4
     386:	80 61       	ori	r24, 0x10	; 16
     388:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     38a:	80 b1       	in	r24, 0x00	; 0
     38c:	80 62       	ori	r24, 0x20	; 32
     38e:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     390:	84 b1       	in	r24, 0x04	; 4
     392:	80 62       	ori	r24, 0x20	; 32
     394:	84 b9       	out	0x04, r24	; 4
		SB2_set_dir(PORT_DIR_OUT);
		PSD1_set_dir(PORT_DIR_OUT);
		PSD2_set_dir(PORT_DIR_OUT);
		
		#if B_STYLE == (0)
		QTOUCH_GetSensorValue(0, true);
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	3b d7       	rcall	.+3702   	; 0x1212 <QTOUCH_GetSensorValue>
		
		for(uint8_t j = 0; j < 2; j++)
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	ec c2       	rjmp	.+1496   	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
		{
			if(!QTOUCHADC_REFERANCE_FILTER_P[j].Activity)
     3a0:	c1 2f       	mov	r28, r17
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
     3a4:	8f e2       	ldi	r24, 0x2F	; 47
     3a6:	8c 9f       	mul	r24, r28
     3a8:	f0 01       	movw	r30, r0
     3aa:	8d 9f       	mul	r24, r29
     3ac:	f0 0d       	add	r31, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	e3 5f       	subi	r30, 0xF3	; 243
     3b2:	f1 4c       	sbci	r31, 0xC1	; 193
     3b4:	80 81       	ld	r24, Z
     3b6:	88 23       	and	r24, r24
     3b8:	09 f4       	brne	.+2      	; 0x3bc <__DATA_REGION_LENGTH__+0x1bc>
     3ba:	dd c2       	rjmp	.+1466   	; 0x976 <__LOCK_REGION_LENGTH__+0x576>
				continue;
			
			loopCycle = QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle;
     3bc:	8f e2       	ldi	r24, 0x2F	; 47
     3be:	8c 9f       	mul	r24, r28
     3c0:	f0 01       	movw	r30, r0
     3c2:	8d 9f       	mul	r24, r29
     3c4:	f0 0d       	add	r31, r0
     3c6:	11 24       	eor	r1, r1
     3c8:	e3 5f       	subi	r30, 0xF3	; 243
     3ca:	f1 4c       	sbci	r31, 0xC1	; 193
     3cc:	81 85       	ldd	r24, Z+9	; 0x09
     3ce:	92 85       	ldd	r25, Z+10	; 0x0a
     3d0:	80 93 8f 3e 	sts	0x3E8F, r24	; 0x803e8f <loopCycle>
     3d4:	90 93 90 3e 	sts	0x3E90, r25	; 0x803e90 <loopCycle+0x1>
			QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc = 0;
     3d8:	17 8e       	std	Z+31, r1	; 0x1f
     3da:	10 a2       	std	Z+32, r1	; 0x20
     3dc:	11 a2       	std	Z+33, r1	; 0x21
     3de:	12 a2       	std	Z+34, r1	; 0x22
			while(--loopCycle)
     3e0:	20 c0       	rjmp	.+64     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	81 2f       	mov	r24, r17
     3e6:	15 d7       	rcall	.+3626   	; 0x1212 <QTOUCH_GetSensorValue>
     3e8:	6b 01       	movw	r12, r22
     3ea:	7c 01       	movw	r14, r24
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	81 2f       	mov	r24, r17
     3f0:	10 d7       	rcall	.+3616   	; 0x1212 <QTOUCH_GetSensorValue>
     3f2:	c6 1a       	sub	r12, r22
     3f4:	d7 0a       	sbc	r13, r23
     3f6:	e8 0a       	sbc	r14, r24
     3f8:	f9 0a       	sbc	r15, r25
     3fa:	8f e2       	ldi	r24, 0x2F	; 47
     3fc:	8c 9f       	mul	r24, r28
     3fe:	f0 01       	movw	r30, r0
     400:	8d 9f       	mul	r24, r29
     402:	f0 0d       	add	r31, r0
     404:	11 24       	eor	r1, r1
     406:	e3 5f       	subi	r30, 0xF3	; 243
     408:	f1 4c       	sbci	r31, 0xC1	; 193
     40a:	87 8d       	ldd	r24, Z+31	; 0x1f
     40c:	90 a1       	ldd	r25, Z+32	; 0x20
     40e:	a1 a1       	ldd	r26, Z+33	; 0x21
     410:	b2 a1       	ldd	r27, Z+34	; 0x22
     412:	c8 0e       	add	r12, r24
     414:	d9 1e       	adc	r13, r25
     416:	ea 1e       	adc	r14, r26
     418:	fb 1e       	adc	r15, r27
     41a:	c7 8e       	std	Z+31, r12	; 0x1f
     41c:	d0 a2       	std	Z+32, r13	; 0x20
     41e:	e1 a2       	std	Z+33, r14	; 0x21
     420:	f2 a2       	std	Z+34, r15	; 0x22
			if(!QTOUCHADC_REFERANCE_FILTER_P[j].Activity)
				continue;
			
			loopCycle = QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle;
			QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc = 0;
			while(--loopCycle)
     422:	80 91 8f 3e 	lds	r24, 0x3E8F	; 0x803e8f <loopCycle>
     426:	90 91 90 3e 	lds	r25, 0x3E90	; 0x803e90 <loopCycle+0x1>
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	80 93 8f 3e 	sts	0x3E8F, r24	; 0x803e8f <loopCycle>
     430:	90 93 90 3e 	sts	0x3E90, r25	; 0x803e90 <loopCycle+0x1>
     434:	89 2b       	or	r24, r25
     436:	a9 f6       	brne	.-86     	; 0x3e2 <__DATA_REGION_LENGTH__+0x1e2>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
			}
			
			QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  = (QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  >> QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider) * QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier +
     438:	8f e2       	ldi	r24, 0x2F	; 47
     43a:	8c 9f       	mul	r24, r28
     43c:	f0 01       	movw	r30, r0
     43e:	8d 9f       	mul	r24, r29
     440:	f0 0d       	add	r31, r0
     442:	11 24       	eor	r1, r1
     444:	e3 5f       	subi	r30, 0xF3	; 243
     446:	f1 4c       	sbci	r31, 0xC1	; 193
     448:	83 89       	ldd	r24, Z+19	; 0x13
     44a:	94 89       	ldd	r25, Z+20	; 0x14
     44c:	a5 89       	ldd	r26, Z+21	; 0x15
     44e:	b6 89       	ldd	r27, Z+22	; 0x16
     450:	f7 80       	ldd	r15, Z+7	; 0x07
     452:	9c 01       	movw	r18, r24
     454:	ad 01       	movw	r20, r26
     456:	0f 2c       	mov	r0, r15
     458:	04 c0       	rjmp	.+8      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45a:	56 95       	lsr	r21
     45c:	47 95       	ror	r20
     45e:	37 95       	ror	r19
     460:	27 95       	ror	r18
     462:	0a 94       	dec	r0
     464:	d2 f7       	brpl	.-12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     466:	a0 85       	ldd	r26, Z+8	; 0x08
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	68 d9       	rcall	.-3376   	; 0xfffff73c <__eeprom_end+0xff7ef73c>
														((QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc << SAMPLE_MULTIPLIER) >> (SAMPLE_DIVIDER + QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider));
     46c:	47 8c       	ldd	r4, Z+31	; 0x1f
     46e:	50 a0       	ldd	r5, Z+32	; 0x20
     470:	61 a0       	ldd	r6, Z+33	; 0x21
     472:	72 a0       	ldd	r7, Z+34	; 0x22
     474:	44 0c       	add	r4, r4
     476:	55 1c       	adc	r5, r5
     478:	66 1c       	adc	r6, r6
     47a:	77 1c       	adc	r7, r7
     47c:	a3 01       	movw	r20, r6
     47e:	92 01       	movw	r18, r4
     480:	04 c0       	rjmp	.+8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     482:	56 95       	lsr	r21
     484:	47 95       	ror	r20
     486:	37 95       	ror	r19
     488:	27 95       	ror	r18
     48a:	fa 94       	dec	r15
     48c:	d2 f7       	brpl	.-12     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			while(--loopCycle)
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
			}
			
			QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  = (QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  >> QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider) * QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier +
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	a4 1f       	adc	r26, r20
     498:	b5 1f       	adc	r27, r21
     49a:	83 8b       	std	Z+19, r24	; 0x13
     49c:	94 8b       	std	Z+20, r25	; 0x14
     49e:	a5 8b       	std	Z+21, r26	; 0x15
     4a0:	b6 8b       	std	Z+22, r27	; 0x16
														((QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc << SAMPLE_MULTIPLIER) >> (SAMPLE_DIVIDER + QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider));
			
			QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue - QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine;
     4a2:	c7 84       	ldd	r12, Z+15	; 0x0f
     4a4:	d0 88       	ldd	r13, Z+16	; 0x10
     4a6:	e1 88       	ldd	r14, Z+17	; 0x11
     4a8:	f2 88       	ldd	r15, Z+18	; 0x12
     4aa:	8c 19       	sub	r24, r12
     4ac:	9d 09       	sbc	r25, r13
     4ae:	ae 09       	sbc	r26, r14
     4b0:	bf 09       	sbc	r27, r15
     4b2:	83 a7       	std	Z+43, r24	; 0x2b
     4b4:	94 a7       	std	Z+44, r25	; 0x2c
     4b6:	a5 a7       	std	Z+45, r26	; 0x2d
     4b8:	b6 a7       	std	Z+46, r27	; 0x2e
			
			if(QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue < QTOUCHADC_REFERANCE_FILTER_P[j].NegativeThreshold)
     4ba:	43 a0       	ldd	r4, Z+35	; 0x23
     4bc:	54 a0       	ldd	r5, Z+36	; 0x24
     4be:	65 a0       	ldd	r6, Z+37	; 0x25
     4c0:	76 a0       	ldd	r7, Z+38	; 0x26
     4c2:	84 15       	cp	r24, r4
     4c4:	95 05       	cpc	r25, r5
     4c6:	a6 05       	cpc	r26, r6
     4c8:	b7 05       	cpc	r27, r7
     4ca:	b4 f4       	brge	.+44     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
     4cc:	8f e2       	ldi	r24, 0x2F	; 47
     4ce:	8c 9f       	mul	r24, r28
     4d0:	f0 01       	movw	r30, r0
     4d2:	8d 9f       	mul	r24, r29
     4d4:	f0 0d       	add	r31, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	e3 5f       	subi	r30, 0xF3	; 243
     4da:	f1 4c       	sbci	r31, 0xC1	; 193
     4dc:	83 89       	ldd	r24, Z+19	; 0x13
     4de:	94 89       	ldd	r25, Z+20	; 0x14
     4e0:	a5 89       	ldd	r26, Z+21	; 0x15
     4e2:	b6 89       	ldd	r27, Z+22	; 0x16
     4e4:	87 87       	std	Z+15, r24	; 0x0f
     4e6:	90 8b       	std	Z+16, r25	; 0x10
     4e8:	a1 8b       	std	Z+17, r26	; 0x11
     4ea:	b2 8b       	std	Z+18, r27	; 0x12
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter = 0;
     4ec:	15 82       	std	Z+5, r1	; 0x05
				QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = 0;
     4ee:	13 a6       	std	Z+43, r1	; 0x2b
     4f0:	14 a6       	std	Z+44, r1	; 0x2c
     4f2:	15 a6       	std	Z+45, r1	; 0x2d
     4f4:	16 a6       	std	Z+46, r1	; 0x2e
     4f6:	d6 c1       	rjmp	.+940    	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
			}
			else if(!QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate)
     4f8:	2f e2       	ldi	r18, 0x2F	; 47
     4fa:	2c 9f       	mul	r18, r28
     4fc:	f0 01       	movw	r30, r0
     4fe:	2d 9f       	mul	r18, r29
     500:	f0 0d       	add	r31, r0
     502:	11 24       	eor	r1, r1
     504:	e3 5f       	subi	r30, 0xF3	; 243
     506:	f1 4c       	sbci	r31, 0xC1	; 193
     508:	21 81       	ldd	r18, Z+1	; 0x01
     50a:	21 11       	cpse	r18, r1
     50c:	4a c1       	rjmp	.+660    	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
			{					
				QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue = (QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue < QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue) && (QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue > 0) ? QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue : QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue;
     50e:	2f e2       	ldi	r18, 0x2F	; 47
     510:	2c 9f       	mul	r18, r28
     512:	f0 01       	movw	r30, r0
     514:	2d 9f       	mul	r18, r29
     516:	f0 0d       	add	r31, r0
     518:	11 24       	eor	r1, r1
     51a:	e3 5f       	subi	r30, 0xF3	; 243
     51c:	f1 4c       	sbci	r31, 0xC1	; 193
     51e:	43 84       	ldd	r4, Z+11	; 0x0b
     520:	54 84       	ldd	r5, Z+12	; 0x0c
     522:	65 84       	ldd	r6, Z+13	; 0x0d
     524:	76 84       	ldd	r7, Z+14	; 0x0e
     526:	48 16       	cp	r4, r24
     528:	59 06       	cpc	r5, r25
     52a:	6a 06       	cpc	r6, r26
     52c:	7b 06       	cpc	r7, r27
     52e:	38 f4       	brcc	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     530:	18 16       	cp	r1, r24
     532:	19 06       	cpc	r1, r25
     534:	1a 06       	cpc	r1, r26
     536:	1b 06       	cpc	r1, r27
     538:	14 f4       	brge	.+4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53a:	2c 01       	movw	r4, r24
     53c:	3d 01       	movw	r6, r26
     53e:	8f e2       	ldi	r24, 0x2F	; 47
     540:	8c 9f       	mul	r24, r28
     542:	f0 01       	movw	r30, r0
     544:	8d 9f       	mul	r24, r29
     546:	f0 0d       	add	r31, r0
     548:	11 24       	eor	r1, r1
     54a:	e3 5f       	subi	r30, 0xF3	; 243
     54c:	f1 4c       	sbci	r31, 0xC1	; 193
     54e:	43 86       	std	Z+11, r4	; 0x0b
     550:	54 86       	std	Z+12, r5	; 0x0c
     552:	65 86       	std	Z+13, r6	; 0x0d
     554:	76 86       	std	Z+14, r7	; 0x0e
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter += QTOUCHADC_REFERANCE_FILTER_P[j].Counter < QTOUCHADC_REFERANCE_FILTER_P[j].CounterLimit ? 1 : -QTOUCHADC_REFERANCE_FILTER_P[j].Counter;
     556:	85 81       	ldd	r24, Z+5	; 0x05
     558:	96 81       	ldd	r25, Z+6	; 0x06
     55a:	89 17       	cp	r24, r25
     55c:	18 f0       	brcs	.+6      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     55e:	98 2f       	mov	r25, r24
     560:	91 95       	neg	r25
     562:	01 c0       	rjmp	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	89 0f       	add	r24, r25
     568:	9f e2       	ldi	r25, 0x2F	; 47
     56a:	9c 9f       	mul	r25, r28
     56c:	f0 01       	movw	r30, r0
     56e:	9d 9f       	mul	r25, r29
     570:	f0 0d       	add	r31, r0
     572:	11 24       	eor	r1, r1
     574:	e3 5f       	subi	r30, 0xF3	; 243
     576:	f1 4c       	sbci	r31, 0xC1	; 193
     578:	85 83       	std	Z+5, r24	; 0x05
				if (QTOUCHADC_REFERANCE_FILTER_P[j].Counter == 0 && QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue < QTOUCHADC_REFERANCE_FILTER_P[j].FilterValue)
     57a:	81 11       	cpse	r24, r1
     57c:	2d c0       	rjmp	.+90     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     57e:	8f e2       	ldi	r24, 0x2F	; 47
     580:	8c 9f       	mul	r24, r28
     582:	f0 01       	movw	r30, r0
     584:	8d 9f       	mul	r24, r29
     586:	f0 0d       	add	r31, r0
     588:	11 24       	eor	r1, r1
     58a:	e3 5f       	subi	r30, 0xF3	; 243
     58c:	f1 4c       	sbci	r31, 0xC1	; 193
     58e:	43 85       	ldd	r20, Z+11	; 0x0b
     590:	54 85       	ldd	r21, Z+12	; 0x0c
     592:	65 85       	ldd	r22, Z+13	; 0x0d
     594:	76 85       	ldd	r23, Z+14	; 0x0e
     596:	87 a1       	ldd	r24, Z+39	; 0x27
     598:	90 a5       	ldd	r25, Z+40	; 0x28
     59a:	a1 a5       	ldd	r26, Z+41	; 0x29
     59c:	b2 a5       	ldd	r27, Z+42	; 0x2a
     59e:	48 17       	cp	r20, r24
     5a0:	59 07       	cpc	r21, r25
     5a2:	6a 07       	cpc	r22, r26
     5a4:	7b 07       	cpc	r23, r27
     5a6:	c0 f4       	brcc	.+48     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
				{
					QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue + QTOUCHADC_REFERANCE_FILTER_P[j].FilterValue;
     5a8:	2f e2       	ldi	r18, 0x2F	; 47
     5aa:	2c 9f       	mul	r18, r28
     5ac:	f0 01       	movw	r30, r0
     5ae:	2d 9f       	mul	r18, r29
     5b0:	f0 0d       	add	r31, r0
     5b2:	11 24       	eor	r1, r1
     5b4:	e3 5f       	subi	r30, 0xF3	; 243
     5b6:	f1 4c       	sbci	r31, 0xC1	; 193
     5b8:	43 89       	ldd	r20, Z+19	; 0x13
     5ba:	54 89       	ldd	r21, Z+20	; 0x14
     5bc:	65 89       	ldd	r22, Z+21	; 0x15
     5be:	76 89       	ldd	r23, Z+22	; 0x16
     5c0:	84 0f       	add	r24, r20
     5c2:	95 1f       	adc	r25, r21
     5c4:	a6 1f       	adc	r26, r22
     5c6:	b7 1f       	adc	r27, r23
     5c8:	87 87       	std	Z+15, r24	; 0x0f
     5ca:	90 8b       	std	Z+16, r25	; 0x10
     5cc:	a1 8b       	std	Z+17, r26	; 0x11
     5ce:	b2 8b       	std	Z+18, r27	; 0x12
					QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = 0;
     5d0:	13 a6       	std	Z+43, r1	; 0x2b
     5d2:	14 a6       	std	Z+44, r1	; 0x2c
     5d4:	15 a6       	std	Z+45, r1	; 0x2d
     5d6:	16 a6       	std	Z+46, r1	; 0x2e
				}
				if (QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrate && QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue > DEFAULT_SENSE_CALIBRATION_THRESHOLD)
     5d8:	8f e2       	ldi	r24, 0x2F	; 47
     5da:	8c 9f       	mul	r24, r28
     5dc:	f0 01       	movw	r30, r0
     5de:	8d 9f       	mul	r24, r29
     5e0:	f0 0d       	add	r31, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	e3 5f       	subi	r30, 0xF3	; 243
     5e6:	f1 4c       	sbci	r31, 0xC1	; 193
     5e8:	82 81       	ldd	r24, Z+2	; 0x02
     5ea:	88 23       	and	r24, r24
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5ee:	a1 c0       	rjmp	.+322    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     5f0:	9f e2       	ldi	r25, 0x2F	; 47
     5f2:	9c 9f       	mul	r25, r28
     5f4:	f0 01       	movw	r30, r0
     5f6:	9d 9f       	mul	r25, r29
     5f8:	f0 0d       	add	r31, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	e3 5f       	subi	r30, 0xF3	; 243
     5fe:	f1 4c       	sbci	r31, 0xC1	; 193
     600:	43 a5       	ldd	r20, Z+43	; 0x2b
     602:	54 a5       	ldd	r21, Z+44	; 0x2c
     604:	65 a5       	ldd	r22, Z+45	; 0x2d
     606:	76 a5       	ldd	r23, Z+46	; 0x2e
     608:	45 36       	cpi	r20, 0x65	; 101
     60a:	51 05       	cpc	r21, r1
     60c:	61 05       	cpc	r22, r1
     60e:	71 05       	cpc	r23, r1
     610:	0c f4       	brge	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     612:	8f c0       	rjmp	.+286    	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
				{
					if(QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue > DEFAULT_SENSE_CALIBRATION_THRESHOLD || QTOUCHADC_REFERANCE_FILTER_P[j].MaxRawValue != 0)
     614:	8f e2       	ldi	r24, 0x2F	; 47
     616:	8c 9f       	mul	r24, r28
     618:	f0 01       	movw	r30, r0
     61a:	8d 9f       	mul	r24, r29
     61c:	f0 0d       	add	r31, r0
     61e:	11 24       	eor	r1, r1
     620:	e3 5f       	subi	r30, 0xF3	; 243
     622:	f1 4c       	sbci	r31, 0xC1	; 193
     624:	83 85       	ldd	r24, Z+11	; 0x0b
     626:	94 85       	ldd	r25, Z+12	; 0x0c
     628:	a5 85       	ldd	r26, Z+13	; 0x0d
     62a:	b6 85       	ldd	r27, Z+14	; 0x0e
     62c:	85 36       	cpi	r24, 0x65	; 101
     62e:	91 05       	cpc	r25, r1
     630:	a1 05       	cpc	r26, r1
     632:	b1 05       	cpc	r27, r1
     634:	88 f4       	brcc	.+34     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     636:	2f e2       	ldi	r18, 0x2F	; 47
     638:	2c 9f       	mul	r18, r28
     63a:	f0 01       	movw	r30, r0
     63c:	2d 9f       	mul	r18, r29
     63e:	f0 0d       	add	r31, r0
     640:	11 24       	eor	r1, r1
     642:	e3 5f       	subi	r30, 0xF3	; 243
     644:	f1 4c       	sbci	r31, 0xC1	; 193
     646:	43 8d       	ldd	r20, Z+27	; 0x1b
     648:	54 8d       	ldd	r21, Z+28	; 0x1c
     64a:	65 8d       	ldd	r22, Z+29	; 0x1d
     64c:	76 8d       	ldd	r23, Z+30	; 0x1e
     64e:	45 2b       	or	r20, r21
     650:	46 2b       	or	r20, r22
     652:	47 2b       	or	r20, r23
     654:	09 f4       	brne	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     656:	7d c0       	rjmp	.+250    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
					{
						if(QTOUCHADC_REFERANCE_FILTER_P[j].MaxRawValue < QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue)
     658:	2f e2       	ldi	r18, 0x2F	; 47
     65a:	2c 9f       	mul	r18, r28
     65c:	f0 01       	movw	r30, r0
     65e:	2d 9f       	mul	r18, r29
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	e3 5f       	subi	r30, 0xF3	; 243
     666:	f1 4c       	sbci	r31, 0xC1	; 193
     668:	43 8d       	ldd	r20, Z+27	; 0x1b
     66a:	54 8d       	ldd	r21, Z+28	; 0x1c
     66c:	65 8d       	ldd	r22, Z+29	; 0x1d
     66e:	76 8d       	ldd	r23, Z+30	; 0x1e
     670:	48 17       	cp	r20, r24
     672:	59 07       	cpc	r21, r25
     674:	6a 07       	cpc	r22, r26
     676:	7b 07       	cpc	r23, r27
     678:	70 f4       	brcc	.+28     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
						{
							QTOUCHADC_REFERANCE_FILTER_P[j].MaxRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue;
     67a:	2c 9f       	mul	r18, r28
     67c:	f0 01       	movw	r30, r0
     67e:	2d 9f       	mul	r18, r29
     680:	f0 0d       	add	r31, r0
     682:	11 24       	eor	r1, r1
     684:	e3 5f       	subi	r30, 0xF3	; 243
     686:	f1 4c       	sbci	r31, 0xC1	; 193
     688:	83 8f       	std	Z+27, r24	; 0x1b
     68a:	94 8f       	std	Z+28, r25	; 0x1c
     68c:	a5 8f       	std	Z+29, r26	; 0x1d
     68e:	b6 8f       	std	Z+30, r27	; 0x1e
							QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrateCounter = SENSE_CALIBRATION_COUNT;
     690:	8c e0       	ldi	r24, 0x0C	; 12
     692:	84 83       	std	Z+4, r24	; 0x04
     694:	5e c0       	rjmp	.+188    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
						}
						else if(QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrateCounter)
     696:	8f e2       	ldi	r24, 0x2F	; 47
     698:	8c 9f       	mul	r24, r28
     69a:	f0 01       	movw	r30, r0
     69c:	8d 9f       	mul	r24, r29
     69e:	f0 0d       	add	r31, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	e3 5f       	subi	r30, 0xF3	; 243
     6a4:	f1 4c       	sbci	r31, 0xC1	; 193
     6a6:	84 81       	ldd	r24, Z+4	; 0x04
     6a8:	88 23       	and	r24, r24
     6aa:	09 f4       	brne	.+2      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     6ac:	52 c0       	rjmp	.+164    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
						{
							QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrateCounter--;
     6ae:	81 50       	subi	r24, 0x01	; 1
     6b0:	9f e2       	ldi	r25, 0x2F	; 47
     6b2:	9c 9f       	mul	r25, r28
     6b4:	f0 01       	movw	r30, r0
     6b6:	9d 9f       	mul	r25, r29
     6b8:	f0 0d       	add	r31, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	e3 5f       	subi	r30, 0xF3	; 243
     6be:	f1 4c       	sbci	r31, 0xC1	; 193
     6c0:	84 83       	std	Z+4, r24	; 0x04
							if(!QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrateCounter)
     6c2:	81 11       	cpse	r24, r1
     6c4:	46 c0       	rjmp	.+140    	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
							{
								float temp = QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle;
     6c6:	0f 2e       	mov	r0, r31
     6c8:	fd e0       	ldi	r31, 0x0D	; 13
     6ca:	ef 2e       	mov	r14, r31
     6cc:	fe e3       	ldi	r31, 0x3E	; 62
     6ce:	ff 2e       	mov	r15, r31
     6d0:	f0 2d       	mov	r31, r0
     6d2:	6f 01       	movw	r12, r30
     6d4:	61 85       	ldd	r22, Z+9	; 0x09
     6d6:	72 85       	ldd	r23, Z+10	; 0x0a
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	e6 d6       	rcall	.+3532   	; 0x14aa <__floatunsisf>
								QTOUCHADC_REFERANCE_FILTER_P[0].LoopCycle		= QTOUCHADC_REFERANCE_FILTER_P[1].LoopCycle = (uint16_t)((temp * (float)DEFAULT_SENSE_CALIBRATION_THRESHOLD) / (QTOUCHADC_REFERANCE_FILTER_P[j].MaxRawValue));
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	48 ec       	ldi	r20, 0xC8	; 200
     6e4:	52 e4       	ldi	r21, 0x42	; 66
     6e6:	bd d7       	rcall	.+3962   	; 0x1662 <__mulsf3>
     6e8:	2b 01       	movw	r4, r22
     6ea:	3c 01       	movw	r6, r24
     6ec:	f6 01       	movw	r30, r12
     6ee:	63 8d       	ldd	r22, Z+27	; 0x1b
     6f0:	74 8d       	ldd	r23, Z+28	; 0x1c
     6f2:	85 8d       	ldd	r24, Z+29	; 0x1d
     6f4:	96 8d       	ldd	r25, Z+30	; 0x1e
     6f6:	d9 d6       	rcall	.+3506   	; 0x14aa <__floatunsisf>
     6f8:	9b 01       	movw	r18, r22
     6fa:	ac 01       	movw	r20, r24
     6fc:	c3 01       	movw	r24, r6
     6fe:	b2 01       	movw	r22, r4
     700:	f7 d5       	rcall	.+3054   	; 0x12f0 <__divsf3>
     702:	a4 d6       	rcall	.+3400   	; 0x144c <__fixunssfsi>
     704:	f7 01       	movw	r30, r14
     706:	60 af       	std	Z+56, r22	; 0x38
     708:	71 af       	std	Z+57, r23	; 0x39
     70a:	61 87       	std	Z+9, r22	; 0x09
     70c:	72 87       	std	Z+10, r23	; 0x0a
								QTOUCHADC_REFERANCE_FILTER_P[0].SenseCalibrate	= QTOUCHADC_REFERANCE_FILTER_P[1].SenseCalibrate = false;
     70e:	11 aa       	std	Z+49, r1	; 0x31
     710:	12 82       	std	Z+2, r1	; 0x02
								QTOUCHADC_REFERANCE_FILTER_P[0].MaxRawValue		= QTOUCHADC_REFERANCE_FILTER_P[1].MaxRawValue = 0;
     712:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <QTOUCHADC_REFERANCE_FILTER_P+0x4a>
     716:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <QTOUCHADC_REFERANCE_FILTER_P+0x4b>
     71a:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <QTOUCHADC_REFERANCE_FILTER_P+0x4c>
     71e:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <QTOUCHADC_REFERANCE_FILTER_P+0x4d>
     722:	13 8e       	std	Z+27, r1	; 0x1b
     724:	14 8e       	std	Z+28, r1	; 0x1c
     726:	15 8e       	std	Z+29, r1	; 0x1d
     728:	16 8e       	std	Z+30, r1	; 0x1e
								QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate		= QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate = true;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 ab       	std	Z+48, r24	; 0x30
     72e:	81 83       	std	Z+1, r24	; 0x01
     730:	10 c0       	rjmp	.+32     	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
							}
						}
					}
				}
				else if(QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrate)
     732:	88 23       	and	r24, r24
     734:	71 f0       	breq	.+28     	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
				{
					QTOUCHADC_REFERANCE_FILTER_P[j].MaxRawValue = 0;
     736:	8f e2       	ldi	r24, 0x2F	; 47
     738:	8c 9f       	mul	r24, r28
     73a:	f0 01       	movw	r30, r0
     73c:	8d 9f       	mul	r24, r29
     73e:	f0 0d       	add	r31, r0
     740:	11 24       	eor	r1, r1
     742:	e3 5f       	subi	r30, 0xF3	; 243
     744:	f1 4c       	sbci	r31, 0xC1	; 193
     746:	13 8e       	std	Z+27, r1	; 0x1b
     748:	14 8e       	std	Z+28, r1	; 0x1c
     74a:	15 8e       	std	Z+29, r1	; 0x1d
     74c:	16 8e       	std	Z+30, r1	; 0x1e
					QTOUCHADC_REFERANCE_FILTER_P[j].SenseCalibrateCounter = SENSE_CALIBRATION_COUNT;
     74e:	8c e0       	ldi	r24, 0x0C	; 12
     750:	84 83       	std	Z+4, r24	; 0x04
				}
				QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue = QTOUCHADC_REFERANCE_FILTER_P[j].Counter == 0 ? 0 : QTOUCHADC_REFERANCE_FILTER_P[j].PeakValue;
     752:	8f e2       	ldi	r24, 0x2F	; 47
     754:	8c 9f       	mul	r24, r28
     756:	f0 01       	movw	r30, r0
     758:	8d 9f       	mul	r24, r29
     75a:	f0 0d       	add	r31, r0
     75c:	11 24       	eor	r1, r1
     75e:	e3 5f       	subi	r30, 0xF3	; 243
     760:	f1 4c       	sbci	r31, 0xC1	; 193
     762:	85 81       	ldd	r24, Z+5	; 0x05
     764:	88 23       	and	r24, r24
     766:	69 f0       	breq	.+26     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     768:	8f e2       	ldi	r24, 0x2F	; 47
     76a:	8c 9f       	mul	r24, r28
     76c:	f0 01       	movw	r30, r0
     76e:	8d 9f       	mul	r24, r29
     770:	f0 0d       	add	r31, r0
     772:	11 24       	eor	r1, r1
     774:	e3 5f       	subi	r30, 0xF3	; 243
     776:	f1 4c       	sbci	r31, 0xC1	; 193
     778:	83 85       	ldd	r24, Z+11	; 0x0b
     77a:	94 85       	ldd	r25, Z+12	; 0x0c
     77c:	a5 85       	ldd	r26, Z+13	; 0x0d
     77e:	b6 85       	ldd	r27, Z+14	; 0x0e
     780:	03 c0       	rjmp	.+6      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	dc 01       	movw	r26, r24
     788:	2f e2       	ldi	r18, 0x2F	; 47
     78a:	2c 9f       	mul	r18, r28
     78c:	f0 01       	movw	r30, r0
     78e:	2d 9f       	mul	r18, r29
     790:	f0 0d       	add	r31, r0
     792:	11 24       	eor	r1, r1
     794:	e3 5f       	subi	r30, 0xF3	; 243
     796:	f1 4c       	sbci	r31, 0xC1	; 193
     798:	83 87       	std	Z+11, r24	; 0x0b
     79a:	94 87       	std	Z+12, r25	; 0x0c
     79c:	a5 87       	std	Z+13, r26	; 0x0d
     79e:	b6 87       	std	Z+14, r27	; 0x0e
     7a0:	81 c0       	rjmp	.+258    	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
			}
			else
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine = QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue >= QTOUCHADC_REFERANCE_FILTER_P[j].NegativeThreshold ? QTOUCHADC_REFERANCE_FILTER_P[j].RawValue : QTOUCHADC_REFERANCE_FILTER_P[j].BaseLine;
     7a2:	84 15       	cp	r24, r4
     7a4:	95 05       	cpc	r25, r5
     7a6:	a6 05       	cpc	r26, r6
     7a8:	b7 05       	cpc	r27, r7
     7aa:	6c f0       	brlt	.+26     	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     7ac:	8f e2       	ldi	r24, 0x2F	; 47
     7ae:	8c 9f       	mul	r24, r28
     7b0:	f0 01       	movw	r30, r0
     7b2:	8d 9f       	mul	r24, r29
     7b4:	f0 0d       	add	r31, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	e3 5f       	subi	r30, 0xF3	; 243
     7ba:	f1 4c       	sbci	r31, 0xC1	; 193
     7bc:	83 89       	ldd	r24, Z+19	; 0x13
     7be:	94 89       	ldd	r25, Z+20	; 0x14
     7c0:	a5 89       	ldd	r26, Z+21	; 0x15
     7c2:	b6 89       	ldd	r27, Z+22	; 0x16
     7c4:	0c c0       	rjmp	.+24     	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
     7c6:	8f e2       	ldi	r24, 0x2F	; 47
     7c8:	8c 9f       	mul	r24, r28
     7ca:	f0 01       	movw	r30, r0
     7cc:	8d 9f       	mul	r24, r29
     7ce:	f0 0d       	add	r31, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	e3 5f       	subi	r30, 0xF3	; 243
     7d4:	f1 4c       	sbci	r31, 0xC1	; 193
     7d6:	87 85       	ldd	r24, Z+15	; 0x0f
     7d8:	90 89       	ldd	r25, Z+16	; 0x10
     7da:	a1 89       	ldd	r26, Z+17	; 0x11
     7dc:	b2 89       	ldd	r27, Z+18	; 0x12
     7de:	2f e2       	ldi	r18, 0x2F	; 47
     7e0:	2c 9f       	mul	r18, r28
     7e2:	f0 01       	movw	r30, r0
     7e4:	2d 9f       	mul	r18, r29
     7e6:	f0 0d       	add	r31, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	e3 5f       	subi	r30, 0xF3	; 243
     7ec:	f1 4c       	sbci	r31, 0xC1	; 193
     7ee:	87 87       	std	Z+15, r24	; 0x0f
     7f0:	90 8b       	std	Z+16, r25	; 0x10
     7f2:	a1 8b       	std	Z+17, r26	; 0x11
     7f4:	b2 8b       	std	Z+18, r27	; 0x12
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter += (QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue <= 0 && QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue >= QTOUCHADC_REFERANCE_FILTER_P[j].NegativeThreshold) ? 1 : -QTOUCHADC_REFERANCE_FILTER_P[j].Counter;
     7f6:	85 81       	ldd	r24, Z+5	; 0x05
     7f8:	43 a5       	ldd	r20, Z+43	; 0x2b
     7fa:	54 a5       	ldd	r21, Z+44	; 0x2c
     7fc:	65 a5       	ldd	r22, Z+45	; 0x2d
     7fe:	76 a5       	ldd	r23, Z+46	; 0x2e
     800:	14 16       	cp	r1, r20
     802:	15 06       	cpc	r1, r21
     804:	16 06       	cpc	r1, r22
     806:	17 06       	cpc	r1, r23
     808:	8c f0       	brlt	.+34     	; 0x82c <__LOCK_REGION_LENGTH__+0x42c>
     80a:	9f e2       	ldi	r25, 0x2F	; 47
     80c:	9c 9f       	mul	r25, r28
     80e:	f0 01       	movw	r30, r0
     810:	9d 9f       	mul	r25, r29
     812:	f0 0d       	add	r31, r0
     814:	11 24       	eor	r1, r1
     816:	e3 5f       	subi	r30, 0xF3	; 243
     818:	f1 4c       	sbci	r31, 0xC1	; 193
     81a:	c3 a0       	ldd	r12, Z+35	; 0x23
     81c:	d4 a0       	ldd	r13, Z+36	; 0x24
     81e:	e5 a0       	ldd	r14, Z+37	; 0x25
     820:	f6 a0       	ldd	r15, Z+38	; 0x26
     822:	4c 15       	cp	r20, r12
     824:	5d 05       	cpc	r21, r13
     826:	6e 05       	cpc	r22, r14
     828:	7f 05       	cpc	r23, r15
     82a:	1c f4       	brge	.+6      	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
     82c:	98 2f       	mov	r25, r24
     82e:	91 95       	neg	r25
     830:	01 c0       	rjmp	.+2      	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	89 0f       	add	r24, r25
     836:	9f e2       	ldi	r25, 0x2F	; 47
     838:	9c 9f       	mul	r25, r28
     83a:	f0 01       	movw	r30, r0
     83c:	9d 9f       	mul	r25, r29
     83e:	f0 0d       	add	r31, r0
     840:	11 24       	eor	r1, r1
     842:	e3 5f       	subi	r30, 0xF3	; 243
     844:	f1 4c       	sbci	r31, 0xC1	; 193
     846:	85 83       	std	Z+5, r24	; 0x05
				QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate = QTOUCHADC_REFERANCE_FILTER_P[j].Counter > (QTOUCHADC_REFERANCE_FILTER_P[j].CounterLimit >> 1) ? false : QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate;
     848:	96 81       	ldd	r25, Z+6	; 0x06
     84a:	96 95       	lsr	r25
     84c:	98 17       	cp	r25, r24
     84e:	50 f0       	brcs	.+20     	; 0x864 <__LOCK_REGION_LENGTH__+0x464>
     850:	8f e2       	ldi	r24, 0x2F	; 47
     852:	8c 9f       	mul	r24, r28
     854:	f0 01       	movw	r30, r0
     856:	8d 9f       	mul	r24, r29
     858:	f0 0d       	add	r31, r0
     85a:	11 24       	eor	r1, r1
     85c:	e3 5f       	subi	r30, 0xF3	; 243
     85e:	f1 4c       	sbci	r31, 0xC1	; 193
     860:	81 81       	ldd	r24, Z+1	; 0x01
     862:	01 c0       	rjmp	.+2      	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	9f e2       	ldi	r25, 0x2F	; 47
     868:	9c 9f       	mul	r25, r28
     86a:	f0 01       	movw	r30, r0
     86c:	9d 9f       	mul	r25, r29
     86e:	f0 0d       	add	r31, r0
     870:	11 24       	eor	r1, r1
     872:	e3 5f       	subi	r30, 0xF3	; 243
     874:	f1 4c       	sbci	r31, 0xC1	; 193
     876:	81 83       	std	Z+1, r24	; 0x01
				QTOUCHADC_REFERANCE_FILTER_P[j].Counter = QTOUCHADC_REFERANCE_FILTER_P[j].Calibrate == false ? 0 : QTOUCHADC_REFERANCE_FILTER_P[j].Counter;
     878:	88 23       	and	r24, r24
     87a:	51 f0       	breq	.+20     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     87c:	8f e2       	ldi	r24, 0x2F	; 47
     87e:	8c 9f       	mul	r24, r28
     880:	f0 01       	movw	r30, r0
     882:	8d 9f       	mul	r24, r29
     884:	f0 0d       	add	r31, r0
     886:	11 24       	eor	r1, r1
     888:	e3 5f       	subi	r30, 0xF3	; 243
     88a:	f1 4c       	sbci	r31, 0xC1	; 193
     88c:	85 81       	ldd	r24, Z+5	; 0x05
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	9f e2       	ldi	r25, 0x2F	; 47
     894:	9c 9f       	mul	r25, r28
     896:	f0 01       	movw	r30, r0
     898:	9d 9f       	mul	r25, r29
     89a:	f0 0d       	add	r31, r0
     89c:	11 24       	eor	r1, r1
     89e:	e3 5f       	subi	r30, 0xF3	; 243
     8a0:	f1 4c       	sbci	r31, 0xC1	; 193
     8a2:	85 83       	std	Z+5, r24	; 0x05
			}
			QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue = QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue < 0 ? 0 : QTOUCHADC_REFERANCE_FILTER_P[j].CurrentValue;//QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle;//
     8a4:	8f e2       	ldi	r24, 0x2F	; 47
     8a6:	8c 9f       	mul	r24, r28
     8a8:	f0 01       	movw	r30, r0
     8aa:	8d 9f       	mul	r24, r29
     8ac:	f0 0d       	add	r31, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	e3 5f       	subi	r30, 0xF3	; 243
     8b2:	f1 4c       	sbci	r31, 0xC1	; 193
     8b4:	83 a5       	ldd	r24, Z+43	; 0x2b
     8b6:	94 a5       	ldd	r25, Z+44	; 0x2c
     8b8:	a5 a5       	ldd	r26, Z+45	; 0x2d
     8ba:	b6 a5       	ldd	r27, Z+46	; 0x2e
     8bc:	bb 23       	and	r27, r27
     8be:	1c f4       	brge	.+6      	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	dc 01       	movw	r26, r24
     8c6:	2f e2       	ldi	r18, 0x2F	; 47
     8c8:	2c 9f       	mul	r18, r28
     8ca:	f0 01       	movw	r30, r0
     8cc:	2d 9f       	mul	r18, r29
     8ce:	f0 0d       	add	r31, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	e3 5f       	subi	r30, 0xF3	; 243
     8d4:	f1 4c       	sbci	r31, 0xC1	; 193
     8d6:	83 a7       	std	Z+43, r24	; 0x2b
     8d8:	94 a7       	std	Z+44, r25	; 0x2c
     8da:	a5 a7       	std	Z+45, r26	; 0x2d
     8dc:	b6 a7       	std	Z+46, r27	; 0x2e
			
			if(QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue > DATA_CHANGE_CONSTANT)
     8de:	87 89       	ldd	r24, Z+23	; 0x17
     8e0:	90 8d       	ldd	r25, Z+24	; 0x18
     8e2:	a1 8d       	ldd	r26, Z+25	; 0x19
     8e4:	b2 8d       	ldd	r27, Z+26	; 0x1a
     8e6:	86 30       	cpi	r24, 0x06	; 6
     8e8:	91 05       	cpc	r25, r1
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	98 f1       	brcs	.+102    	; 0x956 <__LOCK_REGION_LENGTH__+0x556>
			{
				isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[j].RawValue > (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue + DATA_CHANGE_CONSTANT) || QTOUCHADC_REFERANCE_FILTER_P[j].RawValue < (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue - DATA_CHANGE_CONSTANT);
     8f0:	20 91 8b 3e 	lds	r18, 0x3E8B	; 0x803e8b <isDataChanged>
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	4f e2       	ldi	r20, 0x2F	; 47
     8f8:	4c 9f       	mul	r20, r28
     8fa:	f0 01       	movw	r30, r0
     8fc:	4d 9f       	mul	r20, r29
     8fe:	f0 0d       	add	r31, r0
     900:	11 24       	eor	r1, r1
     902:	e3 5f       	subi	r30, 0xF3	; 243
     904:	f1 4c       	sbci	r31, 0xC1	; 193
     906:	43 89       	ldd	r20, Z+19	; 0x13
     908:	54 89       	ldd	r21, Z+20	; 0x14
     90a:	65 89       	ldd	r22, Z+21	; 0x15
     90c:	76 89       	ldd	r23, Z+22	; 0x16
     90e:	6c 01       	movw	r12, r24
     910:	7d 01       	movw	r14, r26
     912:	f5 e0       	ldi	r31, 0x05	; 5
     914:	cf 0e       	add	r12, r31
     916:	d1 1c       	adc	r13, r1
     918:	e1 1c       	adc	r14, r1
     91a:	f1 1c       	adc	r15, r1
     91c:	c4 16       	cp	r12, r20
     91e:	d5 06       	cpc	r13, r21
     920:	e6 06       	cpc	r14, r22
     922:	f7 06       	cpc	r15, r23
     924:	58 f0       	brcs	.+22     	; 0x93c <__LOCK_REGION_LENGTH__+0x53c>
     926:	05 97       	sbiw	r24, 0x05	; 5
     928:	a1 09       	sbc	r26, r1
     92a:	b1 09       	sbc	r27, r1
     92c:	48 17       	cp	r20, r24
     92e:	59 07       	cpc	r21, r25
     930:	6a 07       	cpc	r22, r26
     932:	7b 07       	cpc	r23, r27
     934:	30 f4       	brcc	.+12     	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	05 c0       	rjmp	.+10     	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	02 c0       	rjmp	.+4      	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	28 2b       	or	r18, r24
     948:	39 2b       	or	r19, r25
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	23 2b       	or	r18, r19
     94e:	09 f4       	brne	.+2      	; 0x952 <__LOCK_REGION_LENGTH__+0x552>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	80 93 8b 3e 	sts	0x3E8B, r24	; 0x803e8b <isDataChanged>
			}
			QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
     956:	8f e2       	ldi	r24, 0x2F	; 47
     958:	8c 9f       	mul	r24, r28
     95a:	f0 01       	movw	r30, r0
     95c:	8d 9f       	mul	r24, r29
     95e:	f0 0d       	add	r31, r0
     960:	11 24       	eor	r1, r1
     962:	e3 5f       	subi	r30, 0xF3	; 243
     964:	f1 4c       	sbci	r31, 0xC1	; 193
     966:	83 89       	ldd	r24, Z+19	; 0x13
     968:	94 89       	ldd	r25, Z+20	; 0x14
     96a:	a5 89       	ldd	r26, Z+21	; 0x15
     96c:	b6 89       	ldd	r27, Z+22	; 0x16
     96e:	87 8b       	std	Z+23, r24	; 0x17
     970:	90 8f       	std	Z+24, r25	; 0x18
     972:	a1 8f       	std	Z+25, r26	; 0x19
     974:	b2 8f       	std	Z+26, r27	; 0x1a
		PSD2_set_dir(PORT_DIR_OUT);
		
		#if B_STYLE == (0)
		QTOUCH_GetSensorValue(0, true);
		
		for(uint8_t j = 0; j < 2; j++)
     976:	1f 5f       	subi	r17, 0xFF	; 255
     978:	12 30       	cpi	r17, 0x02	; 2
     97a:	08 f4       	brcc	.+2      	; 0x97e <__LOCK_REGION_LENGTH__+0x57e>
     97c:	11 cd       	rjmp	.-1502   	; 0x3a0 <__DATA_REGION_LENGTH__+0x1a0>
		#endif
		//ATtiny817
		//isDataChanged = true;
		
		#if B_STYLE == (0)
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((In_PSD2       << 1) & 0x02) | ((In_PSD1       << 0) & 0x01)) & 0x0F)));
     97e:	50 91 77 3e 	lds	r21, 0x3E77	; 0x803e77 <payloadBuffer+0x8>
     982:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <payloadBufferStartByte+0x7f6886>
     986:	88 23       	and	r24, r24
     988:	11 f0       	breq	.+4      	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
     98a:	40 e8       	ldi	r20, 0x80	; 128
     98c:	01 c0       	rjmp	.+2      	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	60 91 8a 3e 	lds	r22, 0x3E8A	; 0x803e8a <__data_end>
     994:	20 e1       	ldi	r18, 0x10	; 16
     996:	62 9f       	mul	r22, r18
     998:	b0 01       	movw	r22, r0
     99a:	11 24       	eor	r1, r1
     99c:	2b 2d       	mov	r18, r11
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	22 0f       	add	r18, r18
     9a2:	33 1f       	adc	r19, r19
     9a4:	22 0f       	add	r18, r18
     9a6:	33 1f       	adc	r19, r19
     9a8:	22 0f       	add	r18, r18
     9aa:	33 1f       	adc	r19, r19
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	00 0f       	add	r16, r16
     9b0:	11 1f       	adc	r17, r17
     9b2:	00 0f       	add	r16, r16
     9b4:	11 1f       	adc	r17, r17
     9b6:	8a 2d       	mov	r24, r10
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	28 70       	andi	r18, 0x08	; 8
     9c0:	04 70       	andi	r16, 0x04	; 4
     9c2:	02 2b       	or	r16, r18
     9c4:	82 70       	andi	r24, 0x02	; 2
     9c6:	80 2b       	or	r24, r16
     9c8:	98 2a       	or	r9, r24
     9ca:	86 2f       	mov	r24, r22
     9cc:	80 77       	andi	r24, 0x70	; 112
     9ce:	84 2b       	or	r24, r20
     9d0:	89 29       	or	r24, r9
     9d2:	80 93 93 3e 	sts	0x3E93, r24	; 0x803e93 <seatFlagStatus>
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	58 13       	cpse	r21, r24
     9da:	01 c0       	rjmp	.+2      	; 0x9de <__LOCK_REGION_LENGTH__+0x5de>
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	90 91 8b 3e 	lds	r25, 0x3E8B	; 0x803e8b <isDataChanged>
     9e2:	92 2b       	or	r25, r18
		isDataChanged = (QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate && QTOUCHADC_REFERANCE_FILTER_P[0].Activity) || (QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate && QTOUCHADC_REFERANCE_FILTER_P[1].Activity) ? false : isDataChanged;	
     9e4:	20 91 0e 3e 	lds	r18, 0x3E0E	; 0x803e0e <QTOUCHADC_REFERANCE_FILTER_P+0x1>
     9e8:	22 23       	and	r18, r18
     9ea:	21 f0       	breq	.+8      	; 0x9f4 <__LOCK_REGION_LENGTH__+0x5f4>
     9ec:	20 91 0d 3e 	lds	r18, 0x3E0D	; 0x803e0d <QTOUCHADC_REFERANCE_FILTER_P>
     9f0:	21 11       	cpse	r18, r1
     9f2:	0a c0       	rjmp	.+20     	; 0xa08 <__LOCK_REGION_LENGTH__+0x608>
     9f4:	20 91 3d 3e 	lds	r18, 0x3E3D	; 0x803e3d <QTOUCHADC_REFERANCE_FILTER_P+0x30>
     9f8:	22 23       	and	r18, r18
     9fa:	41 f0       	breq	.+16     	; 0xa0c <__LOCK_REGION_LENGTH__+0x60c>
     9fc:	20 91 3c 3e 	lds	r18, 0x3E3C	; 0x803e3c <QTOUCHADC_REFERANCE_FILTER_P+0x2f>
     a00:	22 23       	and	r18, r18
     a02:	31 f0       	breq	.+12     	; 0xa10 <__LOCK_REGION_LENGTH__+0x610>
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	05 c0       	rjmp	.+10     	; 0xa12 <__LOCK_REGION_LENGTH__+0x612>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__LOCK_REGION_LENGTH__+0x612>
     a0c:	21 e0       	ldi	r18, 0x01	; 1
     a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__LOCK_REGION_LENGTH__+0x612>
     a10:	21 e0       	ldi	r18, 0x01	; 1
     a12:	21 70       	andi	r18, 0x01	; 1
     a14:	09 f4       	brne	.+2      	; 0xa18 <__LOCK_REGION_LENGTH__+0x618>
     a16:	90 e0       	ldi	r25, 0x00	; 0
		#else
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((Const_In_PSD2 << 1) & 0x02) | ((Const_In_PSD1 << 0) & 0x01)) & 0x0F)));
		#endif
			
		repeatDataCounter = (isDataChanged && (repeatDataCounter <= (TRANSMIT_COUNT >> 1))) || (dataRefreshCounter == 0) ? TRANSMIT_COUNT : repeatDataCounter;
     a18:	99 23       	and	r25, r25
     a1a:	21 f0       	breq	.+8      	; 0xa24 <__LOCK_REGION_LENGTH__+0x624>
     a1c:	90 91 6e 3e 	lds	r25, 0x3E6E	; 0x803e6e <repeatDataCounter>
     a20:	99 30       	cpi	r25, 0x09	; 9
     a22:	48 f0       	brcs	.+18     	; 0xa36 <__LOCK_REGION_LENGTH__+0x636>
     a24:	20 91 6c 3e 	lds	r18, 0x3E6C	; 0x803e6c <dataRefreshCounter>
     a28:	30 91 6d 3e 	lds	r19, 0x3E6D	; 0x803e6d <dataRefreshCounter+0x1>
     a2c:	23 2b       	or	r18, r19
     a2e:	29 f0       	breq	.+10     	; 0xa3a <__LOCK_REGION_LENGTH__+0x63a>
     a30:	90 91 6e 3e 	lds	r25, 0x3E6E	; 0x803e6e <repeatDataCounter>
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
     a36:	90 e1       	ldi	r25, 0x10	; 16
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
     a3a:	90 e1       	ldi	r25, 0x10	; 16
     a3c:	90 93 6e 3e 	sts	0x3E6E, r25	; 0x803e6e <repeatDataCounter>
		dataRefreshCounter -= (dataRefreshCounter > 0) && (repeatDataCounter == 0) ? 1 : DATA_REFRESH_TIME;
     a40:	20 91 6c 3e 	lds	r18, 0x3E6C	; 0x803e6c <dataRefreshCounter>
     a44:	30 91 6d 3e 	lds	r19, 0x3E6D	; 0x803e6d <dataRefreshCounter+0x1>
     a48:	21 15       	cp	r18, r1
     a4a:	31 05       	cpc	r19, r1
     a4c:	29 f0       	breq	.+10     	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
     a4e:	99 23       	and	r25, r25
     a50:	31 f0       	breq	.+12     	; 0xa5e <__LOCK_REGION_LENGTH__+0x65e>
     a52:	4c e2       	ldi	r20, 0x2C	; 44
     a54:	51 e0       	ldi	r21, 0x01	; 1
     a56:	05 c0       	rjmp	.+10     	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
     a58:	4c e2       	ldi	r20, 0x2C	; 44
     a5a:	51 e0       	ldi	r21, 0x01	; 1
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	24 1b       	sub	r18, r20
     a64:	35 0b       	sbc	r19, r21
     a66:	20 93 6c 3e 	sts	0x3E6C, r18	; 0x803e6c <dataRefreshCounter>
     a6a:	30 93 6d 3e 	sts	0x3E6D, r19	; 0x803e6d <dataRefreshCounter+0x1>
		isDataChanged = false;		
     a6e:	10 92 8b 3e 	sts	0x3E8B, r1	; 0x803e8b <isDataChanged>
		
		if(repeatDataCounter && payloadReady == false)
     a72:	99 23       	and	r25, r25
     a74:	d9 f1       	breq	.+118    	; 0xaec <__LOCK_REGION_LENGTH__+0x6ec>
     a76:	20 91 8e 3e 	lds	r18, 0x3E8E	; 0x803e8e <payloadReady>
     a7a:	21 11       	cpse	r18, r1
     a7c:	37 c0       	rjmp	.+110    	; 0xaec <__LOCK_REGION_LENGTH__+0x6ec>
		{
			if (payloadCounterUNCHANGE > 2)
     a7e:	90 91 8c 3e 	lds	r25, 0x3E8C	; 0x803e8c <payloadCounterUNCHANGE>
     a82:	93 30       	cpi	r25, 0x03	; 3
     a84:	50 f1       	brcs	.+84     	; 0xada <__LOCK_REGION_LENGTH__+0x6da>
			{
				payloadBuffer[payloadBufferStartByte +  3 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 8) & 0x00FF);
     a86:	30 91 8d 3e 	lds	r19, 0x3E8D	; 0x803e8d <payloadCounter>
     a8a:	43 2f       	mov	r20, r19
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	60 91 38 3e 	lds	r22, 0x3E38	; 0x803e38 <QTOUCHADC_REFERANCE_FILTER_P+0x2b>
     a92:	70 91 39 3e 	lds	r23, 0x3E39	; 0x803e39 <QTOUCHADC_REFERANCE_FILTER_P+0x2c>
     a96:	fa 01       	movw	r30, r20
     a98:	e8 58       	subi	r30, 0x88	; 136
     a9a:	f1 4c       	sbci	r31, 0xC1	; 193
     a9c:	70 83       	st	Z, r23
				payloadBuffer[payloadBufferStartByte +  4 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 0) & 0x00FF);
     a9e:	fa 01       	movw	r30, r20
     aa0:	e7 58       	subi	r30, 0x87	; 135
     aa2:	f1 4c       	sbci	r31, 0xC1	; 193
     aa4:	60 83       	st	Z, r22
				payloadBuffer[payloadBufferStartByte + 11 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 8) & 0x00FF);
     aa6:	60 91 67 3e 	lds	r22, 0x3E67	; 0x803e67 <QTOUCHADC_REFERANCE_FILTER_P+0x5a>
     aaa:	70 91 68 3e 	lds	r23, 0x3E68	; 0x803e68 <QTOUCHADC_REFERANCE_FILTER_P+0x5b>
     aae:	fa 01       	movw	r30, r20
     ab0:	e0 58       	subi	r30, 0x80	; 128
     ab2:	f1 4c       	sbci	r31, 0xC1	; 193
     ab4:	70 83       	st	Z, r23
				payloadBuffer[payloadBufferStartByte + 12 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 0) & 0x00FF);
     ab6:	fa 01       	movw	r30, r20
     ab8:	ef 57       	subi	r30, 0x7F	; 127
     aba:	f1 4c       	sbci	r31, 0xC1	; 193
     abc:	60 83       	st	Z, r22
				
				payloadCounter += payloadCounter < 6 ? 2 : -payloadCounter;
     abe:	36 30       	cpi	r19, 0x06	; 6
     ac0:	18 f0       	brcs	.+6      	; 0xac8 <__LOCK_REGION_LENGTH__+0x6c8>
     ac2:	43 2f       	mov	r20, r19
     ac4:	41 95       	neg	r20
     ac6:	01 c0       	rjmp	.+2      	; 0xaca <__LOCK_REGION_LENGTH__+0x6ca>
     ac8:	42 e0       	ldi	r20, 0x02	; 2
     aca:	34 0f       	add	r19, r20
     acc:	30 93 8d 3e 	sts	0x3E8D, r19	; 0x803e8d <payloadCounter>
				payloadReady = 	payloadCounter == 0 ? true : payloadReady;
     ad0:	31 11       	cpse	r19, r1
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <__LOCK_REGION_LENGTH__+0x6d6>
     ad4:	21 e0       	ldi	r18, 0x01	; 1
     ad6:	20 93 8e 3e 	sts	0x3E8E, r18	; 0x803e8e <payloadReady>
			}
			payloadCounterUNCHANGE += payloadCounterUNCHANGE < 6 ? 1 : -payloadCounterUNCHANGE;
     ada:	96 30       	cpi	r25, 0x06	; 6
     adc:	18 f0       	brcs	.+6      	; 0xae4 <__LOCK_REGION_LENGTH__+0x6e4>
     ade:	29 2f       	mov	r18, r25
     ae0:	21 95       	neg	r18
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <__LOCK_REGION_LENGTH__+0x6e6>
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	92 0f       	add	r25, r18
     ae8:	90 93 8c 3e 	sts	0x3E8C, r25	; 0x803e8c <payloadCounterUNCHANGE>
		}
		
		if(startupDelay == 0 && payloadReady)
     aec:	90 91 6b 3e 	lds	r25, 0x3E6B	; 0x803e6b <startupDelay>
     af0:	91 11       	cpse	r25, r1
     af2:	53 c0       	rjmp	.+166    	; 0xb9a <__LOCK_REGION_LENGTH__+0x79a>
     af4:	90 91 8e 3e 	lds	r25, 0x3E8E	; 0x803e8e <payloadReady>
     af8:	99 23       	and	r25, r25
     afa:	09 f4       	brne	.+2      	; 0xafe <__LOCK_REGION_LENGTH__+0x6fe>
     afc:	4e c0       	rjmp	.+156    	; 0xb9a <__LOCK_REGION_LENGTH__+0x79a>
		{
			payloadBuffer[payloadBufferStartByte +  2] = seatFlagStatus;
     afe:	cf e6       	ldi	r28, 0x6F	; 111
     b00:	de e3       	ldi	r29, 0x3E	; 62
     b02:	88 87       	std	Y+8, r24	; 0x08
			payloadBuffer[payloadBufferStartByte + 19] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 2]);
     b04:	87 e7       	ldi	r24, 0x77	; 119
     b06:	9e e3       	ldi	r25, 0x3E	; 62
     b08:	f1 d2       	rcall	.+1506   	; 0x10ec <SX1243CRC8>
     b0a:	89 8f       	std	Y+25, r24	; 0x19
			
			bool transmitterStatus = SX1243Process() == SX_OK;
     b0c:	23 d3       	rcall	.+1606   	; 0x1154 <SX1243Process>
			repeatDataCounter -= transmitterStatus ? 1 : -1;
     b0e:	90 91 6e 3e 	lds	r25, 0x3E6E	; 0x803e6e <repeatDataCounter>
     b12:	81 11       	cpse	r24, r1
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <__LOCK_REGION_LENGTH__+0x71a>
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <__LOCK_REGION_LENGTH__+0x71c>
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	92 1b       	sub	r25, r18
     b1e:	90 93 6e 3e 	sts	0x3E6E, r25	; 0x803e6e <repeatDataCounter>
			payloadReady = transmitterStatus ? false : payloadReady;
     b22:	88 23       	and	r24, r24
     b24:	19 f0       	breq	.+6      	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     b26:	80 91 8e 3e 	lds	r24, 0x3E8E	; 0x803e8e <payloadReady>
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	80 93 8e 3e 	sts	0x3E8E, r24	; 0x803e8e <payloadReady>
			BatteryLevelCounter -= (BAT_TRANSMIT_CONSTANT >> sleepTimeSequence);
     b32:	e0 e1       	ldi	r30, 0x10	; 16
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__LOCK_REGION_LENGTH__+0x740>
     b3c:	f5 95       	asr	r31
     b3e:	e7 95       	ror	r30
     b40:	0a 94       	dec	r0
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <__LOCK_REGION_LENGTH__+0x73c>
     b44:	1f 2f       	mov	r17, r31
     b46:	11 0f       	add	r17, r17
     b48:	11 0b       	sbc	r17, r17
     b4a:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     b4e:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     b52:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     b56:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     b5a:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     b5e:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     b62:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     b66:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     b6a:	ae 2e       	mov	r10, r30
     b6c:	bf 2e       	mov	r11, r31
     b6e:	c1 2e       	mov	r12, r17
     b70:	d1 2e       	mov	r13, r17
     b72:	e1 2e       	mov	r14, r17
     b74:	f1 2e       	mov	r15, r17
     b76:	01 2f       	mov	r16, r17
     b78:	09 d6       	rcall	.+3090   	; 0x178c <__subdi3>
     b7a:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     b7e:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     b82:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     b86:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     b8a:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     b8e:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     b92:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     b96:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		}
		
		if(startupDelay == 0)
     b9a:	80 91 6b 3e 	lds	r24, 0x3E6B	; 0x803e6b <startupDelay>
     b9e:	81 11       	cpse	r24, r1
     ba0:	46 c0       	rjmp	.+140    	; 0xc2e <__LOCK_REGION_LENGTH__+0x82e>
		{
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     ba2:	c0 e5       	ldi	r28, 0x50	; 80
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
     ba6:	88 81       	ld	r24, Y
     ba8:	89 7f       	andi	r24, 0xF9	; 249
     baa:	84 60       	ori	r24, 0x04	; 4
     bac:	88 83       	st	Y, r24
			cli();
     bae:	f8 94       	cli
			sleepTimeSequence = repeatDataCounter >= 0 ? T_256 : T_2048;
     bb0:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
			ConfigPIT(GET_PERIODIC_TIMER_VALUE(sleepTimeSequence));
     bb4:	88 e3       	ldi	r24, 0x38	; 56
     bb6:	7a da       	rcall	.-2828   	; 0xac <ConfigPIT>
			
			sleep_enable();
     bb8:	88 81       	ld	r24, Y
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	88 83       	st	Y, r24
			sei();
     bbe:	78 94       	sei
			sleep_cpu();
     bc0:	88 95       	sleep
			sleep_disable();
     bc2:	88 81       	ld	r24, Y
     bc4:	8e 7f       	andi	r24, 0xFE	; 254
     bc6:	88 83       	st	Y, r24
			cli();
     bc8:	f8 94       	cli
			BatteryLevelCounter -= (BAT_SLEEP_CONSTANT >> sleepTimeSequence);
     bca:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__LOCK_REGION_LENGTH__+0x7d4>
     bd0:	d5 95       	asr	r29
     bd2:	c7 95       	ror	r28
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <__LOCK_REGION_LENGTH__+0x7d0>
     bd8:	1d 2f       	mov	r17, r29
     bda:	11 0f       	add	r17, r17
     bdc:	11 0b       	sbc	r17, r17
     bde:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     be2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     be6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     bea:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     bee:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     bf2:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     bf6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     bfa:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     bfe:	ac 2e       	mov	r10, r28
     c00:	bd 2e       	mov	r11, r29
     c02:	c1 2e       	mov	r12, r17
     c04:	d1 2e       	mov	r13, r17
     c06:	e1 2e       	mov	r14, r17
     c08:	f1 2e       	mov	r15, r17
     c0a:	01 2f       	mov	r16, r17
     c0c:	bf d5       	rcall	.+2942   	; 0x178c <__subdi3>
     c0e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     c12:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     c16:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     c1a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     c1e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     c22:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     c26:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     c2a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     c2e:	80 b1       	in	r24, 0x00	; 0
     c30:	87 7f       	andi	r24, 0xF7	; 247
     c32:	80 b9       	out	0x00, r24	; 0
		}
		
		CBT_set_dir(PORT_DIR_IN);
		if(CBT_get_level() == false)
     c34:	13 9b       	sbis	0x02, 3	; 2
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <__LOCK_REGION_LENGTH__+0x84e>
     c38:	24 c0       	rjmp	.+72     	; 0xc82 <__LOCK_REGION_LENGTH__+0x882>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3a:	e3 e2       	ldi	r30, 0x23	; 35
     c3c:	f4 ef       	ldi	r31, 0xF4	; 244
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <__LOCK_REGION_LENGTH__+0x83e>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <__LOCK_REGION_LENGTH__+0x844>
     c44:	00 00       	nop
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
     c46:	8a b1       	in	r24, 0x0a	; 10
     c48:	80 61       	ori	r24, 0x10	; 16
     c4a:	8a b9       	out	0x0a, r24	; 10
     c4c:	01 c0       	rjmp	.+2      	; 0xc50 <__LOCK_REGION_LENGTH__+0x850>
     c4e:	94 e6       	ldi	r25, 0x64	; 100
		{
			uint8_t timeOut = 100;
			while(CBT_get_level() == false && --timeOut)
     c50:	13 99       	sbic	0x02, 3	; 2
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <__LOCK_REGION_LENGTH__+0x858>
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	89 f7       	brne	.-30     	; 0xc3a <__LOCK_REGION_LENGTH__+0x83a>
			{
				_delay_ms(50);
				DATA_toggle_level();
			}
			if(timeOut < 1)
     c58:	91 11       	cpse	r25, r1
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <__LOCK_REGION_LENGTH__+0x878>
			{
				FLASH_0_write_eeprom_byte(0, 100);
     c5c:	64 e6       	ldi	r22, 0x64	; 100
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	ee d0       	rcall	.+476    	; 0xe40 <FLASH_0_write_eeprom_byte>
				while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     c64:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7848>
     c68:	81 fd       	sbrc	r24, 1
     c6a:	fc cf       	rjmp	.-8      	; 0xc64 <__LOCK_REGION_LENGTH__+0x864>
     c6c:	89 e6       	ldi	r24, 0x69	; 105
     c6e:	98 e1       	ldi	r25, 0x18	; 24
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <__LOCK_REGION_LENGTH__+0x870>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <__LOCK_REGION_LENGTH__+0x876>
     c76:	00 00       	nop
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	68 ed       	ldi	r22, 0xD8	; 216
     c7c:	81 e4       	ldi	r24, 0x41	; 65
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	f9 d0       	rcall	.+498    	; 0xe74 <protected_write_io>
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     c82:	e3 e1       	ldi	r30, 0x13	; 19
     c84:	f4 e0       	ldi	r31, 0x04	; 4
     c86:	80 81       	ld	r24, Z
     c88:	88 60       	ori	r24, 0x08	; 8
     c8a:	80 83       	st	Z, r24
			}
			RSTCTRL_reset();
		}
		CBT_set_dir(PORT_DIR_OFF);
		
		startupDelay -= startupDelay > 0;
     c8c:	80 91 6b 3e 	lds	r24, 0x3E6B	; 0x803e6b <startupDelay>
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	81 11       	cpse	r24, r1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <__LOCK_REGION_LENGTH__+0x898>
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	89 1b       	sub	r24, r25
     c9a:	80 93 6b 3e 	sts	0x3E6B, r24	; 0x803e6b <startupDelay>
	}
     c9e:	56 ca       	rjmp	.-2900   	; 0x14c <main+0x92>

00000ca0 <ADC_0_init>:
     ca0:	e0 e0       	ldi	r30, 0x00	; 0
     ca2:	f6 e0       	ldi	r31, 0x06	; 6
     ca4:	82 e5       	ldi	r24, 0x52	; 82
     ca6:	82 83       	std	Z+2, r24	; 0x02
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 83       	st	Z, r24
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <ADC_0_start_conversion>:
     cb0:	e0 e0       	ldi	r30, 0x00	; 0
     cb2:	f6 e0       	ldi	r31, 0x06	; 6
     cb4:	86 83       	std	Z+6, r24	; 0x06
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 87       	std	Z+8, r24	; 0x08
     cba:	08 95       	ret

00000cbc <ADC_0_is_conversion_done>:
     cbc:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f6e51>
     cc0:	81 70       	andi	r24, 0x01	; 1
     cc2:	08 95       	ret

00000cc4 <ADC_0_get_conversion_result>:
     cc4:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f6e56>
     cc8:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f6e57>
     ccc:	08 95       	ret

00000cce <ADC_0_get_conversion>:
     cce:	f0 df       	rcall	.-32     	; 0xcb0 <ADC_0_start_conversion>
     cd0:	f5 df       	rcall	.-22     	; 0xcbc <ADC_0_is_conversion_done>
     cd2:	88 23       	and	r24, r24
     cd4:	e9 f3       	breq	.-6      	; 0xcd0 <ADC_0_get_conversion+0x2>
     cd6:	f6 df       	rcall	.-20     	; 0xcc4 <ADC_0_get_conversion_result>
     cd8:	e0 e0       	ldi	r30, 0x00	; 0
     cda:	f6 e0       	ldi	r31, 0x06	; 6
     cdc:	23 85       	ldd	r18, Z+11	; 0x0b
     cde:	21 60       	ori	r18, 0x01	; 1
     ce0:	23 87       	std	Z+11, r18	; 0x0b
     ce2:	08 95       	ret

00000ce4 <BOD_init>:
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	08 95       	ret

00000ce8 <CLKCTRL_init>:
     ce8:	43 e0       	ldi	r20, 0x03	; 3
     cea:	68 ed       	ldi	r22, 0xD8	; 216
     cec:	81 e6       	ldi	r24, 0x61	; 97
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	c1 d0       	rcall	.+386    	; 0xe74 <protected_write_io>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret

00000cf6 <CPUINT_init>:
     cf6:	78 94       	sei
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 95       	ret

00000cfc <mcu_init>:
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	08 c0       	rjmp	.+16     	; 0xd10 <mcu_init+0x14>
     d00:	e8 2f       	mov	r30, r24
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	e0 5f       	subi	r30, 0xF0	; 240
     d06:	fb 4f       	sbci	r31, 0xFB	; 251
     d08:	90 81       	ld	r25, Z
     d0a:	98 60       	ori	r25, 0x08	; 8
     d0c:	90 83       	st	Z, r25
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	b0 f3       	brcs	.-20     	; 0xd00 <mcu_init+0x4>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	08 c0       	rjmp	.+16     	; 0xd28 <mcu_init+0x2c>
     d18:	e8 2f       	mov	r30, r24
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	e0 5d       	subi	r30, 0xD0	; 208
     d1e:	fb 4f       	sbci	r31, 0xFB	; 251
     d20:	90 81       	ld	r25, Z
     d22:	98 60       	ori	r25, 0x08	; 8
     d24:	90 83       	st	Z, r25
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	b0 f3       	brcs	.-20     	; 0xd18 <mcu_init+0x1c>
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <mcu_init+0x44>
     d30:	e8 2f       	mov	r30, r24
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	e0 5b       	subi	r30, 0xB0	; 176
     d36:	fb 4f       	sbci	r31, 0xFB	; 251
     d38:	90 81       	ld	r25, Z
     d3a:	98 60       	ori	r25, 0x08	; 8
     d3c:	90 83       	st	Z, r25
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	88 30       	cpi	r24, 0x08	; 8
     d42:	b0 f3       	brcs	.-20     	; 0xd30 <mcu_init+0x34>
     d44:	08 95       	ret

00000d46 <ADC_0_initialization>:
     d46:	e6 e1       	ldi	r30, 0x16	; 22
     d48:	f4 e0       	ldi	r31, 0x04	; 4
     d4a:	80 81       	ld	r24, Z
     d4c:	88 7f       	andi	r24, 0xF8	; 248
     d4e:	84 60       	ori	r24, 0x04	; 4
     d50:	80 83       	st	Z, r24
     d52:	80 81       	ld	r24, Z
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	80 83       	st	Z, r24
     d58:	e0 e3       	ldi	r30, 0x30	; 48
     d5a:	f4 e0       	ldi	r31, 0x04	; 4
     d5c:	80 81       	ld	r24, Z
     d5e:	88 7f       	andi	r24, 0xF8	; 248
     d60:	84 60       	ori	r24, 0x04	; 4
     d62:	80 83       	st	Z, r24
     d64:	80 81       	ld	r24, Z
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	80 83       	st	Z, r24
     d6a:	9a df       	rcall	.-204    	; 0xca0 <ADC_0_init>
     d6c:	08 95       	ret

00000d6e <FLASH_0_initialization>:
     d6e:	62 d0       	rcall	.+196    	; 0xe34 <FLASH_0_init>
     d70:	08 95       	ret

00000d72 <system_init>:
     d72:	c4 df       	rcall	.-120    	; 0xcfc <mcu_init>
     d74:	80 b1       	in	r24, 0x00	; 0
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	80 b9       	out	0x00, r24	; 0
     d7a:	e3 e1       	ldi	r30, 0x13	; 19
     d7c:	f4 e0       	ldi	r31, 0x04	; 4
     d7e:	80 81       	ld	r24, Z
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	80 83       	st	Z, r24
     d84:	80 b1       	in	r24, 0x00	; 0
     d86:	8f 7e       	andi	r24, 0xEF	; 239
     d88:	80 b9       	out	0x00, r24	; 0
     d8a:	e4 e1       	ldi	r30, 0x14	; 20
     d8c:	f4 e0       	ldi	r31, 0x04	; 4
     d8e:	80 81       	ld	r24, Z
     d90:	88 60       	ori	r24, 0x08	; 8
     d92:	80 83       	st	Z, r24
     d94:	80 b1       	in	r24, 0x00	; 0
     d96:	8f 7d       	andi	r24, 0xDF	; 223
     d98:	80 b9       	out	0x00, r24	; 0
     d9a:	e5 e1       	ldi	r30, 0x15	; 21
     d9c:	f4 e0       	ldi	r31, 0x04	; 4
     d9e:	80 81       	ld	r24, Z
     da0:	88 60       	ori	r24, 0x08	; 8
     da2:	80 83       	st	Z, r24
     da4:	81 b1       	in	r24, 0x01	; 1
     da6:	8f 77       	andi	r24, 0x7F	; 127
     da8:	81 b9       	out	0x01, r24	; 1
     daa:	80 b1       	in	r24, 0x00	; 0
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 b9       	out	0x00, r24	; 0
     db0:	84 b1       	in	r24, 0x04	; 4
     db2:	8d 7f       	andi	r24, 0xFD	; 253
     db4:	84 b9       	out	0x04, r24	; 4
     db6:	e1 e3       	ldi	r30, 0x31	; 49
     db8:	f4 e0       	ldi	r31, 0x04	; 4
     dba:	80 81       	ld	r24, Z
     dbc:	87 7f       	andi	r24, 0xF7	; 247
     dbe:	80 83       	st	Z, r24
     dc0:	84 b1       	in	r24, 0x04	; 4
     dc2:	8f 7e       	andi	r24, 0xEF	; 239
     dc4:	84 b9       	out	0x04, r24	; 4
     dc6:	e4 e3       	ldi	r30, 0x34	; 52
     dc8:	f4 e0       	ldi	r31, 0x04	; 4
     dca:	80 81       	ld	r24, Z
     dcc:	88 60       	ori	r24, 0x08	; 8
     dce:	80 83       	st	Z, r24
     dd0:	84 b1       	in	r24, 0x04	; 4
     dd2:	8f 7d       	andi	r24, 0xDF	; 223
     dd4:	84 b9       	out	0x04, r24	; 4
     dd6:	e5 e3       	ldi	r30, 0x35	; 53
     dd8:	f4 e0       	ldi	r31, 0x04	; 4
     dda:	80 81       	ld	r24, Z
     ddc:	88 60       	ori	r24, 0x08	; 8
     dde:	80 83       	st	Z, r24
     de0:	88 b1       	in	r24, 0x08	; 8
     de2:	8d 7f       	andi	r24, 0xFD	; 253
     de4:	88 b9       	out	0x08, r24	; 8
     de6:	e1 e5       	ldi	r30, 0x51	; 81
     de8:	f4 e0       	ldi	r31, 0x04	; 4
     dea:	80 81       	ld	r24, Z
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	80 83       	st	Z, r24
     df0:	88 b1       	in	r24, 0x08	; 8
     df2:	8b 7f       	andi	r24, 0xFB	; 251
     df4:	88 b9       	out	0x08, r24	; 8
     df6:	e2 e5       	ldi	r30, 0x52	; 82
     df8:	f4 e0       	ldi	r31, 0x04	; 4
     dfa:	80 81       	ld	r24, Z
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	80 83       	st	Z, r24
     e00:	89 b1       	in	r24, 0x09	; 9
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	89 b9       	out	0x09, r24	; 9
     e06:	88 b1       	in	r24, 0x08	; 8
     e08:	88 60       	ori	r24, 0x08	; 8
     e0a:	88 b9       	out	0x08, r24	; 8
     e0c:	89 b1       	in	r24, 0x09	; 9
     e0e:	8f 7e       	andi	r24, 0xEF	; 239
     e10:	89 b9       	out	0x09, r24	; 9
     e12:	88 b1       	in	r24, 0x08	; 8
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	88 b9       	out	0x08, r24	; 8
     e18:	89 b1       	in	r24, 0x09	; 9
     e1a:	8f 7d       	andi	r24, 0xDF	; 223
     e1c:	89 b9       	out	0x09, r24	; 9
     e1e:	88 b1       	in	r24, 0x08	; 8
     e20:	80 62       	ori	r24, 0x20	; 32
     e22:	88 b9       	out	0x08, r24	; 8
     e24:	61 df       	rcall	.-318    	; 0xce8 <CLKCTRL_init>
     e26:	2a d0       	rcall	.+84     	; 0xe7c <RTC_0_init>
     e28:	8e df       	rcall	.-228    	; 0xd46 <ADC_0_initialization>
     e2a:	a1 df       	rcall	.-190    	; 0xd6e <FLASH_0_initialization>
     e2c:	64 df       	rcall	.-312    	; 0xcf6 <CPUINT_init>
     e2e:	3c d0       	rcall	.+120    	; 0xea8 <SLPCTRL_init>
     e30:	59 df       	rcall	.-334    	; 0xce4 <BOD_init>
     e32:	08 95       	ret

00000e34 <FLASH_0_init>:
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	08 95       	ret

00000e38 <FLASH_0_read_eeprom_byte>:
     e38:	9c 5e       	subi	r25, 0xEC	; 236
     e3a:	fc 01       	movw	r30, r24
     e3c:	80 81       	ld	r24, Z
     e3e:	08 95       	ret

00000e40 <FLASH_0_write_eeprom_byte>:
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
     e48:	16 2f       	mov	r17, r22
     e4a:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7848>
     e4e:	81 fd       	sbrc	r24, 1
     e50:	fc cf       	rjmp	.-8      	; 0xe4a <FLASH_0_write_eeprom_byte+0xa>
     e52:	44 e0       	ldi	r20, 0x04	; 4
     e54:	6d e9       	ldi	r22, 0x9D	; 157
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e1       	ldi	r25, 0x10	; 16
     e5a:	0c d0       	rcall	.+24     	; 0xe74 <protected_write_io>
     e5c:	dc 5e       	subi	r29, 0xEC	; 236
     e5e:	18 83       	st	Y, r17
     e60:	43 e0       	ldi	r20, 0x03	; 3
     e62:	6d e9       	ldi	r22, 0x9D	; 157
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e1       	ldi	r25, 0x10	; 16
     e68:	05 d0       	rcall	.+10     	; 0xe74 <protected_write_io>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	08 95       	ret

00000e74 <protected_write_io>:
     e74:	fc 01       	movw	r30, r24
     e76:	64 bf       	out	0x34, r22	; 52
     e78:	40 83       	st	Z, r20
     e7a:	08 95       	ret

00000e7c <RTC_0_init>:
     e7c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6987>
     e80:	81 11       	cpse	r24, r1
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <RTC_0_init>
     e84:	e0 e4       	ldi	r30, 0x40	; 64
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	88 e7       	ldi	r24, 0x78	; 120
     e8a:	80 83       	st	Z, r24
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	87 83       	std	Z+7, r24	; 0x07
     e90:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6997>
     e94:	81 11       	cpse	r24, r1
     e96:	fc cf       	rjmp	.-8      	; 0xe90 <RTC_0_init+0x14>
     e98:	e0 e4       	ldi	r30, 0x40	; 64
     e9a:	f1 e0       	ldi	r31, 0x01	; 1
     e9c:	89 e4       	ldi	r24, 0x49	; 73
     e9e:	80 8b       	std	Z+16, r24	; 0x10
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	82 8b       	std	Z+18, r24	; 0x12
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <SLPCTRL_init>:
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6896>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret

00000eb2 <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     eb2:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     eb4:	11 c0       	rjmp	.+34     	; 0xed8 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     eb6:	29 b1       	in	r18, 0x09	; 9
     eb8:	27 7f       	andi	r18, 0xF7	; 247
     eba:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     ebc:	29 2f       	mov	r18, r25
     ebe:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     ec0:	21 f0       	breq	.+8      	; 0xeca <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     ec2:	29 b1       	in	r18, 0x09	; 9
     ec4:	20 61       	ori	r18, 0x10	; 16
     ec6:	29 b9       	out	0x09, r18	; 9
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     eca:	29 b1       	in	r18, 0x09	; 9
     ecc:	2f 7e       	andi	r18, 0xEF	; 239
     ece:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     ed0:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     ed2:	29 b1       	in	r18, 0x09	; 9
     ed4:	28 60       	ori	r18, 0x08	; 8
     ed6:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     ed8:	91 11       	cpse	r25, r1
     eda:	ed cf       	rjmp	.-38     	; 0xeb6 <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     edc:	89 b1       	in	r24, 0x09	; 9
     ede:	87 7f       	andi	r24, 0xF7	; 247
     ee0:	89 b9       	out	0x09, r24	; 9
     ee2:	08 95       	ret

00000ee4 <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     ee4:	cf 92       	push	r12
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	6a 01       	movw	r12, r20
     eee:	7b 01       	movw	r14, r22
	switch(instruction)
     ef0:	88 23       	and	r24, r24
     ef2:	19 f0       	breq	.+6      	; 0xefa <SX1243Write+0x16>
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	21 f0       	breq	.+8      	; 0xf00 <SX1243Write+0x1c>
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	da df       	rcall	.-76     	; 0xeb2 <SpiOut>
		break;
     efe:	0a c0       	rjmp	.+20     	; 0xf14 <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     f00:	db 01       	movw	r26, r22
     f02:	ca 01       	movw	r24, r20
     f04:	88 27       	eor	r24, r24
     f06:	99 27       	eor	r25, r25
     f08:	a7 70       	andi	r26, 0x07	; 7
     f0a:	bb 27       	eor	r27, r27
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	88 61       	ori	r24, 0x18	; 24
     f12:	cf df       	rcall	.-98     	; 0xeb2 <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     f14:	8d 2d       	mov	r24, r13
     f16:	cd df       	rcall	.-102    	; 0xeb2 <SpiOut>
	SpiOut(data & 0xFF);
     f18:	8c 2d       	mov	r24, r12
     f1a:	cb df       	rcall	.-106    	; 0xeb2 <SpiOut>
     f1c:	89 b1       	in	r24, 0x09	; 9
     f1e:	8f 7e       	andi	r24, 0xEF	; 239
     f20:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     f26:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	08 95       	ret

00000f32 <SX1243Reset>:
     f32:	89 b1       	in	r24, 0x09	; 9
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	89 b9       	out	0x09, r24	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f38:	86 ea       	ldi	r24, 0xA6	; 166
     f3a:	8a 95       	dec	r24
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <SX1243Reset+0x8>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <SX1243Reset+0xe>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     f40:	89 b1       	in	r24, 0x09	; 9
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	89 b9       	out	0x09, r24	; 9
     f46:	08 95       	ret

00000f48 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	76 c0       	rjmp	.+236    	; 0x1038 <Sx1243ConvertBuffer+0xf0>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     f4c:	9c 01       	movw	r18, r24
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	22 0f       	add	r18, r18
     f58:	33 1f       	adc	r19, r19
     f5a:	e0 91 77 3f 	lds	r30, 0x3F77	; 0x803f77 <TxParam+0x13>
     f5e:	f0 91 78 3f 	lds	r31, 0x3F78	; 0x803f78 <TxParam+0x14>
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	40 81       	ld	r20, Z
     f68:	44 23       	and	r20, r20
     f6a:	1c f4       	brge	.+6      	; 0xf72 <Sx1243ConvertBuffer+0x2a>
     f6c:	49 b1       	in	r20, 0x09	; 9
     f6e:	40 61       	ori	r20, 0x10	; 16
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <Sx1243ConvertBuffer+0x2e>
     f72:	49 b1       	in	r20, 0x09	; 9
     f74:	4f 7e       	andi	r20, 0xEF	; 239
     f76:	d9 01       	movw	r26, r18
     f78:	ac 56       	subi	r26, 0x6C	; 108
     f7a:	b1 4c       	sbci	r27, 0xC1	; 193
     f7c:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     f7e:	d9 01       	movw	r26, r18
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	40 81       	ld	r20, Z
     f84:	46 ff       	sbrs	r20, 6
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <Sx1243ConvertBuffer+0x46>
     f88:	49 b1       	in	r20, 0x09	; 9
     f8a:	40 61       	ori	r20, 0x10	; 16
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <Sx1243ConvertBuffer+0x4a>
     f8e:	49 b1       	in	r20, 0x09	; 9
     f90:	4f 7e       	andi	r20, 0xEF	; 239
     f92:	ac 56       	subi	r26, 0x6C	; 108
     f94:	b1 4c       	sbci	r27, 0xC1	; 193
     f96:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     f98:	d9 01       	movw	r26, r18
     f9a:	12 96       	adiw	r26, 0x02	; 2
     f9c:	40 81       	ld	r20, Z
     f9e:	45 ff       	sbrs	r20, 5
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <Sx1243ConvertBuffer+0x60>
     fa2:	49 b1       	in	r20, 0x09	; 9
     fa4:	40 61       	ori	r20, 0x10	; 16
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <Sx1243ConvertBuffer+0x64>
     fa8:	49 b1       	in	r20, 0x09	; 9
     faa:	4f 7e       	andi	r20, 0xEF	; 239
     fac:	ac 56       	subi	r26, 0x6C	; 108
     fae:	b1 4c       	sbci	r27, 0xC1	; 193
     fb0:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     fb2:	d9 01       	movw	r26, r18
     fb4:	13 96       	adiw	r26, 0x03	; 3
     fb6:	40 81       	ld	r20, Z
     fb8:	44 ff       	sbrs	r20, 4
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <Sx1243ConvertBuffer+0x7a>
     fbc:	49 b1       	in	r20, 0x09	; 9
     fbe:	40 61       	ori	r20, 0x10	; 16
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <Sx1243ConvertBuffer+0x7e>
     fc2:	49 b1       	in	r20, 0x09	; 9
     fc4:	4f 7e       	andi	r20, 0xEF	; 239
     fc6:	ac 56       	subi	r26, 0x6C	; 108
     fc8:	b1 4c       	sbci	r27, 0xC1	; 193
     fca:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     fcc:	d9 01       	movw	r26, r18
     fce:	14 96       	adiw	r26, 0x04	; 4
     fd0:	40 81       	ld	r20, Z
     fd2:	43 ff       	sbrs	r20, 3
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <Sx1243ConvertBuffer+0x94>
     fd6:	49 b1       	in	r20, 0x09	; 9
     fd8:	40 61       	ori	r20, 0x10	; 16
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <Sx1243ConvertBuffer+0x98>
     fdc:	49 b1       	in	r20, 0x09	; 9
     fde:	4f 7e       	andi	r20, 0xEF	; 239
     fe0:	ac 56       	subi	r26, 0x6C	; 108
     fe2:	b1 4c       	sbci	r27, 0xC1	; 193
     fe4:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     fe6:	d9 01       	movw	r26, r18
     fe8:	15 96       	adiw	r26, 0x05	; 5
     fea:	40 81       	ld	r20, Z
     fec:	42 ff       	sbrs	r20, 2
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <Sx1243ConvertBuffer+0xae>
     ff0:	49 b1       	in	r20, 0x09	; 9
     ff2:	40 61       	ori	r20, 0x10	; 16
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <Sx1243ConvertBuffer+0xb2>
     ff6:	49 b1       	in	r20, 0x09	; 9
     ff8:	4f 7e       	andi	r20, 0xEF	; 239
     ffa:	ac 56       	subi	r26, 0x6C	; 108
     ffc:	b1 4c       	sbci	r27, 0xC1	; 193
     ffe:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
    1000:	d9 01       	movw	r26, r18
    1002:	16 96       	adiw	r26, 0x06	; 6
    1004:	40 81       	ld	r20, Z
    1006:	41 ff       	sbrs	r20, 1
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <Sx1243ConvertBuffer+0xc8>
    100a:	49 b1       	in	r20, 0x09	; 9
    100c:	40 61       	ori	r20, 0x10	; 16
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <Sx1243ConvertBuffer+0xcc>
    1010:	49 b1       	in	r20, 0x09	; 9
    1012:	4f 7e       	andi	r20, 0xEF	; 239
    1014:	ac 56       	subi	r26, 0x6C	; 108
    1016:	b1 4c       	sbci	r27, 0xC1	; 193
    1018:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
    101a:	29 5f       	subi	r18, 0xF9	; 249
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	40 81       	ld	r20, Z
    1020:	40 ff       	sbrs	r20, 0
    1022:	03 c0       	rjmp	.+6      	; 0x102a <Sx1243ConvertBuffer+0xe2>
    1024:	49 b1       	in	r20, 0x09	; 9
    1026:	40 61       	ori	r20, 0x10	; 16
    1028:	02 c0       	rjmp	.+4      	; 0x102e <Sx1243ConvertBuffer+0xe6>
    102a:	49 b1       	in	r20, 0x09	; 9
    102c:	4f 7e       	andi	r20, 0xEF	; 239
    102e:	f9 01       	movw	r30, r18
    1030:	ec 56       	subi	r30, 0x6C	; 108
    1032:	f1 4c       	sbci	r31, 0xC1	; 193
    1034:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	20 91 76 3f 	lds	r18, 0x3F76	; 0x803f76 <TxParam+0x12>
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	82 17       	cp	r24, r18
    1040:	93 07       	cpc	r25, r19
    1042:	08 f4       	brcc	.+2      	; 0x1046 <Sx1243ConvertBuffer+0xfe>
    1044:	83 cf       	rjmp	.-250    	; 0xf4c <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}
    1046:	08 95       	ret

00001048 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
    1048:	e4 e6       	ldi	r30, 0x64	; 100
    104a:	ff e3       	ldi	r31, 0x3F	; 63
    104c:	83 8b       	std	Z+19, r24	; 0x13
    104e:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
    1050:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
    1052:	80 ed       	ldi	r24, 0xD0	; 208
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	80 93 91 3e 	sts	0x3E91, r24	; 0x803e91 <fastBufSize>
    105a:	90 93 92 3e 	sts	0x3E92, r25	; 0x803e92 <fastBufSize+0x1>
	Sx1243ConvertBuffer(0);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	73 df       	rcall	.-282    	; 0xf48 <Sx1243ConvertBuffer>
	return SX_OK;
}
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret

00001066 <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	8c 01       	movw	r16, r24
    1070:	d6 2f       	mov	r29, r22
    1072:	c4 2f       	mov	r28, r20
	SX1243Reset();
    1074:	5e df       	rcall	.-324    	; 0xf32 <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
    1076:	e4 e6       	ldi	r30, 0x64	; 100
    1078:	ff e3       	ldi	r31, 0x3F	; 63
    107a:	10 8a       	std	Z+16, r1	; 0x10
    107c:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
    107e:	16 86       	std	Z+14, r1	; 0x0e
    1080:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e2       	ldi	r25, 0x20	; 32
    1086:	84 87       	std	Z+12, r24	; 0x0c
    1088:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	98 e0       	ldi	r25, 0x08	; 8
    108e:	82 87       	std	Z+10, r24	; 0x0a
    1090:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
    1092:	10 86       	std	Z+8, r1	; 0x08
    1094:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
    1096:	16 82       	std	Z+6, r1	; 0x06
    1098:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
    109a:	84 e0       	ldi	r24, 0x04	; 4
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	84 83       	std	Z+4, r24	; 0x04
    10a0:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
    10a2:	87 e2       	ldi	r24, 0x27	; 39
    10a4:	96 e6       	ldi	r25, 0x66	; 102
    10a6:	a4 e0       	ldi	r26, 0x04	; 4
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	80 83       	st	Z, r24
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	a2 83       	std	Z+2, r26	; 0x02
    10b0:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
    10b2:	84 e0       	ldi	r24, 0x04	; 4
    10b4:	98 e2       	ldi	r25, 0x28	; 40
    10b6:	85 8b       	std	Z+21, r24	; 0x15
    10b8:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
    10ba:	4c 2f       	mov	r20, r28
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	d8 01       	movw	r26, r16
    10c0:	a4 0f       	add	r26, r20
    10c2:	b5 1f       	adc	r27, r21
    10c4:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1];
    10c6:	4f 5f       	subi	r20, 0xFF	; 255
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	d8 01       	movw	r26, r16
    10cc:	a4 0f       	add	r26, r20
    10ce:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
    10d0:	8c 91       	ld	r24, X
    10d2:	89 27       	eor	r24, r25
    10d4:	9b ed       	ldi	r25, 0xDB	; 219
    10d6:	89 27       	eor	r24, r25
    10d8:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
    10da:	6d 2f       	mov	r22, r29
    10dc:	c8 01       	movw	r24, r16
    10de:	b4 df       	rcall	.-152    	; 0x1048 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^
    10fc:	d0 90 7b 3f 	lds	r13, 0x3F7B	; 0x803f7b <TxParam+0x17>
					buffer[ 0]		  ^
    1100:	80 81       	ld	r24, Z
					buffer[ 1]		  ^
    1102:	e1 80       	ldd	r14, Z+1	; 0x01
					buffer[ 2]		  ^
    1104:	f2 80       	ldd	r15, Z+2	; 0x02
					buffer[ 3]		  ^
    1106:	03 81       	ldd	r16, Z+3	; 0x03
					buffer[ 4]		  ^
    1108:	14 81       	ldd	r17, Z+4	; 0x04
					buffer[ 5]		  ^
    110a:	d5 81       	ldd	r29, Z+5	; 0x05
					buffer[ 6]		  ^
    110c:	c6 81       	ldd	r28, Z+6	; 0x06
					buffer[ 7]		  ^
    110e:	b7 81       	ldd	r27, Z+7	; 0x07
					buffer[ 8]		  ^
    1110:	a0 85       	ldd	r26, Z+8	; 0x08
					buffer[ 9]		  ^
    1112:	71 85       	ldd	r23, Z+9	; 0x09
					buffer[10]		  ^
    1114:	62 85       	ldd	r22, Z+10	; 0x0a
					buffer[11]		  ^
    1116:	53 85       	ldd	r21, Z+11	; 0x0b
					buffer[12]		  ^
    1118:	44 85       	ldd	r20, Z+12	; 0x0c
					buffer[13]		  ^
    111a:	35 85       	ldd	r19, Z+13	; 0x0d
					buffer[14]		  ^
    111c:	26 85       	ldd	r18, Z+14	; 0x0e
					buffer[15]		  ^
    111e:	97 85       	ldd	r25, Z+15	; 0x0f
					buffer[16]);
    1120:	e0 89       	ldd	r30, Z+16	; 0x10
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^
    1122:	8d 25       	eor	r24, r13
    1124:	8e 25       	eor	r24, r14
    1126:	8f 25       	eor	r24, r15
    1128:	80 27       	eor	r24, r16
    112a:	81 27       	eor	r24, r17
    112c:	8d 27       	eor	r24, r29
    112e:	8c 27       	eor	r24, r28
    1130:	8b 27       	eor	r24, r27
    1132:	8a 27       	eor	r24, r26
    1134:	87 27       	eor	r24, r23
    1136:	86 27       	eor	r24, r22
    1138:	85 27       	eor	r24, r21
    113a:	84 27       	eor	r24, r20
    113c:	83 27       	eor	r24, r19
    113e:	82 27       	eor	r24, r18
    1140:	89 27       	eor	r24, r25
					buffer[12]		  ^
					buffer[13]		  ^
					buffer[14]		  ^
					buffer[15]		  ^
					buffer[16]);
}
    1142:	8e 27       	eor	r24, r30
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	08 95       	ret

00001154 <SX1243Process>:


//ATtiny817
U8 SX1243Process()
{
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;
	
	TxParam.Config |= 0x8000;
    115a:	c4 e6       	ldi	r28, 0x64	; 100
    115c:	df e3       	ldi	r29, 0x3F	; 63
    115e:	4d 89       	ldd	r20, Y+21	; 0x15
    1160:	5e 89       	ldd	r21, Y+22	; 0x16
    1162:	50 68       	ori	r21, 0x80	; 128
    1164:	4d 8b       	std	Y+21, r20	; 0x15
    1166:	5e 8b       	std	Y+22, r21	; 0x16
	state |= SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	ba de       	rcall	.-652    	; 0xee4 <SX1243Write>
    1170:	18 2f       	mov	r17, r24
	state |= SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
    1172:	48 81       	ld	r20, Y
    1174:	59 81       	ldd	r21, Y+1	; 0x01
    1176:	6a 81       	ldd	r22, Y+2	; 0x02
    1178:	7b 81       	ldd	r23, Y+3	; 0x03
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	b3 de       	rcall	.-666    	; 0xee4 <SX1243Write>
    117e:	18 2b       	or	r17, r24
	TxParam.Config &= 0x7FFF;
    1180:	8d 89       	ldd	r24, Y+21	; 0x15
    1182:	9e 89       	ldd	r25, Y+22	; 0x16
    1184:	9f 77       	andi	r25, 0x7F	; 127
    1186:	8d 8b       	std	Y+21, r24	; 0x15
    1188:	9e 8b       	std	Y+22, r25	; 0x16


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
    118a:	80 91 ba 97 	lds	r24, 0x97BA	; 0x8097ba <__bss_end+0x583e>
    118e:	8e 5f       	subi	r24, 0xFE	; 254
    1190:	db de       	rcall	.-586    	; 0xf48 <Sx1243ConvertBuffer>
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1192:	e2 e5       	ldi	r30, 0x52	; 82
    1194:	f4 e0       	ldi	r31, 0x04	; 4
    1196:	80 81       	ld	r24, Z
    1198:	88 60       	ori	r24, 0x08	; 8
    119a:	80 83       	st	Z, r24

//ATtiny817
U8 SX1243Process()
{
	U8 state = SX_OK;
	U16 j = 0;
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <SX1243Process+0x5a>
    11a2:	80 e1       	ldi	r24, 0x10	; 16
    11a4:	8a 95       	dec	r24
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <SX1243Process+0x50>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <SX1243Process+0x56>
	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
	{
		_delay_us(10);
		j++;
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
	TxParam.Config &= 0x7FFF;


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
    11ae:	52 99       	sbic	0x0a, 2	; 10
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <SX1243Process+0x64>
    11b2:	2c 3d       	cpi	r18, 0xDC	; 220
    11b4:	31 05       	cpc	r19, r1
    11b6:	a8 f3       	brcs	.-22     	; 0x11a2 <SX1243Process+0x4e>
	{
		_delay_us(10);
		j++;
	}
	state = j >= TRANSMITTER_READY_TIMEOUT ? SX_ERROR : state;
    11b8:	2c 3d       	cpi	r18, 0xDC	; 220
    11ba:	31 05       	cpc	r19, r1
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <SX1243Process+0x6c>
    11be:	11 e0       	ldi	r17, 0x01	; 1
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    11c0:	e2 e5       	ldi	r30, 0x52	; 82
    11c2:	f4 e0       	ldi	r31, 0x04	; 4
    11c4:	80 81       	ld	r24, Z
    11c6:	87 7f       	andi	r24, 0xF7	; 247
    11c8:	80 83       	st	Z, r24
	TX_READY_set_pull_mode(PORT_PULL_OFF);
	
	if (j < TRANSMITTER_READY_TIMEOUT)
    11ca:	2c 3d       	cpi	r18, 0xDC	; 220
    11cc:	31 05       	cpc	r19, r1
    11ce:	78 f0       	brcs	.+30     	; 0x11ee <SX1243Process+0x9a>
			j++;
		}
	}
	else
	{
		state = SX_ERROR;
    11d0:	11 e0       	ldi	r17, 0x01	; 1
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <SX1243Process+0xac>
	{
		j = 0;
		
		while (j < fastBufSize)
		{
			VPORTC.OUT = fastBuf[j];
    11d4:	f9 01       	movw	r30, r18
    11d6:	ec 56       	subi	r30, 0x6C	; 108
    11d8:	f1 4c       	sbci	r31, 0xC1	; 193
    11da:	90 81       	ld	r25, Z
    11dc:	99 b9       	out	0x09, r25	; 9
			if ((fastBuf[j] & 0xEF) == 0x00)
    11de:	90 81       	ld	r25, Z
    11e0:	9f 7e       	andi	r25, 0xEF	; 239
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <SX1243Process+0x94>
			{
				_NOP();
    11e4:	00 00       	nop
				_NOP();
    11e6:	00 00       	nop
			}
			j++;
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <SX1243Process+0x9e>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
	
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		
		while (j < fastBufSize)
    11f2:	40 91 91 3e 	lds	r20, 0x3E91	; 0x803e91 <fastBufSize>
    11f6:	50 91 92 3e 	lds	r21, 0x3E92	; 0x803e92 <fastBufSize+0x1>
    11fa:	24 17       	cp	r18, r20
    11fc:	35 07       	cpc	r19, r21
    11fe:	50 f3       	brcs	.-44     	; 0x11d4 <SX1243Process+0x80>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1200:	89 b1       	in	r24, 0x09	; 9
    1202:	8f 7e       	andi	r24, 0xEF	; 239
    1204:	89 b9       	out	0x09, r24	; 9
	{
		state = SX_ERROR;
	}
	
	DATA_set_level(0);
	SX1243Reset();
    1206:	95 de       	rcall	.-726    	; 0xf32 <SX1243Reset>
	{
		SX1243Reset();
	}*/
		
	return state;
    1208:	81 2f       	mov	r24, r17
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	08 95       	ret

00001212 <QTOUCH_GetSensorValue>:

int32_t QTOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	int32_t var = 0;
	
	switch (touchPin)
    1212:	88 23       	and	r24, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <QTOUCH_GetSensorValue+0xa>
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	a1 f1       	breq	.+104    	; 0x1282 <QTOUCH_GetSensorValue+0x70>
    121a:	66 c0       	rjmp	.+204    	; 0x12e8 <QTOUCH_GetSensorValue+0xd6>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    121c:	66 23       	and	r22, r22
    121e:	21 f0       	breq	.+8      	; 0x1228 <QTOUCH_GetSensorValue+0x16>
		VPORTB.OUT |= (1 << pin);
    1220:	85 b1       	in	r24, 0x05	; 5
    1222:	82 60       	ori	r24, 0x02	; 2
    1224:	85 b9       	out	0x05, r24	; 5
    1226:	03 c0       	rjmp	.+6      	; 0x122e <QTOUCH_GetSensorValue+0x1c>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1228:	85 b1       	in	r24, 0x05	; 5
    122a:	8d 7f       	andi	r24, 0xFD	; 253
    122c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    122e:	84 b1       	in	r24, 0x04	; 4
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	84 b9       	out	0x04, r24	; 4
			* Set PARTNER pin state for charging or discharging ADC sample capacitance.
			* If dir == true sample capacitance charged else discharged.
			*/
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    1234:	8a e0       	ldi	r24, 0x0A	; 10
    1236:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f6e4c>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    123a:	61 30       	cpi	r22, 0x01	; 1
    123c:	21 f0       	breq	.+8      	; 0x1246 <QTOUCH_GetSensorValue+0x34>
		VPORTA.OUT |= (1 << pin);
    123e:	81 b1       	in	r24, 0x01	; 1
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	81 b9       	out	0x01, r24	; 1
    1244:	03 c0       	rjmp	.+6      	; 0x124c <QTOUCH_GetSensorValue+0x3a>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1246:	81 b1       	in	r24, 0x01	; 1
    1248:	8f 7b       	andi	r24, 0xBF	; 191
    124a:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    124c:	80 b1       	in	r24, 0x00	; 0
    124e:	80 64       	ori	r24, 0x40	; 64
    1250:	80 b9       	out	0x00, r24	; 0
    1252:	85 e0       	ldi	r24, 0x05	; 5
    1254:	8a 95       	dec	r24
    1256:	f1 f7       	brne	.-4      	; 0x1254 <QTOUCH_GetSensorValue+0x42>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1258:	80 b1       	in	r24, 0x00	; 0
    125a:	8f 7b       	andi	r24, 0xBF	; 191
    125c:	80 b9       	out	0x00, r24	; 0
			
			/*!
			* Set SENSOR pin to ADC input and complete conversion.
			*/
			SX_set_dir(PORT_DIR_IN);
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
    125e:	86 e0       	ldi	r24, 0x06	; 6
    1260:	36 dd       	rcall	.-1428   	; 0xcce <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    1262:	2a e0       	ldi	r18, 0x0A	; 10
    1264:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f6e4c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1268:	25 b1       	in	r18, 0x05	; 5
    126a:	22 60       	ori	r18, 0x02	; 2
    126c:	25 b9       	out	0x05, r18	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    126e:	21 b1       	in	r18, 0x01	; 1
    1270:	20 64       	ori	r18, 0x40	; 64
    1272:	21 b9       	out	0x01, r18	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1274:	20 b1       	in	r18, 0x00	; 0
    1276:	20 64       	ori	r18, 0x40	; 64
    1278:	20 b9       	out	0x00, r18	; 0
			*/
			PARTNER_set_level(true);
			SX_set_level(true);
			SX_set_dir(PORT_DIR_OUT);
			
			return var;
    127a:	bc 01       	movw	r22, r24
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    1282:	66 23       	and	r22, r22
    1284:	21 f0       	breq	.+8      	; 0x128e <QTOUCH_GetSensorValue+0x7c>
		VPORTB.OUT |= (1 << pin);
    1286:	85 b1       	in	r24, 0x05	; 5
    1288:	82 60       	ori	r24, 0x02	; 2
    128a:	85 b9       	out	0x05, r24	; 5
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <QTOUCH_GetSensorValue+0x82>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    128e:	85 b1       	in	r24, 0x05	; 5
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1294:	84 b1       	in	r24, 0x04	; 4
    1296:	82 60       	ori	r24, 0x02	; 2
    1298:	84 b9       	out	0x04, r24	; 4
			* Set PARTNER pin state for charging or discharging ADC sample capacitance.
			* If dir == true sample capacitance charged else discharged.
			*/
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    129a:	8a e0       	ldi	r24, 0x0A	; 10
    129c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f6e4c>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    12a0:	61 30       	cpi	r22, 0x01	; 1
    12a2:	21 f0       	breq	.+8      	; 0x12ac <QTOUCH_GetSensorValue+0x9a>
		VPORTB.OUT |= (1 << pin);
    12a4:	85 b1       	in	r24, 0x05	; 5
    12a6:	81 60       	ori	r24, 0x01	; 1
    12a8:	85 b9       	out	0x05, r24	; 5
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <QTOUCH_GetSensorValue+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    12ac:	85 b1       	in	r24, 0x05	; 5
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    12b2:	84 b1       	in	r24, 0x04	; 4
    12b4:	81 60       	ori	r24, 0x01	; 1
    12b6:	84 b9       	out	0x04, r24	; 4
    12b8:	85 e0       	ldi	r24, 0x05	; 5
    12ba:	8a 95       	dec	r24
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <QTOUCH_GetSensorValue+0xa8>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    12be:	84 b1       	in	r24, 0x04	; 4
    12c0:	8e 7f       	andi	r24, 0xFE	; 254
    12c2:	84 b9       	out	0x04, r24	; 4
			
			/*!
			* Set SENSOR pin to ADC input and complete conversion.
			*/
			SY_set_dir(PORT_DIR_IN);
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
    12c4:	8b e0       	ldi	r24, 0x0B	; 11
    12c6:	03 dd       	rcall	.-1530   	; 0xcce <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;			
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f6e4c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    12ce:	25 b1       	in	r18, 0x05	; 5
    12d0:	22 60       	ori	r18, 0x02	; 2
    12d2:	25 b9       	out	0x05, r18	; 5
    12d4:	25 b1       	in	r18, 0x05	; 5
    12d6:	21 60       	ori	r18, 0x01	; 1
    12d8:	25 b9       	out	0x05, r18	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    12da:	24 b1       	in	r18, 0x04	; 4
    12dc:	21 60       	ori	r18, 0x01	; 1
    12de:	24 b9       	out	0x04, r18	; 4
			*/
			PARTNER_set_level(true);
			SY_set_level(true);
			SY_set_dir(PORT_DIR_OUT);
			
			return var;
    12e0:	bc 01       	movw	r22, r24
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	08 95       	ret
		* Do nothing! 
		*/
		break;
	}
	
	return var;
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	cb 01       	movw	r24, r22
}
    12ee:	08 95       	ret

000012f0 <__divsf3>:
    12f0:	0e 94 8c 09 	call	0x1318	; 0x1318 <__divsf3x>
    12f4:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    12f8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    12fc:	58 f0       	brcs	.+22     	; 0x1314 <__divsf3+0x24>
    12fe:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    1302:	40 f0       	brcs	.+16     	; 0x1314 <__divsf3+0x24>
    1304:	29 f4       	brne	.+10     	; 0x1310 <__divsf3+0x20>
    1306:	5f 3f       	cpi	r21, 0xFF	; 255
    1308:	29 f0       	breq	.+10     	; 0x1314 <__divsf3+0x24>
    130a:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>
    130e:	51 11       	cpse	r21, r1
    1310:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    1314:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_nan>

00001318 <__divsf3x>:
    1318:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    131c:	68 f3       	brcs	.-38     	; 0x12f8 <__divsf3+0x8>

0000131e <__divsf3_pse>:
    131e:	99 23       	and	r25, r25
    1320:	b1 f3       	breq	.-20     	; 0x130e <__divsf3+0x1e>
    1322:	55 23       	and	r21, r21
    1324:	91 f3       	breq	.-28     	; 0x130a <__divsf3+0x1a>
    1326:	95 1b       	sub	r25, r21
    1328:	55 0b       	sbc	r21, r21
    132a:	bb 27       	eor	r27, r27
    132c:	aa 27       	eor	r26, r26
    132e:	62 17       	cp	r22, r18
    1330:	73 07       	cpc	r23, r19
    1332:	84 07       	cpc	r24, r20
    1334:	38 f0       	brcs	.+14     	; 0x1344 <__divsf3_pse+0x26>
    1336:	9f 5f       	subi	r25, 0xFF	; 255
    1338:	5f 4f       	sbci	r21, 0xFF	; 255
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	44 1f       	adc	r20, r20
    1340:	aa 1f       	adc	r26, r26
    1342:	a9 f3       	breq	.-22     	; 0x132e <__divsf3_pse+0x10>
    1344:	35 d0       	rcall	.+106    	; 0x13b0 <__divsf3_pse+0x92>
    1346:	0e 2e       	mov	r0, r30
    1348:	3a f0       	brmi	.+14     	; 0x1358 <__divsf3_pse+0x3a>
    134a:	e0 e8       	ldi	r30, 0x80	; 128
    134c:	32 d0       	rcall	.+100    	; 0x13b2 <__divsf3_pse+0x94>
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	e6 95       	lsr	r30
    1354:	00 1c       	adc	r0, r0
    1356:	ca f7       	brpl	.-14     	; 0x134a <__divsf3_pse+0x2c>
    1358:	2b d0       	rcall	.+86     	; 0x13b0 <__divsf3_pse+0x92>
    135a:	fe 2f       	mov	r31, r30
    135c:	29 d0       	rcall	.+82     	; 0x13b0 <__divsf3_pse+0x92>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	88 1f       	adc	r24, r24
    1364:	bb 1f       	adc	r27, r27
    1366:	26 17       	cp	r18, r22
    1368:	37 07       	cpc	r19, r23
    136a:	48 07       	cpc	r20, r24
    136c:	ab 07       	cpc	r26, r27
    136e:	b0 e8       	ldi	r27, 0x80	; 128
    1370:	09 f0       	breq	.+2      	; 0x1374 <__divsf3_pse+0x56>
    1372:	bb 0b       	sbc	r27, r27
    1374:	80 2d       	mov	r24, r0
    1376:	bf 01       	movw	r22, r30
    1378:	ff 27       	eor	r31, r31
    137a:	93 58       	subi	r25, 0x83	; 131
    137c:	5f 4f       	sbci	r21, 0xFF	; 255
    137e:	3a f0       	brmi	.+14     	; 0x138e <__divsf3_pse+0x70>
    1380:	9e 3f       	cpi	r25, 0xFE	; 254
    1382:	51 05       	cpc	r21, r1
    1384:	78 f0       	brcs	.+30     	; 0x13a4 <__divsf3_pse+0x86>
    1386:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>
    138a:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    138e:	5f 3f       	cpi	r21, 0xFF	; 255
    1390:	e4 f3       	brlt	.-8      	; 0x138a <__divsf3_pse+0x6c>
    1392:	98 3e       	cpi	r25, 0xE8	; 232
    1394:	d4 f3       	brlt	.-12     	; 0x138a <__divsf3_pse+0x6c>
    1396:	86 95       	lsr	r24
    1398:	77 95       	ror	r23
    139a:	67 95       	ror	r22
    139c:	b7 95       	ror	r27
    139e:	f7 95       	ror	r31
    13a0:	9f 5f       	subi	r25, 0xFF	; 255
    13a2:	c9 f7       	brne	.-14     	; 0x1396 <__divsf3_pse+0x78>
    13a4:	88 0f       	add	r24, r24
    13a6:	91 1d       	adc	r25, r1
    13a8:	96 95       	lsr	r25
    13aa:	87 95       	ror	r24
    13ac:	97 f9       	bld	r25, 7
    13ae:	08 95       	ret
    13b0:	e1 e0       	ldi	r30, 0x01	; 1
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	bb 1f       	adc	r27, r27
    13ba:	62 17       	cp	r22, r18
    13bc:	73 07       	cpc	r23, r19
    13be:	84 07       	cpc	r24, r20
    13c0:	ba 07       	cpc	r27, r26
    13c2:	20 f0       	brcs	.+8      	; 0x13cc <__divsf3_pse+0xae>
    13c4:	62 1b       	sub	r22, r18
    13c6:	73 0b       	sbc	r23, r19
    13c8:	84 0b       	sbc	r24, r20
    13ca:	ba 0b       	sbc	r27, r26
    13cc:	ee 1f       	adc	r30, r30
    13ce:	88 f7       	brcc	.-30     	; 0x13b2 <__divsf3_pse+0x94>
    13d0:	e0 95       	com	r30
    13d2:	08 95       	ret

000013d4 <__fixsfdi>:
    13d4:	be e3       	ldi	r27, 0x3E	; 62
    13d6:	04 d0       	rcall	.+8      	; 0x13e0 <__fixunssfdi+0x2>
    13d8:	08 f4       	brcc	.+2      	; 0x13dc <__fixsfdi+0x8>
    13da:	90 e8       	ldi	r25, 0x80	; 128
    13dc:	08 95       	ret

000013de <__fixunssfdi>:
    13de:	bf e3       	ldi	r27, 0x3F	; 63
    13e0:	22 27       	eor	r18, r18
    13e2:	33 27       	eor	r19, r19
    13e4:	a9 01       	movw	r20, r18
    13e6:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    13ea:	60 f1       	brcs	.+88     	; 0x1444 <__fixunssfdi+0x66>
    13ec:	9f 57       	subi	r25, 0x7F	; 127
    13ee:	48 f1       	brcs	.+82     	; 0x1442 <__fixunssfdi+0x64>
    13f0:	b9 17       	cp	r27, r25
    13f2:	40 f1       	brcs	.+80     	; 0x1444 <__fixunssfdi+0x66>
    13f4:	bf e3       	ldi	r27, 0x3F	; 63
    13f6:	b9 1b       	sub	r27, r25
    13f8:	99 27       	eor	r25, r25
    13fa:	b8 50       	subi	r27, 0x08	; 8
    13fc:	3a f4       	brpl	.+14     	; 0x140c <__fixunssfdi+0x2e>
    13fe:	66 0f       	add	r22, r22
    1400:	77 1f       	adc	r23, r23
    1402:	88 1f       	adc	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	b3 95       	inc	r27
    1408:	d2 f3       	brmi	.-12     	; 0x13fe <__fixunssfdi+0x20>
    140a:	16 c0       	rjmp	.+44     	; 0x1438 <__fixunssfdi+0x5a>
    140c:	b8 50       	subi	r27, 0x08	; 8
    140e:	4a f0       	brmi	.+18     	; 0x1422 <__fixunssfdi+0x44>
    1410:	23 2f       	mov	r18, r19
    1412:	34 2f       	mov	r19, r20
    1414:	45 2f       	mov	r20, r21
    1416:	56 2f       	mov	r21, r22
    1418:	67 2f       	mov	r22, r23
    141a:	78 2f       	mov	r23, r24
    141c:	88 27       	eor	r24, r24
    141e:	b8 50       	subi	r27, 0x08	; 8
    1420:	ba f7       	brpl	.-18     	; 0x1410 <__fixunssfdi+0x32>
    1422:	b8 5f       	subi	r27, 0xF8	; 248
    1424:	49 f0       	breq	.+18     	; 0x1438 <__fixunssfdi+0x5a>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	57 95       	ror	r21
    142e:	47 95       	ror	r20
    1430:	37 95       	ror	r19
    1432:	27 95       	ror	r18
    1434:	ba 95       	dec	r27
    1436:	b9 f7       	brne	.-18     	; 0x1426 <__fixunssfdi+0x48>
    1438:	16 f4       	brtc	.+4      	; 0x143e <__fixunssfdi+0x60>
    143a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__fp_negdi>
    143e:	88 94       	clc
    1440:	08 95       	ret
    1442:	88 94       	clc
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	cb 01       	movw	r24, r22
    144a:	08 95       	ret

0000144c <__fixunssfsi>:
    144c:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    1450:	88 f0       	brcs	.+34     	; 0x1474 <__fixunssfsi+0x28>
    1452:	9f 57       	subi	r25, 0x7F	; 127
    1454:	98 f0       	brcs	.+38     	; 0x147c <__fixunssfsi+0x30>
    1456:	b9 2f       	mov	r27, r25
    1458:	99 27       	eor	r25, r25
    145a:	b7 51       	subi	r27, 0x17	; 23
    145c:	b0 f0       	brcs	.+44     	; 0x148a <__fixunssfsi+0x3e>
    145e:	e1 f0       	breq	.+56     	; 0x1498 <__fixunssfsi+0x4c>
    1460:	66 0f       	add	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	1a f0       	brmi	.+6      	; 0x1470 <__fixunssfsi+0x24>
    146a:	ba 95       	dec	r27
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__fixunssfsi+0x14>
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <__fixunssfsi+0x4c>
    1470:	b1 30       	cpi	r27, 0x01	; 1
    1472:	91 f0       	breq	.+36     	; 0x1498 <__fixunssfsi+0x4c>
    1474:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_zero>
    1478:	b1 e0       	ldi	r27, 0x01	; 1
    147a:	08 95       	ret
    147c:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_zero>
    1480:	67 2f       	mov	r22, r23
    1482:	78 2f       	mov	r23, r24
    1484:	88 27       	eor	r24, r24
    1486:	b8 5f       	subi	r27, 0xF8	; 248
    1488:	39 f0       	breq	.+14     	; 0x1498 <__fixunssfsi+0x4c>
    148a:	b9 3f       	cpi	r27, 0xF9	; 249
    148c:	cc f3       	brlt	.-14     	; 0x1480 <__fixunssfsi+0x34>
    148e:	86 95       	lsr	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b3 95       	inc	r27
    1496:	d9 f7       	brne	.-10     	; 0x148e <__fixunssfsi+0x42>
    1498:	3e f4       	brtc	.+14     	; 0x14a8 <__fixunssfsi+0x5c>
    149a:	90 95       	com	r25
    149c:	80 95       	com	r24
    149e:	70 95       	com	r23
    14a0:	61 95       	neg	r22
    14a2:	7f 4f       	sbci	r23, 0xFF	; 255
    14a4:	8f 4f       	sbci	r24, 0xFF	; 255
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	08 95       	ret

000014aa <__floatunsisf>:
    14aa:	e8 94       	clt
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <__floatsisf+0x12>

000014ae <__floatsisf>:
    14ae:	97 fb       	bst	r25, 7
    14b0:	3e f4       	brtc	.+14     	; 0x14c0 <__floatsisf+0x12>
    14b2:	90 95       	com	r25
    14b4:	80 95       	com	r24
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	99 23       	and	r25, r25
    14c2:	a9 f0       	breq	.+42     	; 0x14ee <__floatsisf+0x40>
    14c4:	f9 2f       	mov	r31, r25
    14c6:	96 e9       	ldi	r25, 0x96	; 150
    14c8:	bb 27       	eor	r27, r27
    14ca:	93 95       	inc	r25
    14cc:	f6 95       	lsr	r31
    14ce:	87 95       	ror	r24
    14d0:	77 95       	ror	r23
    14d2:	67 95       	ror	r22
    14d4:	b7 95       	ror	r27
    14d6:	f1 11       	cpse	r31, r1
    14d8:	f8 cf       	rjmp	.-16     	; 0x14ca <__floatsisf+0x1c>
    14da:	fa f4       	brpl	.+62     	; 0x151a <__floatsisf+0x6c>
    14dc:	bb 0f       	add	r27, r27
    14de:	11 f4       	brne	.+4      	; 0x14e4 <__floatsisf+0x36>
    14e0:	60 ff       	sbrs	r22, 0
    14e2:	1b c0       	rjmp	.+54     	; 0x151a <__floatsisf+0x6c>
    14e4:	6f 5f       	subi	r22, 0xFF	; 255
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
    14e8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <__floatsisf+0x6c>
    14ee:	88 23       	and	r24, r24
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <__floatsisf+0x48>
    14f2:	96 e9       	ldi	r25, 0x96	; 150
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <__floatsisf+0x6a>
    14f6:	77 23       	and	r23, r23
    14f8:	21 f0       	breq	.+8      	; 0x1502 <__floatsisf+0x54>
    14fa:	9e e8       	ldi	r25, 0x8E	; 142
    14fc:	87 2f       	mov	r24, r23
    14fe:	76 2f       	mov	r23, r22
    1500:	05 c0       	rjmp	.+10     	; 0x150c <__floatsisf+0x5e>
    1502:	66 23       	and	r22, r22
    1504:	71 f0       	breq	.+28     	; 0x1522 <__floatsisf+0x74>
    1506:	96 e8       	ldi	r25, 0x86	; 134
    1508:	86 2f       	mov	r24, r22
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	2a f0       	brmi	.+10     	; 0x151a <__floatsisf+0x6c>
    1510:	9a 95       	dec	r25
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	da f7       	brpl	.-10     	; 0x1510 <__floatsisf+0x62>
    151a:	88 0f       	add	r24, r24
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret

00001524 <__floatundisf>:
    1524:	e8 94       	clt

00001526 <__fp_di2sf>:
    1526:	f9 2f       	mov	r31, r25
    1528:	96 eb       	ldi	r25, 0xB6	; 182
    152a:	ff 23       	and	r31, r31
    152c:	81 f0       	breq	.+32     	; 0x154e <__fp_di2sf+0x28>
    152e:	12 16       	cp	r1, r18
    1530:	13 06       	cpc	r1, r19
    1532:	14 06       	cpc	r1, r20
    1534:	44 0b       	sbc	r20, r20
    1536:	93 95       	inc	r25
    1538:	f6 95       	lsr	r31
    153a:	87 95       	ror	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	57 95       	ror	r21
    1542:	40 40       	sbci	r20, 0x00	; 0
    1544:	ff 23       	and	r31, r31
    1546:	b9 f7       	brne	.-18     	; 0x1536 <__fp_di2sf+0x10>
    1548:	1b c0       	rjmp	.+54     	; 0x1580 <__fp_di2sf+0x5a>
    154a:	99 27       	eor	r25, r25
    154c:	08 95       	ret
    154e:	88 23       	and	r24, r24
    1550:	51 f4       	brne	.+20     	; 0x1566 <__fp_di2sf+0x40>
    1552:	98 50       	subi	r25, 0x08	; 8
    1554:	d2 f7       	brpl	.-12     	; 0x154a <__fp_di2sf+0x24>
    1556:	87 2b       	or	r24, r23
    1558:	76 2f       	mov	r23, r22
    155a:	65 2f       	mov	r22, r21
    155c:	54 2f       	mov	r21, r20
    155e:	43 2f       	mov	r20, r19
    1560:	32 2f       	mov	r19, r18
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	b1 f3       	breq	.-20     	; 0x1552 <__fp_di2sf+0x2c>
    1566:	12 16       	cp	r1, r18
    1568:	13 06       	cpc	r1, r19
    156a:	14 06       	cpc	r1, r20
    156c:	44 0b       	sbc	r20, r20
    156e:	88 23       	and	r24, r24
    1570:	3a f0       	brmi	.+14     	; 0x1580 <__fp_di2sf+0x5a>
    1572:	9a 95       	dec	r25
    1574:	44 0f       	add	r20, r20
    1576:	55 1f       	adc	r21, r21
    1578:	66 1f       	adc	r22, r22
    157a:	77 1f       	adc	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	ca f7       	brpl	.-14     	; 0x1572 <__fp_di2sf+0x4c>
    1580:	55 23       	and	r21, r21
    1582:	4a f4       	brpl	.+18     	; 0x1596 <__fp_di2sf+0x70>
    1584:	44 0f       	add	r20, r20
    1586:	55 1f       	adc	r21, r21
    1588:	11 f4       	brne	.+4      	; 0x158e <__fp_di2sf+0x68>
    158a:	60 ff       	sbrs	r22, 0
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__fp_di2sf+0x70>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	88 0f       	add	r24, r24
    1598:	96 95       	lsr	r25
    159a:	87 95       	ror	r24
    159c:	97 f9       	bld	r25, 7
    159e:	08 95       	ret

000015a0 <__fp_inf>:
    15a0:	97 f9       	bld	r25, 7
    15a2:	9f 67       	ori	r25, 0x7F	; 127
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__fp_nan>:
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	08 95       	ret

000015b2 <__fp_negdi>:
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	60 95       	com	r22
    15ba:	50 95       	com	r21
    15bc:	40 95       	com	r20
    15be:	30 95       	com	r19
    15c0:	21 95       	neg	r18
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	4f 4f       	sbci	r20, 0xFF	; 255
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	6f 4f       	sbci	r22, 0xFF	; 255
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	8f 4f       	sbci	r24, 0xFF	; 255
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	08 95       	ret

000015d2 <__fp_pscA>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	16 16       	cp	r1, r22
    15d8:	17 06       	cpc	r1, r23
    15da:	18 06       	cpc	r1, r24
    15dc:	09 06       	cpc	r0, r25
    15de:	08 95       	ret

000015e0 <__fp_pscB>:
    15e0:	00 24       	eor	r0, r0
    15e2:	0a 94       	dec	r0
    15e4:	12 16       	cp	r1, r18
    15e6:	13 06       	cpc	r1, r19
    15e8:	14 06       	cpc	r1, r20
    15ea:	05 06       	cpc	r0, r21
    15ec:	08 95       	ret

000015ee <__fp_round>:
    15ee:	09 2e       	mov	r0, r25
    15f0:	03 94       	inc	r0
    15f2:	00 0c       	add	r0, r0
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__fp_round+0xc>
    15f6:	88 23       	and	r24, r24
    15f8:	52 f0       	brmi	.+20     	; 0x160e <__fp_round+0x20>
    15fa:	bb 0f       	add	r27, r27
    15fc:	40 f4       	brcc	.+16     	; 0x160e <__fp_round+0x20>
    15fe:	bf 2b       	or	r27, r31
    1600:	11 f4       	brne	.+4      	; 0x1606 <__fp_round+0x18>
    1602:	60 ff       	sbrs	r22, 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__fp_round+0x20>
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	08 95       	ret

00001610 <__fp_split3>:
    1610:	57 fd       	sbrc	r21, 7
    1612:	90 58       	subi	r25, 0x80	; 128
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	59 f0       	breq	.+22     	; 0x1630 <__fp_splitA+0x10>
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	71 f0       	breq	.+28     	; 0x163a <__fp_splitA+0x1a>
    161e:	47 95       	ror	r20

00001620 <__fp_splitA>:
    1620:	88 0f       	add	r24, r24
    1622:	97 fb       	bst	r25, 7
    1624:	99 1f       	adc	r25, r25
    1626:	61 f0       	breq	.+24     	; 0x1640 <__fp_splitA+0x20>
    1628:	9f 3f       	cpi	r25, 0xFF	; 255
    162a:	79 f0       	breq	.+30     	; 0x164a <__fp_splitA+0x2a>
    162c:	87 95       	ror	r24
    162e:	08 95       	ret
    1630:	12 16       	cp	r1, r18
    1632:	13 06       	cpc	r1, r19
    1634:	14 06       	cpc	r1, r20
    1636:	55 1f       	adc	r21, r21
    1638:	f2 cf       	rjmp	.-28     	; 0x161e <__fp_split3+0xe>
    163a:	46 95       	lsr	r20
    163c:	f1 df       	rcall	.-30     	; 0x1620 <__fp_splitA>
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <__fp_splitA+0x30>
    1640:	16 16       	cp	r1, r22
    1642:	17 06       	cpc	r1, r23
    1644:	18 06       	cpc	r1, r24
    1646:	99 1f       	adc	r25, r25
    1648:	f1 cf       	rjmp	.-30     	; 0x162c <__fp_splitA+0xc>
    164a:	86 95       	lsr	r24
    164c:	71 05       	cpc	r23, r1
    164e:	61 05       	cpc	r22, r1
    1650:	08 94       	sec
    1652:	08 95       	ret

00001654 <__fp_zero>:
    1654:	e8 94       	clt

00001656 <__fp_szero>:
    1656:	bb 27       	eor	r27, r27
    1658:	66 27       	eor	r22, r22
    165a:	77 27       	eor	r23, r23
    165c:	cb 01       	movw	r24, r22
    165e:	97 f9       	bld	r25, 7
    1660:	08 95       	ret

00001662 <__mulsf3>:
    1662:	0e 94 44 0b 	call	0x1688	; 0x1688 <__mulsf3x>
    1666:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    166a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    166e:	38 f0       	brcs	.+14     	; 0x167e <__mulsf3+0x1c>
    1670:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    1674:	20 f0       	brcs	.+8      	; 0x167e <__mulsf3+0x1c>
    1676:	95 23       	and	r25, r21
    1678:	11 f0       	breq	.+4      	; 0x167e <__mulsf3+0x1c>
    167a:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>
    167e:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__fp_nan>
    1682:	11 24       	eor	r1, r1
    1684:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>

00001688 <__mulsf3x>:
    1688:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    168c:	70 f3       	brcs	.-36     	; 0x166a <__mulsf3+0x8>

0000168e <__mulsf3_pse>:
    168e:	95 9f       	mul	r25, r21
    1690:	c1 f3       	breq	.-16     	; 0x1682 <__mulsf3+0x20>
    1692:	95 0f       	add	r25, r21
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	55 1f       	adc	r21, r21
    1698:	62 9f       	mul	r22, r18
    169a:	f0 01       	movw	r30, r0
    169c:	72 9f       	mul	r23, r18
    169e:	bb 27       	eor	r27, r27
    16a0:	f0 0d       	add	r31, r0
    16a2:	b1 1d       	adc	r27, r1
    16a4:	63 9f       	mul	r22, r19
    16a6:	aa 27       	eor	r26, r26
    16a8:	f0 0d       	add	r31, r0
    16aa:	b1 1d       	adc	r27, r1
    16ac:	aa 1f       	adc	r26, r26
    16ae:	64 9f       	mul	r22, r20
    16b0:	66 27       	eor	r22, r22
    16b2:	b0 0d       	add	r27, r0
    16b4:	a1 1d       	adc	r26, r1
    16b6:	66 1f       	adc	r22, r22
    16b8:	82 9f       	mul	r24, r18
    16ba:	22 27       	eor	r18, r18
    16bc:	b0 0d       	add	r27, r0
    16be:	a1 1d       	adc	r26, r1
    16c0:	62 1f       	adc	r22, r18
    16c2:	73 9f       	mul	r23, r19
    16c4:	b0 0d       	add	r27, r0
    16c6:	a1 1d       	adc	r26, r1
    16c8:	62 1f       	adc	r22, r18
    16ca:	83 9f       	mul	r24, r19
    16cc:	a0 0d       	add	r26, r0
    16ce:	61 1d       	adc	r22, r1
    16d0:	22 1f       	adc	r18, r18
    16d2:	74 9f       	mul	r23, r20
    16d4:	33 27       	eor	r19, r19
    16d6:	a0 0d       	add	r26, r0
    16d8:	61 1d       	adc	r22, r1
    16da:	23 1f       	adc	r18, r19
    16dc:	84 9f       	mul	r24, r20
    16de:	60 0d       	add	r22, r0
    16e0:	21 1d       	adc	r18, r1
    16e2:	82 2f       	mov	r24, r18
    16e4:	76 2f       	mov	r23, r22
    16e6:	6a 2f       	mov	r22, r26
    16e8:	11 24       	eor	r1, r1
    16ea:	9f 57       	subi	r25, 0x7F	; 127
    16ec:	50 40       	sbci	r21, 0x00	; 0
    16ee:	9a f0       	brmi	.+38     	; 0x1716 <__mulsf3_pse+0x88>
    16f0:	f1 f0       	breq	.+60     	; 0x172e <__mulsf3_pse+0xa0>
    16f2:	88 23       	and	r24, r24
    16f4:	4a f0       	brmi	.+18     	; 0x1708 <__mulsf3_pse+0x7a>
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	bb 1f       	adc	r27, r27
    16fc:	66 1f       	adc	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	91 50       	subi	r25, 0x01	; 1
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	a9 f7       	brne	.-22     	; 0x16f2 <__mulsf3_pse+0x64>
    1708:	9e 3f       	cpi	r25, 0xFE	; 254
    170a:	51 05       	cpc	r21, r1
    170c:	80 f0       	brcs	.+32     	; 0x172e <__mulsf3_pse+0xa0>
    170e:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_inf>
    1712:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    1716:	5f 3f       	cpi	r21, 0xFF	; 255
    1718:	e4 f3       	brlt	.-8      	; 0x1712 <__mulsf3_pse+0x84>
    171a:	98 3e       	cpi	r25, 0xE8	; 232
    171c:	d4 f3       	brlt	.-12     	; 0x1712 <__mulsf3_pse+0x84>
    171e:	86 95       	lsr	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	b7 95       	ror	r27
    1726:	f7 95       	ror	r31
    1728:	e7 95       	ror	r30
    172a:	9f 5f       	subi	r25, 0xFF	; 255
    172c:	c1 f7       	brne	.-16     	; 0x171e <__mulsf3_pse+0x90>
    172e:	fe 2b       	or	r31, r30
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret

0000173c <__muluhisi3>:
    173c:	30 d0       	rcall	.+96     	; 0x179e <__umulhisi3>
    173e:	a5 9f       	mul	r26, r21
    1740:	90 0d       	add	r25, r0
    1742:	b4 9f       	mul	r27, r20
    1744:	90 0d       	add	r25, r0
    1746:	a4 9f       	mul	r26, r20
    1748:	80 0d       	add	r24, r0
    174a:	91 1d       	adc	r25, r1
    174c:	11 24       	eor	r1, r1
    174e:	08 95       	ret

00001750 <__ashrdi3>:
    1750:	97 fb       	bst	r25, 7
    1752:	10 f8       	bld	r1, 0

00001754 <__lshrdi3>:
    1754:	16 94       	lsr	r1
    1756:	00 08       	sbc	r0, r0
    1758:	0f 93       	push	r16
    175a:	08 30       	cpi	r16, 0x08	; 8
    175c:	98 f0       	brcs	.+38     	; 0x1784 <__lshrdi3+0x30>
    175e:	08 50       	subi	r16, 0x08	; 8
    1760:	23 2f       	mov	r18, r19
    1762:	34 2f       	mov	r19, r20
    1764:	45 2f       	mov	r20, r21
    1766:	56 2f       	mov	r21, r22
    1768:	67 2f       	mov	r22, r23
    176a:	78 2f       	mov	r23, r24
    176c:	89 2f       	mov	r24, r25
    176e:	90 2d       	mov	r25, r0
    1770:	f4 cf       	rjmp	.-24     	; 0x175a <__lshrdi3+0x6>
    1772:	05 94       	asr	r0
    1774:	97 95       	ror	r25
    1776:	87 95       	ror	r24
    1778:	77 95       	ror	r23
    177a:	67 95       	ror	r22
    177c:	57 95       	ror	r21
    177e:	47 95       	ror	r20
    1780:	37 95       	ror	r19
    1782:	27 95       	ror	r18
    1784:	0a 95       	dec	r16
    1786:	aa f7       	brpl	.-22     	; 0x1772 <__lshrdi3+0x1e>
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <__subdi3>:
    178c:	2a 19       	sub	r18, r10
    178e:	3b 09       	sbc	r19, r11
    1790:	4c 09       	sbc	r20, r12
    1792:	5d 09       	sbc	r21, r13
    1794:	6e 09       	sbc	r22, r14
    1796:	7f 09       	sbc	r23, r15
    1798:	80 0b       	sbc	r24, r16
    179a:	91 0b       	sbc	r25, r17
    179c:	08 95       	ret

0000179e <__umulhisi3>:
    179e:	a2 9f       	mul	r26, r18
    17a0:	b0 01       	movw	r22, r0
    17a2:	b3 9f       	mul	r27, r19
    17a4:	c0 01       	movw	r24, r0
    17a6:	a3 9f       	mul	r26, r19
    17a8:	01 d0       	rcall	.+2      	; 0x17ac <__umulhisi3+0xe>
    17aa:	b2 9f       	mul	r27, r18
    17ac:	70 0d       	add	r23, r0
    17ae:	81 1d       	adc	r24, r1
    17b0:	11 24       	eor	r1, r1
    17b2:	91 1d       	adc	r25, r1
    17b4:	08 95       	ret

000017b6 <_exit>:
    17b6:	f8 94       	cli

000017b8 <__stop_program>:
    17b8:	ff cf       	rjmp	.-2      	; 0x17b8 <__stop_program>
