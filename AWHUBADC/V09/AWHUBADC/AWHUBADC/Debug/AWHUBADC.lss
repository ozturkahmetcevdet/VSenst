
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00803e00  00000fc9  0000107d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  00008fc8  00000fc8  0000107c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000f2  00803e7a  00803e7a  000010f7  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  00001168  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000065a5  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002682  00000000  00000000  000079a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d74  00000000  00000000  0000a027  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000494  00000000  00000000  0000bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000233c  00000000  00000000  0000c230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b90  00000000  00000000  0000e56c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e9 ec       	ldi	r30, 0xC9	; 201
  48:	ff e0       	ldi	r31, 0x0F	; 15
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 37       	cpi	r26, 0x7A	; 122
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	aa e7       	ldi	r26, 0x7A	; 122
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 36       	cpi	r26, 0x6C	; 108
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	29 d0       	rcall	.+82     	; 0xba <main>
  68:	ad c7       	rjmp	.+3930   	; 0xfc4 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
  6c:	4a d3       	rcall	.+1684   	; 0x702 <system_init>
  6e:	08 95       	ret

00000070 <__vector_7>:
  70:	1f 92       	push	r1
  72:	0f 92       	push	r0
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	0f 92       	push	r0
  78:	11 24       	eor	r1, r1
  7a:	8f 93       	push	r24
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f718b>
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_3>:
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f7441>
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <ConfigPIT>:

uint8_t sleepTimeSequence = T_2048;

void ConfigPIT(uint8_t timeSequence)
{
	RTC.PITCTRLA = timeSequence 
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	e0 e4       	ldi	r30, 0x40	; 64
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	80 8b       	std	Z+16, r24	; 0x10
	| 1 << RTC_PITEN_bp;
	RTC.PITINTFLAGS = RTC_PI_bm;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	83 8b       	std	Z+19, r24	; 0x13
  b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
	atmel_start_init();
  ba:	d8 df       	rcall	.-80     	; 0x6c <atmel_start_init>
	
	batVar = FLASH_0_read_eeprom_byte(0);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	83 d3       	rcall	.+1798   	; 0x7c8 <FLASH_0_read_eeprom_byte>
	batVar = batVar > 7 ? 7 : batVar;
  c2:	c8 2f       	mov	r28, r24
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	08 f0       	brcs	.+2      	; 0xca <main+0x10>
  c8:	c7 e0       	ldi	r28, 0x07	; 7
  ca:	c0 93 7a 3e 	sts	0x3E7A, r28	; 0x803e7a <__data_end>
	BatteryLevelCounter = ((uint64_t)((float)BatteryLevelCounter * (float)batVar)) >> 3;
  ce:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
  d2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
  d6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
  da:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
  de:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
  e2:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
  e6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
  ea:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
  ee:	d2 d5       	rcall	.+2980   	; 0xc94 <__floatundisf>
  f0:	6b 01       	movw	r12, r22
  f2:	7c 01       	movw	r14, r24
  f4:	6c 2f       	mov	r22, r28
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	8e d5       	rcall	.+2844   	; 0xc1a <__floatunsisf>
  fe:	9b 01       	movw	r18, r22
 100:	ac 01       	movw	r20, r24
 102:	c7 01       	movw	r24, r14
 104:	b6 01       	movw	r22, r12
 106:	36 d6       	rcall	.+3180   	; 0xd74 <__mulsf3>
 108:	51 d5       	rcall	.+2722   	; 0xbac <__fixunssfdi>
 10a:	03 e0       	ldi	r16, 0x03	; 3
 10c:	36 d7       	rcall	.+3692   	; 0xf7a <__lshrdi3>
 10e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
 112:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
 116:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
 11a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
 11e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
 122:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
 126:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
 12a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 12e:	89 b1       	in	r24, 0x09	; 9
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	89 b9       	out	0x09, r24	; 9
	
	DATA_set_level(false);
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM8;
 134:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f8143>
 138:	ef e5       	ldi	r30, 0x5F	; 95
 13a:	fe e3       	ldi	r31, 0x3E	; 62
 13c:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM9;
 13e:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f8144>
 142:	87 83       	std	Z+7, r24	; 0x07
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
 144:	46 e0       	ldi	r20, 0x06	; 6
 146:	6a e1       	ldi	r22, 0x1A	; 26
 148:	cf 01       	movw	r24, r30
 14a:	55 d4       	rcall	.+2218   	; 0x9f6 <SX1243Init>
	{
		#if B_STYLE == (0)
		BatteryLevelCounter -= (BAT_ADC_CONSTANT >> sleepTimeSequence);
		#endif
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
 14c:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
 150:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
 154:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
 158:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
 15c:	81 38       	cpi	r24, 0x81	; 129
 15e:	91 45       	sbci	r25, 0x51	; 81
 160:	a1 40       	sbci	r26, 0x01	; 1
 162:	b1 05       	cpc	r27, r1
 164:	d0 f1       	brcs	.+116    	; 0x1da <main+0x120>
		{
			batVar = (uint8_t)((uint64_t)(BatteryLevelCounter << 3) / (uint64_t)BAT_FULL_CAPACITY);
 166:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
 16a:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
 16e:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
 172:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
 176:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
 17a:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
 17e:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
 182:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
 186:	03 e0       	ldi	r16, 0x03	; 3
 188:	dd d6       	rcall	.+3514   	; 0xf44 <__ashldi3>
 18a:	a1 2c       	mov	r10, r1
 18c:	0f 2e       	mov	r0, r31
 18e:	f4 e4       	ldi	r31, 0x44	; 68
 190:	bf 2e       	mov	r11, r31
 192:	f0 2d       	mov	r31, r0
 194:	0f 2e       	mov	r0, r31
 196:	f6 ee       	ldi	r31, 0xE6	; 230
 198:	cf 2e       	mov	r12, r31
 19a:	f0 2d       	mov	r31, r0
 19c:	0f 2e       	mov	r0, r31
 19e:	fd e2       	ldi	r31, 0x2D	; 45
 1a0:	df 2e       	mov	r13, r31
 1a2:	f0 2d       	mov	r31, r0
 1a4:	68 94       	set
 1a6:	ee 24       	eor	r14, r14
 1a8:	e1 f8       	bld	r14, 1
 1aa:	f1 2c       	mov	r15, r1
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	7f d6       	rcall	.+3326   	; 0xeb0 <__udivdi3>
			batVar = batVar > 7 ? 7 : batVar;
 1b2:	62 2f       	mov	r22, r18
 1b4:	28 30       	cpi	r18, 0x08	; 8
 1b6:	08 f0       	brcs	.+2      	; 0x1ba <main+0x100>
 1b8:	67 e0       	ldi	r22, 0x07	; 7
 1ba:	60 93 7a 3e 	sts	0x3E7A, r22	; 0x803e7a <__data_end>
			FLASH_0_write_eeprom_byte(0, batVar);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	06 d3       	rcall	.+1548   	; 0x7d0 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
 1c4:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <BatteryLevelCalculateCounter>
 1c8:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
 1cc:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
 1d0:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
}

static inline void RSTCTRL_clear_reset_cause(void)
{
	RSTCTRL.RSTFR
	    = RSTCTRL_UPDIRF_bm | RSTCTRL_SWRF_bm | RSTCTRL_WDRF_bm | RSTCTRL_EXTRF_bm | RSTCTRL_BORF_bm | RSTCTRL_PORF_bm;
 1d4:	8f e3       	ldi	r24, 0x3F	; 63
 1d6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <payloadBufferStartByte+0x7f7078>
			RSTCTRL_clear_reset_cause();
		}
		BatteryLevelCalculateCounter++;
 1da:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
 1de:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
 1e2:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
 1e6:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
 1f0:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <BatteryLevelCalculateCounter>
 1f4:	90 93 02 3e 	sts	0x3E02, r25	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
 1f8:	a0 93 03 3e 	sts	0x3E03, r26	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
 1fc:	b0 93 04 3e 	sts	0x3E04, r27	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 200:	04 e1       	ldi	r16, 0x14	; 20
 202:	14 e0       	ldi	r17, 0x04	; 4
 204:	f8 01       	movw	r30, r16
 206:	80 81       	ld	r24, Z
 208:	88 60       	ori	r24, 0x08	; 8
 20a:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 20c:	c4 e3       	ldi	r28, 0x34	; 52
 20e:	d4 e0       	ldi	r29, 0x04	; 4
 210:	88 81       	ld	r24, Y
 212:	88 60       	ori	r24, 0x08	; 8
 214:	88 83       	st	Y, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 216:	a5 e1       	ldi	r26, 0x15	; 21
 218:	b4 e0       	ldi	r27, 0x04	; 4
 21a:	8c 91       	ld	r24, X
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 220:	65 e3       	ldi	r22, 0x35	; 53
 222:	74 e0       	ldi	r23, 0x04	; 4
 224:	fb 01       	movw	r30, r22
 226:	80 81       	ld	r24, Z
 228:	88 60       	ori	r24, 0x08	; 8
 22a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 22c:	80 b1       	in	r24, 0x00	; 0
 22e:	8f 7e       	andi	r24, 0xEF	; 239
 230:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 232:	84 b1       	in	r24, 0x04	; 4
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 238:	80 b1       	in	r24, 0x00	; 0
 23a:	8f 7d       	andi	r24, 0xDF	; 223
 23c:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	8f 7d       	andi	r24, 0xDF	; 223
 242:	84 b9       	out	0x04, r24	; 4
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
 244:	82 b1       	in	r24, 0x02	; 2
		SB1_set_dir(PORT_DIR_IN);
		SB2_set_dir(PORT_DIR_IN);
		PSD1_set_dir(PORT_DIR_IN);
		PSD2_set_dir(PORT_DIR_IN);
		
		uint8_t In_SB1  = !SB1_get_level();
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	89 27       	eor	r24, r25
 24e:	81 70       	andi	r24, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
 250:	46 b1       	in	r20, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
 252:	42 95       	swap	r20
 254:	4f 70       	andi	r20, 0x0F	; 15
 256:	49 27       	eor	r20, r25
 258:	41 70       	andi	r20, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
 25a:	22 b1       	in	r18, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
 25c:	22 95       	swap	r18
 25e:	26 95       	lsr	r18
 260:	27 70       	andi	r18, 0x07	; 7
 262:	29 27       	eor	r18, r25
 264:	21 70       	andi	r18, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
 266:	36 b1       	in	r19, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
 268:	32 95       	swap	r19
 26a:	36 95       	lsr	r19
 26c:	37 70       	andi	r19, 0x07	; 7
 26e:	93 27       	eor	r25, r19
 270:	91 70       	andi	r25, 0x01	; 1
		
		#if B_STYLE == (1)
		Const_In_PSD1 |= In_PSD1;
 272:	30 91 80 3e 	lds	r19, 0x3E80	; 0x803e80 <Const_In_PSD1>
 276:	32 2b       	or	r19, r18
 278:	30 93 80 3e 	sts	0x3E80, r19	; 0x803e80 <Const_In_PSD1>
		Const_In_PSD2 |= In_PSD2;
 27c:	30 91 7f 3e 	lds	r19, 0x3E7F	; 0x803e7f <Const_In_PSD2>
 280:	39 2b       	or	r19, r25
 282:	30 93 7f 3e 	sts	0x3E7F, r19	; 0x803e7f <Const_In_PSD2>
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 286:	f8 01       	movw	r30, r16
 288:	30 81       	ld	r19, Z
 28a:	37 7f       	andi	r19, 0xF7	; 247
 28c:	30 83       	st	Z, r19
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 28e:	38 81       	ld	r19, Y
 290:	37 7f       	andi	r19, 0xF7	; 247
 292:	38 83       	st	Y, r19
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 294:	3c 91       	ld	r19, X
 296:	37 7f       	andi	r19, 0xF7	; 247
 298:	3c 93       	st	X, r19
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 29a:	fb 01       	movw	r30, r22
 29c:	30 81       	ld	r19, Z
 29e:	37 7f       	andi	r19, 0xF7	; 247
 2a0:	30 83       	st	Z, r19
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 2a2:	31 b1       	in	r19, 0x01	; 1
 2a4:	3f 7e       	andi	r19, 0xEF	; 239
 2a6:	31 b9       	out	0x01, r19	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 2a8:	35 b1       	in	r19, 0x05	; 5
 2aa:	3f 7e       	andi	r19, 0xEF	; 239
 2ac:	35 b9       	out	0x05, r19	; 5
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 2ae:	31 b1       	in	r19, 0x01	; 1
 2b0:	3f 7d       	andi	r19, 0xDF	; 223
 2b2:	31 b9       	out	0x01, r19	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 2b4:	35 b1       	in	r19, 0x05	; 5
 2b6:	3f 7d       	andi	r19, 0xDF	; 223
 2b8:	35 b9       	out	0x05, r19	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 2ba:	30 b1       	in	r19, 0x00	; 0
 2bc:	30 61       	ori	r19, 0x10	; 16
 2be:	30 b9       	out	0x00, r19	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 2c0:	34 b1       	in	r19, 0x04	; 4
 2c2:	30 61       	ori	r19, 0x10	; 16
 2c4:	34 b9       	out	0x04, r19	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 2c6:	30 b1       	in	r19, 0x00	; 0
 2c8:	30 62       	ori	r19, 0x20	; 32
 2ca:	30 b9       	out	0x00, r19	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 2cc:	34 b1       	in	r19, 0x04	; 4
 2ce:	30 62       	ori	r19, 0x20	; 32
 2d0:	34 b9       	out	0x04, r19	; 4
			
			isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[j].RawValue > (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue + DATA_CHANGE_CONSTANT) || QTOUCHADC_REFERANCE_FILTER_P[j].RawValue < (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue - DATA_CHANGE_CONSTANT);
			QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
		}
		#else
		QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue = In_PSD1 * 100 * Const_In_PSD1;
 2d2:	f4 e6       	ldi	r31, 0x64	; 100
 2d4:	2f 9f       	mul	r18, r31
 2d6:	b0 01       	movw	r22, r0
 2d8:	11 24       	eor	r1, r1
 2da:	20 91 80 3e 	lds	r18, 0x3E80	; 0x803e80 <Const_In_PSD1>
 2de:	26 9f       	mul	r18, r22
 2e0:	40 01       	movw	r8, r0
 2e2:	27 9f       	mul	r18, r23
 2e4:	90 0c       	add	r9, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	09 2c       	mov	r0, r9
 2ea:	00 0c       	add	r0, r0
 2ec:	aa 08       	sbc	r10, r10
 2ee:	bb 08       	sbc	r11, r11
 2f0:	ed e0       	ldi	r30, 0x0D	; 13
 2f2:	fe e3       	ldi	r31, 0x3E	; 62
 2f4:	80 82       	st	Z, r8
 2f6:	91 82       	std	Z+1, r9	; 0x01
 2f8:	a2 82       	std	Z+2, r10	; 0x02
 2fa:	b3 82       	std	Z+3, r11	; 0x03
		isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[0].RawValue != QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue;
 2fc:	a0 91 7b 3e 	lds	r26, 0x3E7B	; 0x803e7b <isDataChanged>
 300:	c7 88       	ldd	r12, Z+23	; 0x17
 302:	d0 8c       	ldd	r13, Z+24	; 0x18
 304:	e1 8c       	ldd	r14, Z+25	; 0x19
 306:	f2 8c       	ldd	r15, Z+26	; 0x1a
 308:	31 e0       	ldi	r19, 0x01	; 1
 30a:	c8 14       	cp	r12, r8
 30c:	d9 04       	cpc	r13, r9
 30e:	ea 04       	cpc	r14, r10
 310:	fb 04       	cpc	r15, r11
 312:	09 f4       	brne	.+2      	; 0x316 <__DATA_REGION_LENGTH__+0x116>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	3a 2b       	or	r19, r26
		QTOUCHADC_REFERANCE_FILTER_P[0].RawValue = QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue;
 318:	cd e0       	ldi	r28, 0x0D	; 13
 31a:	de e3       	ldi	r29, 0x3E	; 62
 31c:	8f 8a       	std	Y+23, r8	; 0x17
 31e:	98 8e       	std	Y+24, r9	; 0x18
 320:	a9 8e       	std	Y+25, r10	; 0x19
 322:	ba 8e       	std	Y+26, r11	; 0x1a
		
		QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue = In_PSD2 * 100 * Const_In_PSD2;
 324:	54 e6       	ldi	r21, 0x64	; 100
 326:	95 9f       	mul	r25, r21
 328:	b0 01       	movw	r22, r0
 32a:	11 24       	eor	r1, r1
 32c:	e0 91 7f 3e 	lds	r30, 0x3E7F	; 0x803e7f <Const_In_PSD2>
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	6e 9f       	mul	r22, r30
 334:	60 01       	movw	r12, r0
 336:	6f 9f       	mul	r22, r31
 338:	d0 0c       	add	r13, r0
 33a:	7e 9f       	mul	r23, r30
 33c:	d0 0c       	add	r13, r0
 33e:	11 24       	eor	r1, r1
 340:	0d 2c       	mov	r0, r13
 342:	00 0c       	add	r0, r0
 344:	ee 08       	sbc	r14, r14
 346:	ff 08       	sbc	r15, r15
 348:	cf a2       	std	Y+39, r12	; 0x27
 34a:	d8 a6       	std	Y+40, r13	; 0x28
 34c:	e9 a6       	std	Y+41, r14	; 0x29
 34e:	fa a6       	std	Y+42, r15	; 0x2a
		isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[1].RawValue != QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue;
 350:	40 90 4b 3e 	lds	r4, 0x3E4B	; 0x803e4b <QTOUCHADC_REFERANCE_FILTER_P+0x3e>
 354:	50 90 4c 3e 	lds	r5, 0x3E4C	; 0x803e4c <QTOUCHADC_REFERANCE_FILTER_P+0x3f>
 358:	60 90 4d 3e 	lds	r6, 0x3E4D	; 0x803e4d <QTOUCHADC_REFERANCE_FILTER_P+0x40>
 35c:	70 90 4e 3e 	lds	r7, 0x3E4E	; 0x803e4e <QTOUCHADC_REFERANCE_FILTER_P+0x41>
 360:	a1 e0       	ldi	r26, 0x01	; 1
 362:	4c 14       	cp	r4, r12
 364:	5d 04       	cpc	r5, r13
 366:	6e 04       	cpc	r6, r14
 368:	7f 04       	cpc	r7, r15
 36a:	09 f4       	brne	.+2      	; 0x36e <__DATA_REGION_LENGTH__+0x16e>
 36c:	a0 e0       	ldi	r26, 0x00	; 0
 36e:	a3 2b       	or	r26, r19
 370:	a0 93 7b 3e 	sts	0x3E7B, r26	; 0x803e7b <isDataChanged>
		QTOUCHADC_REFERANCE_FILTER_P[1].RawValue = QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue;
 374:	c0 92 4b 3e 	sts	0x3E4B, r12	; 0x803e4b <QTOUCHADC_REFERANCE_FILTER_P+0x3e>
 378:	d0 92 4c 3e 	sts	0x3E4C, r13	; 0x803e4c <QTOUCHADC_REFERANCE_FILTER_P+0x3f>
 37c:	e0 92 4d 3e 	sts	0x3E4D, r14	; 0x803e4d <QTOUCHADC_REFERANCE_FILTER_P+0x40>
 380:	f0 92 4e 3e 	sts	0x3E4E, r15	; 0x803e4e <QTOUCHADC_REFERANCE_FILTER_P+0x41>
		
		#if B_STYLE == (0)
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((In_PSD2       << 1) & 0x02) | ((In_PSD1       << 0) & 0x01)) & 0x0F)));
		isDataChanged = QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate || QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate ? false : isDataChanged;	
		#else
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((Const_In_PSD2 << 1) & 0x02) | ((Const_In_PSD1 << 0) & 0x01)) & 0x0F)));
 384:	10 91 67 3e 	lds	r17, 0x3E67	; 0x803e67 <payloadBuffer+0x8>
 388:	90 91 40 00 	lds	r25, 0x0040	; 0x800040 <payloadBufferStartByte+0x7f7078>
 38c:	99 23       	and	r25, r25
 38e:	11 f0       	breq	.+4      	; 0x394 <__DATA_REGION_LENGTH__+0x194>
 390:	b0 e8       	ldi	r27, 0x80	; 128
 392:	01 c0       	rjmp	.+2      	; 0x396 <__DATA_REGION_LENGTH__+0x196>
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	c0 91 7a 3e 	lds	r28, 0x3E7A	; 0x803e7a <__data_end>
 39a:	90 e1       	ldi	r25, 0x10	; 16
 39c:	c9 9f       	mul	r28, r25
 39e:	e0 01       	movw	r28, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	44 0f       	add	r20, r20
 3aa:	55 1f       	adc	r21, r21
 3ac:	44 0f       	add	r20, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	68 2f       	mov	r22, r24
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	cb 01       	movw	r24, r22
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	48 70       	andi	r20, 0x08	; 8
 3c4:	58 2f       	mov	r21, r24
 3c6:	54 70       	andi	r21, 0x04	; 4
 3c8:	45 2b       	or	r20, r21
 3ca:	3e 2f       	mov	r19, r30
 3cc:	32 70       	andi	r19, 0x02	; 2
 3ce:	84 2f       	mov	r24, r20
 3d0:	83 2b       	or	r24, r19
 3d2:	21 70       	andi	r18, 0x01	; 1
 3d4:	98 2f       	mov	r25, r24
 3d6:	92 2b       	or	r25, r18
 3d8:	c0 77       	andi	r28, 0x70	; 112
 3da:	cb 2b       	or	r28, r27
 3dc:	89 2f       	mov	r24, r25
 3de:	8c 2b       	or	r24, r28
 3e0:	80 93 83 3e 	sts	0x3E83, r24	; 0x803e83 <seatFlagStatus>
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	18 13       	cpse	r17, r24
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <__DATA_REGION_LENGTH__+0x1ec>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 2b       	or	r26, r25
		#endif
			
		repeatDataCounter = (isDataChanged && (repeatDataCounter <= (TRANSMIT_COUNT >> 1))) || (dataRefreshCounter == 0) ? TRANSMIT_COUNT : repeatDataCounter;
 3ee:	21 f0       	breq	.+8      	; 0x3f8 <__DATA_REGION_LENGTH__+0x1f8>
 3f0:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <repeatDataCounter>
 3f4:	99 30       	cpi	r25, 0x09	; 9
 3f6:	48 f0       	brcs	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f8:	20 91 5c 3e 	lds	r18, 0x3E5C	; 0x803e5c <dataRefreshCounter>
 3fc:	30 91 5d 3e 	lds	r19, 0x3E5D	; 0x803e5d <dataRefreshCounter+0x1>
 400:	23 2b       	or	r18, r19
 402:	29 f0       	breq	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <repeatDataCounter>
 408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	90 e1       	ldi	r25, 0x10	; 16
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	90 e1       	ldi	r25, 0x10	; 16
 410:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <repeatDataCounter>
		dataRefreshCounter -= (dataRefreshCounter > 0) && (repeatDataCounter == 0) ? 1 : DATA_REFRESH_TIME;
 414:	20 91 5c 3e 	lds	r18, 0x3E5C	; 0x803e5c <dataRefreshCounter>
 418:	30 91 5d 3e 	lds	r19, 0x3E5D	; 0x803e5d <dataRefreshCounter+0x1>
 41c:	21 15       	cp	r18, r1
 41e:	31 05       	cpc	r19, r1
 420:	29 f0       	breq	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 422:	99 23       	and	r25, r25
 424:	31 f0       	breq	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 426:	4c e2       	ldi	r20, 0x2C	; 44
 428:	51 e0       	ldi	r21, 0x01	; 1
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	4c e2       	ldi	r20, 0x2C	; 44
 42e:	51 e0       	ldi	r21, 0x01	; 1
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	24 1b       	sub	r18, r20
 438:	35 0b       	sbc	r19, r21
 43a:	20 93 5c 3e 	sts	0x3E5C, r18	; 0x803e5c <dataRefreshCounter>
 43e:	30 93 5d 3e 	sts	0x3E5D, r19	; 0x803e5d <dataRefreshCounter+0x1>
		isDataChanged = false;		
 442:	10 92 7b 3e 	sts	0x3E7B, r1	; 0x803e7b <isDataChanged>
		
		if(repeatDataCounter && payloadReady == false)
 446:	99 23       	and	r25, r25
 448:	99 f1       	breq	.+102    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 44a:	20 91 7e 3e 	lds	r18, 0x3E7E	; 0x803e7e <payloadReady>
 44e:	21 11       	cpse	r18, r1
 450:	2f c0       	rjmp	.+94     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		{
			if (payloadCounterUNCHANGE > 2)
 452:	90 91 7c 3e 	lds	r25, 0x3E7C	; 0x803e7c <payloadCounterUNCHANGE>
 456:	93 30       	cpi	r25, 0x03	; 3
 458:	10 f1       	brcs	.+68     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			{
				payloadBuffer[payloadBufferStartByte +  3 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 8) & 0x00FF);
 45a:	30 91 7d 3e 	lds	r19, 0x3E7D	; 0x803e7d <payloadCounter>
 45e:	43 2f       	mov	r20, r19
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	fa 01       	movw	r30, r20
 464:	e8 59       	subi	r30, 0x98	; 152
 466:	f1 4c       	sbci	r31, 0xC1	; 193
 468:	90 82       	st	Z, r9
				payloadBuffer[payloadBufferStartByte +  4 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 0) & 0x00FF);
 46a:	fa 01       	movw	r30, r20
 46c:	e7 59       	subi	r30, 0x97	; 151
 46e:	f1 4c       	sbci	r31, 0xC1	; 193
 470:	80 82       	st	Z, r8
				payloadBuffer[payloadBufferStartByte + 11 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 8) & 0x00FF);
 472:	fa 01       	movw	r30, r20
 474:	e0 59       	subi	r30, 0x90	; 144
 476:	f1 4c       	sbci	r31, 0xC1	; 193
 478:	d0 82       	st	Z, r13
				payloadBuffer[payloadBufferStartByte + 12 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 0) & 0x00FF);
 47a:	fa 01       	movw	r30, r20
 47c:	ef 58       	subi	r30, 0x8F	; 143
 47e:	f1 4c       	sbci	r31, 0xC1	; 193
 480:	c0 82       	st	Z, r12
				
				payloadCounter += payloadCounter < 6 ? 2 : -payloadCounter;
 482:	36 30       	cpi	r19, 0x06	; 6
 484:	18 f0       	brcs	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 486:	43 2f       	mov	r20, r19
 488:	41 95       	neg	r20
 48a:	01 c0       	rjmp	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	42 e0       	ldi	r20, 0x02	; 2
 48e:	34 0f       	add	r19, r20
 490:	30 93 7d 3e 	sts	0x3E7D, r19	; 0x803e7d <payloadCounter>
				payloadReady = 	payloadCounter == 0 ? true : payloadReady;
 494:	31 11       	cpse	r19, r1
 496:	01 c0       	rjmp	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	20 93 7e 3e 	sts	0x3E7E, r18	; 0x803e7e <payloadReady>
			}
			payloadCounterUNCHANGE += payloadCounterUNCHANGE < 6 ? 1 : -payloadCounterUNCHANGE;
 49e:	96 30       	cpi	r25, 0x06	; 6
 4a0:	18 f0       	brcs	.+6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a2:	29 2f       	mov	r18, r25
 4a4:	21 95       	neg	r18
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	92 0f       	add	r25, r18
 4ac:	90 93 7c 3e 	sts	0x3E7C, r25	; 0x803e7c <payloadCounterUNCHANGE>
		}
		
		if(startupDelay == 0 && payloadReady)
 4b0:	90 91 5b 3e 	lds	r25, 0x3E5B	; 0x803e5b <startupDelay>
 4b4:	91 11       	cpse	r25, r1
 4b6:	53 c0       	rjmp	.+166    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 4b8:	90 91 7e 3e 	lds	r25, 0x3E7E	; 0x803e7e <payloadReady>
 4bc:	99 23       	and	r25, r25
 4be:	09 f4       	brne	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c0:	4e c0       	rjmp	.+156    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
		{
			payloadBuffer[payloadBufferStartByte +  2] = seatFlagStatus;
 4c2:	cf e5       	ldi	r28, 0x5F	; 95
 4c4:	de e3       	ldi	r29, 0x3E	; 62
 4c6:	88 87       	std	Y+8, r24	; 0x08
			payloadBuffer[payloadBufferStartByte + 19] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 2]);
 4c8:	87 e6       	ldi	r24, 0x67	; 103
 4ca:	9e e3       	ldi	r25, 0x3E	; 62
 4cc:	d7 d2       	rcall	.+1454   	; 0xa7c <SX1243CRC8>
 4ce:	89 8f       	std	Y+25, r24	; 0x19
			
			bool transmitterStatus = SX1243Process() == SX_OK;
 4d0:	09 d3       	rcall	.+1554   	; 0xae4 <SX1243Process>
			repeatDataCounter -= transmitterStatus ? 1 : -1;
 4d2:	90 91 5e 3e 	lds	r25, 0x3E5E	; 0x803e5e <repeatDataCounter>
 4d6:	81 11       	cpse	r24, r1
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4da:	21 e0       	ldi	r18, 0x01	; 1
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	92 1b       	sub	r25, r18
 4e2:	90 93 5e 3e 	sts	0x3E5E, r25	; 0x803e5e <repeatDataCounter>
			payloadReady = transmitterStatus ? false : payloadReady;
 4e6:	88 23       	and	r24, r24
 4e8:	19 f0       	breq	.+6      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4ea:	80 91 7e 3e 	lds	r24, 0x3E7E	; 0x803e7e <payloadReady>
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	80 93 7e 3e 	sts	0x3E7E, r24	; 0x803e7e <payloadReady>
			BatteryLevelCounter -= (BAT_TRANSMIT_CONSTANT >> sleepTimeSequence);
 4f6:	e0 e1       	ldi	r30, 0x10	; 16
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 500:	f5 95       	asr	r31
 502:	e7 95       	ror	r30
 504:	0a 94       	dec	r0
 506:	e2 f7       	brpl	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 508:	1f 2f       	mov	r17, r31
 50a:	11 0f       	add	r17, r17
 50c:	11 0b       	sbc	r17, r17
 50e:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
 512:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
 516:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
 51a:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
 51e:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
 522:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
 526:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
 52a:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
 52e:	ae 2e       	mov	r10, r30
 530:	bf 2e       	mov	r11, r31
 532:	c1 2e       	mov	r12, r17
 534:	d1 2e       	mov	r13, r17
 536:	e1 2e       	mov	r14, r17
 538:	f1 2e       	mov	r15, r17
 53a:	01 2f       	mov	r16, r17
 53c:	3a d5       	rcall	.+2676   	; 0xfb2 <__subdi3>
 53e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
 542:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
 546:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
 54a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
 54e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
 552:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
 556:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
 55a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		}
		
		if(startupDelay == 0)
 55e:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <startupDelay>
 562:	81 11       	cpse	r24, r1
 564:	46 c0       	rjmp	.+140    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
		{
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 566:	c0 e5       	ldi	r28, 0x50	; 80
 568:	d0 e0       	ldi	r29, 0x00	; 0
 56a:	88 81       	ld	r24, Y
 56c:	89 7f       	andi	r24, 0xF9	; 249
 56e:	84 60       	ori	r24, 0x04	; 4
 570:	88 83       	st	Y, r24
			cli();
 572:	f8 94       	cli
			sleepTimeSequence = repeatDataCounter >= 0 ? T_256 : T_2048;
 574:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
			ConfigPIT(GET_PERIODIC_TIMER_VALUE(sleepTimeSequence));
 578:	88 e3       	ldi	r24, 0x38	; 56
 57a:	98 dd       	rcall	.-1232   	; 0xac <ConfigPIT>
			
			sleep_enable();
 57c:	88 81       	ld	r24, Y
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	88 83       	st	Y, r24
			sei();
 582:	78 94       	sei
			sleep_cpu();
 584:	88 95       	sleep
			sleep_disable();
 586:	88 81       	ld	r24, Y
 588:	8e 7f       	andi	r24, 0xFE	; 254
 58a:	88 83       	st	Y, r24
			cli();
 58c:	f8 94       	cli
			BatteryLevelCounter -= (BAT_SLEEP_CONSTANT >> sleepTimeSequence);
 58e:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 592:	02 c0       	rjmp	.+4      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 594:	d5 95       	asr	r29
 596:	c7 95       	ror	r28
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 59c:	1d 2f       	mov	r17, r29
 59e:	11 0f       	add	r17, r17
 5a0:	11 0b       	sbc	r17, r17
 5a2:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
 5a6:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
 5aa:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
 5ae:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
 5b2:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
 5b6:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
 5ba:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
 5be:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
 5c2:	ac 2e       	mov	r10, r28
 5c4:	bd 2e       	mov	r11, r29
 5c6:	c1 2e       	mov	r12, r17
 5c8:	d1 2e       	mov	r13, r17
 5ca:	e1 2e       	mov	r14, r17
 5cc:	f1 2e       	mov	r15, r17
 5ce:	01 2f       	mov	r16, r17
 5d0:	f0 d4       	rcall	.+2528   	; 0xfb2 <__subdi3>
 5d2:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
 5d6:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
 5da:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
 5de:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
 5e2:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
 5e6:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
 5ea:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
 5ee:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 5f2:	80 b1       	in	r24, 0x00	; 0
 5f4:	87 7f       	andi	r24, 0xF7	; 247
 5f6:	80 b9       	out	0x00, r24	; 0
		}
		
		CBT_set_dir(PORT_DIR_IN);
		if(CBT_get_level() == false)
 5f8:	13 9b       	sbis	0x02, 3	; 2
 5fa:	0b c0       	rjmp	.+22     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5fc:	24 c0       	rjmp	.+72     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	e3 e2       	ldi	r30, 0x23	; 35
 600:	f4 ef       	ldi	r31, 0xF4	; 244
 602:	31 97       	sbiw	r30, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 606:	00 c0       	rjmp	.+0      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 608:	00 00       	nop
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
 60a:	8a b1       	in	r24, 0x0a	; 10
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	8a b9       	out	0x0a, r24	; 10
 610:	01 c0       	rjmp	.+2      	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
 612:	94 e6       	ldi	r25, 0x64	; 100
		{
			uint8_t timeOut = 100;
			while(CBT_get_level() == false && --timeOut)
 614:	13 99       	sbic	0x02, 3	; 2
 616:	02 c0       	rjmp	.+4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 618:	91 50       	subi	r25, 0x01	; 1
 61a:	89 f7       	brne	.-30     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
			{
				_delay_ms(50);
				DATA_toggle_level();
			}
			if(timeOut < 1)
 61c:	91 11       	cpse	r25, r1
 61e:	0e c0       	rjmp	.+28     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
			{
				FLASH_0_write_eeprom_byte(0, 100);
 620:	64 e6       	ldi	r22, 0x64	; 100
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	d4 d0       	rcall	.+424    	; 0x7d0 <FLASH_0_write_eeprom_byte>
				while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
 628:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f803a>
 62c:	81 fd       	sbrc	r24, 1
 62e:	fc cf       	rjmp	.-8      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
 630:	89 e6       	ldi	r24, 0x69	; 105
 632:	98 e1       	ldi	r25, 0x18	; 24
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 63a:	00 00       	nop
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 63c:	41 e0       	ldi	r20, 0x01	; 1
 63e:	68 ed       	ldi	r22, 0xD8	; 216
 640:	81 e4       	ldi	r24, 0x41	; 65
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	df d0       	rcall	.+446    	; 0x804 <protected_write_io>
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 646:	e3 e1       	ldi	r30, 0x13	; 19
 648:	f4 e0       	ldi	r31, 0x04	; 4
 64a:	80 81       	ld	r24, Z
 64c:	88 60       	ori	r24, 0x08	; 8
 64e:	80 83       	st	Z, r24
			}
			RSTCTRL_reset();
		}
		CBT_set_dir(PORT_DIR_OFF);
		
		startupDelay -= startupDelay > 0 ? 1 : 0;
 650:	80 91 5b 3e 	lds	r24, 0x3E5B	; 0x803e5b <startupDelay>
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	81 11       	cpse	r24, r1
 658:	01 c0       	rjmp	.+2      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	89 1b       	sub	r24, r25
 65e:	80 93 5b 3e 	sts	0x3E5B, r24	; 0x803e5b <startupDelay>
	}
 662:	74 cd       	rjmp	.-1304   	; 0x14c <main+0x92>

00000664 <ADC_0_init>:
 664:	e0 e0       	ldi	r30, 0x00	; 0
 666:	f6 e0       	ldi	r31, 0x06	; 6
 668:	82 e5       	ldi	r24, 0x52	; 82
 66a:	82 83       	std	Z+2, r24	; 0x02
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	80 83       	st	Z, r24
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	08 95       	ret

00000674 <BOD_init>:
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret

00000678 <CLKCTRL_init>:
 678:	43 e0       	ldi	r20, 0x03	; 3
 67a:	68 ed       	ldi	r22, 0xD8	; 216
 67c:	81 e6       	ldi	r24, 0x61	; 97
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	c1 d0       	rcall	.+386    	; 0x804 <protected_write_io>
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 95       	ret

00000686 <CPUINT_init>:
 686:	78 94       	sei
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	08 95       	ret

0000068c <mcu_init>:
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <mcu_init+0x14>
 690:	e8 2f       	mov	r30, r24
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	e0 5f       	subi	r30, 0xF0	; 240
 696:	fb 4f       	sbci	r31, 0xFB	; 251
 698:	90 81       	ld	r25, Z
 69a:	98 60       	ori	r25, 0x08	; 8
 69c:	90 83       	st	Z, r25
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	88 30       	cpi	r24, 0x08	; 8
 6a2:	b0 f3       	brcs	.-20     	; 0x690 <mcu_init+0x4>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <mcu_init+0x2c>
 6a8:	e8 2f       	mov	r30, r24
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	e0 5d       	subi	r30, 0xD0	; 208
 6ae:	fb 4f       	sbci	r31, 0xFB	; 251
 6b0:	90 81       	ld	r25, Z
 6b2:	98 60       	ori	r25, 0x08	; 8
 6b4:	90 83       	st	Z, r25
 6b6:	8f 5f       	subi	r24, 0xFF	; 255
 6b8:	88 30       	cpi	r24, 0x08	; 8
 6ba:	b0 f3       	brcs	.-20     	; 0x6a8 <mcu_init+0x1c>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 c0       	rjmp	.+16     	; 0x6d0 <mcu_init+0x44>
 6c0:	e8 2f       	mov	r30, r24
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	e0 5b       	subi	r30, 0xB0	; 176
 6c6:	fb 4f       	sbci	r31, 0xFB	; 251
 6c8:	90 81       	ld	r25, Z
 6ca:	98 60       	ori	r25, 0x08	; 8
 6cc:	90 83       	st	Z, r25
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	88 30       	cpi	r24, 0x08	; 8
 6d2:	b0 f3       	brcs	.-20     	; 0x6c0 <mcu_init+0x34>
 6d4:	08 95       	ret

000006d6 <ADC_0_initialization>:
 6d6:	e6 e1       	ldi	r30, 0x16	; 22
 6d8:	f4 e0       	ldi	r31, 0x04	; 4
 6da:	80 81       	ld	r24, Z
 6dc:	88 7f       	andi	r24, 0xF8	; 248
 6de:	84 60       	ori	r24, 0x04	; 4
 6e0:	80 83       	st	Z, r24
 6e2:	80 81       	ld	r24, Z
 6e4:	87 7f       	andi	r24, 0xF7	; 247
 6e6:	80 83       	st	Z, r24
 6e8:	e0 e3       	ldi	r30, 0x30	; 48
 6ea:	f4 e0       	ldi	r31, 0x04	; 4
 6ec:	80 81       	ld	r24, Z
 6ee:	88 7f       	andi	r24, 0xF8	; 248
 6f0:	84 60       	ori	r24, 0x04	; 4
 6f2:	80 83       	st	Z, r24
 6f4:	80 81       	ld	r24, Z
 6f6:	87 7f       	andi	r24, 0xF7	; 247
 6f8:	80 83       	st	Z, r24
 6fa:	b4 df       	rcall	.-152    	; 0x664 <ADC_0_init>
 6fc:	08 95       	ret

000006fe <FLASH_0_initialization>:
 6fe:	62 d0       	rcall	.+196    	; 0x7c4 <FLASH_0_init>
 700:	08 95       	ret

00000702 <system_init>:
 702:	c4 df       	rcall	.-120    	; 0x68c <mcu_init>
 704:	80 b1       	in	r24, 0x00	; 0
 706:	87 7f       	andi	r24, 0xF7	; 247
 708:	80 b9       	out	0x00, r24	; 0
 70a:	e3 e1       	ldi	r30, 0x13	; 19
 70c:	f4 e0       	ldi	r31, 0x04	; 4
 70e:	80 81       	ld	r24, Z
 710:	88 60       	ori	r24, 0x08	; 8
 712:	80 83       	st	Z, r24
 714:	80 b1       	in	r24, 0x00	; 0
 716:	8f 7e       	andi	r24, 0xEF	; 239
 718:	80 b9       	out	0x00, r24	; 0
 71a:	e4 e1       	ldi	r30, 0x14	; 20
 71c:	f4 e0       	ldi	r31, 0x04	; 4
 71e:	80 81       	ld	r24, Z
 720:	88 60       	ori	r24, 0x08	; 8
 722:	80 83       	st	Z, r24
 724:	80 b1       	in	r24, 0x00	; 0
 726:	8f 7d       	andi	r24, 0xDF	; 223
 728:	80 b9       	out	0x00, r24	; 0
 72a:	e5 e1       	ldi	r30, 0x15	; 21
 72c:	f4 e0       	ldi	r31, 0x04	; 4
 72e:	80 81       	ld	r24, Z
 730:	88 60       	ori	r24, 0x08	; 8
 732:	80 83       	st	Z, r24
 734:	81 b1       	in	r24, 0x01	; 1
 736:	8f 77       	andi	r24, 0x7F	; 127
 738:	81 b9       	out	0x01, r24	; 1
 73a:	80 b1       	in	r24, 0x00	; 0
 73c:	80 68       	ori	r24, 0x80	; 128
 73e:	80 b9       	out	0x00, r24	; 0
 740:	84 b1       	in	r24, 0x04	; 4
 742:	8d 7f       	andi	r24, 0xFD	; 253
 744:	84 b9       	out	0x04, r24	; 4
 746:	e1 e3       	ldi	r30, 0x31	; 49
 748:	f4 e0       	ldi	r31, 0x04	; 4
 74a:	80 81       	ld	r24, Z
 74c:	87 7f       	andi	r24, 0xF7	; 247
 74e:	80 83       	st	Z, r24
 750:	84 b1       	in	r24, 0x04	; 4
 752:	8f 7e       	andi	r24, 0xEF	; 239
 754:	84 b9       	out	0x04, r24	; 4
 756:	e4 e3       	ldi	r30, 0x34	; 52
 758:	f4 e0       	ldi	r31, 0x04	; 4
 75a:	80 81       	ld	r24, Z
 75c:	88 60       	ori	r24, 0x08	; 8
 75e:	80 83       	st	Z, r24
 760:	84 b1       	in	r24, 0x04	; 4
 762:	8f 7d       	andi	r24, 0xDF	; 223
 764:	84 b9       	out	0x04, r24	; 4
 766:	e5 e3       	ldi	r30, 0x35	; 53
 768:	f4 e0       	ldi	r31, 0x04	; 4
 76a:	80 81       	ld	r24, Z
 76c:	88 60       	ori	r24, 0x08	; 8
 76e:	80 83       	st	Z, r24
 770:	88 b1       	in	r24, 0x08	; 8
 772:	8d 7f       	andi	r24, 0xFD	; 253
 774:	88 b9       	out	0x08, r24	; 8
 776:	e1 e5       	ldi	r30, 0x51	; 81
 778:	f4 e0       	ldi	r31, 0x04	; 4
 77a:	80 81       	ld	r24, Z
 77c:	88 60       	ori	r24, 0x08	; 8
 77e:	80 83       	st	Z, r24
 780:	88 b1       	in	r24, 0x08	; 8
 782:	8b 7f       	andi	r24, 0xFB	; 251
 784:	88 b9       	out	0x08, r24	; 8
 786:	e2 e5       	ldi	r30, 0x52	; 82
 788:	f4 e0       	ldi	r31, 0x04	; 4
 78a:	80 81       	ld	r24, Z
 78c:	88 60       	ori	r24, 0x08	; 8
 78e:	80 83       	st	Z, r24
 790:	89 b1       	in	r24, 0x09	; 9
 792:	87 7f       	andi	r24, 0xF7	; 247
 794:	89 b9       	out	0x09, r24	; 9
 796:	88 b1       	in	r24, 0x08	; 8
 798:	88 60       	ori	r24, 0x08	; 8
 79a:	88 b9       	out	0x08, r24	; 8
 79c:	89 b1       	in	r24, 0x09	; 9
 79e:	8f 7e       	andi	r24, 0xEF	; 239
 7a0:	89 b9       	out	0x09, r24	; 9
 7a2:	88 b1       	in	r24, 0x08	; 8
 7a4:	80 61       	ori	r24, 0x10	; 16
 7a6:	88 b9       	out	0x08, r24	; 8
 7a8:	89 b1       	in	r24, 0x09	; 9
 7aa:	8f 7d       	andi	r24, 0xDF	; 223
 7ac:	89 b9       	out	0x09, r24	; 9
 7ae:	88 b1       	in	r24, 0x08	; 8
 7b0:	80 62       	ori	r24, 0x20	; 32
 7b2:	88 b9       	out	0x08, r24	; 8
 7b4:	61 df       	rcall	.-318    	; 0x678 <CLKCTRL_init>
 7b6:	2a d0       	rcall	.+84     	; 0x80c <RTC_0_init>
 7b8:	8e df       	rcall	.-228    	; 0x6d6 <ADC_0_initialization>
 7ba:	a1 df       	rcall	.-190    	; 0x6fe <FLASH_0_initialization>
 7bc:	64 df       	rcall	.-312    	; 0x686 <CPUINT_init>
 7be:	3c d0       	rcall	.+120    	; 0x838 <SLPCTRL_init>
 7c0:	59 df       	rcall	.-334    	; 0x674 <BOD_init>
 7c2:	08 95       	ret

000007c4 <FLASH_0_init>:
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	08 95       	ret

000007c8 <FLASH_0_read_eeprom_byte>:
 7c8:	9c 5e       	subi	r25, 0xEC	; 236
 7ca:	fc 01       	movw	r30, r24
 7cc:	80 81       	ld	r24, Z
 7ce:	08 95       	ret

000007d0 <FLASH_0_write_eeprom_byte>:
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ec 01       	movw	r28, r24
 7d8:	16 2f       	mov	r17, r22
 7da:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f803a>
 7de:	81 fd       	sbrc	r24, 1
 7e0:	fc cf       	rjmp	.-8      	; 0x7da <FLASH_0_write_eeprom_byte+0xa>
 7e2:	44 e0       	ldi	r20, 0x04	; 4
 7e4:	6d e9       	ldi	r22, 0x9D	; 157
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e1       	ldi	r25, 0x10	; 16
 7ea:	0c d0       	rcall	.+24     	; 0x804 <protected_write_io>
 7ec:	dc 5e       	subi	r29, 0xEC	; 236
 7ee:	18 83       	st	Y, r17
 7f0:	43 e0       	ldi	r20, 0x03	; 3
 7f2:	6d e9       	ldi	r22, 0x9D	; 157
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e1       	ldi	r25, 0x10	; 16
 7f8:	05 d0       	rcall	.+10     	; 0x804 <protected_write_io>
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	08 95       	ret

00000804 <protected_write_io>:
 804:	fc 01       	movw	r30, r24
 806:	64 bf       	out	0x34, r22	; 52
 808:	40 83       	st	Z, r20
 80a:	08 95       	ret

0000080c <RTC_0_init>:
 80c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f7179>
 810:	81 11       	cpse	r24, r1
 812:	fc cf       	rjmp	.-8      	; 0x80c <RTC_0_init>
 814:	e0 e4       	ldi	r30, 0x40	; 64
 816:	f1 e0       	ldi	r31, 0x01	; 1
 818:	88 e7       	ldi	r24, 0x78	; 120
 81a:	80 83       	st	Z, r24
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	87 83       	std	Z+7, r24	; 0x07
 820:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f7189>
 824:	81 11       	cpse	r24, r1
 826:	fc cf       	rjmp	.-8      	; 0x820 <RTC_0_init+0x14>
 828:	e0 e4       	ldi	r30, 0x40	; 64
 82a:	f1 e0       	ldi	r31, 0x01	; 1
 82c:	89 e4       	ldi	r24, 0x49	; 73
 82e:	80 8b       	std	Z+16, r24	; 0x10
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	82 8b       	std	Z+18, r24	; 0x12
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	08 95       	ret

00000838 <SLPCTRL_init>:
 838:	85 e0       	ldi	r24, 0x05	; 5
 83a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f7088>
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	08 95       	ret

00000842 <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
 842:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
 844:	11 c0       	rjmp	.+34     	; 0x868 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 846:	29 b1       	in	r18, 0x09	; 9
 848:	27 7f       	andi	r18, 0xF7	; 247
 84a:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
 84c:	29 2f       	mov	r18, r25
 84e:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 850:	21 f0       	breq	.+8      	; 0x85a <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
 852:	29 b1       	in	r18, 0x09	; 9
 854:	20 61       	ori	r18, 0x10	; 16
 856:	29 b9       	out	0x09, r18	; 9
 858:	03 c0       	rjmp	.+6      	; 0x860 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 85a:	29 b1       	in	r18, 0x09	; 9
 85c:	2f 7e       	andi	r18, 0xEF	; 239
 85e:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
 860:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 862:	29 b1       	in	r18, 0x09	; 9
 864:	28 60       	ori	r18, 0x08	; 8
 866:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
 868:	91 11       	cpse	r25, r1
 86a:	ed cf       	rjmp	.-38     	; 0x846 <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 86c:	89 b1       	in	r24, 0x09	; 9
 86e:	87 7f       	andi	r24, 0xF7	; 247
 870:	89 b9       	out	0x09, r24	; 9
 872:	08 95       	ret

00000874 <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
 874:	cf 92       	push	r12
 876:	df 92       	push	r13
 878:	ef 92       	push	r14
 87a:	ff 92       	push	r15
 87c:	6a 01       	movw	r12, r20
 87e:	7b 01       	movw	r14, r22
	switch(instruction)
 880:	88 23       	and	r24, r24
 882:	19 f0       	breq	.+6      	; 0x88a <SX1243Write+0x16>
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	21 f0       	breq	.+8      	; 0x890 <SX1243Write+0x1c>
 888:	16 c0       	rjmp	.+44     	; 0x8b6 <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	da df       	rcall	.-76     	; 0x842 <SpiOut>
		break;
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
 890:	db 01       	movw	r26, r22
 892:	ca 01       	movw	r24, r20
 894:	88 27       	eor	r24, r24
 896:	99 27       	eor	r25, r25
 898:	a7 70       	andi	r26, 0x07	; 7
 89a:	bb 27       	eor	r27, r27
 89c:	bc 01       	movw	r22, r24
 89e:	cd 01       	movw	r24, r26
 8a0:	88 61       	ori	r24, 0x18	; 24
 8a2:	cf df       	rcall	.-98     	; 0x842 <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
 8a4:	8d 2d       	mov	r24, r13
 8a6:	cd df       	rcall	.-102    	; 0x842 <SpiOut>
	SpiOut(data & 0xFF);
 8a8:	8c 2d       	mov	r24, r12
 8aa:	cb df       	rcall	.-106    	; 0x842 <SpiOut>
 8ac:	89 b1       	in	r24, 0x09	; 9
 8ae:	8f 7e       	andi	r24, 0xEF	; 239
 8b0:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
 8b8:	ff 90       	pop	r15
 8ba:	ef 90       	pop	r14
 8bc:	df 90       	pop	r13
 8be:	cf 90       	pop	r12
 8c0:	08 95       	ret

000008c2 <SX1243Reset>:
 8c2:	89 b1       	in	r24, 0x09	; 9
 8c4:	8f 7d       	andi	r24, 0xDF	; 223
 8c6:	89 b9       	out	0x09, r24	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8c8:	86 ea       	ldi	r24, 0xA6	; 166
 8ca:	8a 95       	dec	r24
 8cc:	f1 f7       	brne	.-4      	; 0x8ca <SX1243Reset+0x8>
 8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <SX1243Reset+0xe>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 8d0:	89 b1       	in	r24, 0x09	; 9
 8d2:	80 62       	ori	r24, 0x20	; 32
 8d4:	89 b9       	out	0x09, r24	; 9
 8d6:	08 95       	ret

000008d8 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	76 c0       	rjmp	.+236    	; 0x9c8 <Sx1243ConvertBuffer+0xf0>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 8dc:	9c 01       	movw	r18, r24
 8de:	22 0f       	add	r18, r18
 8e0:	33 1f       	adc	r19, r19
 8e2:	22 0f       	add	r18, r18
 8e4:	33 1f       	adc	r19, r19
 8e6:	22 0f       	add	r18, r18
 8e8:	33 1f       	adc	r19, r19
 8ea:	e0 91 67 3f 	lds	r30, 0x3F67	; 0x803f67 <TxParam+0x13>
 8ee:	f0 91 68 3f 	lds	r31, 0x3F68	; 0x803f68 <TxParam+0x14>
 8f2:	e8 0f       	add	r30, r24
 8f4:	f9 1f       	adc	r31, r25
 8f6:	40 81       	ld	r20, Z
 8f8:	44 23       	and	r20, r20
 8fa:	1c f4       	brge	.+6      	; 0x902 <Sx1243ConvertBuffer+0x2a>
 8fc:	49 b1       	in	r20, 0x09	; 9
 8fe:	40 61       	ori	r20, 0x10	; 16
 900:	02 c0       	rjmp	.+4      	; 0x906 <Sx1243ConvertBuffer+0x2e>
 902:	49 b1       	in	r20, 0x09	; 9
 904:	4f 7e       	andi	r20, 0xEF	; 239
 906:	d9 01       	movw	r26, r18
 908:	ac 57       	subi	r26, 0x7C	; 124
 90a:	b1 4c       	sbci	r27, 0xC1	; 193
 90c:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 90e:	d9 01       	movw	r26, r18
 910:	11 96       	adiw	r26, 0x01	; 1
 912:	40 81       	ld	r20, Z
 914:	46 ff       	sbrs	r20, 6
 916:	03 c0       	rjmp	.+6      	; 0x91e <Sx1243ConvertBuffer+0x46>
 918:	49 b1       	in	r20, 0x09	; 9
 91a:	40 61       	ori	r20, 0x10	; 16
 91c:	02 c0       	rjmp	.+4      	; 0x922 <Sx1243ConvertBuffer+0x4a>
 91e:	49 b1       	in	r20, 0x09	; 9
 920:	4f 7e       	andi	r20, 0xEF	; 239
 922:	ac 57       	subi	r26, 0x7C	; 124
 924:	b1 4c       	sbci	r27, 0xC1	; 193
 926:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 928:	d9 01       	movw	r26, r18
 92a:	12 96       	adiw	r26, 0x02	; 2
 92c:	40 81       	ld	r20, Z
 92e:	45 ff       	sbrs	r20, 5
 930:	03 c0       	rjmp	.+6      	; 0x938 <Sx1243ConvertBuffer+0x60>
 932:	49 b1       	in	r20, 0x09	; 9
 934:	40 61       	ori	r20, 0x10	; 16
 936:	02 c0       	rjmp	.+4      	; 0x93c <Sx1243ConvertBuffer+0x64>
 938:	49 b1       	in	r20, 0x09	; 9
 93a:	4f 7e       	andi	r20, 0xEF	; 239
 93c:	ac 57       	subi	r26, 0x7C	; 124
 93e:	b1 4c       	sbci	r27, 0xC1	; 193
 940:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 942:	d9 01       	movw	r26, r18
 944:	13 96       	adiw	r26, 0x03	; 3
 946:	40 81       	ld	r20, Z
 948:	44 ff       	sbrs	r20, 4
 94a:	03 c0       	rjmp	.+6      	; 0x952 <Sx1243ConvertBuffer+0x7a>
 94c:	49 b1       	in	r20, 0x09	; 9
 94e:	40 61       	ori	r20, 0x10	; 16
 950:	02 c0       	rjmp	.+4      	; 0x956 <Sx1243ConvertBuffer+0x7e>
 952:	49 b1       	in	r20, 0x09	; 9
 954:	4f 7e       	andi	r20, 0xEF	; 239
 956:	ac 57       	subi	r26, 0x7C	; 124
 958:	b1 4c       	sbci	r27, 0xC1	; 193
 95a:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 95c:	d9 01       	movw	r26, r18
 95e:	14 96       	adiw	r26, 0x04	; 4
 960:	40 81       	ld	r20, Z
 962:	43 ff       	sbrs	r20, 3
 964:	03 c0       	rjmp	.+6      	; 0x96c <Sx1243ConvertBuffer+0x94>
 966:	49 b1       	in	r20, 0x09	; 9
 968:	40 61       	ori	r20, 0x10	; 16
 96a:	02 c0       	rjmp	.+4      	; 0x970 <Sx1243ConvertBuffer+0x98>
 96c:	49 b1       	in	r20, 0x09	; 9
 96e:	4f 7e       	andi	r20, 0xEF	; 239
 970:	ac 57       	subi	r26, 0x7C	; 124
 972:	b1 4c       	sbci	r27, 0xC1	; 193
 974:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 976:	d9 01       	movw	r26, r18
 978:	15 96       	adiw	r26, 0x05	; 5
 97a:	40 81       	ld	r20, Z
 97c:	42 ff       	sbrs	r20, 2
 97e:	03 c0       	rjmp	.+6      	; 0x986 <Sx1243ConvertBuffer+0xae>
 980:	49 b1       	in	r20, 0x09	; 9
 982:	40 61       	ori	r20, 0x10	; 16
 984:	02 c0       	rjmp	.+4      	; 0x98a <Sx1243ConvertBuffer+0xb2>
 986:	49 b1       	in	r20, 0x09	; 9
 988:	4f 7e       	andi	r20, 0xEF	; 239
 98a:	ac 57       	subi	r26, 0x7C	; 124
 98c:	b1 4c       	sbci	r27, 0xC1	; 193
 98e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 990:	d9 01       	movw	r26, r18
 992:	16 96       	adiw	r26, 0x06	; 6
 994:	40 81       	ld	r20, Z
 996:	41 ff       	sbrs	r20, 1
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <Sx1243ConvertBuffer+0xc8>
 99a:	49 b1       	in	r20, 0x09	; 9
 99c:	40 61       	ori	r20, 0x10	; 16
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <Sx1243ConvertBuffer+0xcc>
 9a0:	49 b1       	in	r20, 0x09	; 9
 9a2:	4f 7e       	andi	r20, 0xEF	; 239
 9a4:	ac 57       	subi	r26, 0x7C	; 124
 9a6:	b1 4c       	sbci	r27, 0xC1	; 193
 9a8:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
 9aa:	29 5f       	subi	r18, 0xF9	; 249
 9ac:	3f 4f       	sbci	r19, 0xFF	; 255
 9ae:	40 81       	ld	r20, Z
 9b0:	40 ff       	sbrs	r20, 0
 9b2:	03 c0       	rjmp	.+6      	; 0x9ba <Sx1243ConvertBuffer+0xe2>
 9b4:	49 b1       	in	r20, 0x09	; 9
 9b6:	40 61       	ori	r20, 0x10	; 16
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <Sx1243ConvertBuffer+0xe6>
 9ba:	49 b1       	in	r20, 0x09	; 9
 9bc:	4f 7e       	andi	r20, 0xEF	; 239
 9be:	f9 01       	movw	r30, r18
 9c0:	ec 57       	subi	r30, 0x7C	; 124
 9c2:	f1 4c       	sbci	r31, 0xC1	; 193
 9c4:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
 9c6:	01 96       	adiw	r24, 0x01	; 1
 9c8:	20 91 66 3f 	lds	r18, 0x3F66	; 0x803f66 <TxParam+0x12>
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	82 17       	cp	r24, r18
 9d0:	93 07       	cpc	r25, r19
 9d2:	08 f4       	brcc	.+2      	; 0x9d6 <Sx1243ConvertBuffer+0xfe>
 9d4:	83 cf       	rjmp	.-250    	; 0x8dc <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}
 9d6:	08 95       	ret

000009d8 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
 9d8:	e4 e5       	ldi	r30, 0x54	; 84
 9da:	ff e3       	ldi	r31, 0x3F	; 63
 9dc:	83 8b       	std	Z+19, r24	; 0x13
 9de:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
 9e0:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
 9e2:	80 ed       	ldi	r24, 0xD0	; 208
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	80 93 81 3e 	sts	0x3E81, r24	; 0x803e81 <fastBufSize>
 9ea:	90 93 82 3e 	sts	0x3E82, r25	; 0x803e82 <fastBufSize+0x1>
	Sx1243ConvertBuffer(0);
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	73 df       	rcall	.-282    	; 0x8d8 <Sx1243ConvertBuffer>
	return SX_OK;
}
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	08 95       	ret

000009f6 <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
 9f6:	0f 93       	push	r16
 9f8:	1f 93       	push	r17
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	8c 01       	movw	r16, r24
 a00:	d6 2f       	mov	r29, r22
 a02:	c4 2f       	mov	r28, r20
	SX1243Reset();
 a04:	5e df       	rcall	.-324    	; 0x8c2 <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
 a06:	e4 e5       	ldi	r30, 0x54	; 84
 a08:	ff e3       	ldi	r31, 0x3F	; 63
 a0a:	10 8a       	std	Z+16, r1	; 0x10
 a0c:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
 a0e:	16 86       	std	Z+14, r1	; 0x0e
 a10:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e2       	ldi	r25, 0x20	; 32
 a16:	84 87       	std	Z+12, r24	; 0x0c
 a18:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	98 e0       	ldi	r25, 0x08	; 8
 a1e:	82 87       	std	Z+10, r24	; 0x0a
 a20:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
 a22:	10 86       	std	Z+8, r1	; 0x08
 a24:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
 a26:	16 82       	std	Z+6, r1	; 0x06
 a28:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
 a2a:	84 e0       	ldi	r24, 0x04	; 4
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	84 83       	std	Z+4, r24	; 0x04
 a30:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
 a32:	87 e2       	ldi	r24, 0x27	; 39
 a34:	96 e6       	ldi	r25, 0x66	; 102
 a36:	a4 e0       	ldi	r26, 0x04	; 4
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	80 83       	st	Z, r24
 a3c:	91 83       	std	Z+1, r25	; 0x01
 a3e:	a2 83       	std	Z+2, r26	; 0x02
 a40:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
 a42:	84 e0       	ldi	r24, 0x04	; 4
 a44:	98 e2       	ldi	r25, 0x28	; 40
 a46:	85 8b       	std	Z+21, r24	; 0x15
 a48:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
 a4a:	4c 2f       	mov	r20, r28
 a4c:	50 e0       	ldi	r21, 0x00	; 0
 a4e:	d8 01       	movw	r26, r16
 a50:	a4 0f       	add	r26, r20
 a52:	b5 1f       	adc	r27, r21
 a54:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1];
 a56:	4f 5f       	subi	r20, 0xFF	; 255
 a58:	5f 4f       	sbci	r21, 0xFF	; 255
 a5a:	d8 01       	movw	r26, r16
 a5c:	a4 0f       	add	r26, r20
 a5e:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
 a60:	8c 91       	ld	r24, X
 a62:	89 27       	eor	r24, r25
 a64:	9b ed       	ldi	r25, 0xDB	; 219
 a66:	89 27       	eor	r24, r25
 a68:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
 a6a:	6d 2f       	mov	r22, r29
 a6c:	c8 01       	movw	r24, r16
 a6e:	b4 df       	rcall	.-152    	; 0x9d8 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
 a7c:	df 92       	push	r13
 a7e:	ef 92       	push	r14
 a80:	ff 92       	push	r15
 a82:	0f 93       	push	r16
 a84:	1f 93       	push	r17
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^
 a8c:	d0 90 6b 3f 	lds	r13, 0x3F6B	; 0x803f6b <TxParam+0x17>
					buffer[ 0]		  ^
 a90:	80 81       	ld	r24, Z
					buffer[ 1]		  ^
 a92:	e1 80       	ldd	r14, Z+1	; 0x01
					buffer[ 2]		  ^
 a94:	f2 80       	ldd	r15, Z+2	; 0x02
					buffer[ 3]		  ^
 a96:	03 81       	ldd	r16, Z+3	; 0x03
					buffer[ 4]		  ^
 a98:	14 81       	ldd	r17, Z+4	; 0x04
					buffer[ 5]		  ^
 a9a:	d5 81       	ldd	r29, Z+5	; 0x05
					buffer[ 6]		  ^
 a9c:	c6 81       	ldd	r28, Z+6	; 0x06
					buffer[ 7]		  ^
 a9e:	b7 81       	ldd	r27, Z+7	; 0x07
					buffer[ 8]		  ^
 aa0:	a0 85       	ldd	r26, Z+8	; 0x08
					buffer[ 9]		  ^
 aa2:	71 85       	ldd	r23, Z+9	; 0x09
					buffer[10]		  ^
 aa4:	62 85       	ldd	r22, Z+10	; 0x0a
					buffer[11]		  ^
 aa6:	53 85       	ldd	r21, Z+11	; 0x0b
					buffer[12]		  ^
 aa8:	44 85       	ldd	r20, Z+12	; 0x0c
					buffer[13]		  ^
 aaa:	35 85       	ldd	r19, Z+13	; 0x0d
					buffer[14]		  ^
 aac:	26 85       	ldd	r18, Z+14	; 0x0e
					buffer[15]		  ^
 aae:	97 85       	ldd	r25, Z+15	; 0x0f
					buffer[16]);
 ab0:	e0 89       	ldd	r30, Z+16	; 0x10
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^
 ab2:	8d 25       	eor	r24, r13
 ab4:	8e 25       	eor	r24, r14
 ab6:	8f 25       	eor	r24, r15
 ab8:	80 27       	eor	r24, r16
 aba:	81 27       	eor	r24, r17
 abc:	8d 27       	eor	r24, r29
 abe:	8c 27       	eor	r24, r28
 ac0:	8b 27       	eor	r24, r27
 ac2:	8a 27       	eor	r24, r26
 ac4:	87 27       	eor	r24, r23
 ac6:	86 27       	eor	r24, r22
 ac8:	85 27       	eor	r24, r21
 aca:	84 27       	eor	r24, r20
 acc:	83 27       	eor	r24, r19
 ace:	82 27       	eor	r24, r18
 ad0:	89 27       	eor	r24, r25
					buffer[12]		  ^
					buffer[13]		  ^
					buffer[14]		  ^
					buffer[15]		  ^
					buffer[16]);
}
 ad2:	8e 27       	eor	r24, r30
 ad4:	df 91       	pop	r29
 ad6:	cf 91       	pop	r28
 ad8:	1f 91       	pop	r17
 ada:	0f 91       	pop	r16
 adc:	ff 90       	pop	r15
 ade:	ef 90       	pop	r14
 ae0:	df 90       	pop	r13
 ae2:	08 95       	ret

00000ae4 <SX1243Process>:


//ATtiny817
U8 SX1243Process()
{
 ae4:	1f 93       	push	r17
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;
	
	TxParam.Config |= 0x8000;
 aea:	c4 e5       	ldi	r28, 0x54	; 84
 aec:	df e3       	ldi	r29, 0x3F	; 63
 aee:	4d 89       	ldd	r20, Y+21	; 0x15
 af0:	5e 89       	ldd	r21, Y+22	; 0x16
 af2:	50 68       	ori	r21, 0x80	; 128
 af4:	4d 8b       	std	Y+21, r20	; 0x15
 af6:	5e 8b       	std	Y+22, r21	; 0x16
	state |= SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	80 e0       	ldi	r24, 0x00	; 0
 afe:	ba de       	rcall	.-652    	; 0x874 <SX1243Write>
 b00:	18 2f       	mov	r17, r24
	state |= SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
 b02:	48 81       	ld	r20, Y
 b04:	59 81       	ldd	r21, Y+1	; 0x01
 b06:	6a 81       	ldd	r22, Y+2	; 0x02
 b08:	7b 81       	ldd	r23, Y+3	; 0x03
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	b3 de       	rcall	.-666    	; 0x874 <SX1243Write>
 b0e:	18 2b       	or	r17, r24
	TxParam.Config &= 0x7FFF;
 b10:	8d 89       	ldd	r24, Y+21	; 0x15
 b12:	9e 89       	ldd	r25, Y+22	; 0x16
 b14:	9f 77       	andi	r25, 0x7F	; 127
 b16:	8d 8b       	std	Y+21, r24	; 0x15
 b18:	9e 8b       	std	Y+22, r25	; 0x16


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
 b1a:	80 91 c8 8f 	lds	r24, 0x8FC8	; 0x808fc8 <__bss_end+0x505c>
 b1e:	8e 5f       	subi	r24, 0xFE	; 254
 b20:	db de       	rcall	.-586    	; 0x8d8 <Sx1243ConvertBuffer>
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 b22:	e2 e5       	ldi	r30, 0x52	; 82
 b24:	f4 e0       	ldi	r31, 0x04	; 4
 b26:	80 81       	ld	r24, Z
 b28:	88 60       	ori	r24, 0x08	; 8
 b2a:	80 83       	st	Z, r24

//ATtiny817
U8 SX1243Process()
{
	U8 state = SX_OK;
	U16 j = 0;
 b2c:	20 e0       	ldi	r18, 0x00	; 0
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	06 c0       	rjmp	.+12     	; 0xb3e <SX1243Process+0x5a>
 b32:	80 e1       	ldi	r24, 0x10	; 16
 b34:	8a 95       	dec	r24
 b36:	f1 f7       	brne	.-4      	; 0xb34 <SX1243Process+0x50>
 b38:	00 c0       	rjmp	.+0      	; 0xb3a <SX1243Process+0x56>
	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
	{
		_delay_us(10);
		j++;
 b3a:	2f 5f       	subi	r18, 0xFF	; 255
 b3c:	3f 4f       	sbci	r19, 0xFF	; 255
	TxParam.Config &= 0x7FFF;


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
 b3e:	52 99       	sbic	0x0a, 2	; 10
 b40:	03 c0       	rjmp	.+6      	; 0xb48 <SX1243Process+0x64>
 b42:	2c 3d       	cpi	r18, 0xDC	; 220
 b44:	31 05       	cpc	r19, r1
 b46:	a8 f3       	brcs	.-22     	; 0xb32 <SX1243Process+0x4e>
	{
		_delay_us(10);
		j++;
	}
	state = j >= TRANSMITTER_READY_TIMEOUT ? SX_ERROR : state;
 b48:	2c 3d       	cpi	r18, 0xDC	; 220
 b4a:	31 05       	cpc	r19, r1
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <SX1243Process+0x6c>
 b4e:	11 e0       	ldi	r17, 0x01	; 1
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 b50:	e2 e5       	ldi	r30, 0x52	; 82
 b52:	f4 e0       	ldi	r31, 0x04	; 4
 b54:	80 81       	ld	r24, Z
 b56:	87 7f       	andi	r24, 0xF7	; 247
 b58:	80 83       	st	Z, r24
	TX_READY_set_pull_mode(PORT_PULL_OFF);
	
	if (j < TRANSMITTER_READY_TIMEOUT)
 b5a:	2c 3d       	cpi	r18, 0xDC	; 220
 b5c:	31 05       	cpc	r19, r1
 b5e:	78 f0       	brcs	.+30     	; 0xb7e <SX1243Process+0x9a>
			j++;
		}
	}
	else
	{
		state = SX_ERROR;
 b60:	11 e0       	ldi	r17, 0x01	; 1
 b62:	16 c0       	rjmp	.+44     	; 0xb90 <SX1243Process+0xac>
	{
		j = 0;
		
		while (j < fastBufSize)
		{
			VPORTC.OUT = fastBuf[j];
 b64:	f9 01       	movw	r30, r18
 b66:	ec 57       	subi	r30, 0x7C	; 124
 b68:	f1 4c       	sbci	r31, 0xC1	; 193
 b6a:	90 81       	ld	r25, Z
 b6c:	99 b9       	out	0x09, r25	; 9
			if ((fastBuf[j] & 0xEF) == 0x00)
 b6e:	90 81       	ld	r25, Z
 b70:	9f 7e       	andi	r25, 0xEF	; 239
 b72:	11 f4       	brne	.+4      	; 0xb78 <SX1243Process+0x94>
			{
				_NOP();
 b74:	00 00       	nop
				_NOP();
 b76:	00 00       	nop
			}
			j++;
 b78:	2f 5f       	subi	r18, 0xFF	; 255
 b7a:	3f 4f       	sbci	r19, 0xFF	; 255
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <SX1243Process+0x9e>
 b7e:	20 e0       	ldi	r18, 0x00	; 0
 b80:	30 e0       	ldi	r19, 0x00	; 0
	
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		
		while (j < fastBufSize)
 b82:	40 91 81 3e 	lds	r20, 0x3E81	; 0x803e81 <fastBufSize>
 b86:	50 91 82 3e 	lds	r21, 0x3E82	; 0x803e82 <fastBufSize+0x1>
 b8a:	24 17       	cp	r18, r20
 b8c:	35 07       	cpc	r19, r21
 b8e:	50 f3       	brcs	.-44     	; 0xb64 <SX1243Process+0x80>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 b90:	89 b1       	in	r24, 0x09	; 9
 b92:	8f 7e       	andi	r24, 0xEF	; 239
 b94:	89 b9       	out	0x09, r24	; 9
	{
		state = SX_ERROR;
	}
	
	DATA_set_level(0);
	SX1243Reset();
 b96:	95 de       	rcall	.-726    	; 0x8c2 <SX1243Reset>
	{
		SX1243Reset();
	}*/
		
	return state;
 b98:	81 2f       	mov	r24, r17
 b9a:	df 91       	pop	r29
 b9c:	cf 91       	pop	r28
 b9e:	1f 91       	pop	r17
 ba0:	08 95       	ret

00000ba2 <__fixsfdi>:
 ba2:	be e3       	ldi	r27, 0x3E	; 62
 ba4:	04 d0       	rcall	.+8      	; 0xbae <__fixunssfdi+0x2>
 ba6:	08 f4       	brcc	.+2      	; 0xbaa <__fixsfdi+0x8>
 ba8:	90 e8       	ldi	r25, 0x80	; 128
 baa:	08 95       	ret

00000bac <__fixunssfdi>:
 bac:	bf e3       	ldi	r27, 0x3F	; 63
 bae:	22 27       	eor	r18, r18
 bb0:	33 27       	eor	r19, r19
 bb2:	a9 01       	movw	r20, r18
 bb4:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fp_splitA>
 bb8:	60 f1       	brcs	.+88     	; 0xc12 <__fixunssfdi+0x66>
 bba:	9f 57       	subi	r25, 0x7F	; 127
 bbc:	48 f1       	brcs	.+82     	; 0xc10 <__fixunssfdi+0x64>
 bbe:	b9 17       	cp	r27, r25
 bc0:	40 f1       	brcs	.+80     	; 0xc12 <__fixunssfdi+0x66>
 bc2:	bf e3       	ldi	r27, 0x3F	; 63
 bc4:	b9 1b       	sub	r27, r25
 bc6:	99 27       	eor	r25, r25
 bc8:	b8 50       	subi	r27, 0x08	; 8
 bca:	3a f4       	brpl	.+14     	; 0xbda <__fixunssfdi+0x2e>
 bcc:	66 0f       	add	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	99 1f       	adc	r25, r25
 bd4:	b3 95       	inc	r27
 bd6:	d2 f3       	brmi	.-12     	; 0xbcc <__fixunssfdi+0x20>
 bd8:	16 c0       	rjmp	.+44     	; 0xc06 <__fixunssfdi+0x5a>
 bda:	b8 50       	subi	r27, 0x08	; 8
 bdc:	4a f0       	brmi	.+18     	; 0xbf0 <__fixunssfdi+0x44>
 bde:	23 2f       	mov	r18, r19
 be0:	34 2f       	mov	r19, r20
 be2:	45 2f       	mov	r20, r21
 be4:	56 2f       	mov	r21, r22
 be6:	67 2f       	mov	r22, r23
 be8:	78 2f       	mov	r23, r24
 bea:	88 27       	eor	r24, r24
 bec:	b8 50       	subi	r27, 0x08	; 8
 bee:	ba f7       	brpl	.-18     	; 0xbde <__fixunssfdi+0x32>
 bf0:	b8 5f       	subi	r27, 0xF8	; 248
 bf2:	49 f0       	breq	.+18     	; 0xc06 <__fixunssfdi+0x5a>
 bf4:	86 95       	lsr	r24
 bf6:	77 95       	ror	r23
 bf8:	67 95       	ror	r22
 bfa:	57 95       	ror	r21
 bfc:	47 95       	ror	r20
 bfe:	37 95       	ror	r19
 c00:	27 95       	ror	r18
 c02:	ba 95       	dec	r27
 c04:	b9 f7       	brne	.-18     	; 0xbf4 <__fixunssfdi+0x48>
 c06:	16 f4       	brtc	.+4      	; 0xc0c <__fixunssfdi+0x60>
 c08:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_negdi>
 c0c:	88 94       	clc
 c0e:	08 95       	ret
 c10:	88 94       	clc
 c12:	60 e0       	ldi	r22, 0x00	; 0
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	cb 01       	movw	r24, r22
 c18:	08 95       	ret

00000c1a <__floatunsisf>:
 c1a:	e8 94       	clt
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__floatsisf+0x12>

00000c1e <__floatsisf>:
 c1e:	97 fb       	bst	r25, 7
 c20:	3e f4       	brtc	.+14     	; 0xc30 <__floatsisf+0x12>
 c22:	90 95       	com	r25
 c24:	80 95       	com	r24
 c26:	70 95       	com	r23
 c28:	61 95       	neg	r22
 c2a:	7f 4f       	sbci	r23, 0xFF	; 255
 c2c:	8f 4f       	sbci	r24, 0xFF	; 255
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	99 23       	and	r25, r25
 c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x40>
 c34:	f9 2f       	mov	r31, r25
 c36:	96 e9       	ldi	r25, 0x96	; 150
 c38:	bb 27       	eor	r27, r27
 c3a:	93 95       	inc	r25
 c3c:	f6 95       	lsr	r31
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b7 95       	ror	r27
 c46:	f1 11       	cpse	r31, r1
 c48:	f8 cf       	rjmp	.-16     	; 0xc3a <__floatsisf+0x1c>
 c4a:	fa f4       	brpl	.+62     	; 0xc8a <__floatsisf+0x6c>
 c4c:	bb 0f       	add	r27, r27
 c4e:	11 f4       	brne	.+4      	; 0xc54 <__floatsisf+0x36>
 c50:	60 ff       	sbrs	r22, 0
 c52:	1b c0       	rjmp	.+54     	; 0xc8a <__floatsisf+0x6c>
 c54:	6f 5f       	subi	r22, 0xFF	; 255
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	16 c0       	rjmp	.+44     	; 0xc8a <__floatsisf+0x6c>
 c5e:	88 23       	and	r24, r24
 c60:	11 f0       	breq	.+4      	; 0xc66 <__floatsisf+0x48>
 c62:	96 e9       	ldi	r25, 0x96	; 150
 c64:	11 c0       	rjmp	.+34     	; 0xc88 <__floatsisf+0x6a>
 c66:	77 23       	and	r23, r23
 c68:	21 f0       	breq	.+8      	; 0xc72 <__floatsisf+0x54>
 c6a:	9e e8       	ldi	r25, 0x8E	; 142
 c6c:	87 2f       	mov	r24, r23
 c6e:	76 2f       	mov	r23, r22
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <__floatsisf+0x5e>
 c72:	66 23       	and	r22, r22
 c74:	71 f0       	breq	.+28     	; 0xc92 <__floatsisf+0x74>
 c76:	96 e8       	ldi	r25, 0x86	; 134
 c78:	86 2f       	mov	r24, r22
 c7a:	70 e0       	ldi	r23, 0x00	; 0
 c7c:	60 e0       	ldi	r22, 0x00	; 0
 c7e:	2a f0       	brmi	.+10     	; 0xc8a <__floatsisf+0x6c>
 c80:	9a 95       	dec	r25
 c82:	66 0f       	add	r22, r22
 c84:	77 1f       	adc	r23, r23
 c86:	88 1f       	adc	r24, r24
 c88:	da f7       	brpl	.-10     	; 0xc80 <__floatsisf+0x62>
 c8a:	88 0f       	add	r24, r24
 c8c:	96 95       	lsr	r25
 c8e:	87 95       	ror	r24
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret

00000c94 <__floatundisf>:
 c94:	e8 94       	clt

00000c96 <__fp_di2sf>:
 c96:	f9 2f       	mov	r31, r25
 c98:	96 eb       	ldi	r25, 0xB6	; 182
 c9a:	ff 23       	and	r31, r31
 c9c:	81 f0       	breq	.+32     	; 0xcbe <__fp_di2sf+0x28>
 c9e:	12 16       	cp	r1, r18
 ca0:	13 06       	cpc	r1, r19
 ca2:	14 06       	cpc	r1, r20
 ca4:	44 0b       	sbc	r20, r20
 ca6:	93 95       	inc	r25
 ca8:	f6 95       	lsr	r31
 caa:	87 95       	ror	r24
 cac:	77 95       	ror	r23
 cae:	67 95       	ror	r22
 cb0:	57 95       	ror	r21
 cb2:	40 40       	sbci	r20, 0x00	; 0
 cb4:	ff 23       	and	r31, r31
 cb6:	b9 f7       	brne	.-18     	; 0xca6 <__fp_di2sf+0x10>
 cb8:	1b c0       	rjmp	.+54     	; 0xcf0 <__fp_di2sf+0x5a>
 cba:	99 27       	eor	r25, r25
 cbc:	08 95       	ret
 cbe:	88 23       	and	r24, r24
 cc0:	51 f4       	brne	.+20     	; 0xcd6 <__fp_di2sf+0x40>
 cc2:	98 50       	subi	r25, 0x08	; 8
 cc4:	d2 f7       	brpl	.-12     	; 0xcba <__fp_di2sf+0x24>
 cc6:	87 2b       	or	r24, r23
 cc8:	76 2f       	mov	r23, r22
 cca:	65 2f       	mov	r22, r21
 ccc:	54 2f       	mov	r21, r20
 cce:	43 2f       	mov	r20, r19
 cd0:	32 2f       	mov	r19, r18
 cd2:	20 e0       	ldi	r18, 0x00	; 0
 cd4:	b1 f3       	breq	.-20     	; 0xcc2 <__fp_di2sf+0x2c>
 cd6:	12 16       	cp	r1, r18
 cd8:	13 06       	cpc	r1, r19
 cda:	14 06       	cpc	r1, r20
 cdc:	44 0b       	sbc	r20, r20
 cde:	88 23       	and	r24, r24
 ce0:	3a f0       	brmi	.+14     	; 0xcf0 <__fp_di2sf+0x5a>
 ce2:	9a 95       	dec	r25
 ce4:	44 0f       	add	r20, r20
 ce6:	55 1f       	adc	r21, r21
 ce8:	66 1f       	adc	r22, r22
 cea:	77 1f       	adc	r23, r23
 cec:	88 1f       	adc	r24, r24
 cee:	ca f7       	brpl	.-14     	; 0xce2 <__fp_di2sf+0x4c>
 cf0:	55 23       	and	r21, r21
 cf2:	4a f4       	brpl	.+18     	; 0xd06 <__fp_di2sf+0x70>
 cf4:	44 0f       	add	r20, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	11 f4       	brne	.+4      	; 0xcfe <__fp_di2sf+0x68>
 cfa:	60 ff       	sbrs	r22, 0
 cfc:	04 c0       	rjmp	.+8      	; 0xd06 <__fp_di2sf+0x70>
 cfe:	6f 5f       	subi	r22, 0xFF	; 255
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	88 0f       	add	r24, r24
 d08:	96 95       	lsr	r25
 d0a:	87 95       	ror	r24
 d0c:	97 f9       	bld	r25, 7
 d0e:	08 95       	ret

00000d10 <__fp_negdi>:
 d10:	90 95       	com	r25
 d12:	80 95       	com	r24
 d14:	70 95       	com	r23
 d16:	60 95       	com	r22
 d18:	50 95       	com	r21
 d1a:	40 95       	com	r20
 d1c:	30 95       	com	r19
 d1e:	21 95       	neg	r18
 d20:	3f 4f       	sbci	r19, 0xFF	; 255
 d22:	4f 4f       	sbci	r20, 0xFF	; 255
 d24:	5f 4f       	sbci	r21, 0xFF	; 255
 d26:	6f 4f       	sbci	r22, 0xFF	; 255
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	08 95       	ret

00000d30 <__fp_split3>:
 d30:	57 fd       	sbrc	r21, 7
 d32:	90 58       	subi	r25, 0x80	; 128
 d34:	44 0f       	add	r20, r20
 d36:	55 1f       	adc	r21, r21
 d38:	59 f0       	breq	.+22     	; 0xd50 <__fp_splitA+0x10>
 d3a:	5f 3f       	cpi	r21, 0xFF	; 255
 d3c:	71 f0       	breq	.+28     	; 0xd5a <__fp_splitA+0x1a>
 d3e:	47 95       	ror	r20

00000d40 <__fp_splitA>:
 d40:	88 0f       	add	r24, r24
 d42:	97 fb       	bst	r25, 7
 d44:	99 1f       	adc	r25, r25
 d46:	61 f0       	breq	.+24     	; 0xd60 <__fp_splitA+0x20>
 d48:	9f 3f       	cpi	r25, 0xFF	; 255
 d4a:	79 f0       	breq	.+30     	; 0xd6a <__fp_splitA+0x2a>
 d4c:	87 95       	ror	r24
 d4e:	08 95       	ret
 d50:	12 16       	cp	r1, r18
 d52:	13 06       	cpc	r1, r19
 d54:	14 06       	cpc	r1, r20
 d56:	55 1f       	adc	r21, r21
 d58:	f2 cf       	rjmp	.-28     	; 0xd3e <__fp_split3+0xe>
 d5a:	46 95       	lsr	r20
 d5c:	f1 df       	rcall	.-30     	; 0xd40 <__fp_splitA>
 d5e:	08 c0       	rjmp	.+16     	; 0xd70 <__fp_splitA+0x30>
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	18 06       	cpc	r1, r24
 d66:	99 1f       	adc	r25, r25
 d68:	f1 cf       	rjmp	.-30     	; 0xd4c <__fp_splitA+0xc>
 d6a:	86 95       	lsr	r24
 d6c:	71 05       	cpc	r23, r1
 d6e:	61 05       	cpc	r22, r1
 d70:	08 94       	sec
 d72:	08 95       	ret

00000d74 <__mulsf3>:
 d74:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__mulsf3x>
 d78:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__fp_round>
 d7c:	0e 94 30 07 	call	0xe60	; 0xe60 <__fp_pscA>
 d80:	38 f0       	brcs	.+14     	; 0xd90 <__mulsf3+0x1c>
 d82:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fp_pscB>
 d86:	20 f0       	brcs	.+8      	; 0xd90 <__mulsf3+0x1c>
 d88:	95 23       	and	r25, r21
 d8a:	11 f0       	breq	.+4      	; 0xd90 <__mulsf3+0x1c>
 d8c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_inf>
 d90:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_nan>
 d94:	11 24       	eor	r1, r1
 d96:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__fp_szero>

00000d9a <__mulsf3x>:
 d9a:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_split3>
 d9e:	70 f3       	brcs	.-36     	; 0xd7c <__mulsf3+0x8>

00000da0 <__mulsf3_pse>:
 da0:	95 9f       	mul	r25, r21
 da2:	c1 f3       	breq	.-16     	; 0xd94 <__mulsf3+0x20>
 da4:	95 0f       	add	r25, r21
 da6:	50 e0       	ldi	r21, 0x00	; 0
 da8:	55 1f       	adc	r21, r21
 daa:	62 9f       	mul	r22, r18
 dac:	f0 01       	movw	r30, r0
 dae:	72 9f       	mul	r23, r18
 db0:	bb 27       	eor	r27, r27
 db2:	f0 0d       	add	r31, r0
 db4:	b1 1d       	adc	r27, r1
 db6:	63 9f       	mul	r22, r19
 db8:	aa 27       	eor	r26, r26
 dba:	f0 0d       	add	r31, r0
 dbc:	b1 1d       	adc	r27, r1
 dbe:	aa 1f       	adc	r26, r26
 dc0:	64 9f       	mul	r22, r20
 dc2:	66 27       	eor	r22, r22
 dc4:	b0 0d       	add	r27, r0
 dc6:	a1 1d       	adc	r26, r1
 dc8:	66 1f       	adc	r22, r22
 dca:	82 9f       	mul	r24, r18
 dcc:	22 27       	eor	r18, r18
 dce:	b0 0d       	add	r27, r0
 dd0:	a1 1d       	adc	r26, r1
 dd2:	62 1f       	adc	r22, r18
 dd4:	73 9f       	mul	r23, r19
 dd6:	b0 0d       	add	r27, r0
 dd8:	a1 1d       	adc	r26, r1
 dda:	62 1f       	adc	r22, r18
 ddc:	83 9f       	mul	r24, r19
 dde:	a0 0d       	add	r26, r0
 de0:	61 1d       	adc	r22, r1
 de2:	22 1f       	adc	r18, r18
 de4:	74 9f       	mul	r23, r20
 de6:	33 27       	eor	r19, r19
 de8:	a0 0d       	add	r26, r0
 dea:	61 1d       	adc	r22, r1
 dec:	23 1f       	adc	r18, r19
 dee:	84 9f       	mul	r24, r20
 df0:	60 0d       	add	r22, r0
 df2:	21 1d       	adc	r18, r1
 df4:	82 2f       	mov	r24, r18
 df6:	76 2f       	mov	r23, r22
 df8:	6a 2f       	mov	r22, r26
 dfa:	11 24       	eor	r1, r1
 dfc:	9f 57       	subi	r25, 0x7F	; 127
 dfe:	50 40       	sbci	r21, 0x00	; 0
 e00:	9a f0       	brmi	.+38     	; 0xe28 <__mulsf3_pse+0x88>
 e02:	f1 f0       	breq	.+60     	; 0xe40 <__mulsf3_pse+0xa0>
 e04:	88 23       	and	r24, r24
 e06:	4a f0       	brmi	.+18     	; 0xe1a <__mulsf3_pse+0x7a>
 e08:	ee 0f       	add	r30, r30
 e0a:	ff 1f       	adc	r31, r31
 e0c:	bb 1f       	adc	r27, r27
 e0e:	66 1f       	adc	r22, r22
 e10:	77 1f       	adc	r23, r23
 e12:	88 1f       	adc	r24, r24
 e14:	91 50       	subi	r25, 0x01	; 1
 e16:	50 40       	sbci	r21, 0x00	; 0
 e18:	a9 f7       	brne	.-22     	; 0xe04 <__mulsf3_pse+0x64>
 e1a:	9e 3f       	cpi	r25, 0xFE	; 254
 e1c:	51 05       	cpc	r21, r1
 e1e:	80 f0       	brcs	.+32     	; 0xe40 <__mulsf3_pse+0xa0>
 e20:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__fp_inf>
 e24:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__fp_szero>
 e28:	5f 3f       	cpi	r21, 0xFF	; 255
 e2a:	e4 f3       	brlt	.-8      	; 0xe24 <__mulsf3_pse+0x84>
 e2c:	98 3e       	cpi	r25, 0xE8	; 232
 e2e:	d4 f3       	brlt	.-12     	; 0xe24 <__mulsf3_pse+0x84>
 e30:	86 95       	lsr	r24
 e32:	77 95       	ror	r23
 e34:	67 95       	ror	r22
 e36:	b7 95       	ror	r27
 e38:	f7 95       	ror	r31
 e3a:	e7 95       	ror	r30
 e3c:	9f 5f       	subi	r25, 0xFF	; 255
 e3e:	c1 f7       	brne	.-16     	; 0xe30 <__mulsf3_pse+0x90>
 e40:	fe 2b       	or	r31, r30
 e42:	88 0f       	add	r24, r24
 e44:	91 1d       	adc	r25, r1
 e46:	96 95       	lsr	r25
 e48:	87 95       	ror	r24
 e4a:	97 f9       	bld	r25, 7
 e4c:	08 95       	ret

00000e4e <__fp_inf>:
 e4e:	97 f9       	bld	r25, 7
 e50:	9f 67       	ori	r25, 0x7F	; 127
 e52:	80 e8       	ldi	r24, 0x80	; 128
 e54:	70 e0       	ldi	r23, 0x00	; 0
 e56:	60 e0       	ldi	r22, 0x00	; 0
 e58:	08 95       	ret

00000e5a <__fp_nan>:
 e5a:	9f ef       	ldi	r25, 0xFF	; 255
 e5c:	80 ec       	ldi	r24, 0xC0	; 192
 e5e:	08 95       	ret

00000e60 <__fp_pscA>:
 e60:	00 24       	eor	r0, r0
 e62:	0a 94       	dec	r0
 e64:	16 16       	cp	r1, r22
 e66:	17 06       	cpc	r1, r23
 e68:	18 06       	cpc	r1, r24
 e6a:	09 06       	cpc	r0, r25
 e6c:	08 95       	ret

00000e6e <__fp_pscB>:
 e6e:	00 24       	eor	r0, r0
 e70:	0a 94       	dec	r0
 e72:	12 16       	cp	r1, r18
 e74:	13 06       	cpc	r1, r19
 e76:	14 06       	cpc	r1, r20
 e78:	05 06       	cpc	r0, r21
 e7a:	08 95       	ret

00000e7c <__fp_round>:
 e7c:	09 2e       	mov	r0, r25
 e7e:	03 94       	inc	r0
 e80:	00 0c       	add	r0, r0
 e82:	11 f4       	brne	.+4      	; 0xe88 <__fp_round+0xc>
 e84:	88 23       	and	r24, r24
 e86:	52 f0       	brmi	.+20     	; 0xe9c <__fp_round+0x20>
 e88:	bb 0f       	add	r27, r27
 e8a:	40 f4       	brcc	.+16     	; 0xe9c <__fp_round+0x20>
 e8c:	bf 2b       	or	r27, r31
 e8e:	11 f4       	brne	.+4      	; 0xe94 <__fp_round+0x18>
 e90:	60 ff       	sbrs	r22, 0
 e92:	04 c0       	rjmp	.+8      	; 0xe9c <__fp_round+0x20>
 e94:	6f 5f       	subi	r22, 0xFF	; 255
 e96:	7f 4f       	sbci	r23, 0xFF	; 255
 e98:	8f 4f       	sbci	r24, 0xFF	; 255
 e9a:	9f 4f       	sbci	r25, 0xFF	; 255
 e9c:	08 95       	ret

00000e9e <__fp_zero>:
 e9e:	e8 94       	clt

00000ea0 <__fp_szero>:
 ea0:	bb 27       	eor	r27, r27
 ea2:	66 27       	eor	r22, r22
 ea4:	77 27       	eor	r23, r23
 ea6:	cb 01       	movw	r24, r22
 ea8:	97 f9       	bld	r25, 7
 eaa:	08 95       	ret

00000eac <__umoddi3>:
 eac:	68 94       	set
 eae:	01 c0       	rjmp	.+2      	; 0xeb2 <__udivdi3_umoddi3>

00000eb0 <__udivdi3>:
 eb0:	e8 94       	clt

00000eb2 <__udivdi3_umoddi3>:
 eb2:	8f 92       	push	r8
 eb4:	9f 92       	push	r9
 eb6:	cf 93       	push	r28
 eb8:	df 93       	push	r29
 eba:	05 d0       	rcall	.+10     	; 0xec6 <__udivmod64>
 ebc:	df 91       	pop	r29
 ebe:	cf 91       	pop	r28
 ec0:	9f 90       	pop	r9
 ec2:	8f 90       	pop	r8
 ec4:	08 95       	ret

00000ec6 <__udivmod64>:
 ec6:	88 24       	eor	r8, r8
 ec8:	99 24       	eor	r9, r9
 eca:	f4 01       	movw	r30, r8
 ecc:	e4 01       	movw	r28, r8
 ece:	b0 e4       	ldi	r27, 0x40	; 64
 ed0:	1b 2e       	mov	r1, r27
 ed2:	d4 01       	movw	r26, r8
 ed4:	9d 15       	cp	r25, r13
 ed6:	8e 04       	cpc	r8, r14
 ed8:	9f 04       	cpc	r9, r15
 eda:	e0 07       	cpc	r30, r16
 edc:	f1 07       	cpc	r31, r17
 ede:	38 f4       	brcc	.+14     	; 0xeee <__udivmod64+0x28>
 ee0:	fc 01       	movw	r30, r24
 ee2:	4b 01       	movw	r8, r22
 ee4:	ca 01       	movw	r24, r20
 ee6:	b9 01       	movw	r22, r18
 ee8:	ad 01       	movw	r20, r26
 eea:	9e 01       	movw	r18, r28
 eec:	16 94       	lsr	r1
 eee:	22 0f       	add	r18, r18
 ef0:	33 1f       	adc	r19, r19
 ef2:	44 1f       	adc	r20, r20
 ef4:	55 1f       	adc	r21, r21
 ef6:	66 1f       	adc	r22, r22
 ef8:	77 1f       	adc	r23, r23
 efa:	88 1f       	adc	r24, r24
 efc:	99 1f       	adc	r25, r25
 efe:	88 1c       	adc	r8, r8
 f00:	99 1c       	adc	r9, r9
 f02:	ee 1f       	adc	r30, r30
 f04:	ff 1f       	adc	r31, r31
 f06:	cc 1f       	adc	r28, r28
 f08:	dd 1f       	adc	r29, r29
 f0a:	aa 1f       	adc	r26, r26
 f0c:	bb 1f       	adc	r27, r27
 f0e:	8a 14       	cp	r8, r10
 f10:	9b 04       	cpc	r9, r11
 f12:	ec 05       	cpc	r30, r12
 f14:	fd 05       	cpc	r31, r13
 f16:	ce 05       	cpc	r28, r14
 f18:	df 05       	cpc	r29, r15
 f1a:	a0 07       	cpc	r26, r16
 f1c:	b1 07       	cpc	r27, r17
 f1e:	48 f0       	brcs	.+18     	; 0xf32 <__udivmod64+0x6c>
 f20:	8a 18       	sub	r8, r10
 f22:	9b 08       	sbc	r9, r11
 f24:	ec 09       	sbc	r30, r12
 f26:	fd 09       	sbc	r31, r13
 f28:	ce 09       	sbc	r28, r14
 f2a:	df 09       	sbc	r29, r15
 f2c:	a0 0b       	sbc	r26, r16
 f2e:	b1 0b       	sbc	r27, r17
 f30:	21 60       	ori	r18, 0x01	; 1
 f32:	1a 94       	dec	r1
 f34:	e1 f6       	brne	.-72     	; 0xeee <__udivmod64+0x28>
 f36:	2e f4       	brtc	.+10     	; 0xf42 <__udivmod64+0x7c>
 f38:	94 01       	movw	r18, r8
 f3a:	af 01       	movw	r20, r30
 f3c:	be 01       	movw	r22, r28
 f3e:	cd 01       	movw	r24, r26
 f40:	00 0c       	add	r0, r0
 f42:	08 95       	ret

00000f44 <__ashldi3>:
 f44:	0f 93       	push	r16
 f46:	08 30       	cpi	r16, 0x08	; 8
 f48:	90 f0       	brcs	.+36     	; 0xf6e <__ashldi3+0x2a>
 f4a:	98 2f       	mov	r25, r24
 f4c:	87 2f       	mov	r24, r23
 f4e:	76 2f       	mov	r23, r22
 f50:	65 2f       	mov	r22, r21
 f52:	54 2f       	mov	r21, r20
 f54:	43 2f       	mov	r20, r19
 f56:	32 2f       	mov	r19, r18
 f58:	22 27       	eor	r18, r18
 f5a:	08 50       	subi	r16, 0x08	; 8
 f5c:	f4 cf       	rjmp	.-24     	; 0xf46 <__ashldi3+0x2>
 f5e:	22 0f       	add	r18, r18
 f60:	33 1f       	adc	r19, r19
 f62:	44 1f       	adc	r20, r20
 f64:	55 1f       	adc	r21, r21
 f66:	66 1f       	adc	r22, r22
 f68:	77 1f       	adc	r23, r23
 f6a:	88 1f       	adc	r24, r24
 f6c:	99 1f       	adc	r25, r25
 f6e:	0a 95       	dec	r16
 f70:	b2 f7       	brpl	.-20     	; 0xf5e <__ashldi3+0x1a>
 f72:	0f 91       	pop	r16
 f74:	08 95       	ret

00000f76 <__ashrdi3>:
 f76:	97 fb       	bst	r25, 7
 f78:	10 f8       	bld	r1, 0

00000f7a <__lshrdi3>:
 f7a:	16 94       	lsr	r1
 f7c:	00 08       	sbc	r0, r0
 f7e:	0f 93       	push	r16
 f80:	08 30       	cpi	r16, 0x08	; 8
 f82:	98 f0       	brcs	.+38     	; 0xfaa <__lshrdi3+0x30>
 f84:	08 50       	subi	r16, 0x08	; 8
 f86:	23 2f       	mov	r18, r19
 f88:	34 2f       	mov	r19, r20
 f8a:	45 2f       	mov	r20, r21
 f8c:	56 2f       	mov	r21, r22
 f8e:	67 2f       	mov	r22, r23
 f90:	78 2f       	mov	r23, r24
 f92:	89 2f       	mov	r24, r25
 f94:	90 2d       	mov	r25, r0
 f96:	f4 cf       	rjmp	.-24     	; 0xf80 <__lshrdi3+0x6>
 f98:	05 94       	asr	r0
 f9a:	97 95       	ror	r25
 f9c:	87 95       	ror	r24
 f9e:	77 95       	ror	r23
 fa0:	67 95       	ror	r22
 fa2:	57 95       	ror	r21
 fa4:	47 95       	ror	r20
 fa6:	37 95       	ror	r19
 fa8:	27 95       	ror	r18
 faa:	0a 95       	dec	r16
 fac:	aa f7       	brpl	.-22     	; 0xf98 <__lshrdi3+0x1e>
 fae:	0f 91       	pop	r16
 fb0:	08 95       	ret

00000fb2 <__subdi3>:
 fb2:	2a 19       	sub	r18, r10
 fb4:	3b 09       	sbc	r19, r11
 fb6:	4c 09       	sbc	r20, r12
 fb8:	5d 09       	sbc	r21, r13
 fba:	6e 09       	sbc	r22, r14
 fbc:	7f 09       	sbc	r23, r15
 fbe:	80 0b       	sbc	r24, r16
 fc0:	91 0b       	sbc	r25, r17
 fc2:	08 95       	ret

00000fc4 <_exit>:
 fc4:	f8 94       	cli

00000fc6 <__stop_program>:
 fc6:	ff cf       	rjmp	.-2      	; 0xfc6 <__stop_program>
