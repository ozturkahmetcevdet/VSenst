
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00803e00  00001171  00001225  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001170  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  00009170  00001170  00001224  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000fa  00803ea4  00803ea4  000012c9  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  00001338  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000673d  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002684  00000000  00000000  00007d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e87  00000000  00000000  0000a391  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000498  00000000  00000000  0000c218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023e4  00000000  00000000  0000c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c6d  00000000  00000000  0000ea94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  00010701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e1 e7       	ldi	r30, 0x71	; 113
      48:	f1 e1       	ldi	r31, 0x11	; 17
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 3a       	cpi	r26, 0xA4	; 164
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2f e3       	ldi	r18, 0x3F	; 63
      58:	a4 ea       	ldi	r26, 0xA4	; 164
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ae 39       	cpi	r26, 0x9E	; 158
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	29 d0       	rcall	.+82     	; 0xba <main>
      68:	81 c8       	rjmp	.-3838   	; 0xfffff16c <__eeprom_end+0xff7ef16c>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	de d3       	rcall	.+1980   	; 0x82a <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
	/* Insert your PIT interrupt handling code here */

	/* The interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6fe3>
}
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:

ISR(PORTA_PORT_vect)
{
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
	PORTA.INTFLAGS = PORT_INT_gm;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f7299>
}
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <ConfigPIT>:

uint8_t sleepTimeSequence = T_2048;

void ConfigPIT(uint8_t timeSequence)
{
	RTC.PITCTRLA = timeSequence 
      ac:	81 60       	ori	r24, 0x01	; 1
      ae:	e0 e4       	ldi	r30, 0x40	; 64
      b0:	f1 e0       	ldi	r31, 0x01	; 1
      b2:	80 8b       	std	Z+16, r24	; 0x10
	| 1 << RTC_PITEN_bp;
	RTC.PITINTFLAGS = RTC_PI_bm;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	83 8b       	std	Z+19, r24	; 0x13
      b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
	atmel_start_init();
      ba:	d8 df       	rcall	.-80     	; 0x6c <atmel_start_init>
	
	batVar = FLASH_0_read_eeprom_byte(0);
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	17 d4       	rcall	.+2094   	; 0x8f0 <FLASH_0_read_eeprom_byte>
	batVar = batVar > 6 ? 7 : batVar;
      c2:	c8 2f       	mov	r28, r24
      c4:	88 30       	cpi	r24, 0x08	; 8
      c6:	08 f0       	brcs	.+2      	; 0xca <main+0x10>
      c8:	c7 e0       	ldi	r28, 0x07	; 7
      ca:	c0 93 a4 3e 	sts	0x3EA4, r28	; 0x803ea4 <__data_end>
	BatteryLevelCounter = ((uint64_t)((float)BatteryLevelCounter * (float)batVar)) >> 3;
      ce:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
      d2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
      d6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
      da:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
      de:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
      e2:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
      e6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
      ea:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
      ee:	0b d7       	rcall	.+3606   	; 0xf06 <__floatundisf>
      f0:	6b 01       	movw	r12, r22
      f2:	7c 01       	movw	r14, r24
      f4:	6c 2f       	mov	r22, r28
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	c7 d6       	rcall	.+3470   	; 0xe8c <__floatunsisf>
      fe:	9b 01       	movw	r18, r22
     100:	ac 01       	movw	r20, r24
     102:	c7 01       	movw	r24, r14
     104:	b6 01       	movw	r22, r12
     106:	9e d7       	rcall	.+3900   	; 0x1044 <__mulsf3>
     108:	5b d6       	rcall	.+3254   	; 0xdc0 <__fixunssfdi>
     10a:	03 e0       	ldi	r16, 0x03	; 3
     10c:	0a d8       	rcall	.-4076   	; 0xfffff122 <__eeprom_end+0xff7ef122>
     10e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     112:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     116:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     11a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     11e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     122:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     126:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     12a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     12e:	89 b1       	in	r24, 0x09	; 9
     130:	8f 7e       	andi	r24, 0xEF	; 239
     132:	89 b9       	out	0x09, r24	; 9
	
	DATA_set_level(false);
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM8;
     134:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f7f9b>
     138:	e9 e8       	ldi	r30, 0x89	; 137
     13a:	fe e3       	ldi	r31, 0x3E	; 62
     13c:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM9;
     13e:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f7f9c>
     142:	87 83       	std	Z+7, r24	; 0x07
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     144:	46 e0       	ldi	r20, 0x06	; 6
     146:	6b e1       	ldi	r22, 0x1B	; 27
     148:	cf 01       	movw	r24, r30
     14a:	e9 d4       	rcall	.+2514   	; 0xb1e <SX1243Init>
	{
		#if B_STYLE == (0)
		BatteryLevelCounter -= ((QTOUCHADC_REFERANCE_FILTER_P[0].LoopCycle + QTOUCHADC_REFERANCE_FILTER_P[1].LoopCycle) >> (sleepTimeSequence + 1));
		#endif
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     14c:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     150:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     154:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     158:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     15c:	81 38       	cpi	r24, 0x81	; 129
     15e:	91 45       	sbci	r25, 0x51	; 81
     160:	a1 40       	sbci	r26, 0x01	; 1
     162:	b1 05       	cpc	r27, r1
     164:	78 f1       	brcs	.+94     	; 0x1c4 <main+0x10a>
		{
			double var = (double)BatteryLevelCounter / (double)BAT_FULL_CAPACITY;
     166:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     16a:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     16e:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     172:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     176:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     17a:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     17e:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     182:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     186:	bf d6       	rcall	.+3454   	; 0xf06 <__floatundisf>
     188:	21 e9       	ldi	r18, 0x91	; 145
     18a:	39 e7       	ldi	r19, 0x79	; 121
     18c:	4b e0       	ldi	r20, 0x0B	; 11
     18e:	50 e5       	ldi	r21, 0x50	; 80
     190:	a0 d5       	rcall	.+2880   	; 0xcd2 <__divsf3>
			batVar = (uint8_t)(var * 9.0f);
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e1       	ldi	r20, 0x10	; 16
     198:	51 e4       	ldi	r21, 0x41	; 65
     19a:	54 d7       	rcall	.+3752   	; 0x1044 <__mulsf3>
     19c:	48 d6       	rcall	.+3216   	; 0xe2e <__fixunssfsi>
			batVar = batVar > 6 ? 7 : batVar;
     19e:	68 30       	cpi	r22, 0x08	; 8
     1a0:	08 f0       	brcs	.+2      	; 0x1a4 <main+0xea>
     1a2:	67 e0       	ldi	r22, 0x07	; 7
     1a4:	60 93 a4 3e 	sts	0x3EA4, r22	; 0x803ea4 <__data_end>
			FLASH_0_write_eeprom_byte(0, batVar);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	a5 d3       	rcall	.+1866   	; 0x8f8 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     1ae:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <BatteryLevelCalculateCounter>
     1b2:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     1b6:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     1ba:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
}

static inline void RSTCTRL_clear_reset_cause(void)
{
	RSTCTRL.RSTFR
	    = RSTCTRL_UPDIRF_bm | RSTCTRL_SWRF_bm | RSTCTRL_WDRF_bm | RSTCTRL_EXTRF_bm | RSTCTRL_BORF_bm | RSTCTRL_PORF_bm;
     1be:	8f e3       	ldi	r24, 0x3F	; 63
     1c0:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <payloadBufferStartByte+0x7f6ed0>
			RSTCTRL_clear_reset_cause();
		}
		BatteryLevelCalculateCounter++;
     1c4:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     1c8:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     1cc:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     1d0:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	a1 1d       	adc	r26, r1
     1d8:	b1 1d       	adc	r27, r1
     1da:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <BatteryLevelCalculateCounter>
     1de:	90 93 02 3e 	sts	0x3E02, r25	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     1e2:	a0 93 03 3e 	sts	0x3E03, r26	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     1e6:	b0 93 04 3e 	sts	0x3E04, r27	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     1ea:	e4 e1       	ldi	r30, 0x14	; 20
     1ec:	f4 e0       	ldi	r31, 0x04	; 4
     1ee:	80 81       	ld	r24, Z
     1f0:	88 60       	ori	r24, 0x08	; 8
     1f2:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     1f4:	e4 e3       	ldi	r30, 0x34	; 52
     1f6:	f4 e0       	ldi	r31, 0x04	; 4
     1f8:	80 81       	ld	r24, Z
     1fa:	88 60       	ori	r24, 0x08	; 8
     1fc:	80 83       	st	Z, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     1fe:	e5 e1       	ldi	r30, 0x15	; 21
     200:	f4 e0       	ldi	r31, 0x04	; 4
     202:	80 81       	ld	r24, Z
     204:	88 60       	ori	r24, 0x08	; 8
     206:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     208:	e5 e3       	ldi	r30, 0x35	; 53
     20a:	f4 e0       	ldi	r31, 0x04	; 4
     20c:	80 81       	ld	r24, Z
     20e:	88 60       	ori	r24, 0x08	; 8
     210:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     212:	80 b1       	in	r24, 0x00	; 0
     214:	8f 7e       	andi	r24, 0xEF	; 239
     216:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     218:	84 b1       	in	r24, 0x04	; 4
     21a:	8f 7e       	andi	r24, 0xEF	; 239
     21c:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     21e:	80 b1       	in	r24, 0x00	; 0
     220:	8f 7d       	andi	r24, 0xDF	; 223
     222:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     224:	84 b1       	in	r24, 0x04	; 4
     226:	8f 7d       	andi	r24, 0xDF	; 223
     228:	84 b9       	out	0x04, r24	; 4
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     22a:	62 b1       	in	r22, 0x02	; 2
		SB1_set_dir(PORT_DIR_IN);
		SB2_set_dir(PORT_DIR_IN);
		PSD1_set_dir(PORT_DIR_IN);
		PSD2_set_dir(PORT_DIR_IN);
		
		uint8_t In_SB1  = !SB1_get_level();
     22c:	62 95       	swap	r22
     22e:	6f 70       	andi	r22, 0x0F	; 15
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	68 27       	eor	r22, r24
     234:	61 70       	andi	r22, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     236:	56 b1       	in	r21, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     238:	52 95       	swap	r21
     23a:	5f 70       	andi	r21, 0x0F	; 15
     23c:	58 27       	eor	r21, r24
     23e:	51 70       	andi	r21, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     240:	42 b1       	in	r20, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
     242:	42 95       	swap	r20
     244:	46 95       	lsr	r20
     246:	47 70       	andi	r20, 0x07	; 7
     248:	48 27       	eor	r20, r24
     24a:	41 70       	andi	r20, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     24c:	26 b1       	in	r18, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
     24e:	22 95       	swap	r18
     250:	26 95       	lsr	r18
     252:	27 70       	andi	r18, 0x07	; 7
     254:	28 27       	eor	r18, r24
     256:	21 70       	andi	r18, 0x01	; 1
		
		#if B_STYLE == (1)
		uint8_t IOFilterCounter = 100;
     258:	84 e6       	ldi	r24, 0x64	; 100
		while(IOFilterCounter--)
     25a:	1c c0       	rjmp	.+56     	; 0x294 <__DATA_REGION_LENGTH__+0x94>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     25c:	92 b1       	in	r25, 0x02	; 2
		{
			In_SB1  += !SB1_get_level();
     25e:	92 95       	swap	r25
     260:	9f 70       	andi	r25, 0x0F	; 15
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	98 27       	eor	r25, r24
     266:	91 70       	andi	r25, 0x01	; 1
     268:	69 0f       	add	r22, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     26a:	96 b1       	in	r25, 0x06	; 6
			In_SB2  += !SB2_get_level();
     26c:	92 95       	swap	r25
     26e:	9f 70       	andi	r25, 0x0F	; 15
     270:	98 27       	eor	r25, r24
     272:	91 70       	andi	r25, 0x01	; 1
     274:	59 0f       	add	r21, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     276:	92 b1       	in	r25, 0x02	; 2
			In_PSD1 += !PSD1_get_level();
     278:	92 95       	swap	r25
     27a:	96 95       	lsr	r25
     27c:	97 70       	andi	r25, 0x07	; 7
     27e:	98 27       	eor	r25, r24
     280:	91 70       	andi	r25, 0x01	; 1
     282:	49 0f       	add	r20, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     284:	96 b1       	in	r25, 0x06	; 6
			In_PSD2 += !PSD2_get_level();
     286:	92 95       	swap	r25
     288:	96 95       	lsr	r25
     28a:	97 70       	andi	r25, 0x07	; 7
     28c:	89 27       	eor	r24, r25
     28e:	81 70       	andi	r24, 0x01	; 1
     290:	28 0f       	add	r18, r24
		uint8_t	In_PSD1 = !PSD1_get_level();
		uint8_t In_PSD2 = !PSD2_get_level();
		
		#if B_STYLE == (1)
		uint8_t IOFilterCounter = 100;
		while(IOFilterCounter--)
     292:	83 2f       	mov	r24, r19
     294:	3f ef       	ldi	r19, 0xFF	; 255
     296:	38 0f       	add	r19, r24
     298:	81 11       	cpse	r24, r1
     29a:	e0 cf       	rjmp	.-64     	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
			In_SB1  += !SB1_get_level();
			In_SB2  += !SB2_get_level();
			In_PSD1 += !PSD1_get_level();
			In_PSD2 += !PSD2_get_level();
		}
		In_SB1 = In_SB1 > 75;
     29c:	d1 e0       	ldi	r29, 0x01	; 1
     29e:	6c 34       	cpi	r22, 0x4C	; 76
     2a0:	08 f4       	brcc	.+2      	; 0x2a4 <__DATA_REGION_LENGTH__+0xa4>
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
		In_SB2 = In_SB2 > 75;
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	5c 34       	cpi	r21, 0x4C	; 76
     2a8:	08 f4       	brcc	.+2      	; 0x2ac <__DATA_REGION_LENGTH__+0xac>
     2aa:	60 e0       	ldi	r22, 0x00	; 0
		In_PSD1 = In_PSD1 > 75;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	4c 34       	cpi	r20, 0x4C	; 76
     2b0:	08 f4       	brcc	.+2      	; 0x2b4 <__DATA_REGION_LENGTH__+0xb4>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	38 2f       	mov	r19, r24
		In_PSD2 = In_PSD2 > 75;
     2b6:	e1 e0       	ldi	r30, 0x01	; 1
     2b8:	2c 34       	cpi	r18, 0x4C	; 76
     2ba:	08 f4       	brcc	.+2      	; 0x2be <__DATA_REGION_LENGTH__+0xbe>
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	9e 2f       	mov	r25, r30
		#endif
		
		if(!In_PSD1)
     2c0:	4c 34       	cpi	r20, 0x4C	; 76
     2c2:	a8 f4       	brcc	.+42     	; 0x2ee <__DATA_REGION_LENGTH__+0xee>
		{
			QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter++;
     2c4:	ad e0       	ldi	r26, 0x0D	; 13
     2c6:	be e3       	ldi	r27, 0x3E	; 62
     2c8:	13 96       	adiw	r26, 0x03	; 3
     2ca:	4c 91       	ld	r20, X
     2cc:	13 97       	sbiw	r26, 0x03	; 3
     2ce:	4f 5f       	subi	r20, 0xFF	; 255
     2d0:	13 96       	adiw	r26, 0x03	; 3
     2d2:	4c 93       	st	X, r20
     2d4:	13 97       	sbiw	r26, 0x03	; 3
			if(QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter >= SENSOR_ACTIVITY_DEBONCE)
     2d6:	45 30       	cpi	r20, 0x05	; 5
     2d8:	f0 f0       	brcs	.+60     	; 0x316 <__DATA_REGION_LENGTH__+0x116>
			{
				QTOUCHADC_REFERANCE_FILTER_P[0].Activity = false;
     2da:	1c 92       	st	X, r1
				QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue = 0;
     2dc:	d4 96       	adiw	r26, 0x34	; 52
     2de:	1d 92       	st	X+, r1
     2e0:	1d 92       	st	X+, r1
     2e2:	1d 92       	st	X+, r1
     2e4:	1c 92       	st	X, r1
     2e6:	d7 97       	sbiw	r26, 0x37	; 55
				QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate = false;
     2e8:	11 96       	adiw	r26, 0x01	; 1
     2ea:	1c 92       	st	X, r1
     2ec:	14 c0       	rjmp	.+40     	; 0x316 <__DATA_REGION_LENGTH__+0x116>
			}
		}
		else if(QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter || !QTOUCHADC_REFERANCE_FILTER_P[0].Activity)
     2ee:	40 91 10 3e 	lds	r20, 0x3E10	; 0x803e10 <QTOUCHADC_REFERANCE_FILTER_P+0x3>
     2f2:	41 11       	cpse	r20, r1
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__DATA_REGION_LENGTH__+0xfe>
     2f6:	40 91 0d 3e 	lds	r20, 0x3E0D	; 0x803e0d <QTOUCHADC_REFERANCE_FILTER_P>
     2fa:	41 11       	cpse	r20, r1
     2fc:	0c c0       	rjmp	.+24     	; 0x316 <__DATA_REGION_LENGTH__+0x116>
		{
			QTOUCHADC_REFERANCE_FILTER_P[0].ActivityCounter = 0;
     2fe:	ad e0       	ldi	r26, 0x0D	; 13
     300:	be e3       	ldi	r27, 0x3E	; 62
     302:	13 96       	adiw	r26, 0x03	; 3
     304:	1c 92       	st	X, r1
     306:	13 97       	sbiw	r26, 0x03	; 3
			QTOUCHADC_REFERANCE_FILTER_P[0].Activity = true;
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	4c 93       	st	X, r20
			QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate = QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate = true;
     30c:	dd 96       	adiw	r26, 0x3d	; 61
     30e:	4c 93       	st	X, r20
     310:	dd 97       	sbiw	r26, 0x3d	; 61
     312:	11 96       	adiw	r26, 0x01	; 1
     314:	4c 93       	st	X, r20
			//QTOUCHADC_REFERANCE_FILTER_P[0].SenseCalibrate = QTOUCHADC_REFERANCE_FILTER_P[1].SenseCalibrate = true;
		}
		
		if(!In_PSD2)
     316:	2c 34       	cpi	r18, 0x4C	; 76
     318:	c8 f4       	brcc	.+50     	; 0x34c <__DATA_REGION_LENGTH__+0x14c>
		{
			QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter++;
     31a:	ad e0       	ldi	r26, 0x0D	; 13
     31c:	be e3       	ldi	r27, 0x3E	; 62
     31e:	df 96       	adiw	r26, 0x3f	; 63
     320:	2c 91       	ld	r18, X
     322:	df 97       	sbiw	r26, 0x3f	; 63
     324:	2f 5f       	subi	r18, 0xFF	; 255
     326:	df 96       	adiw	r26, 0x3f	; 63
     328:	2c 93       	st	X, r18
     32a:	df 97       	sbiw	r26, 0x3f	; 63
			if(QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter >= SENSOR_ACTIVITY_DEBONCE)
     32c:	25 30       	cpi	r18, 0x05	; 5
     32e:	20 f1       	brcs	.+72     	; 0x378 <__DATA_REGION_LENGTH__+0x178>
			{
				QTOUCHADC_REFERANCE_FILTER_P[1].Activity = false;
     330:	dc 96       	adiw	r26, 0x3c	; 60
     332:	1c 92       	st	X, r1
     334:	dc 97       	sbiw	r26, 0x3c	; 60
				QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue = 0;
     336:	10 92 7d 3e 	sts	0x3E7D, r1	; 0x803e7d <QTOUCHADC_REFERANCE_FILTER_P+0x70>
     33a:	10 92 7e 3e 	sts	0x3E7E, r1	; 0x803e7e <QTOUCHADC_REFERANCE_FILTER_P+0x71>
     33e:	10 92 7f 3e 	sts	0x3E7F, r1	; 0x803e7f <QTOUCHADC_REFERANCE_FILTER_P+0x72>
     342:	10 92 80 3e 	sts	0x3E80, r1	; 0x803e80 <QTOUCHADC_REFERANCE_FILTER_P+0x73>
				QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate = false;
     346:	dd 96       	adiw	r26, 0x3d	; 61
     348:	1c 92       	st	X, r1
     34a:	16 c0       	rjmp	.+44     	; 0x378 <__DATA_REGION_LENGTH__+0x178>
			}
		}
		else if(QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter || !QTOUCHADC_REFERANCE_FILTER_P[1].Activity)
     34c:	20 91 4c 3e 	lds	r18, 0x3E4C	; 0x803e4c <QTOUCHADC_REFERANCE_FILTER_P+0x3f>
     350:	21 11       	cpse	r18, r1
     352:	04 c0       	rjmp	.+8      	; 0x35c <__DATA_REGION_LENGTH__+0x15c>
     354:	20 91 49 3e 	lds	r18, 0x3E49	; 0x803e49 <QTOUCHADC_REFERANCE_FILTER_P+0x3c>
     358:	21 11       	cpse	r18, r1
     35a:	0e c0       	rjmp	.+28     	; 0x378 <__DATA_REGION_LENGTH__+0x178>
		{
			QTOUCHADC_REFERANCE_FILTER_P[1].ActivityCounter = 0;
     35c:	ad e0       	ldi	r26, 0x0D	; 13
     35e:	be e3       	ldi	r27, 0x3E	; 62
     360:	df 96       	adiw	r26, 0x3f	; 63
     362:	1c 92       	st	X, r1
     364:	df 97       	sbiw	r26, 0x3f	; 63
			QTOUCHADC_REFERANCE_FILTER_P[1].Activity = true;
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	dc 96       	adiw	r26, 0x3c	; 60
     36a:	2c 93       	st	X, r18
     36c:	dc 97       	sbiw	r26, 0x3c	; 60
			QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate = QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate = true;
     36e:	dd 96       	adiw	r26, 0x3d	; 61
     370:	2c 93       	st	X, r18
     372:	dd 97       	sbiw	r26, 0x3d	; 61
     374:	11 96       	adiw	r26, 0x01	; 1
     376:	2c 93       	st	X, r18
			//QTOUCHADC_REFERANCE_FILTER_P[0].SenseCalibrate = QTOUCHADC_REFERANCE_FILTER_P[1].SenseCalibrate = true;
		}
		//ATtiny817
		
		#if B_STYLE == (1)
		Const_In_PSD1 |= In_PSD1;
     378:	20 91 aa 3e 	lds	r18, 0x3EAA	; 0x803eaa <Const_In_PSD1>
     37c:	23 2b       	or	r18, r19
     37e:	20 93 aa 3e 	sts	0x3EAA, r18	; 0x803eaa <Const_In_PSD1>
		Const_In_PSD2 |= In_PSD2;
     382:	20 91 a9 3e 	lds	r18, 0x3EA9	; 0x803ea9 <Const_In_PSD2>
     386:	92 2b       	or	r25, r18
     388:	90 93 a9 3e 	sts	0x3EA9, r25	; 0x803ea9 <Const_In_PSD2>
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     38c:	a4 e1       	ldi	r26, 0x14	; 20
     38e:	b4 e0       	ldi	r27, 0x04	; 4
     390:	9c 91       	ld	r25, X
     392:	97 7f       	andi	r25, 0xF7	; 247
     394:	9c 93       	st	X, r25
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     396:	a4 e3       	ldi	r26, 0x34	; 52
     398:	b4 e0       	ldi	r27, 0x04	; 4
     39a:	9c 91       	ld	r25, X
     39c:	97 7f       	andi	r25, 0xF7	; 247
     39e:	9c 93       	st	X, r25
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3a0:	a5 e1       	ldi	r26, 0x15	; 21
     3a2:	b4 e0       	ldi	r27, 0x04	; 4
     3a4:	9c 91       	ld	r25, X
     3a6:	97 7f       	andi	r25, 0xF7	; 247
     3a8:	9c 93       	st	X, r25
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     3aa:	a5 e3       	ldi	r26, 0x35	; 53
     3ac:	b4 e0       	ldi	r27, 0x04	; 4
     3ae:	9c 91       	ld	r25, X
     3b0:	97 7f       	andi	r25, 0xF7	; 247
     3b2:	9c 93       	st	X, r25
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     3b4:	91 b1       	in	r25, 0x01	; 1
     3b6:	9f 7e       	andi	r25, 0xEF	; 239
     3b8:	91 b9       	out	0x01, r25	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3ba:	95 b1       	in	r25, 0x05	; 5
     3bc:	9f 7e       	andi	r25, 0xEF	; 239
     3be:	95 b9       	out	0x05, r25	; 5
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     3c0:	91 b1       	in	r25, 0x01	; 1
     3c2:	9f 7d       	andi	r25, 0xDF	; 223
     3c4:	91 b9       	out	0x01, r25	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     3c6:	95 b1       	in	r25, 0x05	; 5
     3c8:	9f 7d       	andi	r25, 0xDF	; 223
     3ca:	95 b9       	out	0x05, r25	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     3cc:	90 b1       	in	r25, 0x00	; 0
     3ce:	90 61       	ori	r25, 0x10	; 16
     3d0:	90 b9       	out	0x00, r25	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3d2:	94 b1       	in	r25, 0x04	; 4
     3d4:	90 61       	ori	r25, 0x10	; 16
     3d6:	94 b9       	out	0x04, r25	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     3d8:	90 b1       	in	r25, 0x00	; 0
     3da:	90 62       	ori	r25, 0x20	; 32
     3dc:	90 b9       	out	0x00, r25	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     3de:	94 b1       	in	r25, 0x04	; 4
     3e0:	90 62       	ori	r25, 0x20	; 32
     3e2:	94 b9       	out	0x04, r25	; 4
				isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[j].RawValue > (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue + DATA_CHANGE_CONSTANT) || QTOUCHADC_REFERANCE_FILTER_P[j].RawValue < (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue - DATA_CHANGE_CONSTANT);
			}
			QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
		}
		#else
		QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue = In_PSD1 * 200 * Const_In_PSD1;
     3e4:	98 ec       	ldi	r25, 0xC8	; 200
     3e6:	89 9f       	mul	r24, r25
     3e8:	90 01       	movw	r18, r0
     3ea:	11 24       	eor	r1, r1
     3ec:	90 91 aa 3e 	lds	r25, 0x3EAA	; 0x803eaa <Const_In_PSD1>
     3f0:	92 9f       	mul	r25, r18
     3f2:	40 01       	movw	r8, r0
     3f4:	93 9f       	mul	r25, r19
     3f6:	90 0c       	add	r9, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	09 2c       	mov	r0, r9
     3fc:	00 0c       	add	r0, r0
     3fe:	aa 08       	sbc	r10, r10
     400:	bb 08       	sbc	r11, r11
     402:	ad e0       	ldi	r26, 0x0D	; 13
     404:	be e3       	ldi	r27, 0x3E	; 62
     406:	d4 96       	adiw	r26, 0x34	; 52
     408:	8d 92       	st	X+, r8
     40a:	9d 92       	st	X+, r9
     40c:	ad 92       	st	X+, r10
     40e:	bc 92       	st	X, r11
     410:	d7 97       	sbiw	r26, 0x37	; 55
		isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[0].RawValue != QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue;
     412:	f0 91 a5 3e 	lds	r31, 0x3EA5	; 0x803ea5 <isDataChanged>
     416:	5c 96       	adiw	r26, 0x1c	; 28
     418:	cd 90       	ld	r12, X+
     41a:	dd 90       	ld	r13, X+
     41c:	ed 90       	ld	r14, X+
     41e:	fc 90       	ld	r15, X
     420:	5f 97       	sbiw	r26, 0x1f	; 31
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	c8 14       	cp	r12, r8
     426:	d9 04       	cpc	r13, r9
     428:	ea 04       	cpc	r14, r10
     42a:	fb 04       	cpc	r15, r11
     42c:	09 f4       	brne	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	8f 2b       	or	r24, r31
		QTOUCHADC_REFERANCE_FILTER_P[0].RawValue = QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue;
     432:	80 92 29 3e 	sts	0x3E29, r8	; 0x803e29 <QTOUCHADC_REFERANCE_FILTER_P+0x1c>
     436:	90 92 2a 3e 	sts	0x3E2A, r9	; 0x803e2a <QTOUCHADC_REFERANCE_FILTER_P+0x1d>
     43a:	a0 92 2b 3e 	sts	0x3E2B, r10	; 0x803e2b <QTOUCHADC_REFERANCE_FILTER_P+0x1e>
     43e:	b0 92 2c 3e 	sts	0x3E2C, r11	; 0x803e2c <QTOUCHADC_REFERANCE_FILTER_P+0x1f>
		
		QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue = In_PSD2 * 200 * Const_In_PSD2;
     442:	28 ec       	ldi	r18, 0xC8	; 200
     444:	e2 9f       	mul	r30, r18
     446:	f0 01       	movw	r30, r0
     448:	11 24       	eor	r1, r1
     44a:	20 91 a9 3e 	lds	r18, 0x3EA9	; 0x803ea9 <Const_In_PSD2>
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	e2 9f       	mul	r30, r18
     452:	60 01       	movw	r12, r0
     454:	e3 9f       	mul	r30, r19
     456:	d0 0c       	add	r13, r0
     458:	f2 9f       	mul	r31, r18
     45a:	d0 0c       	add	r13, r0
     45c:	11 24       	eor	r1, r1
     45e:	0d 2c       	mov	r0, r13
     460:	00 0c       	add	r0, r0
     462:	ee 08       	sbc	r14, r14
     464:	ff 08       	sbc	r15, r15
     466:	c0 92 7d 3e 	sts	0x3E7D, r12	; 0x803e7d <QTOUCHADC_REFERANCE_FILTER_P+0x70>
     46a:	d0 92 7e 3e 	sts	0x3E7E, r13	; 0x803e7e <QTOUCHADC_REFERANCE_FILTER_P+0x71>
     46e:	e0 92 7f 3e 	sts	0x3E7F, r14	; 0x803e7f <QTOUCHADC_REFERANCE_FILTER_P+0x72>
     472:	f0 92 80 3e 	sts	0x3E80, r15	; 0x803e80 <QTOUCHADC_REFERANCE_FILTER_P+0x73>
		isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[1].RawValue != QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue;
     476:	40 90 65 3e 	lds	r4, 0x3E65	; 0x803e65 <QTOUCHADC_REFERANCE_FILTER_P+0x58>
     47a:	50 90 66 3e 	lds	r5, 0x3E66	; 0x803e66 <QTOUCHADC_REFERANCE_FILTER_P+0x59>
     47e:	60 90 67 3e 	lds	r6, 0x3E67	; 0x803e67 <QTOUCHADC_REFERANCE_FILTER_P+0x5a>
     482:	70 90 68 3e 	lds	r7, 0x3E68	; 0x803e68 <QTOUCHADC_REFERANCE_FILTER_P+0x5b>
     486:	f1 e0       	ldi	r31, 0x01	; 1
     488:	4c 14       	cp	r4, r12
     48a:	5d 04       	cpc	r5, r13
     48c:	6e 04       	cpc	r6, r14
     48e:	7f 04       	cpc	r7, r15
     490:	09 f4       	brne	.+2      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	f8 2b       	or	r31, r24
     496:	f0 93 a5 3e 	sts	0x3EA5, r31	; 0x803ea5 <isDataChanged>
		QTOUCHADC_REFERANCE_FILTER_P[1].RawValue = QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue;
     49a:	c0 92 65 3e 	sts	0x3E65, r12	; 0x803e65 <QTOUCHADC_REFERANCE_FILTER_P+0x58>
     49e:	d0 92 66 3e 	sts	0x3E66, r13	; 0x803e66 <QTOUCHADC_REFERANCE_FILTER_P+0x59>
     4a2:	e0 92 67 3e 	sts	0x3E67, r14	; 0x803e67 <QTOUCHADC_REFERANCE_FILTER_P+0x5a>
     4a6:	f0 92 68 3e 	sts	0x3E68, r15	; 0x803e68 <QTOUCHADC_REFERANCE_FILTER_P+0x5b>
		#if B_STYLE == (0)
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((In_PSD2       << 1) & 0x02) | ((In_PSD1       << 0) & 0x01)) & 0x0F)));
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 3] != QTOUCHADC_REFERANCE_FILTER_P[0].LoopCycle);
		isDataChanged = QTOUCHADC_REFERANCE_FILTER_P[0].Calibrate || QTOUCHADC_REFERANCE_FILTER_P[1].Calibrate ? false : isDataChanged;	
		#else
		isDataChanged |= (payloadBuffer[payloadBufferStartByte + 2] != (seatFlagStatus = (((RSTCTRL.RSTFR > 0) << 7) & 0x80) | ((batVar << 4) & 0x70) | ((((In_SB2 << 3) & 0x08) | ((In_SB1 << 2) & 0x04) | ((Const_In_PSD2 << 1) & 0x02) | ((Const_In_PSD1 << 0) & 0x01)) & 0x0F)));
     4aa:	c0 91 91 3e 	lds	r28, 0x3E91	; 0x803e91 <payloadBuffer+0x8>
     4ae:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <payloadBufferStartByte+0x7f6ed0>
     4b2:	88 23       	and	r24, r24
     4b4:	11 f0       	breq	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b6:	e0 e8       	ldi	r30, 0x80	; 128
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	e0 e0       	ldi	r30, 0x00	; 0
     4bc:	a0 91 a4 3e 	lds	r26, 0x3EA4	; 0x803ea4 <__data_end>
     4c0:	80 e1       	ldi	r24, 0x10	; 16
     4c2:	a8 9f       	mul	r26, r24
     4c4:	d0 01       	movw	r26, r0
     4c6:	11 24       	eor	r1, r1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	66 0f       	add	r22, r22
     4cc:	77 1f       	adc	r23, r23
     4ce:	66 0f       	add	r22, r22
     4d0:	77 1f       	adc	r23, r23
     4d2:	66 0f       	add	r22, r22
     4d4:	77 1f       	adc	r23, r23
     4d6:	4d 2f       	mov	r20, r29
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	44 0f       	add	r20, r20
     4dc:	55 1f       	adc	r21, r21
     4de:	44 0f       	add	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	22 0f       	add	r18, r18
     4e4:	33 1f       	adc	r19, r19
     4e6:	86 2f       	mov	r24, r22
     4e8:	88 70       	andi	r24, 0x08	; 8
     4ea:	34 2f       	mov	r19, r20
     4ec:	34 70       	andi	r19, 0x04	; 4
     4ee:	38 2b       	or	r19, r24
     4f0:	22 70       	andi	r18, 0x02	; 2
     4f2:	83 2f       	mov	r24, r19
     4f4:	82 2b       	or	r24, r18
     4f6:	91 70       	andi	r25, 0x01	; 1
     4f8:	98 2b       	or	r25, r24
     4fa:	8a 2f       	mov	r24, r26
     4fc:	80 77       	andi	r24, 0x70	; 112
     4fe:	8e 2b       	or	r24, r30
     500:	89 2b       	or	r24, r25
     502:	80 93 ad 3e 	sts	0x3EAD, r24	; 0x803ead <seatFlagStatus>
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	c8 13       	cpse	r28, r24
     50a:	01 c0       	rjmp	.+2      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	f9 2b       	or	r31, r25
		#endif
			
		repeatDataCounter = (isDataChanged && (repeatDataCounter <= (TRANSMIT_COUNT >> 1))) || (dataRefreshCounter == 0) ? TRANSMIT_COUNT : repeatDataCounter;
     510:	21 f0       	breq	.+8      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     512:	90 91 88 3e 	lds	r25, 0x3E88	; 0x803e88 <repeatDataCounter>
     516:	99 30       	cpi	r25, 0x09	; 9
     518:	48 f0       	brcs	.+18     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     51a:	20 91 86 3e 	lds	r18, 0x3E86	; 0x803e86 <dataRefreshCounter>
     51e:	30 91 87 3e 	lds	r19, 0x3E87	; 0x803e87 <dataRefreshCounter+0x1>
     522:	23 2b       	or	r18, r19
     524:	29 f0       	breq	.+10     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     526:	90 91 88 3e 	lds	r25, 0x3E88	; 0x803e88 <repeatDataCounter>
     52a:	03 c0       	rjmp	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     52c:	90 e1       	ldi	r25, 0x10	; 16
     52e:	01 c0       	rjmp	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     530:	90 e1       	ldi	r25, 0x10	; 16
     532:	90 93 88 3e 	sts	0x3E88, r25	; 0x803e88 <repeatDataCounter>
		dataRefreshCounter -= (dataRefreshCounter > 0) && (repeatDataCounter == 0) ? 1 : DATA_REFRESH_TIME;
     536:	20 91 86 3e 	lds	r18, 0x3E86	; 0x803e86 <dataRefreshCounter>
     53a:	30 91 87 3e 	lds	r19, 0x3E87	; 0x803e87 <dataRefreshCounter+0x1>
     53e:	21 15       	cp	r18, r1
     540:	31 05       	cpc	r19, r1
     542:	29 f0       	breq	.+10     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     544:	99 23       	and	r25, r25
     546:	31 f0       	breq	.+12     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     548:	4c e2       	ldi	r20, 0x2C	; 44
     54a:	51 e0       	ldi	r21, 0x01	; 1
     54c:	05 c0       	rjmp	.+10     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     54e:	4c e2       	ldi	r20, 0x2C	; 44
     550:	51 e0       	ldi	r21, 0x01	; 1
     552:	02 c0       	rjmp	.+4      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	24 1b       	sub	r18, r20
     55a:	35 0b       	sbc	r19, r21
     55c:	20 93 86 3e 	sts	0x3E86, r18	; 0x803e86 <dataRefreshCounter>
     560:	30 93 87 3e 	sts	0x3E87, r19	; 0x803e87 <dataRefreshCounter+0x1>
		isDataChanged = false;		
     564:	10 92 a5 3e 	sts	0x3EA5, r1	; 0x803ea5 <isDataChanged>
		
		if(repeatDataCounter && payloadReady == false)
     568:	99 23       	and	r25, r25
     56a:	99 f1       	breq	.+102    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     56c:	20 91 a8 3e 	lds	r18, 0x3EA8	; 0x803ea8 <payloadReady>
     570:	21 11       	cpse	r18, r1
     572:	2f c0       	rjmp	.+94     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
		{
			if (payloadCounterUNCHANGE > 2)
     574:	90 91 a6 3e 	lds	r25, 0x3EA6	; 0x803ea6 <payloadCounterUNCHANGE>
     578:	93 30       	cpi	r25, 0x03	; 3
     57a:	10 f1       	brcs	.+68     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
			{
				payloadBuffer[payloadBufferStartByte +  4 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 8) & 0x00FF);
     57c:	30 91 a7 3e 	lds	r19, 0x3EA7	; 0x803ea7 <payloadCounter>
     580:	43 2f       	mov	r20, r19
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	fa 01       	movw	r30, r20
     586:	ed 56       	subi	r30, 0x6D	; 109
     588:	f1 4c       	sbci	r31, 0xC1	; 193
     58a:	90 82       	st	Z, r9
				payloadBuffer[payloadBufferStartByte +  5 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].CurrentValue >> 0) & 0x00FF);
     58c:	fa 01       	movw	r30, r20
     58e:	ec 56       	subi	r30, 0x6C	; 108
     590:	f1 4c       	sbci	r31, 0xC1	; 193
     592:	80 82       	st	Z, r8
				payloadBuffer[payloadBufferStartByte + 12 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 8) & 0x00FF);
     594:	fa 01       	movw	r30, r20
     596:	e5 56       	subi	r30, 0x65	; 101
     598:	f1 4c       	sbci	r31, 0xC1	; 193
     59a:	d0 82       	st	Z, r13
				payloadBuffer[payloadBufferStartByte + 13 + payloadCounter] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].CurrentValue >> 0) & 0x00FF);
     59c:	fa 01       	movw	r30, r20
     59e:	e4 56       	subi	r30, 0x64	; 100
     5a0:	f1 4c       	sbci	r31, 0xC1	; 193
     5a2:	c0 82       	st	Z, r12
				
				payloadCounter += payloadCounter < 6 ? 2 : -payloadCounter;
     5a4:	36 30       	cpi	r19, 0x06	; 6
     5a6:	18 f0       	brcs	.+6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5a8:	43 2f       	mov	r20, r19
     5aa:	41 95       	neg	r20
     5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5ae:	42 e0       	ldi	r20, 0x02	; 2
     5b0:	34 0f       	add	r19, r20
     5b2:	30 93 a7 3e 	sts	0x3EA7, r19	; 0x803ea7 <payloadCounter>
				payloadReady = 	payloadCounter == 0 ? true : payloadReady;
     5b6:	31 11       	cpse	r19, r1
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	20 93 a8 3e 	sts	0x3EA8, r18	; 0x803ea8 <payloadReady>
			}
			payloadCounterUNCHANGE += payloadCounterUNCHANGE < 6 ? 1 : -payloadCounterUNCHANGE;
     5c0:	96 30       	cpi	r25, 0x06	; 6
     5c2:	18 f0       	brcs	.+6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5c4:	29 2f       	mov	r18, r25
     5c6:	21 95       	neg	r18
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	92 0f       	add	r25, r18
     5ce:	90 93 a6 3e 	sts	0x3EA6, r25	; 0x803ea6 <payloadCounterUNCHANGE>
		}
		
		if(startupDelay == 0 && payloadReady)
     5d2:	90 91 85 3e 	lds	r25, 0x3E85	; 0x803e85 <startupDelay>
     5d6:	91 11       	cpse	r25, r1
     5d8:	56 c0       	rjmp	.+172    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
     5da:	90 91 a8 3e 	lds	r25, 0x3EA8	; 0x803ea8 <payloadReady>
     5de:	99 23       	and	r25, r25
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5e2:	51 c0       	rjmp	.+162    	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
		{
			payloadBuffer[payloadBufferStartByte +  2] = seatFlagStatus;
     5e4:	c9 e8       	ldi	r28, 0x89	; 137
     5e6:	de e3       	ldi	r29, 0x3E	; 62
     5e8:	88 87       	std	Y+8, r24	; 0x08
			payloadBuffer[payloadBufferStartByte +  3] = QTOUCHADC_REFERANCE_FILTER_P[0].LoopCycle;
     5ea:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <QTOUCHADC_REFERANCE_FILTER_P+0x10>
     5ee:	89 87       	std	Y+9, r24	; 0x09
			payloadBuffer[payloadBufferStartByte + 20] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 2]);
     5f0:	81 e9       	ldi	r24, 0x91	; 145
     5f2:	9e e3       	ldi	r25, 0x3E	; 62
     5f4:	d7 d2       	rcall	.+1454   	; 0xba4 <SX1243CRC8>
     5f6:	8a 8f       	std	Y+26, r24	; 0x1a
			
			bool transmitterStatus = SX1243Process() == SX_OK;
     5f8:	0d d3       	rcall	.+1562   	; 0xc14 <SX1243Process>
			repeatDataCounter -= transmitterStatus ? 1 : -1;
     5fa:	90 91 88 3e 	lds	r25, 0x3E88	; 0x803e88 <repeatDataCounter>
     5fe:	81 11       	cpse	r24, r1
     600:	02 c0       	rjmp	.+4      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	01 c0       	rjmp	.+2      	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     606:	2f ef       	ldi	r18, 0xFF	; 255
     608:	92 1b       	sub	r25, r18
     60a:	90 93 88 3e 	sts	0x3E88, r25	; 0x803e88 <repeatDataCounter>
			payloadReady = transmitterStatus ? false : payloadReady;
     60e:	88 23       	and	r24, r24
     610:	19 f0       	breq	.+6      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     612:	80 91 a8 3e 	lds	r24, 0x3EA8	; 0x803ea8 <payloadReady>
     616:	01 c0       	rjmp	.+2      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	80 93 a8 3e 	sts	0x3EA8, r24	; 0x803ea8 <payloadReady>
			BatteryLevelCounter -= (BAT_TRANSMIT_CONSTANT >> sleepTimeSequence);
     61e:	e0 e1       	ldi	r30, 0x10	; 16
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     626:	02 c0       	rjmp	.+4      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     628:	f5 95       	asr	r31
     62a:	e7 95       	ror	r30
     62c:	0a 94       	dec	r0
     62e:	e2 f7       	brpl	.-8      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
     630:	1f 2f       	mov	r17, r31
     632:	11 0f       	add	r17, r17
     634:	11 0b       	sbc	r17, r17
     636:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     63a:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     63e:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     642:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     646:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     64a:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     64e:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     652:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     656:	ae 2e       	mov	r10, r30
     658:	bf 2e       	mov	r11, r31
     65a:	c1 2e       	mov	r12, r17
     65c:	d1 2e       	mov	r13, r17
     65e:	e1 2e       	mov	r14, r17
     660:	f1 2e       	mov	r15, r17
     662:	01 2f       	mov	r16, r17
     664:	7a d5       	rcall	.+2804   	; 0x115a <__subdi3>
     666:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     66a:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     66e:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     672:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     676:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     67a:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     67e:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     682:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		}
		
		if(startupDelay == 0)
     686:	80 91 85 3e 	lds	r24, 0x3E85	; 0x803e85 <startupDelay>
     68a:	81 11       	cpse	r24, r1
     68c:	46 c0       	rjmp	.+140    	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
		{
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     68e:	c0 e5       	ldi	r28, 0x50	; 80
     690:	d0 e0       	ldi	r29, 0x00	; 0
     692:	88 81       	ld	r24, Y
     694:	89 7f       	andi	r24, 0xF9	; 249
     696:	84 60       	ori	r24, 0x04	; 4
     698:	88 83       	st	Y, r24
			cli();
     69a:	f8 94       	cli
			sleepTimeSequence = repeatDataCounter >= 0 ? T_256 : T_2048;
     69c:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
			ConfigPIT(GET_PERIODIC_TIMER_VALUE(sleepTimeSequence));
     6a0:	88 e3       	ldi	r24, 0x38	; 56
     6a2:	04 dd       	rcall	.-1528   	; 0xac <ConfigPIT>
			
			sleep_enable();
     6a4:	88 81       	ld	r24, Y
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	88 83       	st	Y, r24
			sei();
     6aa:	78 94       	sei
			sleep_cpu();
     6ac:	88 95       	sleep
			sleep_disable();
     6ae:	88 81       	ld	r24, Y
     6b0:	8e 7f       	andi	r24, 0xFE	; 254
     6b2:	88 83       	st	Y, r24
			cli();
     6b4:	f8 94       	cli
			BatteryLevelCounter -= (BAT_SLEEP_CONSTANT >> sleepTimeSequence);
     6b6:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
     6bc:	d5 95       	asr	r29
     6be:	c7 95       	ror	r28
     6c0:	0a 94       	dec	r0
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6c4:	1d 2f       	mov	r17, r29
     6c6:	11 0f       	add	r17, r17
     6c8:	11 0b       	sbc	r17, r17
     6ca:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     6ce:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     6d2:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     6d6:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     6da:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     6de:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     6e2:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     6e6:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     6ea:	ac 2e       	mov	r10, r28
     6ec:	bd 2e       	mov	r11, r29
     6ee:	c1 2e       	mov	r12, r17
     6f0:	d1 2e       	mov	r13, r17
     6f2:	e1 2e       	mov	r14, r17
     6f4:	f1 2e       	mov	r15, r17
     6f6:	01 2f       	mov	r16, r17
     6f8:	30 d5       	rcall	.+2656   	; 0x115a <__subdi3>
     6fa:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     6fe:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     702:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     706:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     70a:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     70e:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     712:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     716:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     71a:	80 b1       	in	r24, 0x00	; 0
     71c:	87 7f       	andi	r24, 0xF7	; 247
     71e:	80 b9       	out	0x00, r24	; 0
		}
		
		CBT_set_dir(PORT_DIR_IN);
		if(CBT_get_level() == false)
     720:	13 9b       	sbis	0x02, 3	; 2
     722:	0b c0       	rjmp	.+22     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
     724:	24 c0       	rjmp	.+72     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     726:	e3 e2       	ldi	r30, 0x23	; 35
     728:	f4 ef       	ldi	r31, 0xF4	; 244
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
     730:	00 00       	nop
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
     732:	8a b1       	in	r24, 0x0a	; 10
     734:	80 61       	ori	r24, 0x10	; 16
     736:	8a b9       	out	0x0a, r24	; 10
     738:	01 c0       	rjmp	.+2      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
     73a:	94 e6       	ldi	r25, 0x64	; 100
		{
			uint8_t timeOut = 100;
			while(CBT_get_level() == false && --timeOut)
     73c:	13 99       	sbic	0x02, 3	; 2
     73e:	02 c0       	rjmp	.+4      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
     740:	91 50       	subi	r25, 0x01	; 1
     742:	89 f7       	brne	.-30     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
			{
				_delay_ms(50);
				DATA_toggle_level();
			}
			if(timeOut < 1)
     744:	91 11       	cpse	r25, r1
     746:	0e c0       	rjmp	.+28     	; 0x764 <__LOCK_REGION_LENGTH__+0x364>
			{
				FLASH_0_write_eeprom_byte(0, 100);
     748:	64 e6       	ldi	r22, 0x64	; 100
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	d4 d0       	rcall	.+424    	; 0x8f8 <FLASH_0_write_eeprom_byte>
				while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     750:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7e92>
     754:	81 fd       	sbrc	r24, 1
     756:	fc cf       	rjmp	.-8      	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     758:	89 e6       	ldi	r24, 0x69	; 105
     75a:	98 e1       	ldi	r25, 0x18	; 24
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     760:	00 c0       	rjmp	.+0      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     762:	00 00       	nop
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	68 ed       	ldi	r22, 0xD8	; 216
     768:	81 e4       	ldi	r24, 0x41	; 65
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	df d0       	rcall	.+446    	; 0x92c <protected_write_io>
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     76e:	e3 e1       	ldi	r30, 0x13	; 19
     770:	f4 e0       	ldi	r31, 0x04	; 4
     772:	80 81       	ld	r24, Z
     774:	88 60       	ori	r24, 0x08	; 8
     776:	80 83       	st	Z, r24
			}
			RSTCTRL_reset();
		}
		CBT_set_dir(PORT_DIR_OFF);
		
		startupDelay -= startupDelay > 0;
     778:	80 91 85 3e 	lds	r24, 0x3E85	; 0x803e85 <startupDelay>
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	81 11       	cpse	r24, r1
     780:	01 c0       	rjmp	.+2      	; 0x784 <__LOCK_REGION_LENGTH__+0x384>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	89 1b       	sub	r24, r25
     786:	80 93 85 3e 	sts	0x3E85, r24	; 0x803e85 <startupDelay>
	}
     78a:	e0 cc       	rjmp	.-1600   	; 0x14c <main+0x92>

0000078c <ADC_0_init>:

	//ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV8_gc    /* CLK_PER divided by 128 */
     78c:	e0 e0       	ldi	r30, 0x00	; 0
     78e:	f6 e0       	ldi	r31, 0x06	; 6
     790:	82 e5       	ldi	r24, 0x52	; 82
     792:	82 83       	std	Z+2, r24	; 0x02

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	08 95       	ret

0000079c <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	08 95       	ret

000007a0 <CLKCTRL_init>:
     7a0:	43 e0       	ldi	r20, 0x03	; 3
     7a2:	68 ed       	ldi	r22, 0xD8	; 216
     7a4:	81 e6       	ldi	r24, 0x61	; 97
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	c1 d0       	rcall	.+386    	; 0x92c <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	08 95       	ret

000007ae <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     7ae:	78 94       	sei

	return 0;
}
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	08 95       	ret

000007b4 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7b8:	e8 2f       	mov	r30, r24
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	e0 5f       	subi	r30, 0xF0	; 240
     7be:	fb 4f       	sbci	r31, 0xFB	; 251
     7c0:	90 81       	ld	r25, Z
     7c2:	98 60       	ori	r25, 0x08	; 8
     7c4:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	88 30       	cpi	r24, 0x08	; 8
     7ca:	b0 f3       	brcs	.-20     	; 0x7b8 <mcu_init+0x4>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7d0:	e8 2f       	mov	r30, r24
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	e0 5d       	subi	r30, 0xD0	; 208
     7d6:	fb 4f       	sbci	r31, 0xFB	; 251
     7d8:	90 81       	ld	r25, Z
     7da:	98 60       	ori	r25, 0x08	; 8
     7dc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	88 30       	cpi	r24, 0x08	; 8
     7e2:	b0 f3       	brcs	.-20     	; 0x7d0 <mcu_init+0x1c>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     7e8:	e8 2f       	mov	r30, r24
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	e0 5b       	subi	r30, 0xB0	; 176
     7ee:	fb 4f       	sbci	r31, 0xFB	; 251
     7f0:	90 81       	ld	r25, Z
     7f2:	98 60       	ori	r25, 0x08	; 8
     7f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	88 30       	cpi	r24, 0x08	; 8
     7fa:	b0 f3       	brcs	.-20     	; 0x7e8 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     7fc:	08 95       	ret

000007fe <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     7fe:	e6 e1       	ldi	r30, 0x16	; 22
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	80 81       	ld	r24, Z
     804:	88 7f       	andi	r24, 0xF8	; 248
     806:	84 60       	ori	r24, 0x04	; 4
     808:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     80a:	80 81       	ld	r24, Z
     80c:	87 7f       	andi	r24, 0xF7	; 247
     80e:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     810:	e0 e3       	ldi	r30, 0x30	; 48
     812:	f4 e0       	ldi	r31, 0x04	; 4
     814:	80 81       	ld	r24, Z
     816:	88 7f       	andi	r24, 0xF8	; 248
     818:	84 60       	ori	r24, 0x04	; 4
     81a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     81c:	80 81       	ld	r24, Z
     81e:	87 7f       	andi	r24, 0xF7	; 247
     820:	80 83       	st	Z, r24
	// Disable digital input buffer
	SY_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	SY_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     822:	b4 df       	rcall	.-152    	; 0x78c <ADC_0_init>
     824:	08 95       	ret

00000826 <FLASH_0_initialization>:
}

/* Initialize registers */
void FLASH_0_initialization(void)
{
	FLASH_0_init();
     826:	62 d0       	rcall	.+196    	; 0x8ec <FLASH_0_init>
     828:	08 95       	ret

0000082a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     82a:	c4 df       	rcall	.-120    	; 0x7b4 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     82c:	80 b1       	in	r24, 0x00	; 0
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     832:	e3 e1       	ldi	r30, 0x13	; 19
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	80 81       	ld	r24, Z
     838:	88 60       	ori	r24, 0x08	; 8
     83a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     83c:	80 b1       	in	r24, 0x00	; 0
     83e:	8f 7e       	andi	r24, 0xEF	; 239
     840:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     842:	e4 e1       	ldi	r30, 0x14	; 20
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	80 81       	ld	r24, Z
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     84c:	80 b1       	in	r24, 0x00	; 0
     84e:	8f 7d       	andi	r24, 0xDF	; 223
     850:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     852:	e5 e1       	ldi	r30, 0x15	; 21
     854:	f4 e0       	ldi	r31, 0x04	; 4
     856:	80 81       	ld	r24, Z
     858:	88 60       	ori	r24, 0x08	; 8
     85a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     85c:	81 b1       	in	r24, 0x01	; 1
     85e:	8f 77       	andi	r24, 0x7F	; 127
     860:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     862:	80 b1       	in	r24, 0x00	; 0
     864:	80 68       	ori	r24, 0x80	; 128
     866:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     868:	84 b1       	in	r24, 0x04	; 4
     86a:	8d 7f       	andi	r24, 0xFD	; 253
     86c:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     86e:	e1 e3       	ldi	r30, 0x31	; 49
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	80 81       	ld	r24, Z
     874:	87 7f       	andi	r24, 0xF7	; 247
     876:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     878:	84 b1       	in	r24, 0x04	; 4
     87a:	8f 7e       	andi	r24, 0xEF	; 239
     87c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     87e:	e4 e3       	ldi	r30, 0x34	; 52
     880:	f4 e0       	ldi	r31, 0x04	; 4
     882:	80 81       	ld	r24, Z
     884:	88 60       	ori	r24, 0x08	; 8
     886:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     888:	84 b1       	in	r24, 0x04	; 4
     88a:	8f 7d       	andi	r24, 0xDF	; 223
     88c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     88e:	e5 e3       	ldi	r30, 0x35	; 53
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	80 81       	ld	r24, Z
     894:	88 60       	ori	r24, 0x08	; 8
     896:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     898:	88 b1       	in	r24, 0x08	; 8
     89a:	8d 7f       	andi	r24, 0xFD	; 253
     89c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     89e:	e1 e5       	ldi	r30, 0x51	; 81
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	80 81       	ld	r24, Z
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     8a8:	88 b1       	in	r24, 0x08	; 8
     8aa:	8b 7f       	andi	r24, 0xFB	; 251
     8ac:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     8ae:	e2 e5       	ldi	r30, 0x52	; 82
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	80 81       	ld	r24, Z
     8b4:	88 60       	ori	r24, 0x08	; 8
     8b6:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     8b8:	89 b1       	in	r24, 0x09	; 9
     8ba:	87 7f       	andi	r24, 0xF7	; 247
     8bc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     8be:	88 b1       	in	r24, 0x08	; 8
     8c0:	88 60       	ori	r24, 0x08	; 8
     8c2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     8c4:	89 b1       	in	r24, 0x09	; 9
     8c6:	8f 7e       	andi	r24, 0xEF	; 239
     8c8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     8ca:	88 b1       	in	r24, 0x08	; 8
     8cc:	80 61       	ori	r24, 0x10	; 16
     8ce:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     8d0:	89 b1       	in	r24, 0x09	; 9
     8d2:	8f 7d       	andi	r24, 0xDF	; 223
     8d4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     8d6:	88 b1       	in	r24, 0x08	; 8
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	NRESET_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     8dc:	61 df       	rcall	.-318    	; 0x7a0 <CLKCTRL_init>

	RTC_0_init();
     8de:	2a d0       	rcall	.+84     	; 0x934 <RTC_0_init>

	ADC_0_initialization();
     8e0:	8e df       	rcall	.-228    	; 0x7fe <ADC_0_initialization>

	FLASH_0_initialization();
     8e2:	a1 df       	rcall	.-190    	; 0x826 <FLASH_0_initialization>

	CPUINT_init();
     8e4:	64 df       	rcall	.-312    	; 0x7ae <CPUINT_init>

	SLPCTRL_init();
     8e6:	3c d0       	rcall	.+120    	; 0x960 <SLPCTRL_init>

	BOD_init();
     8e8:	59 df       	rcall	.-334    	; 0x79c <BOD_init>
     8ea:	08 95       	ret

000008ec <FLASH_0_init>:
	//		 | 0 << NVMCTRL_BOOTLOCK_bp; /* Boot Lock: disabled */

	// NVMCTRL.INTCTRL = 0 << NVMCTRL_EEREADY_bp; /* EEPROM Ready: disabled */

	return 0;
}
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 95       	ret

000008f0 <FLASH_0_read_eeprom_byte>:
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{

	// Read operation will be stalled by hardware if any write is in progress

	return *(uint8_t *)(EEPROM_START + eeprom_adr);
     8f0:	9c 5e       	subi	r25, 0xEC	; 236
}
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	08 95       	ret

000008f8 <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
     900:	16 2f       	mov	r17, r22

	/* Wait for completion of previous write */
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
     902:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7e92>
     906:	81 fd       	sbrc	r24, 1
     908:	fc cf       	rjmp	.-8      	; 0x902 <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
     90a:	44 e0       	ldi	r20, 0x04	; 4
     90c:	6d e9       	ldi	r22, 0x9D	; 157
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e1       	ldi	r25, 0x10	; 16
     912:	0c d0       	rcall	.+24     	; 0x92c <protected_write_io>

	/* Clear page buffer */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEBUFCLR_gc);

	/* Write byte to page buffer */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
     914:	dc 5e       	subi	r29, 0xEC	; 236
     916:	18 83       	st	Y, r17
     918:	43 e0       	ldi	r20, 0x03	; 3
     91a:	6d e9       	ldi	r22, 0x9D	; 157
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e1       	ldi	r25, 0x10	; 16
     920:	05 d0       	rcall	.+10     	; 0x92c <protected_write_io>

	/* Erase byte and program it with desired value */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);

	return NVM_OK;
}
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	08 95       	ret

0000092c <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     92c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     92e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     930:	40 83       	st	Z, r20
	ret                             // Return to caller
     932:	08 95       	ret

00000934 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     934:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6fd1>
     938:	81 11       	cpse	r24, r1
     93a:	fc cf       	rjmp	.-8      	; 0x934 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc /* 32768 */
     93c:	e0 e4       	ldi	r30, 0x40	; 64
     93e:	f1 e0       	ldi	r31, 0x01	; 1
     940:	88 e7       	ldi	r24, 0x78	; 120
     942:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp       /* Enable: disabled */
	            | 0 << RTC_RUNSTDBY_bp;   /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; /* 32KHz divided by 32 */
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	87 83       	std	Z+7, r24	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     948:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6fe1>
     94c:	81 11       	cpse	r24, r1
     94e:	fc cf       	rjmp	.-8      	; 0x948 <RTC_0_init+0x14>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* RTC Clock Cycles 1024 */
     950:	e0 e4       	ldi	r30, 0x40	; 64
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	89 e4       	ldi	r24, 0x49	; 73
     956:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;   /* Enable: enabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	08 95       	ret

00000960 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     960:	85 e0       	ldi	r24, 0x05	; 5
     962:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6ee0>
	                | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret

0000096a <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     96a:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     96c:	11 c0       	rjmp	.+34     	; 0x990 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     96e:	29 b1       	in	r18, 0x09	; 9
     970:	27 7f       	andi	r18, 0xF7	; 247
     972:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     974:	29 2f       	mov	r18, r25
     976:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     978:	21 f0       	breq	.+8      	; 0x982 <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     97a:	29 b1       	in	r18, 0x09	; 9
     97c:	20 61       	ori	r18, 0x10	; 16
     97e:	29 b9       	out	0x09, r18	; 9
     980:	03 c0       	rjmp	.+6      	; 0x988 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     982:	29 b1       	in	r18, 0x09	; 9
     984:	2f 7e       	andi	r18, 0xEF	; 239
     986:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     988:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     98a:	29 b1       	in	r18, 0x09	; 9
     98c:	28 60       	ori	r18, 0x08	; 8
     98e:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     990:	91 11       	cpse	r25, r1
     992:	ed cf       	rjmp	.-38     	; 0x96e <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     994:	89 b1       	in	r24, 0x09	; 9
     996:	87 7f       	andi	r24, 0xF7	; 247
     998:	89 b9       	out	0x09, r24	; 9
     99a:	08 95       	ret

0000099c <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	6a 01       	movw	r12, r20
     9a6:	7b 01       	movw	r14, r22
	switch(instruction)
     9a8:	88 23       	and	r24, r24
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <SX1243Write+0x16>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	21 f0       	breq	.+8      	; 0x9b8 <SX1243Write+0x1c>
     9b0:	16 c0       	rjmp	.+44     	; 0x9de <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	da df       	rcall	.-76     	; 0x96a <SpiOut>
		break;
     9b6:	0a c0       	rjmp	.+20     	; 0x9cc <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     9b8:	db 01       	movw	r26, r22
     9ba:	ca 01       	movw	r24, r20
     9bc:	88 27       	eor	r24, r24
     9be:	99 27       	eor	r25, r25
     9c0:	a7 70       	andi	r26, 0x07	; 7
     9c2:	bb 27       	eor	r27, r27
     9c4:	bc 01       	movw	r22, r24
     9c6:	cd 01       	movw	r24, r26
     9c8:	88 61       	ori	r24, 0x18	; 24
     9ca:	cf df       	rcall	.-98     	; 0x96a <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     9cc:	8d 2d       	mov	r24, r13
     9ce:	cd df       	rcall	.-102    	; 0x96a <SpiOut>
	SpiOut(data & 0xFF);
     9d0:	8c 2d       	mov	r24, r12
     9d2:	cb df       	rcall	.-106    	; 0x96a <SpiOut>
     9d4:	89 b1       	in	r24, 0x09	; 9
     9d6:	8f 7e       	andi	r24, 0xEF	; 239
     9d8:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     9de:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	08 95       	ret

000009ea <SX1243Reset>:
     9ea:	89 b1       	in	r24, 0x09	; 9
     9ec:	8f 7d       	andi	r24, 0xDF	; 223
     9ee:	89 b9       	out	0x09, r24	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f0:	86 ea       	ldi	r24, 0xA6	; 166
     9f2:	8a 95       	dec	r24
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <SX1243Reset+0x8>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <SX1243Reset+0xe>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     9f8:	89 b1       	in	r24, 0x09	; 9
     9fa:	80 62       	ori	r24, 0x20	; 32
     9fc:	89 b9       	out	0x09, r24	; 9
     9fe:	08 95       	ret

00000a00 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	76 c0       	rjmp	.+236    	; 0xaf0 <Sx1243ConvertBuffer+0xf0>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     a04:	9c 01       	movw	r18, r24
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	22 0f       	add	r18, r18
     a10:	33 1f       	adc	r19, r19
     a12:	e0 91 99 3f 	lds	r30, 0x3F99	; 0x803f99 <TxParam+0x13>
     a16:	f0 91 9a 3f 	lds	r31, 0x3F9A	; 0x803f9a <TxParam+0x14>
     a1a:	e8 0f       	add	r30, r24
     a1c:	f9 1f       	adc	r31, r25
     a1e:	40 81       	ld	r20, Z
     a20:	44 23       	and	r20, r20
     a22:	1c f4       	brge	.+6      	; 0xa2a <Sx1243ConvertBuffer+0x2a>
     a24:	49 b1       	in	r20, 0x09	; 9
     a26:	40 61       	ori	r20, 0x10	; 16
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <Sx1243ConvertBuffer+0x2e>
     a2a:	49 b1       	in	r20, 0x09	; 9
     a2c:	4f 7e       	andi	r20, 0xEF	; 239
     a2e:	d9 01       	movw	r26, r18
     a30:	a2 55       	subi	r26, 0x52	; 82
     a32:	b1 4c       	sbci	r27, 0xC1	; 193
     a34:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     a36:	d9 01       	movw	r26, r18
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	40 81       	ld	r20, Z
     a3c:	46 ff       	sbrs	r20, 6
     a3e:	03 c0       	rjmp	.+6      	; 0xa46 <Sx1243ConvertBuffer+0x46>
     a40:	49 b1       	in	r20, 0x09	; 9
     a42:	40 61       	ori	r20, 0x10	; 16
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <Sx1243ConvertBuffer+0x4a>
     a46:	49 b1       	in	r20, 0x09	; 9
     a48:	4f 7e       	andi	r20, 0xEF	; 239
     a4a:	a2 55       	subi	r26, 0x52	; 82
     a4c:	b1 4c       	sbci	r27, 0xC1	; 193
     a4e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     a50:	d9 01       	movw	r26, r18
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	40 81       	ld	r20, Z
     a56:	45 ff       	sbrs	r20, 5
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <Sx1243ConvertBuffer+0x60>
     a5a:	49 b1       	in	r20, 0x09	; 9
     a5c:	40 61       	ori	r20, 0x10	; 16
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <Sx1243ConvertBuffer+0x64>
     a60:	49 b1       	in	r20, 0x09	; 9
     a62:	4f 7e       	andi	r20, 0xEF	; 239
     a64:	a2 55       	subi	r26, 0x52	; 82
     a66:	b1 4c       	sbci	r27, 0xC1	; 193
     a68:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     a6a:	d9 01       	movw	r26, r18
     a6c:	13 96       	adiw	r26, 0x03	; 3
     a6e:	40 81       	ld	r20, Z
     a70:	44 ff       	sbrs	r20, 4
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <Sx1243ConvertBuffer+0x7a>
     a74:	49 b1       	in	r20, 0x09	; 9
     a76:	40 61       	ori	r20, 0x10	; 16
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <Sx1243ConvertBuffer+0x7e>
     a7a:	49 b1       	in	r20, 0x09	; 9
     a7c:	4f 7e       	andi	r20, 0xEF	; 239
     a7e:	a2 55       	subi	r26, 0x52	; 82
     a80:	b1 4c       	sbci	r27, 0xC1	; 193
     a82:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     a84:	d9 01       	movw	r26, r18
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	40 81       	ld	r20, Z
     a8a:	43 ff       	sbrs	r20, 3
     a8c:	03 c0       	rjmp	.+6      	; 0xa94 <Sx1243ConvertBuffer+0x94>
     a8e:	49 b1       	in	r20, 0x09	; 9
     a90:	40 61       	ori	r20, 0x10	; 16
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <Sx1243ConvertBuffer+0x98>
     a94:	49 b1       	in	r20, 0x09	; 9
     a96:	4f 7e       	andi	r20, 0xEF	; 239
     a98:	a2 55       	subi	r26, 0x52	; 82
     a9a:	b1 4c       	sbci	r27, 0xC1	; 193
     a9c:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     a9e:	d9 01       	movw	r26, r18
     aa0:	15 96       	adiw	r26, 0x05	; 5
     aa2:	40 81       	ld	r20, Z
     aa4:	42 ff       	sbrs	r20, 2
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <Sx1243ConvertBuffer+0xae>
     aa8:	49 b1       	in	r20, 0x09	; 9
     aaa:	40 61       	ori	r20, 0x10	; 16
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <Sx1243ConvertBuffer+0xb2>
     aae:	49 b1       	in	r20, 0x09	; 9
     ab0:	4f 7e       	andi	r20, 0xEF	; 239
     ab2:	a2 55       	subi	r26, 0x52	; 82
     ab4:	b1 4c       	sbci	r27, 0xC1	; 193
     ab6:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     ab8:	d9 01       	movw	r26, r18
     aba:	16 96       	adiw	r26, 0x06	; 6
     abc:	40 81       	ld	r20, Z
     abe:	41 ff       	sbrs	r20, 1
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <Sx1243ConvertBuffer+0xc8>
     ac2:	49 b1       	in	r20, 0x09	; 9
     ac4:	40 61       	ori	r20, 0x10	; 16
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <Sx1243ConvertBuffer+0xcc>
     ac8:	49 b1       	in	r20, 0x09	; 9
     aca:	4f 7e       	andi	r20, 0xEF	; 239
     acc:	a2 55       	subi	r26, 0x52	; 82
     ace:	b1 4c       	sbci	r27, 0xC1	; 193
     ad0:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
     ad2:	29 5f       	subi	r18, 0xF9	; 249
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	40 81       	ld	r20, Z
     ad8:	40 ff       	sbrs	r20, 0
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <Sx1243ConvertBuffer+0xe2>
     adc:	49 b1       	in	r20, 0x09	; 9
     ade:	40 61       	ori	r20, 0x10	; 16
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <Sx1243ConvertBuffer+0xe6>
     ae2:	49 b1       	in	r20, 0x09	; 9
     ae4:	4f 7e       	andi	r20, 0xEF	; 239
     ae6:	f9 01       	movw	r30, r18
     ae8:	e2 55       	subi	r30, 0x52	; 82
     aea:	f1 4c       	sbci	r31, 0xC1	; 193
     aec:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	20 91 98 3f 	lds	r18, 0x3F98	; 0x803f98 <TxParam+0x12>
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	82 17       	cp	r24, r18
     af8:	93 07       	cpc	r25, r19
     afa:	08 f4       	brcc	.+2      	; 0xafe <Sx1243ConvertBuffer+0xfe>
     afc:	83 cf       	rjmp	.-250    	; 0xa04 <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}
     afe:	08 95       	ret

00000b00 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
     b00:	e6 e8       	ldi	r30, 0x86	; 134
     b02:	ff e3       	ldi	r31, 0x3F	; 63
     b04:	83 8b       	std	Z+19, r24	; 0x13
     b06:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
     b08:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
     b0a:	88 ed       	ldi	r24, 0xD8	; 216
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	80 93 ab 3e 	sts	0x3EAB, r24	; 0x803eab <fastBufSize>
     b12:	90 93 ac 3e 	sts	0x3EAC, r25	; 0x803eac <fastBufSize+0x1>
	Sx1243ConvertBuffer(0);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	73 df       	rcall	.-282    	; 0xa00 <Sx1243ConvertBuffer>
	return SX_OK;
}
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	08 95       	ret

00000b1e <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	8c 01       	movw	r16, r24
     b28:	d6 2f       	mov	r29, r22
     b2a:	c4 2f       	mov	r28, r20
	SX1243Reset();
     b2c:	5e df       	rcall	.-324    	; 0x9ea <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
     b2e:	e6 e8       	ldi	r30, 0x86	; 134
     b30:	ff e3       	ldi	r31, 0x3F	; 63
     b32:	10 8a       	std	Z+16, r1	; 0x10
     b34:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
     b36:	16 86       	std	Z+14, r1	; 0x0e
     b38:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e2       	ldi	r25, 0x20	; 32
     b3e:	84 87       	std	Z+12, r24	; 0x0c
     b40:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	98 e0       	ldi	r25, 0x08	; 8
     b46:	82 87       	std	Z+10, r24	; 0x0a
     b48:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
     b4a:	10 86       	std	Z+8, r1	; 0x08
     b4c:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
     b4e:	16 82       	std	Z+6, r1	; 0x06
     b50:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	84 83       	std	Z+4, r24	; 0x04
     b58:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
     b5a:	87 e2       	ldi	r24, 0x27	; 39
     b5c:	96 e6       	ldi	r25, 0x66	; 102
     b5e:	a4 e0       	ldi	r26, 0x04	; 4
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	80 83       	st	Z, r24
     b64:	91 83       	std	Z+1, r25	; 0x01
     b66:	a2 83       	std	Z+2, r26	; 0x02
     b68:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	98 e2       	ldi	r25, 0x28	; 40
     b6e:	85 8b       	std	Z+21, r24	; 0x15
     b70:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
     b72:	4c 2f       	mov	r20, r28
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	d8 01       	movw	r26, r16
     b78:	a4 0f       	add	r26, r20
     b7a:	b5 1f       	adc	r27, r21
     b7c:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1];
     b7e:	4f 5f       	subi	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	d8 01       	movw	r26, r16
     b84:	a4 0f       	add	r26, r20
     b86:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
     b88:	8c 91       	ld	r24, X
     b8a:	89 27       	eor	r24, r25
     b8c:	9b ed       	ldi	r25, 0xDB	; 219
     b8e:	89 27       	eor	r24, r25
     b90:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
     b92:	6d 2f       	mov	r22, r29
     b94:	c8 01       	movw	r24, r16
     b96:	b4 df       	rcall	.-152    	; 0xb00 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01 ? VPORTC.OUT | 0x10 : VPORTC.OUT & 0xEF;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^
     bb6:	c0 90 9d 3f 	lds	r12, 0x3F9D	; 0x803f9d <TxParam+0x17>
					buffer[ 0]		  ^
     bba:	80 81       	ld	r24, Z
					buffer[ 1]		  ^
     bbc:	d1 80       	ldd	r13, Z+1	; 0x01
					buffer[ 2]		  ^
     bbe:	e2 80       	ldd	r14, Z+2	; 0x02
					buffer[ 3]		  ^
     bc0:	f3 80       	ldd	r15, Z+3	; 0x03
					buffer[ 4]		  ^
     bc2:	04 81       	ldd	r16, Z+4	; 0x04
					buffer[ 5]		  ^
     bc4:	15 81       	ldd	r17, Z+5	; 0x05
					buffer[ 6]		  ^
     bc6:	d6 81       	ldd	r29, Z+6	; 0x06
					buffer[ 7]		  ^
     bc8:	c7 81       	ldd	r28, Z+7	; 0x07
					buffer[ 8]		  ^
     bca:	b0 85       	ldd	r27, Z+8	; 0x08
					buffer[ 9]		  ^
     bcc:	a1 85       	ldd	r26, Z+9	; 0x09
					buffer[10]		  ^
     bce:	72 85       	ldd	r23, Z+10	; 0x0a
					buffer[11]		  ^
     bd0:	63 85       	ldd	r22, Z+11	; 0x0b
					buffer[12]		  ^
     bd2:	54 85       	ldd	r21, Z+12	; 0x0c
					buffer[13]		  ^
     bd4:	45 85       	ldd	r20, Z+13	; 0x0d
					buffer[14]		  ^
     bd6:	36 85       	ldd	r19, Z+14	; 0x0e
					buffer[15]		  ^
     bd8:	27 85       	ldd	r18, Z+15	; 0x0f
					buffer[16]		  ^
     bda:	90 89       	ldd	r25, Z+16	; 0x10
					buffer[17]);
     bdc:	e1 89       	ldd	r30, Z+17	; 0x11
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^
     bde:	8c 25       	eor	r24, r12
     be0:	8d 25       	eor	r24, r13
     be2:	8e 25       	eor	r24, r14
     be4:	8f 25       	eor	r24, r15
     be6:	80 27       	eor	r24, r16
     be8:	81 27       	eor	r24, r17
     bea:	8d 27       	eor	r24, r29
     bec:	8c 27       	eor	r24, r28
     bee:	8b 27       	eor	r24, r27
     bf0:	8a 27       	eor	r24, r26
     bf2:	87 27       	eor	r24, r23
     bf4:	86 27       	eor	r24, r22
     bf6:	85 27       	eor	r24, r21
     bf8:	84 27       	eor	r24, r20
     bfa:	83 27       	eor	r24, r19
     bfc:	82 27       	eor	r24, r18
     bfe:	89 27       	eor	r24, r25
					buffer[13]		  ^
					buffer[14]		  ^
					buffer[15]		  ^
					buffer[16]		  ^
					buffer[17]);
}
     c00:	8e 27       	eor	r24, r30
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	08 95       	ret

00000c14 <SX1243Process>:


//ATtiny817
U8 SX1243Process()
{
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;
	
	TxParam.Config |= 0x8000;
     c1a:	c6 e8       	ldi	r28, 0x86	; 134
     c1c:	df e3       	ldi	r29, 0x3F	; 63
     c1e:	4d 89       	ldd	r20, Y+21	; 0x15
     c20:	5e 89       	ldd	r21, Y+22	; 0x16
     c22:	50 68       	ori	r21, 0x80	; 128
     c24:	4d 8b       	std	Y+21, r20	; 0x15
     c26:	5e 8b       	std	Y+22, r21	; 0x16
	state |= SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	b6 de       	rcall	.-660    	; 0x99c <SX1243Write>
     c30:	18 2f       	mov	r17, r24
	state |= SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
     c32:	48 81       	ld	r20, Y
     c34:	59 81       	ldd	r21, Y+1	; 0x01
     c36:	6a 81       	ldd	r22, Y+2	; 0x02
     c38:	7b 81       	ldd	r23, Y+3	; 0x03
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	af de       	rcall	.-674    	; 0x99c <SX1243Write>
     c3e:	18 2b       	or	r17, r24
	TxParam.Config &= 0x7FFF;
     c40:	8d 89       	ldd	r24, Y+21	; 0x15
     c42:	9e 89       	ldd	r25, Y+22	; 0x16
     c44:	9f 77       	andi	r25, 0x7F	; 127
     c46:	8d 8b       	std	Y+21, r24	; 0x15
     c48:	9e 8b       	std	Y+22, r25	; 0x16


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
     c4a:	80 91 70 91 	lds	r24, 0x9170	; 0x809170 <__bss_end+0x51d2>
     c4e:	8e 5f       	subi	r24, 0xFE	; 254
     c50:	d7 de       	rcall	.-594    	; 0xa00 <Sx1243ConvertBuffer>
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     c52:	e2 e5       	ldi	r30, 0x52	; 82
     c54:	f4 e0       	ldi	r31, 0x04	; 4
     c56:	80 81       	ld	r24, Z
     c58:	88 60       	ori	r24, 0x08	; 8
     c5a:	80 83       	st	Z, r24

//ATtiny817
U8 SX1243Process()
{
	U8 state = SX_OK;
	U16 j = 0;
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <SX1243Process+0x5a>
     c62:	80 e1       	ldi	r24, 0x10	; 16
     c64:	8a 95       	dec	r24
     c66:	f1 f7       	brne	.-4      	; 0xc64 <SX1243Process+0x50>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <SX1243Process+0x56>
	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
	{
		_delay_us(10);
		j++;
     c6a:	2f 5f       	subi	r18, 0xFF	; 255
     c6c:	3f 4f       	sbci	r19, 0xFF	; 255
	TxParam.Config &= 0x7FFF;


	Sx1243ConvertBuffer(payloadBufferStartByte + 2);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     c6e:	52 99       	sbic	0x0a, 2	; 10
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <SX1243Process+0x64>
     c72:	2c 3d       	cpi	r18, 0xDC	; 220
     c74:	31 05       	cpc	r19, r1
     c76:	a8 f3       	brcs	.-22     	; 0xc62 <SX1243Process+0x4e>
	{
		_delay_us(10);
		j++;
	}
	state = j >= TRANSMITTER_READY_TIMEOUT ? SX_ERROR : state;
     c78:	2c 3d       	cpi	r18, 0xDC	; 220
     c7a:	31 05       	cpc	r19, r1
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <SX1243Process+0x6c>
     c7e:	11 e0       	ldi	r17, 0x01	; 1
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c80:	e2 e5       	ldi	r30, 0x52	; 82
     c82:	f4 e0       	ldi	r31, 0x04	; 4
     c84:	80 81       	ld	r24, Z
     c86:	87 7f       	andi	r24, 0xF7	; 247
     c88:	80 83       	st	Z, r24
	TX_READY_set_pull_mode(PORT_PULL_OFF);
	
	if (j < TRANSMITTER_READY_TIMEOUT)
     c8a:	2c 3d       	cpi	r18, 0xDC	; 220
     c8c:	31 05       	cpc	r19, r1
     c8e:	78 f0       	brcs	.+30     	; 0xcae <SX1243Process+0x9a>
			j++;
		}
	}
	else
	{
		state = SX_ERROR;
     c90:	11 e0       	ldi	r17, 0x01	; 1
     c92:	16 c0       	rjmp	.+44     	; 0xcc0 <SX1243Process+0xac>
	{
		j = 0;
		
		while (j < fastBufSize)
		{
			VPORTC.OUT = fastBuf[j];
     c94:	f9 01       	movw	r30, r18
     c96:	e2 55       	subi	r30, 0x52	; 82
     c98:	f1 4c       	sbci	r31, 0xC1	; 193
     c9a:	90 81       	ld	r25, Z
     c9c:	99 b9       	out	0x09, r25	; 9
			if ((fastBuf[j] & 0xEF) == 0x00)
     c9e:	90 81       	ld	r25, Z
     ca0:	9f 7e       	andi	r25, 0xEF	; 239
     ca2:	11 f4       	brne	.+4      	; 0xca8 <SX1243Process+0x94>
			{
				_NOP();
     ca4:	00 00       	nop
				_NOP();
     ca6:	00 00       	nop
			}
			j++;
     ca8:	2f 5f       	subi	r18, 0xFF	; 255
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <SX1243Process+0x9e>
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
	
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		
		while (j < fastBufSize)
     cb2:	40 91 ab 3e 	lds	r20, 0x3EAB	; 0x803eab <fastBufSize>
     cb6:	50 91 ac 3e 	lds	r21, 0x3EAC	; 0x803eac <fastBufSize+0x1>
     cba:	24 17       	cp	r18, r20
     cbc:	35 07       	cpc	r19, r21
     cbe:	50 f3       	brcs	.-44     	; 0xc94 <SX1243Process+0x80>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     cc0:	89 b1       	in	r24, 0x09	; 9
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	89 b9       	out	0x09, r24	; 9
	{
		state = SX_ERROR;
	}
	
	DATA_set_level(0);
	SX1243Reset();
     cc6:	91 de       	rcall	.-734    	; 0x9ea <SX1243Reset>
	{
		SX1243Reset();
	}*/
		
	return state;
     cc8:	81 2f       	mov	r24, r17
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	08 95       	ret

00000cd2 <__divsf3>:
     cd2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <__divsf3x>
     cd6:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
     cda:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
     cde:	58 f0       	brcs	.+22     	; 0xcf6 <__divsf3+0x24>
     ce0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
     ce4:	40 f0       	brcs	.+16     	; 0xcf6 <__divsf3+0x24>
     ce6:	29 f4       	brne	.+10     	; 0xcf2 <__divsf3+0x20>
     ce8:	5f 3f       	cpi	r21, 0xFF	; 255
     cea:	29 f0       	breq	.+10     	; 0xcf6 <__divsf3+0x24>
     cec:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_inf>
     cf0:	51 11       	cpse	r21, r1
     cf2:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     cf6:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_nan>

00000cfa <__divsf3x>:
     cfa:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
     cfe:	68 f3       	brcs	.-38     	; 0xcda <__divsf3+0x8>

00000d00 <__divsf3_pse>:
     d00:	99 23       	and	r25, r25
     d02:	b1 f3       	breq	.-20     	; 0xcf0 <__divsf3+0x1e>
     d04:	55 23       	and	r21, r21
     d06:	91 f3       	breq	.-28     	; 0xcec <__divsf3+0x1a>
     d08:	95 1b       	sub	r25, r21
     d0a:	55 0b       	sbc	r21, r21
     d0c:	bb 27       	eor	r27, r27
     d0e:	aa 27       	eor	r26, r26
     d10:	62 17       	cp	r22, r18
     d12:	73 07       	cpc	r23, r19
     d14:	84 07       	cpc	r24, r20
     d16:	38 f0       	brcs	.+14     	; 0xd26 <__divsf3_pse+0x26>
     d18:	9f 5f       	subi	r25, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	aa 1f       	adc	r26, r26
     d24:	a9 f3       	breq	.-22     	; 0xd10 <__divsf3_pse+0x10>
     d26:	35 d0       	rcall	.+106    	; 0xd92 <__divsf3_pse+0x92>
     d28:	0e 2e       	mov	r0, r30
     d2a:	3a f0       	brmi	.+14     	; 0xd3a <__divsf3_pse+0x3a>
     d2c:	e0 e8       	ldi	r30, 0x80	; 128
     d2e:	32 d0       	rcall	.+100    	; 0xd94 <__divsf3_pse+0x94>
     d30:	91 50       	subi	r25, 0x01	; 1
     d32:	50 40       	sbci	r21, 0x00	; 0
     d34:	e6 95       	lsr	r30
     d36:	00 1c       	adc	r0, r0
     d38:	ca f7       	brpl	.-14     	; 0xd2c <__divsf3_pse+0x2c>
     d3a:	2b d0       	rcall	.+86     	; 0xd92 <__divsf3_pse+0x92>
     d3c:	fe 2f       	mov	r31, r30
     d3e:	29 d0       	rcall	.+82     	; 0xd92 <__divsf3_pse+0x92>
     d40:	66 0f       	add	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	88 1f       	adc	r24, r24
     d46:	bb 1f       	adc	r27, r27
     d48:	26 17       	cp	r18, r22
     d4a:	37 07       	cpc	r19, r23
     d4c:	48 07       	cpc	r20, r24
     d4e:	ab 07       	cpc	r26, r27
     d50:	b0 e8       	ldi	r27, 0x80	; 128
     d52:	09 f0       	breq	.+2      	; 0xd56 <__divsf3_pse+0x56>
     d54:	bb 0b       	sbc	r27, r27
     d56:	80 2d       	mov	r24, r0
     d58:	bf 01       	movw	r22, r30
     d5a:	ff 27       	eor	r31, r31
     d5c:	93 58       	subi	r25, 0x83	; 131
     d5e:	5f 4f       	sbci	r21, 0xFF	; 255
     d60:	3a f0       	brmi	.+14     	; 0xd70 <__divsf3_pse+0x70>
     d62:	9e 3f       	cpi	r25, 0xFE	; 254
     d64:	51 05       	cpc	r21, r1
     d66:	78 f0       	brcs	.+30     	; 0xd86 <__divsf3_pse+0x86>
     d68:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_inf>
     d6c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
     d70:	5f 3f       	cpi	r21, 0xFF	; 255
     d72:	e4 f3       	brlt	.-8      	; 0xd6c <__divsf3_pse+0x6c>
     d74:	98 3e       	cpi	r25, 0xE8	; 232
     d76:	d4 f3       	brlt	.-12     	; 0xd6c <__divsf3_pse+0x6c>
     d78:	86 95       	lsr	r24
     d7a:	77 95       	ror	r23
     d7c:	67 95       	ror	r22
     d7e:	b7 95       	ror	r27
     d80:	f7 95       	ror	r31
     d82:	9f 5f       	subi	r25, 0xFF	; 255
     d84:	c9 f7       	brne	.-14     	; 0xd78 <__divsf3_pse+0x78>
     d86:	88 0f       	add	r24, r24
     d88:	91 1d       	adc	r25, r1
     d8a:	96 95       	lsr	r25
     d8c:	87 95       	ror	r24
     d8e:	97 f9       	bld	r25, 7
     d90:	08 95       	ret
     d92:	e1 e0       	ldi	r30, 0x01	; 1
     d94:	66 0f       	add	r22, r22
     d96:	77 1f       	adc	r23, r23
     d98:	88 1f       	adc	r24, r24
     d9a:	bb 1f       	adc	r27, r27
     d9c:	62 17       	cp	r22, r18
     d9e:	73 07       	cpc	r23, r19
     da0:	84 07       	cpc	r24, r20
     da2:	ba 07       	cpc	r27, r26
     da4:	20 f0       	brcs	.+8      	; 0xdae <__divsf3_pse+0xae>
     da6:	62 1b       	sub	r22, r18
     da8:	73 0b       	sbc	r23, r19
     daa:	84 0b       	sbc	r24, r20
     dac:	ba 0b       	sbc	r27, r26
     dae:	ee 1f       	adc	r30, r30
     db0:	88 f7       	brcc	.-30     	; 0xd94 <__divsf3_pse+0x94>
     db2:	e0 95       	com	r30
     db4:	08 95       	ret

00000db6 <__fixsfdi>:
     db6:	be e3       	ldi	r27, 0x3E	; 62
     db8:	04 d0       	rcall	.+8      	; 0xdc2 <__fixunssfdi+0x2>
     dba:	08 f4       	brcc	.+2      	; 0xdbe <__fixsfdi+0x8>
     dbc:	90 e8       	ldi	r25, 0x80	; 128
     dbe:	08 95       	ret

00000dc0 <__fixunssfdi>:
     dc0:	bf e3       	ldi	r27, 0x3F	; 63
     dc2:	22 27       	eor	r18, r18
     dc4:	33 27       	eor	r19, r19
     dc6:	a9 01       	movw	r20, r18
     dc8:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     dcc:	60 f1       	brcs	.+88     	; 0xe26 <__fixunssfdi+0x66>
     dce:	9f 57       	subi	r25, 0x7F	; 127
     dd0:	48 f1       	brcs	.+82     	; 0xe24 <__fixunssfdi+0x64>
     dd2:	b9 17       	cp	r27, r25
     dd4:	40 f1       	brcs	.+80     	; 0xe26 <__fixunssfdi+0x66>
     dd6:	bf e3       	ldi	r27, 0x3F	; 63
     dd8:	b9 1b       	sub	r27, r25
     dda:	99 27       	eor	r25, r25
     ddc:	b8 50       	subi	r27, 0x08	; 8
     dde:	3a f4       	brpl	.+14     	; 0xdee <__fixunssfdi+0x2e>
     de0:	66 0f       	add	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	88 1f       	adc	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	b3 95       	inc	r27
     dea:	d2 f3       	brmi	.-12     	; 0xde0 <__fixunssfdi+0x20>
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <__fixunssfdi+0x5a>
     dee:	b8 50       	subi	r27, 0x08	; 8
     df0:	4a f0       	brmi	.+18     	; 0xe04 <__fixunssfdi+0x44>
     df2:	23 2f       	mov	r18, r19
     df4:	34 2f       	mov	r19, r20
     df6:	45 2f       	mov	r20, r21
     df8:	56 2f       	mov	r21, r22
     dfa:	67 2f       	mov	r22, r23
     dfc:	78 2f       	mov	r23, r24
     dfe:	88 27       	eor	r24, r24
     e00:	b8 50       	subi	r27, 0x08	; 8
     e02:	ba f7       	brpl	.-18     	; 0xdf2 <__fixunssfdi+0x32>
     e04:	b8 5f       	subi	r27, 0xF8	; 248
     e06:	49 f0       	breq	.+18     	; 0xe1a <__fixunssfdi+0x5a>
     e08:	86 95       	lsr	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	57 95       	ror	r21
     e10:	47 95       	ror	r20
     e12:	37 95       	ror	r19
     e14:	27 95       	ror	r18
     e16:	ba 95       	dec	r27
     e18:	b9 f7       	brne	.-18     	; 0xe08 <__fixunssfdi+0x48>
     e1a:	16 f4       	brtc	.+4      	; 0xe20 <__fixunssfdi+0x60>
     e1c:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_negdi>
     e20:	88 94       	clc
     e22:	08 95       	ret
     e24:	88 94       	clc
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	cb 01       	movw	r24, r22
     e2c:	08 95       	ret

00000e2e <__fixunssfsi>:
     e2e:	0e 94 01 08 	call	0x1002	; 0x1002 <__fp_splitA>
     e32:	88 f0       	brcs	.+34     	; 0xe56 <__fixunssfsi+0x28>
     e34:	9f 57       	subi	r25, 0x7F	; 127
     e36:	98 f0       	brcs	.+38     	; 0xe5e <__fixunssfsi+0x30>
     e38:	b9 2f       	mov	r27, r25
     e3a:	99 27       	eor	r25, r25
     e3c:	b7 51       	subi	r27, 0x17	; 23
     e3e:	b0 f0       	brcs	.+44     	; 0xe6c <__fixunssfsi+0x3e>
     e40:	e1 f0       	breq	.+56     	; 0xe7a <__fixunssfsi+0x4c>
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	88 1f       	adc	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	1a f0       	brmi	.+6      	; 0xe52 <__fixunssfsi+0x24>
     e4c:	ba 95       	dec	r27
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__fixunssfsi+0x14>
     e50:	14 c0       	rjmp	.+40     	; 0xe7a <__fixunssfsi+0x4c>
     e52:	b1 30       	cpi	r27, 0x01	; 1
     e54:	91 f0       	breq	.+36     	; 0xe7a <__fixunssfsi+0x4c>
     e56:	0e 94 1b 08 	call	0x1036	; 0x1036 <__fp_zero>
     e5a:	b1 e0       	ldi	r27, 0x01	; 1
     e5c:	08 95       	ret
     e5e:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__fp_zero>
     e62:	67 2f       	mov	r22, r23
     e64:	78 2f       	mov	r23, r24
     e66:	88 27       	eor	r24, r24
     e68:	b8 5f       	subi	r27, 0xF8	; 248
     e6a:	39 f0       	breq	.+14     	; 0xe7a <__fixunssfsi+0x4c>
     e6c:	b9 3f       	cpi	r27, 0xF9	; 249
     e6e:	cc f3       	brlt	.-14     	; 0xe62 <__fixunssfsi+0x34>
     e70:	86 95       	lsr	r24
     e72:	77 95       	ror	r23
     e74:	67 95       	ror	r22
     e76:	b3 95       	inc	r27
     e78:	d9 f7       	brne	.-10     	; 0xe70 <__fixunssfsi+0x42>
     e7a:	3e f4       	brtc	.+14     	; 0xe8a <__fixunssfsi+0x5c>
     e7c:	90 95       	com	r25
     e7e:	80 95       	com	r24
     e80:	70 95       	com	r23
     e82:	61 95       	neg	r22
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	8f 4f       	sbci	r24, 0xFF	; 255
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	08 95       	ret

00000e8c <__floatunsisf>:
     e8c:	e8 94       	clt
     e8e:	09 c0       	rjmp	.+18     	; 0xea2 <__floatsisf+0x12>

00000e90 <__floatsisf>:
     e90:	97 fb       	bst	r25, 7
     e92:	3e f4       	brtc	.+14     	; 0xea2 <__floatsisf+0x12>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	99 23       	and	r25, r25
     ea4:	a9 f0       	breq	.+42     	; 0xed0 <__floatsisf+0x40>
     ea6:	f9 2f       	mov	r31, r25
     ea8:	96 e9       	ldi	r25, 0x96	; 150
     eaa:	bb 27       	eor	r27, r27
     eac:	93 95       	inc	r25
     eae:	f6 95       	lsr	r31
     eb0:	87 95       	ror	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b7 95       	ror	r27
     eb8:	f1 11       	cpse	r31, r1
     eba:	f8 cf       	rjmp	.-16     	; 0xeac <__floatsisf+0x1c>
     ebc:	fa f4       	brpl	.+62     	; 0xefc <__floatsisf+0x6c>
     ebe:	bb 0f       	add	r27, r27
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__floatsisf+0x36>
     ec2:	60 ff       	sbrs	r22, 0
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <__floatsisf+0x6c>
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	16 c0       	rjmp	.+44     	; 0xefc <__floatsisf+0x6c>
     ed0:	88 23       	and	r24, r24
     ed2:	11 f0       	breq	.+4      	; 0xed8 <__floatsisf+0x48>
     ed4:	96 e9       	ldi	r25, 0x96	; 150
     ed6:	11 c0       	rjmp	.+34     	; 0xefa <__floatsisf+0x6a>
     ed8:	77 23       	and	r23, r23
     eda:	21 f0       	breq	.+8      	; 0xee4 <__floatsisf+0x54>
     edc:	9e e8       	ldi	r25, 0x8E	; 142
     ede:	87 2f       	mov	r24, r23
     ee0:	76 2f       	mov	r23, r22
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <__floatsisf+0x5e>
     ee4:	66 23       	and	r22, r22
     ee6:	71 f0       	breq	.+28     	; 0xf04 <__floatsisf+0x74>
     ee8:	96 e8       	ldi	r25, 0x86	; 134
     eea:	86 2f       	mov	r24, r22
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	2a f0       	brmi	.+10     	; 0xefc <__floatsisf+0x6c>
     ef2:	9a 95       	dec	r25
     ef4:	66 0f       	add	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	da f7       	brpl	.-10     	; 0xef2 <__floatsisf+0x62>
     efc:	88 0f       	add	r24, r24
     efe:	96 95       	lsr	r25
     f00:	87 95       	ror	r24
     f02:	97 f9       	bld	r25, 7
     f04:	08 95       	ret

00000f06 <__floatundisf>:
     f06:	e8 94       	clt

00000f08 <__fp_di2sf>:
     f08:	f9 2f       	mov	r31, r25
     f0a:	96 eb       	ldi	r25, 0xB6	; 182
     f0c:	ff 23       	and	r31, r31
     f0e:	81 f0       	breq	.+32     	; 0xf30 <__fp_di2sf+0x28>
     f10:	12 16       	cp	r1, r18
     f12:	13 06       	cpc	r1, r19
     f14:	14 06       	cpc	r1, r20
     f16:	44 0b       	sbc	r20, r20
     f18:	93 95       	inc	r25
     f1a:	f6 95       	lsr	r31
     f1c:	87 95       	ror	r24
     f1e:	77 95       	ror	r23
     f20:	67 95       	ror	r22
     f22:	57 95       	ror	r21
     f24:	40 40       	sbci	r20, 0x00	; 0
     f26:	ff 23       	and	r31, r31
     f28:	b9 f7       	brne	.-18     	; 0xf18 <__fp_di2sf+0x10>
     f2a:	1b c0       	rjmp	.+54     	; 0xf62 <__fp_di2sf+0x5a>
     f2c:	99 27       	eor	r25, r25
     f2e:	08 95       	ret
     f30:	88 23       	and	r24, r24
     f32:	51 f4       	brne	.+20     	; 0xf48 <__fp_di2sf+0x40>
     f34:	98 50       	subi	r25, 0x08	; 8
     f36:	d2 f7       	brpl	.-12     	; 0xf2c <__fp_di2sf+0x24>
     f38:	87 2b       	or	r24, r23
     f3a:	76 2f       	mov	r23, r22
     f3c:	65 2f       	mov	r22, r21
     f3e:	54 2f       	mov	r21, r20
     f40:	43 2f       	mov	r20, r19
     f42:	32 2f       	mov	r19, r18
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	b1 f3       	breq	.-20     	; 0xf34 <__fp_di2sf+0x2c>
     f48:	12 16       	cp	r1, r18
     f4a:	13 06       	cpc	r1, r19
     f4c:	14 06       	cpc	r1, r20
     f4e:	44 0b       	sbc	r20, r20
     f50:	88 23       	and	r24, r24
     f52:	3a f0       	brmi	.+14     	; 0xf62 <__fp_di2sf+0x5a>
     f54:	9a 95       	dec	r25
     f56:	44 0f       	add	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	66 1f       	adc	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	ca f7       	brpl	.-14     	; 0xf54 <__fp_di2sf+0x4c>
     f62:	55 23       	and	r21, r21
     f64:	4a f4       	brpl	.+18     	; 0xf78 <__fp_di2sf+0x70>
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	11 f4       	brne	.+4      	; 0xf70 <__fp_di2sf+0x68>
     f6c:	60 ff       	sbrs	r22, 0
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__fp_di2sf+0x70>
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 4f       	sbci	r24, 0xFF	; 255
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	88 0f       	add	r24, r24
     f7a:	96 95       	lsr	r25
     f7c:	87 95       	ror	r24
     f7e:	97 f9       	bld	r25, 7
     f80:	08 95       	ret

00000f82 <__fp_inf>:
     f82:	97 f9       	bld	r25, 7
     f84:	9f 67       	ori	r25, 0x7F	; 127
     f86:	80 e8       	ldi	r24, 0x80	; 128
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	08 95       	ret

00000f8e <__fp_nan>:
     f8e:	9f ef       	ldi	r25, 0xFF	; 255
     f90:	80 ec       	ldi	r24, 0xC0	; 192
     f92:	08 95       	ret

00000f94 <__fp_negdi>:
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	60 95       	com	r22
     f9c:	50 95       	com	r21
     f9e:	40 95       	com	r20
     fa0:	30 95       	com	r19
     fa2:	21 95       	neg	r18
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	4f 4f       	sbci	r20, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	6f 4f       	sbci	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8f 4f       	sbci	r24, 0xFF	; 255
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <__mulsf3>:
    1044:	0e 94 35 08 	call	0x106a	; 0x106a <__mulsf3x>
    1048:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_round>
    104c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_pscA>
    1050:	38 f0       	brcs	.+14     	; 0x1060 <__mulsf3+0x1c>
    1052:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_pscB>
    1056:	20 f0       	brcs	.+8      	; 0x1060 <__mulsf3+0x1c>
    1058:	95 23       	and	r25, r21
    105a:	11 f0       	breq	.+4      	; 0x1060 <__mulsf3+0x1c>
    105c:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_inf>
    1060:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__fp_nan>
    1064:	11 24       	eor	r1, r1
    1066:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>

0000106a <__mulsf3x>:
    106a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_split3>
    106e:	70 f3       	brcs	.-36     	; 0x104c <__mulsf3+0x8>

00001070 <__mulsf3_pse>:
    1070:	95 9f       	mul	r25, r21
    1072:	c1 f3       	breq	.-16     	; 0x1064 <__mulsf3+0x20>
    1074:	95 0f       	add	r25, r21
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	55 1f       	adc	r21, r21
    107a:	62 9f       	mul	r22, r18
    107c:	f0 01       	movw	r30, r0
    107e:	72 9f       	mul	r23, r18
    1080:	bb 27       	eor	r27, r27
    1082:	f0 0d       	add	r31, r0
    1084:	b1 1d       	adc	r27, r1
    1086:	63 9f       	mul	r22, r19
    1088:	aa 27       	eor	r26, r26
    108a:	f0 0d       	add	r31, r0
    108c:	b1 1d       	adc	r27, r1
    108e:	aa 1f       	adc	r26, r26
    1090:	64 9f       	mul	r22, r20
    1092:	66 27       	eor	r22, r22
    1094:	b0 0d       	add	r27, r0
    1096:	a1 1d       	adc	r26, r1
    1098:	66 1f       	adc	r22, r22
    109a:	82 9f       	mul	r24, r18
    109c:	22 27       	eor	r18, r18
    109e:	b0 0d       	add	r27, r0
    10a0:	a1 1d       	adc	r26, r1
    10a2:	62 1f       	adc	r22, r18
    10a4:	73 9f       	mul	r23, r19
    10a6:	b0 0d       	add	r27, r0
    10a8:	a1 1d       	adc	r26, r1
    10aa:	62 1f       	adc	r22, r18
    10ac:	83 9f       	mul	r24, r19
    10ae:	a0 0d       	add	r26, r0
    10b0:	61 1d       	adc	r22, r1
    10b2:	22 1f       	adc	r18, r18
    10b4:	74 9f       	mul	r23, r20
    10b6:	33 27       	eor	r19, r19
    10b8:	a0 0d       	add	r26, r0
    10ba:	61 1d       	adc	r22, r1
    10bc:	23 1f       	adc	r18, r19
    10be:	84 9f       	mul	r24, r20
    10c0:	60 0d       	add	r22, r0
    10c2:	21 1d       	adc	r18, r1
    10c4:	82 2f       	mov	r24, r18
    10c6:	76 2f       	mov	r23, r22
    10c8:	6a 2f       	mov	r22, r26
    10ca:	11 24       	eor	r1, r1
    10cc:	9f 57       	subi	r25, 0x7F	; 127
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	9a f0       	brmi	.+38     	; 0x10f8 <__mulsf3_pse+0x88>
    10d2:	f1 f0       	breq	.+60     	; 0x1110 <__mulsf3_pse+0xa0>
    10d4:	88 23       	and	r24, r24
    10d6:	4a f0       	brmi	.+18     	; 0x10ea <__mulsf3_pse+0x7a>
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	bb 1f       	adc	r27, r27
    10de:	66 1f       	adc	r22, r22
    10e0:	77 1f       	adc	r23, r23
    10e2:	88 1f       	adc	r24, r24
    10e4:	91 50       	subi	r25, 0x01	; 1
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <__mulsf3_pse+0x64>
    10ea:	9e 3f       	cpi	r25, 0xFE	; 254
    10ec:	51 05       	cpc	r21, r1
    10ee:	80 f0       	brcs	.+32     	; 0x1110 <__mulsf3_pse+0xa0>
    10f0:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <__fp_inf>
    10f4:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__fp_szero>
    10f8:	5f 3f       	cpi	r21, 0xFF	; 255
    10fa:	e4 f3       	brlt	.-8      	; 0x10f4 <__mulsf3_pse+0x84>
    10fc:	98 3e       	cpi	r25, 0xE8	; 232
    10fe:	d4 f3       	brlt	.-12     	; 0x10f4 <__mulsf3_pse+0x84>
    1100:	86 95       	lsr	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b7 95       	ror	r27
    1108:	f7 95       	ror	r31
    110a:	e7 95       	ror	r30
    110c:	9f 5f       	subi	r25, 0xFF	; 255
    110e:	c1 f7       	brne	.-16     	; 0x1100 <__mulsf3_pse+0x90>
    1110:	fe 2b       	or	r31, r30
    1112:	88 0f       	add	r24, r24
    1114:	91 1d       	adc	r25, r1
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	97 f9       	bld	r25, 7
    111c:	08 95       	ret

0000111e <__ashrdi3>:
    111e:	97 fb       	bst	r25, 7
    1120:	10 f8       	bld	r1, 0

00001122 <__lshrdi3>:
    1122:	16 94       	lsr	r1
    1124:	00 08       	sbc	r0, r0
    1126:	0f 93       	push	r16
    1128:	08 30       	cpi	r16, 0x08	; 8
    112a:	98 f0       	brcs	.+38     	; 0x1152 <__lshrdi3+0x30>
    112c:	08 50       	subi	r16, 0x08	; 8
    112e:	23 2f       	mov	r18, r19
    1130:	34 2f       	mov	r19, r20
    1132:	45 2f       	mov	r20, r21
    1134:	56 2f       	mov	r21, r22
    1136:	67 2f       	mov	r22, r23
    1138:	78 2f       	mov	r23, r24
    113a:	89 2f       	mov	r24, r25
    113c:	90 2d       	mov	r25, r0
    113e:	f4 cf       	rjmp	.-24     	; 0x1128 <__lshrdi3+0x6>
    1140:	05 94       	asr	r0
    1142:	97 95       	ror	r25
    1144:	87 95       	ror	r24
    1146:	77 95       	ror	r23
    1148:	67 95       	ror	r22
    114a:	57 95       	ror	r21
    114c:	47 95       	ror	r20
    114e:	37 95       	ror	r19
    1150:	27 95       	ror	r18
    1152:	0a 95       	dec	r16
    1154:	aa f7       	brpl	.-22     	; 0x1140 <__lshrdi3+0x1e>
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <__subdi3>:
    115a:	2a 19       	sub	r18, r10
    115c:	3b 09       	sbc	r19, r11
    115e:	4c 09       	sbc	r20, r12
    1160:	5d 09       	sbc	r21, r13
    1162:	6e 09       	sbc	r22, r14
    1164:	7f 09       	sbc	r23, r15
    1166:	80 0b       	sbc	r24, r16
    1168:	91 0b       	sbc	r25, r17
    116a:	08 95       	ret

0000116c <_exit>:
    116c:	f8 94       	cli

0000116e <__stop_program>:
    116e:	ff cf       	rjmp	.-2      	; 0x116e <__stop_program>
