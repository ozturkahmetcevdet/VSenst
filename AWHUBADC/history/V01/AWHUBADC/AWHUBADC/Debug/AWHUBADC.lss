
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00803e00  00001059  0000110d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001046  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000013  00009046  00001046  000010fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000c5  00803e1e  00803e1e  0000112b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  000011c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005624  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000264f  00000000  00000000  00006a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a62  00000000  00000000  000090eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000424  00000000  00000000  0000ab50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001cf6  00000000  00000000  0000af74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011b7  00000000  00000000  0000cc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  0000de21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e9 e5       	ldi	r30, 0x59	; 89
      48:	f0 e1       	ldi	r31, 0x10	; 16
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 31       	cpi	r26, 0x1E	; 30
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	ae e1       	ldi	r26, 0x1E	; 30
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a3 3e       	cpi	r26, 0xE3	; 227
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	04 d0       	rcall	.+8      	; 0x70 <main>
      68:	ec c7       	rjmp	.+4056   	; 0x1042 <_exit>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	da d2       	rcall	.+1460   	; 0x622 <system_init>
      6e:	08 95       	ret

00000070 <main>:
int16_t refP1 = 0, refP2 = 0;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      70:	fd df       	rcall	.-6      	; 0x6c <atmel_start_init>
	
	uint8_t startupDelay = 100;
      72:	84 e6       	ldi	r24, 0x64	; 100
	
	while (startupDelay--)
      74:	0a c0       	rjmp	.+20     	; 0x8a <__EEPROM_REGION_LENGTH__+0xa>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
      76:	8a b1       	in	r24, 0x0a	; 10
      78:	80 61       	ori	r24, 0x10	; 16
      7a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      7c:	e7 ea       	ldi	r30, 0xA7	; 167
      7e:	f1 e6       	ldi	r31, 0x61	; 97
      80:	31 97       	sbiw	r30, 0x01	; 1
      82:	f1 f7       	brne	.-4      	; 0x80 <__EEPROM_REGION_LENGTH__>
      84:	00 c0       	rjmp	.+0      	; 0x86 <__EEPROM_REGION_LENGTH__+0x6>
      86:	00 00       	nop
      88:	89 2f       	mov	r24, r25
      8a:	9f ef       	ldi	r25, 0xFF	; 255
      8c:	98 0f       	add	r25, r24
      8e:	81 11       	cpse	r24, r1
      90:	f2 cf       	rjmp	.-28     	; 0x76 <main+0x6>
	{
		DATA_toggle_level();
		_delay_ms(20);
	}
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM7;
      92:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <payloadBufferStartByte+0x7f80b2>
      96:	e0 e0       	ldi	r30, 0x00	; 0
      98:	fe e3       	ldi	r31, 0x3E	; 62
      9a:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM8;
      9c:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f80b3>
      a0:	87 83       	std	Z+7, r24	; 0x07
	payloadBuffer[payloadBufferStartByte + 2] = SIGROW_SERNUM9;
      a2:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f80b4>
      a6:	80 87       	std	Z+8, r24	; 0x08
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
      a8:	46 e0       	ldi	r20, 0x06	; 6
      aa:	60 e1       	ldi	r22, 0x10	; 16
      ac:	cf 01       	movw	r24, r30
      ae:	a5 d3       	rcall	.+1866   	; 0x7fa <SX1243Init>
	
	TOUCH_GetSensorValue(0, false);
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	60 d4       	rcall	.+2240   	; 0x976 <TOUCH_GetSensorValue>
	TOUCH_GetSensorValue(0, true);
      b6:	61 e0       	ldi	r22, 0x01	; 1
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	5d d4       	rcall	.+2234   	; 0x976 <TOUCH_GetSensorValue>
	TOUCH_GetSensorValue(1, false);
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	5a d4       	rcall	.+2228   	; 0x976 <TOUCH_GetSensorValue>
	TOUCH_GetSensorValue(1, true);
      c2:	61 e0       	ldi	r22, 0x01	; 1
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	57 d4       	rcall	.+2222   	; 0x976 <TOUCH_GetSensorValue>
	
	for (uint8_t i = 0; i < 212; i++)
      c8:	c0 e0       	ldi	r28, 0x00	; 0
      ca:	4e c0       	rjmp	.+156    	; 0x168 <__EEPROM_REGION_LENGTH__+0xe8>
	{
		ref1 = TOUCH_GetSensorValue(0, false);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	52 d4       	rcall	.+2212   	; 0x976 <TOUCH_GetSensorValue>
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	80 93 26 3e 	sts	0x3E26, r24	; 0x803e26 <ref1>
      da:	90 93 27 3e 	sts	0x3E27, r25	; 0x803e27 <ref1+0x1>
      de:	a0 93 28 3e 	sts	0x3E28, r26	; 0x803e28 <ref1+0x2>
      e2:	b0 93 29 3e 	sts	0x3E29, r27	; 0x803e29 <ref1+0x3>
		ref2 = TOUCH_GetSensorValue(0, true);
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	45 d4       	rcall	.+2186   	; 0x976 <TOUCH_GetSensorValue>
      ec:	ac 01       	movw	r20, r24
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	40 93 22 3e 	sts	0x3E22, r20	; 0x803e22 <ref2>
      f6:	50 93 23 3e 	sts	0x3E23, r21	; 0x803e23 <ref2+0x1>
      fa:	60 93 24 3e 	sts	0x3E24, r22	; 0x803e24 <ref2+0x2>
      fe:	70 93 25 3e 	sts	0x3E25, r23	; 0x803e25 <ref2+0x3>
		refMax = i == 0 ? ref1 - ref2 : (refMax < (ref1 - ref2) ? (ref1 - ref2) : refMax);
     102:	c1 11       	cpse	r28, r1
     104:	0d c0       	rjmp	.+26     	; 0x120 <__EEPROM_REGION_LENGTH__+0xa0>
     106:	80 91 26 3e 	lds	r24, 0x3E26	; 0x803e26 <ref1>
     10a:	90 91 27 3e 	lds	r25, 0x3E27	; 0x803e27 <ref1+0x1>
     10e:	a0 91 28 3e 	lds	r26, 0x3E28	; 0x803e28 <ref1+0x2>
     112:	b0 91 29 3e 	lds	r27, 0x3E29	; 0x803e29 <ref1+0x3>
     116:	84 1b       	sub	r24, r20
     118:	95 0b       	sbc	r25, r21
     11a:	a6 0b       	sbc	r26, r22
     11c:	b7 0b       	sbc	r27, r23
     11e:	1b c0       	rjmp	.+54     	; 0x156 <__EEPROM_REGION_LENGTH__+0xd6>
     120:	80 91 26 3e 	lds	r24, 0x3E26	; 0x803e26 <ref1>
     124:	90 91 27 3e 	lds	r25, 0x3E27	; 0x803e27 <ref1+0x1>
     128:	a0 91 28 3e 	lds	r26, 0x3E28	; 0x803e28 <ref1+0x2>
     12c:	b0 91 29 3e 	lds	r27, 0x3E29	; 0x803e29 <ref1+0x3>
     130:	00 91 2a 3e 	lds	r16, 0x3E2A	; 0x803e2a <refMax>
     134:	10 91 2b 3e 	lds	r17, 0x3E2B	; 0x803e2b <refMax+0x1>
     138:	20 91 2c 3e 	lds	r18, 0x3E2C	; 0x803e2c <refMax+0x2>
     13c:	30 91 2d 3e 	lds	r19, 0x3E2D	; 0x803e2d <refMax+0x3>
     140:	84 1b       	sub	r24, r20
     142:	95 0b       	sbc	r25, r21
     144:	a6 0b       	sbc	r26, r22
     146:	b7 0b       	sbc	r27, r23
     148:	80 17       	cp	r24, r16
     14a:	91 07       	cpc	r25, r17
     14c:	a2 07       	cpc	r26, r18
     14e:	b3 07       	cpc	r27, r19
     150:	14 f4       	brge	.+4      	; 0x156 <__EEPROM_REGION_LENGTH__+0xd6>
     152:	d9 01       	movw	r26, r18
     154:	c8 01       	movw	r24, r16
     156:	80 93 2a 3e 	sts	0x3E2A, r24	; 0x803e2a <refMax>
     15a:	90 93 2b 3e 	sts	0x3E2B, r25	; 0x803e2b <refMax+0x1>
     15e:	a0 93 2c 3e 	sts	0x3E2C, r26	; 0x803e2c <refMax+0x2>
     162:	b0 93 2d 3e 	sts	0x3E2D, r27	; 0x803e2d <refMax+0x3>
	TOUCH_GetSensorValue(0, false);
	TOUCH_GetSensorValue(0, true);
	TOUCH_GetSensorValue(1, false);
	TOUCH_GetSensorValue(1, true);
	
	for (uint8_t i = 0; i < 212; i++)
     166:	cf 5f       	subi	r28, 0xFF	; 255
     168:	c4 3d       	cpi	r28, 0xD4	; 212
     16a:	08 f4       	brcc	.+2      	; 0x16e <__EEPROM_REGION_LENGTH__+0xee>
     16c:	af cf       	rjmp	.-162    	; 0xcc <__EEPROM_REGION_LENGTH__+0x4c>
		ref1 = TOUCH_GetSensorValue(0, false);
		ref2 = TOUCH_GetSensorValue(0, true);
		refMax = i == 0 ? ref1 - ref2 : (refMax < (ref1 - ref2) ? (ref1 - ref2) : refMax);
	}
	
	refP1 = (uint16_t)refMax;
     16e:	80 91 2a 3e 	lds	r24, 0x3E2A	; 0x803e2a <refMax>
     172:	90 91 2b 3e 	lds	r25, 0x3E2B	; 0x803e2b <refMax+0x1>
     176:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <refP1>
     17a:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <refP1+0x1>
	refMax = ref1 = ref2 = 0;
     17e:	10 92 22 3e 	sts	0x3E22, r1	; 0x803e22 <ref2>
     182:	10 92 23 3e 	sts	0x3E23, r1	; 0x803e23 <ref2+0x1>
     186:	10 92 24 3e 	sts	0x3E24, r1	; 0x803e24 <ref2+0x2>
     18a:	10 92 25 3e 	sts	0x3E25, r1	; 0x803e25 <ref2+0x3>
     18e:	10 92 26 3e 	sts	0x3E26, r1	; 0x803e26 <ref1>
     192:	10 92 27 3e 	sts	0x3E27, r1	; 0x803e27 <ref1+0x1>
     196:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <ref1+0x2>
     19a:	10 92 29 3e 	sts	0x3E29, r1	; 0x803e29 <ref1+0x3>
     19e:	10 92 2a 3e 	sts	0x3E2A, r1	; 0x803e2a <refMax>
     1a2:	10 92 2b 3e 	sts	0x3E2B, r1	; 0x803e2b <refMax+0x1>
     1a6:	10 92 2c 3e 	sts	0x3E2C, r1	; 0x803e2c <refMax+0x2>
     1aa:	10 92 2d 3e 	sts	0x3E2D, r1	; 0x803e2d <refMax+0x3>
	
	for (uint8_t i = 0; i < 212; i++)
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	4e c0       	rjmp	.+156    	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
	{
		ref1 = TOUCH_GetSensorValue(1, false);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	df d3       	rcall	.+1982   	; 0x976 <TOUCH_GetSensorValue>
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	80 93 26 3e 	sts	0x3E26, r24	; 0x803e26 <ref1>
     1c0:	90 93 27 3e 	sts	0x3E27, r25	; 0x803e27 <ref1+0x1>
     1c4:	a0 93 28 3e 	sts	0x3E28, r26	; 0x803e28 <ref1+0x2>
     1c8:	b0 93 29 3e 	sts	0x3E29, r27	; 0x803e29 <ref1+0x3>
		ref2 = TOUCH_GetSensorValue(1, true);
     1cc:	61 e0       	ldi	r22, 0x01	; 1
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	d2 d3       	rcall	.+1956   	; 0x976 <TOUCH_GetSensorValue>
     1d2:	ac 01       	movw	r20, r24
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	40 93 22 3e 	sts	0x3E22, r20	; 0x803e22 <ref2>
     1dc:	50 93 23 3e 	sts	0x3E23, r21	; 0x803e23 <ref2+0x1>
     1e0:	60 93 24 3e 	sts	0x3E24, r22	; 0x803e24 <ref2+0x2>
     1e4:	70 93 25 3e 	sts	0x3E25, r23	; 0x803e25 <ref2+0x3>
		refMax = i == 0 ? ref1 - ref2 : (refMax < (ref1 - ref2) ? (ref1 - ref2) : refMax);
     1e8:	c1 11       	cpse	r28, r1
     1ea:	0d c0       	rjmp	.+26     	; 0x206 <__DATA_REGION_LENGTH__+0x6>
     1ec:	80 91 26 3e 	lds	r24, 0x3E26	; 0x803e26 <ref1>
     1f0:	90 91 27 3e 	lds	r25, 0x3E27	; 0x803e27 <ref1+0x1>
     1f4:	a0 91 28 3e 	lds	r26, 0x3E28	; 0x803e28 <ref1+0x2>
     1f8:	b0 91 29 3e 	lds	r27, 0x3E29	; 0x803e29 <ref1+0x3>
     1fc:	84 1b       	sub	r24, r20
     1fe:	95 0b       	sbc	r25, r21
     200:	a6 0b       	sbc	r26, r22
     202:	b7 0b       	sbc	r27, r23
     204:	1b c0       	rjmp	.+54     	; 0x23c <__DATA_REGION_LENGTH__+0x3c>
     206:	80 91 26 3e 	lds	r24, 0x3E26	; 0x803e26 <ref1>
     20a:	90 91 27 3e 	lds	r25, 0x3E27	; 0x803e27 <ref1+0x1>
     20e:	a0 91 28 3e 	lds	r26, 0x3E28	; 0x803e28 <ref1+0x2>
     212:	b0 91 29 3e 	lds	r27, 0x3E29	; 0x803e29 <ref1+0x3>
     216:	00 91 2a 3e 	lds	r16, 0x3E2A	; 0x803e2a <refMax>
     21a:	10 91 2b 3e 	lds	r17, 0x3E2B	; 0x803e2b <refMax+0x1>
     21e:	20 91 2c 3e 	lds	r18, 0x3E2C	; 0x803e2c <refMax+0x2>
     222:	30 91 2d 3e 	lds	r19, 0x3E2D	; 0x803e2d <refMax+0x3>
     226:	84 1b       	sub	r24, r20
     228:	95 0b       	sbc	r25, r21
     22a:	a6 0b       	sbc	r26, r22
     22c:	b7 0b       	sbc	r27, r23
     22e:	80 17       	cp	r24, r16
     230:	91 07       	cpc	r25, r17
     232:	a2 07       	cpc	r26, r18
     234:	b3 07       	cpc	r27, r19
     236:	14 f4       	brge	.+4      	; 0x23c <__DATA_REGION_LENGTH__+0x3c>
     238:	d9 01       	movw	r26, r18
     23a:	c8 01       	movw	r24, r16
     23c:	80 93 2a 3e 	sts	0x3E2A, r24	; 0x803e2a <refMax>
     240:	90 93 2b 3e 	sts	0x3E2B, r25	; 0x803e2b <refMax+0x1>
     244:	a0 93 2c 3e 	sts	0x3E2C, r26	; 0x803e2c <refMax+0x2>
     248:	b0 93 2d 3e 	sts	0x3E2D, r27	; 0x803e2d <refMax+0x3>
	}
	
	refP1 = (uint16_t)refMax;
	refMax = ref1 = ref2 = 0;
	
	for (uint8_t i = 0; i < 212; i++)
     24c:	cf 5f       	subi	r28, 0xFF	; 255
     24e:	c4 3d       	cpi	r28, 0xD4	; 212
     250:	08 f4       	brcc	.+2      	; 0x254 <__DATA_REGION_LENGTH__+0x54>
     252:	af cf       	rjmp	.-162    	; 0x1b2 <__EEPROM_REGION_LENGTH__+0x132>
		ref1 = TOUCH_GetSensorValue(1, false);
		ref2 = TOUCH_GetSensorValue(1, true);
		refMax = i == 0 ? ref1 - ref2 : (refMax < (ref1 - ref2) ? (ref1 - ref2) : refMax);
	}
	
	refP2 = (uint16_t)refMax;
     254:	80 91 2a 3e 	lds	r24, 0x3E2A	; 0x803e2a <refMax>
     258:	90 91 2b 3e 	lds	r25, 0x3E2B	; 0x803e2b <refMax+0x1>
     25c:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <__data_end>
     260:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <__data_end+0x1>
	refMax = ref1 = ref2 = 0;
     264:	10 92 22 3e 	sts	0x3E22, r1	; 0x803e22 <ref2>
     268:	10 92 23 3e 	sts	0x3E23, r1	; 0x803e23 <ref2+0x1>
     26c:	10 92 24 3e 	sts	0x3E24, r1	; 0x803e24 <ref2+0x2>
     270:	10 92 25 3e 	sts	0x3E25, r1	; 0x803e25 <ref2+0x3>
     274:	10 92 26 3e 	sts	0x3E26, r1	; 0x803e26 <ref1>
     278:	10 92 27 3e 	sts	0x3E27, r1	; 0x803e27 <ref1+0x1>
     27c:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <ref1+0x2>
     280:	10 92 29 3e 	sts	0x3E29, r1	; 0x803e29 <ref1+0x3>
     284:	10 92 2a 3e 	sts	0x3E2A, r1	; 0x803e2a <refMax>
     288:	10 92 2b 3e 	sts	0x3E2B, r1	; 0x803e2b <refMax+0x1>
     28c:	10 92 2c 3e 	sts	0x3E2C, r1	; 0x803e2c <refMax+0x2>
     290:	10 92 2d 3e 	sts	0x3E2D, r1	; 0x803e2d <refMax+0x3>

	/* Replace with your application code */
	while (1) {
		for (uint8_t i = 0; i < 212; i++)
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	50 c0       	rjmp	.+160    	; 0x338 <__DATA_REGION_LENGTH__+0x138>
		{
			adc1 = TOUCH_GetSensorValue(0, false);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	6c d3       	rcall	.+1752   	; 0x976 <TOUCH_GetSensorValue>
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	80 93 32 3e 	sts	0x3E32, r24	; 0x803e32 <adc1>
     2a6:	90 93 33 3e 	sts	0x3E33, r25	; 0x803e33 <adc1+0x1>
     2aa:	a0 93 34 3e 	sts	0x3E34, r26	; 0x803e34 <adc1+0x2>
     2ae:	b0 93 35 3e 	sts	0x3E35, r27	; 0x803e35 <adc1+0x3>
			adc2 = TOUCH_GetSensorValue(0, true);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	5f d3       	rcall	.+1726   	; 0x976 <TOUCH_GetSensorValue>
     2b8:	8c 01       	movw	r16, r24
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	00 93 2e 3e 	sts	0x3E2E, r16	; 0x803e2e <adc2>
     2c2:	10 93 2f 3e 	sts	0x3E2F, r17	; 0x803e2f <adc2+0x1>
     2c6:	20 93 30 3e 	sts	0x3E30, r18	; 0x803e30 <adc2+0x2>
     2ca:	30 93 31 3e 	sts	0x3E31, r19	; 0x803e31 <adc2+0x3>
			adcMax = i == 0 ? adc1 - adc2 : (adcMax < (adc1 - adc2) ? (adc1 - adc2) : adcMax);
     2ce:	c1 11       	cpse	r28, r1
     2d0:	0f c0       	rjmp	.+30     	; 0x2f0 <__DATA_REGION_LENGTH__+0xf0>
     2d2:	40 91 32 3e 	lds	r20, 0x3E32	; 0x803e32 <adc1>
     2d6:	50 91 33 3e 	lds	r21, 0x3E33	; 0x803e33 <adc1+0x1>
     2da:	60 91 34 3e 	lds	r22, 0x3E34	; 0x803e34 <adc1+0x2>
     2de:	70 91 35 3e 	lds	r23, 0x3E35	; 0x803e35 <adc1+0x3>
     2e2:	db 01       	movw	r26, r22
     2e4:	ca 01       	movw	r24, r20
     2e6:	80 1b       	sub	r24, r16
     2e8:	91 0b       	sbc	r25, r17
     2ea:	a2 0b       	sbc	r26, r18
     2ec:	b3 0b       	sbc	r27, r19
     2ee:	1b c0       	rjmp	.+54     	; 0x326 <__DATA_REGION_LENGTH__+0x126>
     2f0:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <adc1>
     2f4:	90 91 33 3e 	lds	r25, 0x3E33	; 0x803e33 <adc1+0x1>
     2f8:	a0 91 34 3e 	lds	r26, 0x3E34	; 0x803e34 <adc1+0x2>
     2fc:	b0 91 35 3e 	lds	r27, 0x3E35	; 0x803e35 <adc1+0x3>
     300:	40 91 36 3e 	lds	r20, 0x3E36	; 0x803e36 <adcMax>
     304:	50 91 37 3e 	lds	r21, 0x3E37	; 0x803e37 <adcMax+0x1>
     308:	60 91 38 3e 	lds	r22, 0x3E38	; 0x803e38 <adcMax+0x2>
     30c:	70 91 39 3e 	lds	r23, 0x3E39	; 0x803e39 <adcMax+0x3>
     310:	80 1b       	sub	r24, r16
     312:	91 0b       	sbc	r25, r17
     314:	a2 0b       	sbc	r26, r18
     316:	b3 0b       	sbc	r27, r19
     318:	84 17       	cp	r24, r20
     31a:	95 07       	cpc	r25, r21
     31c:	a6 07       	cpc	r26, r22
     31e:	b7 07       	cpc	r27, r23
     320:	14 f4       	brge	.+4      	; 0x326 <__DATA_REGION_LENGTH__+0x126>
     322:	db 01       	movw	r26, r22
     324:	ca 01       	movw	r24, r20
     326:	80 93 36 3e 	sts	0x3E36, r24	; 0x803e36 <adcMax>
     32a:	90 93 37 3e 	sts	0x3E37, r25	; 0x803e37 <adcMax+0x1>
     32e:	a0 93 38 3e 	sts	0x3E38, r26	; 0x803e38 <adcMax+0x2>
     332:	b0 93 39 3e 	sts	0x3E39, r27	; 0x803e39 <adcMax+0x3>
	refP2 = (uint16_t)refMax;
	refMax = ref1 = ref2 = 0;

	/* Replace with your application code */
	while (1) {
		for (uint8_t i = 0; i < 212; i++)
     336:	cf 5f       	subi	r28, 0xFF	; 255
     338:	c4 3d       	cpi	r28, 0xD4	; 212
     33a:	08 f4       	brcc	.+2      	; 0x33e <__DATA_REGION_LENGTH__+0x13e>
     33c:	ad cf       	rjmp	.-166    	; 0x298 <__DATA_REGION_LENGTH__+0x98>
			adc1 = TOUCH_GetSensorValue(0, false);
			adc2 = TOUCH_GetSensorValue(0, true);
			adcMax = i == 0 ? adc1 - adc2 : (adcMax < (adc1 - adc2) ? (adc1 - adc2) : adcMax);
		}
		
		prox1CurrentValue = ((uint16_t)adcMax - refP1);
     33e:	80 91 36 3e 	lds	r24, 0x3E36	; 0x803e36 <adcMax>
     342:	90 91 37 3e 	lds	r25, 0x3E37	; 0x803e37 <adcMax+0x1>
     346:	20 91 20 3e 	lds	r18, 0x3E20	; 0x803e20 <refP1>
     34a:	30 91 21 3e 	lds	r19, 0x3E21	; 0x803e21 <refP1+0x1>
		adcMax = adc1 = adc2 = 0;
     34e:	10 92 2e 3e 	sts	0x3E2E, r1	; 0x803e2e <adc2>
     352:	10 92 2f 3e 	sts	0x3E2F, r1	; 0x803e2f <adc2+0x1>
     356:	10 92 30 3e 	sts	0x3E30, r1	; 0x803e30 <adc2+0x2>
     35a:	10 92 31 3e 	sts	0x3E31, r1	; 0x803e31 <adc2+0x3>
     35e:	10 92 32 3e 	sts	0x3E32, r1	; 0x803e32 <adc1>
     362:	10 92 33 3e 	sts	0x3E33, r1	; 0x803e33 <adc1+0x1>
     366:	10 92 34 3e 	sts	0x3E34, r1	; 0x803e34 <adc1+0x2>
     36a:	10 92 35 3e 	sts	0x3E35, r1	; 0x803e35 <adc1+0x3>
     36e:	10 92 36 3e 	sts	0x3E36, r1	; 0x803e36 <adcMax>
     372:	10 92 37 3e 	sts	0x3E37, r1	; 0x803e37 <adcMax+0x1>
     376:	10 92 38 3e 	sts	0x3E38, r1	; 0x803e38 <adcMax+0x2>
     37a:	10 92 39 3e 	sts	0x3E39, r1	; 0x803e39 <adcMax+0x3>
		prox1CurrentValue = prox1CurrentValue < 0 ? 0 : prox1CurrentValue;
     37e:	82 1b       	sub	r24, r18
     380:	93 0b       	sbc	r25, r19
     382:	12 f4       	brpl	.+4      	; 0x388 <__DATA_REGION_LENGTH__+0x188>
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <prox1CurrentValue>
     38c:	90 93 3f 3e 	sts	0x3E3F, r25	; 0x803e3f <prox1CurrentValue+0x1>
		prox1CounterBase[1] = (uint8_t)((prox1CurrentValue >> 8) & 0x00FF);
     390:	ec e3       	ldi	r30, 0x3C	; 60
     392:	fe e3       	ldi	r31, 0x3E	; 62
     394:	91 83       	std	Z+1, r25	; 0x01
		prox1CounterBase[0] = (uint8_t)((prox1CurrentValue >> 0) & 0x00FF);
     396:	80 83       	st	Z, r24
		
		for (uint8_t i = 0; i < 212; i++)
     398:	c0 e0       	ldi	r28, 0x00	; 0
     39a:	50 c0       	rjmp	.+160    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		{
			adc1 = TOUCH_GetSensorValue(1, false);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	ea d2       	rcall	.+1492   	; 0x976 <TOUCH_GetSensorValue>
     3a2:	a0 e0       	ldi	r26, 0x00	; 0
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	80 93 32 3e 	sts	0x3E32, r24	; 0x803e32 <adc1>
     3aa:	90 93 33 3e 	sts	0x3E33, r25	; 0x803e33 <adc1+0x1>
     3ae:	a0 93 34 3e 	sts	0x3E34, r26	; 0x803e34 <adc1+0x2>
     3b2:	b0 93 35 3e 	sts	0x3E35, r27	; 0x803e35 <adc1+0x3>
			adc2 = TOUCH_GetSensorValue(1, true);
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	dd d2       	rcall	.+1466   	; 0x976 <TOUCH_GetSensorValue>
     3bc:	8c 01       	movw	r16, r24
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	00 93 2e 3e 	sts	0x3E2E, r16	; 0x803e2e <adc2>
     3c6:	10 93 2f 3e 	sts	0x3E2F, r17	; 0x803e2f <adc2+0x1>
     3ca:	20 93 30 3e 	sts	0x3E30, r18	; 0x803e30 <adc2+0x2>
     3ce:	30 93 31 3e 	sts	0x3E31, r19	; 0x803e31 <adc2+0x3>
			adcMax = i == 0 ? adc1 - adc2 : (adcMax < (adc1 - adc2) ? (adc1 - adc2) : adcMax);
     3d2:	c1 11       	cpse	r28, r1
     3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <__DATA_REGION_LENGTH__+0x1f4>
     3d6:	40 91 32 3e 	lds	r20, 0x3E32	; 0x803e32 <adc1>
     3da:	50 91 33 3e 	lds	r21, 0x3E33	; 0x803e33 <adc1+0x1>
     3de:	60 91 34 3e 	lds	r22, 0x3E34	; 0x803e34 <adc1+0x2>
     3e2:	70 91 35 3e 	lds	r23, 0x3E35	; 0x803e35 <adc1+0x3>
     3e6:	db 01       	movw	r26, r22
     3e8:	ca 01       	movw	r24, r20
     3ea:	80 1b       	sub	r24, r16
     3ec:	91 0b       	sbc	r25, r17
     3ee:	a2 0b       	sbc	r26, r18
     3f0:	b3 0b       	sbc	r27, r19
     3f2:	1b c0       	rjmp	.+54     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3f4:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <adc1>
     3f8:	90 91 33 3e 	lds	r25, 0x3E33	; 0x803e33 <adc1+0x1>
     3fc:	a0 91 34 3e 	lds	r26, 0x3E34	; 0x803e34 <adc1+0x2>
     400:	b0 91 35 3e 	lds	r27, 0x3E35	; 0x803e35 <adc1+0x3>
     404:	40 91 36 3e 	lds	r20, 0x3E36	; 0x803e36 <adcMax>
     408:	50 91 37 3e 	lds	r21, 0x3E37	; 0x803e37 <adcMax+0x1>
     40c:	60 91 38 3e 	lds	r22, 0x3E38	; 0x803e38 <adcMax+0x2>
     410:	70 91 39 3e 	lds	r23, 0x3E39	; 0x803e39 <adcMax+0x3>
     414:	80 1b       	sub	r24, r16
     416:	91 0b       	sbc	r25, r17
     418:	a2 0b       	sbc	r26, r18
     41a:	b3 0b       	sbc	r27, r19
     41c:	84 17       	cp	r24, r20
     41e:	95 07       	cpc	r25, r21
     420:	a6 07       	cpc	r26, r22
     422:	b7 07       	cpc	r27, r23
     424:	14 f4       	brge	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	db 01       	movw	r26, r22
     428:	ca 01       	movw	r24, r20
     42a:	80 93 36 3e 	sts	0x3E36, r24	; 0x803e36 <adcMax>
     42e:	90 93 37 3e 	sts	0x3E37, r25	; 0x803e37 <adcMax+0x1>
     432:	a0 93 38 3e 	sts	0x3E38, r26	; 0x803e38 <adcMax+0x2>
     436:	b0 93 39 3e 	sts	0x3E39, r27	; 0x803e39 <adcMax+0x3>
		adcMax = adc1 = adc2 = 0;
		prox1CurrentValue = prox1CurrentValue < 0 ? 0 : prox1CurrentValue;
		prox1CounterBase[1] = (uint8_t)((prox1CurrentValue >> 8) & 0x00FF);
		prox1CounterBase[0] = (uint8_t)((prox1CurrentValue >> 0) & 0x00FF);
		
		for (uint8_t i = 0; i < 212; i++)
     43a:	cf 5f       	subi	r28, 0xFF	; 255
     43c:	c4 3d       	cpi	r28, 0xD4	; 212
     43e:	08 f4       	brcc	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	ad cf       	rjmp	.-166    	; 0x39c <__DATA_REGION_LENGTH__+0x19c>
			adc1 = TOUCH_GetSensorValue(1, false);
			adc2 = TOUCH_GetSensorValue(1, true);
			adcMax = i == 0 ? adc1 - adc2 : (adcMax < (adc1 - adc2) ? (adc1 - adc2) : adcMax);
		}
		
		prox2CurrentValue = ((uint16_t)adcMax - refP2);
     442:	80 91 36 3e 	lds	r24, 0x3E36	; 0x803e36 <adcMax>
     446:	90 91 37 3e 	lds	r25, 0x3E37	; 0x803e37 <adcMax+0x1>
     44a:	20 91 1e 3e 	lds	r18, 0x3E1E	; 0x803e1e <__data_end>
     44e:	30 91 1f 3e 	lds	r19, 0x3E1F	; 0x803e1f <__data_end+0x1>
		adcMax = adc1 = adc2 = 0;
     452:	10 92 2e 3e 	sts	0x3E2E, r1	; 0x803e2e <adc2>
     456:	10 92 2f 3e 	sts	0x3E2F, r1	; 0x803e2f <adc2+0x1>
     45a:	10 92 30 3e 	sts	0x3E30, r1	; 0x803e30 <adc2+0x2>
     45e:	10 92 31 3e 	sts	0x3E31, r1	; 0x803e31 <adc2+0x3>
     462:	10 92 32 3e 	sts	0x3E32, r1	; 0x803e32 <adc1>
     466:	10 92 33 3e 	sts	0x3E33, r1	; 0x803e33 <adc1+0x1>
     46a:	10 92 34 3e 	sts	0x3E34, r1	; 0x803e34 <adc1+0x2>
     46e:	10 92 35 3e 	sts	0x3E35, r1	; 0x803e35 <adc1+0x3>
     472:	10 92 36 3e 	sts	0x3E36, r1	; 0x803e36 <adcMax>
     476:	10 92 37 3e 	sts	0x3E37, r1	; 0x803e37 <adcMax+0x1>
     47a:	10 92 38 3e 	sts	0x3E38, r1	; 0x803e38 <adcMax+0x2>
     47e:	10 92 39 3e 	sts	0x3E39, r1	; 0x803e39 <adcMax+0x3>
		prox2CurrentValue = prox2CurrentValue < 0 ? 0 : prox2CurrentValue;
     482:	82 1b       	sub	r24, r18
     484:	93 0b       	sbc	r25, r19
     486:	12 f4       	brpl	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <prox2CurrentValue>
     490:	90 93 41 3e 	sts	0x3E41, r25	; 0x803e41 <prox2CurrentValue+0x1>
		prox2CounterBase[1] = (uint8_t)((prox2CurrentValue >> 8) & 0x00FF);
     494:	ea e3       	ldi	r30, 0x3A	; 58
     496:	fe e3       	ldi	r31, 0x3E	; 62
     498:	91 83       	std	Z+1, r25	; 0x01
		prox2CounterBase[0] = (uint8_t)((prox2CurrentValue >> 0) & 0x00FF);
     49a:	80 83       	st	Z, r24
		
		
		
		seatFlagStatus[0] = /*batteryLevelMSB |*/ 0 << 2 | 0 << 1 | 1;
     49c:	e3 e4       	ldi	r30, 0x43	; 67
     49e:	fe e3       	ldi	r31, 0x3E	; 62
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	20 83       	st	Z, r18
		seatFlagStatus[1] = /*batteryLevelMSB |*/ 0 << 2 | 0 << 1 | 1;
     4a4:	21 83       	std	Z+1, r18	; 0x01
		
		payloadBuffer[payloadBufferStartByte + 3] = seatFlagStatus[0];
     4a6:	c0 e0       	ldi	r28, 0x00	; 0
     4a8:	de e3       	ldi	r29, 0x3E	; 62
     4aa:	29 87       	std	Y+9, r18	; 0x09
		payloadBuffer[payloadBufferStartByte + 4] = seatFlagStatus[1];
     4ac:	2a 87       	std	Y+10, r18	; 0x0a
		payloadBuffer[payloadBufferStartByte + 5] = prox1CounterBase[1];
     4ae:	ec e3       	ldi	r30, 0x3C	; 60
     4b0:	fe e3       	ldi	r31, 0x3E	; 62
     4b2:	21 81       	ldd	r18, Z+1	; 0x01
     4b4:	2b 87       	std	Y+11, r18	; 0x0b
		payloadBuffer[payloadBufferStartByte + 6] = prox1CounterBase[0];
     4b6:	20 81       	ld	r18, Z
     4b8:	2c 87       	std	Y+12, r18	; 0x0c
		payloadBuffer[payloadBufferStartByte + 7] = prox2CounterBase[1];
     4ba:	9d 87       	std	Y+13, r25	; 0x0d
		payloadBuffer[payloadBufferStartByte + 8] = prox2CounterBase[0];
     4bc:	8e 87       	std	Y+14, r24	; 0x0e
		payloadBuffer[payloadBufferStartByte + 9] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 3]);
     4be:	89 e0       	ldi	r24, 0x09	; 9
     4c0:	9e e3       	ldi	r25, 0x3E	; 62
     4c2:	e8 d1       	rcall	.+976    	; 0x894 <SX1243CRC8>
     4c4:	8f 87       	std	Y+15, r24	; 0x0f
		
		SX1243Process();
     4c6:	f6 d1       	rcall	.+1004   	; 0x8b4 <SX1243Process>
		
		//printf("adc1: %4d, adc2: %4d\r",adc1, adc2);
		printf("P1: %4d, P2: %4d\r",prox1CurrentValue, prox2CurrentValue);
     4c8:	80 91 41 3e 	lds	r24, 0x3E41	; 0x803e41 <prox2CurrentValue+0x1>
     4cc:	8f 93       	push	r24
     4ce:	80 91 40 3e 	lds	r24, 0x3E40	; 0x803e40 <prox2CurrentValue>
     4d2:	8f 93       	push	r24
     4d4:	80 91 3f 3e 	lds	r24, 0x3E3F	; 0x803e3f <prox1CurrentValue+0x1>
     4d8:	8f 93       	push	r24
     4da:	80 91 3e 3e 	lds	r24, 0x3E3E	; 0x803e3e <prox1CurrentValue>
     4de:	8f 93       	push	r24
     4e0:	86 e4       	ldi	r24, 0x46	; 70
     4e2:	90 e9       	ldi	r25, 0x90	; 144
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	e6 d2       	rcall	.+1484   	; 0xab6 <printf>
     4ea:	ff e3       	ldi	r31, 0x3F	; 63
     4ec:	22 e4       	ldi	r18, 0x42	; 66
     4ee:	8f e0       	ldi	r24, 0x0F	; 15
     4f0:	f1 50       	subi	r31, 0x01	; 1
     4f2:	20 40       	sbci	r18, 0x00	; 0
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	e1 f7       	brne	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4fa:	00 00       	nop
		_delay_ms(1000);
		
		if(CBT_get_level() == false)
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	13 99       	sbic	0x02, 3	; 2
     50a:	c4 ce       	rjmp	.-632    	; 0x294 <__DATA_REGION_LENGTH__+0x94>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	68 ed       	ldi	r22, 0xD8	; 216
     510:	81 e4       	ldi	r24, 0x41	; 65
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	bf d0       	rcall	.+382    	; 0x694 <protected_write_io>
     516:	be ce       	rjmp	.-644    	; 0x294 <__DATA_REGION_LENGTH__+0x94>

00000518 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
     518:	e0 e0       	ldi	r30, 0x00	; 0
     51a:	f6 e0       	ldi	r31, 0x06	; 6
     51c:	80 e1       	ldi	r24, 0x10	; 16
     51e:	82 83       	std	Z+2, r24	; 0x02
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 83       	st	Z, r24
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	08 95       	ret

00000528 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     528:	e0 e0       	ldi	r30, 0x00	; 0
     52a:	f6 e0       	ldi	r31, 0x06	; 6
     52c:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 87       	std	Z+8, r24	; 0x08
     532:	08 95       	ret

00000534 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
     534:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f75b3>
}
     538:	81 70       	andi	r24, 0x01	; 1
     53a:	08 95       	ret

0000053c <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
     53c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f75b8>
     540:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f75b9>
}
     544:	08 95       	ret

00000546 <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
     546:	f0 df       	rcall	.-32     	; 0x528 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
     548:	f5 df       	rcall	.-22     	; 0x534 <ADC_0_is_conversion_done>
     54a:	88 23       	and	r24, r24
     54c:	e9 f3       	breq	.-6      	; 0x548 <ADC_0_get_conversion+0x2>
		;
	res = ADC_0_get_conversion_result();
     54e:	f6 df       	rcall	.-20     	; 0x53c <ADC_0_get_conversion_result>
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     550:	e0 e0       	ldi	r30, 0x00	; 0
     552:	f6 e0       	ldi	r31, 0x06	; 6
     554:	23 85       	ldd	r18, Z+11	; 0x0b
     556:	21 60       	ori	r18, 0x01	; 1
     558:	23 87       	std	Z+11, r18	; 0x0b
	return res;
}
     55a:	08 95       	ret

0000055c <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	08 95       	ret

00000560 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     560:	43 e0       	ldi	r20, 0x03	; 3
     562:	68 ed       	ldi	r22, 0xD8	; 216
     564:	81 e6       	ldi	r24, 0x61	; 97
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	95 d0       	rcall	.+298    	; 0x694 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	08 95       	ret

0000056e <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 95       	ret

00000572 <DAC_0_init>:
int8_t DAC_0_init()
{

	// DAC0.DATA = 0x0; /* DATA Register: 0x0 */

	DAC0.CTRLA = 1 << DAC_ENABLE_bp      /* DAC Enable: enabled */
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <payloadBufferStartByte+0x7f7628>
	             | 0 << DAC_OUTEN_bp     /* Output Buffer Enable: disabled */
	             | 0 << DAC_RUNSTDBY_bp; /* Run in Standby Mode: disabled */

	return 0;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	08 95       	ret

0000057c <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	08 c0       	rjmp	.+16     	; 0x590 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     580:	e8 2f       	mov	r30, r24
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	e0 5f       	subi	r30, 0xF0	; 240
     586:	fb 4f       	sbci	r31, 0xFB	; 251
     588:	90 81       	ld	r25, Z
     58a:	98 60       	ori	r25, 0x08	; 8
     58c:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     58e:	8f 5f       	subi	r24, 0xFF	; 255
     590:	88 30       	cpi	r24, 0x08	; 8
     592:	b0 f3       	brcs	.-20     	; 0x580 <mcu_init+0x4>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 c0       	rjmp	.+16     	; 0x5a8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     598:	e8 2f       	mov	r30, r24
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	e0 5d       	subi	r30, 0xD0	; 208
     59e:	fb 4f       	sbci	r31, 0xFB	; 251
     5a0:	90 81       	ld	r25, Z
     5a2:	98 60       	ori	r25, 0x08	; 8
     5a4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	88 30       	cpi	r24, 0x08	; 8
     5aa:	b0 f3       	brcs	.-20     	; 0x598 <mcu_init+0x1c>
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     5b0:	e8 2f       	mov	r30, r24
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	e0 5b       	subi	r30, 0xB0	; 176
     5b6:	fb 4f       	sbci	r31, 0xFB	; 251
     5b8:	90 81       	ld	r25, Z
     5ba:	98 60       	ori	r25, 0x08	; 8
     5bc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	88 30       	cpi	r24, 0x08	; 8
     5c2:	b0 f3       	brcs	.-20     	; 0x5b0 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     5c4:	08 95       	ret

000005c6 <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     5c6:	e6 e1       	ldi	r30, 0x16	; 22
     5c8:	f4 e0       	ldi	r31, 0x04	; 4
     5ca:	80 81       	ld	r24, Z
     5cc:	88 7f       	andi	r24, 0xF8	; 248
     5ce:	84 60       	ori	r24, 0x04	; 4
     5d0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     5d2:	80 81       	ld	r24, Z
     5d4:	87 7f       	andi	r24, 0xF7	; 247
     5d6:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     5d8:	e0 e3       	ldi	r30, 0x30	; 48
     5da:	f4 e0       	ldi	r31, 0x04	; 4
     5dc:	80 81       	ld	r24, Z
     5de:	88 7f       	andi	r24, 0xF8	; 248
     5e0:	84 60       	ori	r24, 0x04	; 4
     5e2:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     5e4:	80 81       	ld	r24, Z
     5e6:	87 7f       	andi	r24, 0xF7	; 247
     5e8:	80 83       	st	Z, r24
	// Disable digital input buffer
	SY_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	SY_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     5ea:	96 df       	rcall	.-212    	; 0x518 <ADC_0_init>
     5ec:	08 95       	ret

000005ee <USART_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     5ee:	80 b1       	in	r24, 0x00	; 0
     5f0:	8b 7f       	andi	r24, 0xFB	; 251
     5f2:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     5f4:	e2 e1       	ldi	r30, 0x12	; 18
     5f6:	f4 e0       	ldi	r31, 0x04	; 4
     5f8:	80 81       	ld	r24, Z
     5fa:	87 7f       	andi	r24, 0xF7	; 247
     5fc:	80 83       	st	Z, r24
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_USART0_bm;
     5fe:	e0 e0       	ldi	r30, 0x00	; 0
     600:	f2 e0       	ldi	r31, 0x02	; 2
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	81 60       	ori	r24, 0x01	; 1
     606:	81 83       	std	Z+1, r24	; 0x01
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     608:	81 b1       	in	r24, 0x01	; 1
     60a:	8d 7f       	andi	r24, 0xFD	; 253
     60c:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     60e:	80 b1       	in	r24, 0x00	; 0
     610:	82 60       	ori	r24, 0x02	; 2
     612:	80 b9       	out	0x00, r24	; 0
	    false);

	PA1_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_USART0_bm;
     614:	81 81       	ldd	r24, Z+1	; 0x01
     616:	81 60       	ori	r24, 0x01	; 1
     618:	81 83       	std	Z+1, r24	; 0x01

	USART_0_init();
     61a:	32 d2       	rcall	.+1124   	; 0xa80 <USART_0_init>
     61c:	08 95       	ret

0000061e <DAC_0_initialization>:

/* configure pins and initialize registers */
void DAC_0_initialization(void)
{

	DAC_0_init();
     61e:	a9 df       	rcall	.-174    	; 0x572 <DAC_0_init>
     620:	08 95       	ret

00000622 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     622:	ac df       	rcall	.-168    	; 0x57c <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     624:	80 b1       	in	r24, 0x00	; 0
     626:	87 7f       	andi	r24, 0xF7	; 247
     628:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     62a:	e3 e1       	ldi	r30, 0x13	; 19
     62c:	f4 e0       	ldi	r31, 0x04	; 4
     62e:	80 81       	ld	r24, Z
     630:	88 60       	ori	r24, 0x08	; 8
     632:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     634:	81 b1       	in	r24, 0x01	; 1
     636:	8f 77       	andi	r24, 0x7F	; 127
     638:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     63a:	80 b1       	in	r24, 0x00	; 0
     63c:	80 68       	ori	r24, 0x80	; 128
     63e:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     640:	84 b1       	in	r24, 0x04	; 4
     642:	8d 7f       	andi	r24, 0xFD	; 253
     644:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     646:	e1 e3       	ldi	r30, 0x31	; 49
     648:	f4 e0       	ldi	r31, 0x04	; 4
     64a:	80 81       	ld	r24, Z
     64c:	87 7f       	andi	r24, 0xF7	; 247
     64e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     650:	88 b1       	in	r24, 0x08	; 8
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     656:	e2 e5       	ldi	r30, 0x52	; 82
     658:	f4 e0       	ldi	r31, 0x04	; 4
     65a:	80 81       	ld	r24, Z
     65c:	88 60       	ori	r24, 0x08	; 8
     65e:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     660:	89 b1       	in	r24, 0x09	; 9
     662:	87 7f       	andi	r24, 0xF7	; 247
     664:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     666:	88 b1       	in	r24, 0x08	; 8
     668:	88 60       	ori	r24, 0x08	; 8
     66a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     66c:	89 b1       	in	r24, 0x09	; 9
     66e:	8f 7e       	andi	r24, 0xEF	; 239
     670:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     672:	88 b1       	in	r24, 0x08	; 8
     674:	80 61       	ori	r24, 0x10	; 16
     676:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     678:	89 b1       	in	r24, 0x09	; 9
     67a:	8f 7d       	andi	r24, 0xDF	; 223
     67c:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     67e:	88 b1       	in	r24, 0x08	; 8
     680:	80 62       	ori	r24, 0x20	; 32
     682:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	NRESET_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     684:	6d df       	rcall	.-294    	; 0x560 <CLKCTRL_init>

	ADC_0_initialization();
     686:	9f df       	rcall	.-194    	; 0x5c6 <ADC_0_initialization>

	USART_0_initialization();
     688:	b2 df       	rcall	.-156    	; 0x5ee <USART_0_initialization>

	DAC_0_initialization();
     68a:	c9 df       	rcall	.-110    	; 0x61e <DAC_0_initialization>

	CPUINT_init();
     68c:	70 df       	rcall	.-288    	; 0x56e <CPUINT_init>

	SLPCTRL_init();
     68e:	06 d0       	rcall	.+12     	; 0x69c <SLPCTRL_init>

	BOD_init();
     690:	65 df       	rcall	.-310    	; 0x55c <BOD_init>
     692:	08 95       	ret

00000694 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     694:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     696:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     698:	40 83       	st	Z, r20
	ret                             // Return to caller
     69a:	08 95       	ret

0000069c <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret

000006a0 <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     6a0:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     6a2:	11 c0       	rjmp	.+34     	; 0x6c6 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     6a4:	29 b1       	in	r18, 0x09	; 9
     6a6:	27 7f       	andi	r18, 0xF7	; 247
     6a8:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     6aa:	29 2f       	mov	r18, r25
     6ac:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     6ae:	21 f0       	breq	.+8      	; 0x6b8 <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     6b0:	29 b1       	in	r18, 0x09	; 9
     6b2:	20 61       	ori	r18, 0x10	; 16
     6b4:	29 b9       	out	0x09, r18	; 9
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     6b8:	29 b1       	in	r18, 0x09	; 9
     6ba:	2f 7e       	andi	r18, 0xEF	; 239
     6bc:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     6be:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     6c0:	29 b1       	in	r18, 0x09	; 9
     6c2:	28 60       	ori	r18, 0x08	; 8
     6c4:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     6c6:	91 11       	cpse	r25, r1
     6c8:	ed cf       	rjmp	.-38     	; 0x6a4 <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     6ca:	89 b1       	in	r24, 0x09	; 9
     6cc:	87 7f       	andi	r24, 0xF7	; 247
     6ce:	89 b9       	out	0x09, r24	; 9
     6d0:	08 95       	ret

000006d2 <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	6a 01       	movw	r12, r20
     6dc:	7b 01       	movw	r14, r22
	switch(instruction)
     6de:	88 23       	and	r24, r24
     6e0:	19 f0       	breq	.+6      	; 0x6e8 <SX1243Write+0x16>
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	21 f0       	breq	.+8      	; 0x6ee <SX1243Write+0x1c>
     6e6:	16 c0       	rjmp	.+44     	; 0x714 <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	da df       	rcall	.-76     	; 0x6a0 <SpiOut>
		break;
     6ec:	0a c0       	rjmp	.+20     	; 0x702 <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     6ee:	db 01       	movw	r26, r22
     6f0:	ca 01       	movw	r24, r20
     6f2:	88 27       	eor	r24, r24
     6f4:	99 27       	eor	r25, r25
     6f6:	a7 70       	andi	r26, 0x07	; 7
     6f8:	bb 27       	eor	r27, r27
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	88 61       	ori	r24, 0x18	; 24
     700:	cf df       	rcall	.-98     	; 0x6a0 <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     702:	8d 2d       	mov	r24, r13
     704:	cd df       	rcall	.-102    	; 0x6a0 <SpiOut>
	SpiOut(data & 0xFF);
     706:	8c 2d       	mov	r24, r12
     708:	cb df       	rcall	.-106    	; 0x6a0 <SpiOut>
     70a:	89 b1       	in	r24, 0x09	; 9
     70c:	8f 7e       	andi	r24, 0xEF	; 239
     70e:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	01 c0       	rjmp	.+2      	; 0x716 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     714:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	08 95       	ret

00000720 <SX1243Reset>:
     720:	89 b1       	in	r24, 0x09	; 9
     722:	8f 7d       	andi	r24, 0xDF	; 223
     724:	89 b9       	out	0x09, r24	; 9
     726:	83 ed       	ldi	r24, 0xD3	; 211
     728:	90 e3       	ldi	r25, 0x30	; 48
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <SX1243Reset+0xa>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <SX1243Reset+0x10>
     730:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     732:	89 b1       	in	r24, 0x09	; 9
     734:	80 62       	ori	r24, 0x20	; 32
     736:	89 b9       	out	0x09, r24	; 9
     738:	08 95       	ret

0000073a <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	4a c0       	rjmp	.+148    	; 0x7d2 <Sx1243ConvertBuffer+0x98>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80;
     73e:	9c 01       	movw	r18, r24
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	e0 91 d8 3e 	lds	r30, 0x3ED8	; 0x803ed8 <TxParam+0x13>
     750:	f0 91 d9 3e 	lds	r31, 0x3ED9	; 0x803ed9 <TxParam+0x14>
     754:	e8 0f       	add	r30, r24
     756:	f9 1f       	adc	r31, r25
     758:	40 81       	ld	r20, Z
     75a:	44 1f       	adc	r20, r20
     75c:	44 27       	eor	r20, r20
     75e:	44 1f       	adc	r20, r20
     760:	d9 01       	movw	r26, r18
     762:	ab 5b       	subi	r26, 0xBB	; 187
     764:	b1 4c       	sbci	r27, 0xC1	; 193
     766:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40;
     768:	40 81       	ld	r20, Z
     76a:	46 fb       	bst	r20, 6
     76c:	44 27       	eor	r20, r20
     76e:	40 f9       	bld	r20, 0
     770:	d9 01       	movw	r26, r18
     772:	aa 5b       	subi	r26, 0xBA	; 186
     774:	b1 4c       	sbci	r27, 0xC1	; 193
     776:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20;
     778:	40 81       	ld	r20, Z
     77a:	45 fb       	bst	r20, 5
     77c:	44 27       	eor	r20, r20
     77e:	40 f9       	bld	r20, 0
     780:	d9 01       	movw	r26, r18
     782:	a9 5b       	subi	r26, 0xB9	; 185
     784:	b1 4c       	sbci	r27, 0xC1	; 193
     786:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10;
     788:	40 81       	ld	r20, Z
     78a:	42 95       	swap	r20
     78c:	41 70       	andi	r20, 0x01	; 1
     78e:	d9 01       	movw	r26, r18
     790:	a8 5b       	subi	r26, 0xB8	; 184
     792:	b1 4c       	sbci	r27, 0xC1	; 193
     794:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
     796:	40 81       	ld	r20, Z
     798:	43 fb       	bst	r20, 3
     79a:	44 27       	eor	r20, r20
     79c:	40 f9       	bld	r20, 0
     79e:	d9 01       	movw	r26, r18
     7a0:	a7 5b       	subi	r26, 0xB7	; 183
     7a2:	b1 4c       	sbci	r27, 0xC1	; 193
     7a4:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
     7a6:	40 81       	ld	r20, Z
     7a8:	42 fb       	bst	r20, 2
     7aa:	44 27       	eor	r20, r20
     7ac:	40 f9       	bld	r20, 0
     7ae:	d9 01       	movw	r26, r18
     7b0:	a6 5b       	subi	r26, 0xB6	; 182
     7b2:	b1 4c       	sbci	r27, 0xC1	; 193
     7b4:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
     7b6:	40 81       	ld	r20, Z
     7b8:	46 95       	lsr	r20
     7ba:	41 70       	andi	r20, 0x01	; 1
     7bc:	d9 01       	movw	r26, r18
     7be:	a5 5b       	subi	r26, 0xB5	; 181
     7c0:	b1 4c       	sbci	r27, 0xC1	; 193
     7c2:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
     7c4:	40 81       	ld	r20, Z
     7c6:	41 70       	andi	r20, 0x01	; 1
     7c8:	f9 01       	movw	r30, r18
     7ca:	e4 5b       	subi	r30, 0xB4	; 180
     7cc:	f1 4c       	sbci	r31, 0xC1	; 193
     7ce:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     7d0:	01 96       	adiw	r24, 0x01	; 1
     7d2:	20 91 d7 3e 	lds	r18, 0x3ED7	; 0x803ed7 <TxParam+0x12>
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	82 17       	cp	r24, r18
     7da:	93 07       	cpc	r25, r19
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <Sx1243ConvertBuffer+0xa6>
     7de:	af cf       	rjmp	.-162    	; 0x73e <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}
     7e0:	08 95       	ret

000007e2 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
     7e2:	e5 ec       	ldi	r30, 0xC5	; 197
     7e4:	fe e3       	ldi	r31, 0x3E	; 62
     7e6:	83 8b       	std	Z+19, r24	; 0x13
     7e8:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
     7ea:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	80 93 42 3e 	sts	0x3E42, r24	; 0x803e42 <fastBufSize>
	Sx1243ConvertBuffer(0);
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	a2 df       	rcall	.-188    	; 0x73a <Sx1243ConvertBuffer>
	return SX_OK;
}
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	08 95       	ret

000007fa <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	8c 01       	movw	r16, r24
     806:	f6 2e       	mov	r15, r22
     808:	c4 2f       	mov	r28, r20
	SX1243Reset();
     80a:	8a df       	rcall	.-236    	; 0x720 <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
     80c:	e5 ec       	ldi	r30, 0xC5	; 197
     80e:	fe e3       	ldi	r31, 0x3E	; 62
     810:	10 8a       	std	Z+16, r1	; 0x10
     812:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
     814:	16 86       	std	Z+14, r1	; 0x0e
     816:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e2       	ldi	r25, 0x20	; 32
     81c:	84 87       	std	Z+12, r24	; 0x0c
     81e:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	98 e0       	ldi	r25, 0x08	; 8
     824:	82 87       	std	Z+10, r24	; 0x0a
     826:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
     828:	10 86       	std	Z+8, r1	; 0x08
     82a:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
     82c:	16 82       	std	Z+6, r1	; 0x06
     82e:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
     830:	84 e0       	ldi	r24, 0x04	; 4
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	84 83       	std	Z+4, r24	; 0x04
     836:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
     838:	87 e2       	ldi	r24, 0x27	; 39
     83a:	96 e6       	ldi	r25, 0x66	; 102
     83c:	a4 e0       	ldi	r26, 0x04	; 4
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	80 83       	st	Z, r24
     842:	91 83       	std	Z+1, r25	; 0x01
     844:	a2 83       	std	Z+2, r26	; 0x02
     846:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	98 e2       	ldi	r25, 0x28	; 40
     84c:	85 8b       	std	Z+21, r24	; 0x15
     84e:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
     850:	4c 2f       	mov	r20, r28
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	d8 01       	movw	r26, r16
     856:	a4 0f       	add	r26, r20
     858:	b5 1f       	adc	r27, r21
     85a:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1] ^ 
     85c:	9a 01       	movw	r18, r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	20 0f       	add	r18, r16
     864:	31 1f       	adc	r19, r17
						 PayloadBuffer[DataStartByte + 2];
     866:	4e 5f       	subi	r20, 0xFE	; 254
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	d8 01       	movw	r26, r16
     86c:	a4 0f       	add	r26, r20
     86e:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
     870:	e9 01       	movw	r28, r18
     872:	88 81       	ld	r24, Y
     874:	89 27       	eor	r24, r25
     876:	9c 91       	ld	r25, X
     878:	89 27       	eor	r24, r25
     87a:	9b ed       	ldi	r25, 0xDB	; 219
     87c:	89 27       	eor	r24, r25
     87e:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1] ^ 
						 PayloadBuffer[DataStartByte + 2];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
     880:	6f 2d       	mov	r22, r15
     882:	c8 01       	movw	r24, r16
     884:	ae df       	rcall	.-164    	; 0x7e2 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	08 95       	ret

00000894 <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
     894:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^ 
     896:	80 91 dc 3e 	lds	r24, 0x3EDC	; 0x803edc <TxParam+0x17>
					 buffer[0]		  ^ 
     89a:	50 81       	ld	r21, Z
					 buffer[1]		  ^ 
     89c:	41 81       	ldd	r20, Z+1	; 0x01
					 buffer[2]		  ^ 
     89e:	32 81       	ldd	r19, Z+2	; 0x02
					 buffer[3]		  ^ 
     8a0:	23 81       	ldd	r18, Z+3	; 0x03
					 buffer[4]		  ^ 
     8a2:	94 81       	ldd	r25, Z+4	; 0x04
					 buffer[5]);
     8a4:	65 81       	ldd	r22, Z+5	; 0x05
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^ 
     8a6:	85 27       	eor	r24, r21
     8a8:	84 27       	eor	r24, r20
     8aa:	83 27       	eor	r24, r19
     8ac:	82 27       	eor	r24, r18
     8ae:	89 27       	eor	r24, r25
					 buffer[1]		  ^ 
					 buffer[2]		  ^ 
					 buffer[3]		  ^ 
					 buffer[4]		  ^ 
					 buffer[5]);
}
     8b0:	86 27       	eor	r24, r22
     8b2:	08 95       	ret

000008b4 <SX1243Process>:

U8 SX1243Process(void)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;

	TxParam.Config |= 0x8000;
     8b8:	c5 ec       	ldi	r28, 0xC5	; 197
     8ba:	de e3       	ldi	r29, 0x3E	; 62
     8bc:	4d 89       	ldd	r20, Y+21	; 0x15
     8be:	5e 89       	ldd	r21, Y+22	; 0x16
     8c0:	50 68       	ori	r21, 0x80	; 128
     8c2:	4d 8b       	std	Y+21, r20	; 0x15
     8c4:	5e 8b       	std	Y+22, r21	; 0x16
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	02 df       	rcall	.-508    	; 0x6d2 <SX1243Write>
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
     8ce:	48 81       	ld	r20, Y
     8d0:	59 81       	ldd	r21, Y+1	; 0x01
     8d2:	6a 81       	ldd	r22, Y+2	; 0x02
     8d4:	7b 81       	ldd	r23, Y+3	; 0x03
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	fc de       	rcall	.-520    	; 0x6d2 <SX1243Write>
	TxParam.Config &= 0x7FFF;
     8da:	8d 89       	ldd	r24, Y+21	; 0x15
     8dc:	9e 89       	ldd	r25, Y+22	; 0x16
     8de:	9f 77       	andi	r25, 0x7F	; 127
     8e0:	8d 8b       	std	Y+21, r24	; 0x15
     8e2:	9e 8b       	std	Y+22, r25	; 0x16

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
     8e4:	80 91 58 90 	lds	r24, 0x9058	; 0x809058 <__bss_end+0x5175>
     8e8:	8d 5f       	subi	r24, 0xFD	; 253
     8ea:	27 df       	rcall	.-434    	; 0x73a <Sx1243ConvertBuffer>
}

U8 SX1243Process(void)
{
	U8 state = SX_OK;
	U16 j = 0;
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <SX1243Process+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	20 e1       	ldi	r18, 0x10	; 16
     8f4:	2a 95       	dec	r18
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <SX1243Process+0x40>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <SX1243Process+0x46>
	{
		_delay_us(10);
		j++;
     8fa:	01 96       	adiw	r24, 0x01	; 1
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     8fc:	52 99       	sbic	0x0a, 2	; 10
     8fe:	03 c0       	rjmp	.+6      	; 0x906 <SX1243Process+0x52>
     900:	8c 3d       	cpi	r24, 0xDC	; 220
     902:	91 05       	cpc	r25, r1
     904:	b0 f3       	brcs	.-20     	; 0x8f2 <SX1243Process+0x3e>
		_delay_us(10);
		j++;
	}
	
	
	if (j < TRANSMITTER_READY_TIMEOUT)
     906:	8c 3d       	cpi	r24, 0xDC	; 220
     908:	91 05       	cpc	r25, r1
     90a:	e8 f0       	brcs	.+58     	; 0x946 <SX1243Process+0x92>
     90c:	25 c0       	rjmp	.+74     	; 0x958 <SX1243Process+0xa4>
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
		{
			DATA_set_level(fastBuf[j]);
     90e:	fc 01       	movw	r30, r24
     910:	eb 5b       	subi	r30, 0xBB	; 187
     912:	f1 4c       	sbci	r31, 0xC1	; 193
     914:	20 81       	ld	r18, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     916:	22 23       	and	r18, r18
     918:	21 f0       	breq	.+8      	; 0x922 <SX1243Process+0x6e>
		VPORTC.OUT |= (1 << pin);
     91a:	29 b1       	in	r18, 0x09	; 9
     91c:	20 61       	ori	r18, 0x10	; 16
     91e:	29 b9       	out	0x09, r18	; 9
     920:	03 c0       	rjmp	.+6      	; 0x928 <SX1243Process+0x74>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     922:	29 b1       	in	r18, 0x09	; 9
     924:	2f 7e       	andi	r18, 0xEF	; 239
     926:	29 b9       	out	0x09, r18	; 9
     928:	2a e0       	ldi	r18, 0x0A	; 10
     92a:	2a 95       	dec	r18
     92c:	f1 f7       	brne	.-4      	; 0x92a <SX1243Process+0x76>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <SX1243Process+0x7c>
			_delay_us(6.4);
			if (!fastBuf[j])
     930:	fc 01       	movw	r30, r24
     932:	eb 5b       	subi	r30, 0xBB	; 187
     934:	f1 4c       	sbci	r31, 0xC1	; 193
     936:	20 81       	ld	r18, Z
     938:	21 11       	cpse	r18, r1
     93a:	03 c0       	rjmp	.+6      	; 0x942 <SX1243Process+0x8e>
			{
				_NOP();
     93c:	00 00       	nop
				_NOP();
     93e:	00 00       	nop
				_NOP();
     940:	00 00       	nop
			}
			j++;
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	02 c0       	rjmp	.+4      	; 0x94a <SX1243Process+0x96>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
     94a:	20 91 42 3e 	lds	r18, 0x3E42	; 0x803e42 <fastBufSize>
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	82 17       	cp	r24, r18
     952:	93 07       	cpc	r25, r19
     954:	e0 f2       	brcs	.-72     	; 0x90e <SX1243Process+0x5a>
     956:	03 c0       	rjmp	.+6      	; 0x95e <SX1243Process+0xaa>
		
		//FLASH_set_level(0);
	}
	else
	{
		SX1243Reset();
     958:	e3 de       	rcall	.-570    	; 0x720 <SX1243Reset>
		return SX_ERROR;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	09 c0       	rjmp	.+18     	; 0x970 <SX1243Process+0xbc>
	}
	
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     95e:	40 91 da 3e 	lds	r20, 0x3EDA	; 0x803eda <TxParam+0x15>
     962:	50 91 db 3e 	lds	r21, 0x3EDB	; 0x803edb <TxParam+0x16>
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	b2 de       	rcall	.-668    	; 0x6d2 <SX1243Write>
		
	return state;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <TOUCH_GetSensorValue>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     976:	91 b1       	in	r25, 0x01	; 1
     978:	9f 77       	andi	r25, 0x7F	; 127
     97a:	91 b9       	out	0x01, r25	; 1
uint16_t TOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	uint16_t var = 0;
	SHIELD_set_level(false);
	
	switch (touchPin)
     97c:	88 23       	and	r24, r24
     97e:	19 f0       	breq	.+6      	; 0x986 <TOUCH_GetSensorValue+0x10>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	f1 f1       	breq	.+124    	; 0xa00 <TOUCH_GetSensorValue+0x8a>
     984:	7a c0       	rjmp	.+244    	; 0xa7a <TOUCH_GetSensorValue+0x104>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     986:	66 23       	and	r22, r22
     988:	21 f0       	breq	.+8      	; 0x992 <TOUCH_GetSensorValue+0x1c>
		VPORTB.OUT |= (1 << pin);
     98a:	85 b1       	in	r24, 0x05	; 5
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	85 b9       	out	0x05, r24	; 5
     990:	03 c0       	rjmp	.+6      	; 0x998 <TOUCH_GetSensorValue+0x22>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     992:	85 b1       	in	r24, 0x05	; 5
     994:	8d 7f       	andi	r24, 0xFD	; 253
     996:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     998:	84 b1       	in	r24, 0x04	; 4
     99a:	82 60       	ori	r24, 0x02	; 2
     99c:	84 b9       	out	0x04, r24	; 4
	{
		case 0:
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f75ae>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     9a4:	61 30       	cpi	r22, 0x01	; 1
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <TOUCH_GetSensorValue+0x3a>
		VPORTA.OUT |= (1 << pin);
     9a8:	81 b1       	in	r24, 0x01	; 1
     9aa:	80 64       	ori	r24, 0x40	; 64
     9ac:	81 b9       	out	0x01, r24	; 1
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <TOUCH_GetSensorValue+0x40>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     9b0:	81 b1       	in	r24, 0x01	; 1
     9b2:	8f 7b       	andi	r24, 0xBF	; 191
     9b4:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     9b6:	80 b1       	in	r24, 0x00	; 0
     9b8:	80 64       	ori	r24, 0x40	; 64
     9ba:	80 b9       	out	0x00, r24	; 0
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	8a 95       	dec	r24
     9c0:	f1 f7       	brne	.-4      	; 0x9be <TOUCH_GetSensorValue+0x48>
     9c2:	00 00       	nop
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     9c4:	80 b1       	in	r24, 0x00	; 0
     9c6:	8f 7b       	andi	r24, 0xBF	; 191
     9c8:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     9ca:	e6 e1       	ldi	r30, 0x16	; 22
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	80 81       	ld	r24, Z
     9d0:	88 7f       	andi	r24, 0xF8	; 248
     9d2:	84 60       	ori	r24, 0x04	; 4
     9d4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     9d6:	80 81       	ld	r24, Z
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	80 83       	st	Z, r24
			SX_set_pull_mode(PORT_PULL_OFF);
			
			//ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;			
			//_delay_us(TRANSFER_DELAY);
			
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
     9dc:	86 e0       	ldi	r24, 0x06	; 6
     9de:	b3 dd       	rcall	.-1178   	; 0x546 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     9e0:	2a e0       	ldi	r18, 0x0A	; 10
     9e2:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f75ae>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     9e6:	24 b1       	in	r18, 0x04	; 4
     9e8:	2d 7f       	andi	r18, 0xFD	; 253
     9ea:	24 b9       	out	0x04, r18	; 4
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     9ec:	e1 e3       	ldi	r30, 0x31	; 49
     9ee:	f4 e0       	ldi	r31, 0x04	; 4
     9f0:	20 81       	ld	r18, Z
     9f2:	28 7f       	andi	r18, 0xF8	; 248
     9f4:	24 60       	ori	r18, 0x04	; 4
     9f6:	20 83       	st	Z, r18
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     9f8:	20 81       	ld	r18, Z
     9fa:	27 7f       	andi	r18, 0xF7	; 247
     9fc:	20 83       	st	Z, r18
			PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			PARTNER_set_pull_mode(PORT_PULL_OFF);
			//SX_set_level(true);
			//SX_set_dir(PORT_DIR_OUT);
			
			return var;
     9fe:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     a00:	66 23       	and	r22, r22
     a02:	21 f0       	breq	.+8      	; 0xa0c <TOUCH_GetSensorValue+0x96>
		VPORTB.OUT |= (1 << pin);
     a04:	85 b1       	in	r24, 0x05	; 5
     a06:	82 60       	ori	r24, 0x02	; 2
     a08:	85 b9       	out	0x05, r24	; 5
     a0a:	03 c0       	rjmp	.+6      	; 0xa12 <TOUCH_GetSensorValue+0x9c>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     a0c:	85 b1       	in	r24, 0x05	; 5
     a0e:	8d 7f       	andi	r24, 0xFD	; 253
     a10:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     a12:	84 b1       	in	r24, 0x04	; 4
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	84 b9       	out	0x04, r24	; 4
		break;
		
		case 1:			
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     a18:	8a e0       	ldi	r24, 0x0A	; 10
     a1a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f75ae>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     a1e:	61 30       	cpi	r22, 0x01	; 1
     a20:	21 f0       	breq	.+8      	; 0xa2a <TOUCH_GetSensorValue+0xb4>
		VPORTB.OUT |= (1 << pin);
     a22:	85 b1       	in	r24, 0x05	; 5
     a24:	81 60       	ori	r24, 0x01	; 1
     a26:	85 b9       	out	0x05, r24	; 5
     a28:	03 c0       	rjmp	.+6      	; 0xa30 <TOUCH_GetSensorValue+0xba>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     a2a:	85 b1       	in	r24, 0x05	; 5
     a2c:	8e 7f       	andi	r24, 0xFE	; 254
     a2e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     a30:	84 b1       	in	r24, 0x04	; 4
     a32:	81 60       	ori	r24, 0x01	; 1
     a34:	84 b9       	out	0x04, r24	; 4
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	8a 95       	dec	r24
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <TOUCH_GetSensorValue+0xc2>
     a3c:	00 00       	nop
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     a3e:	84 b1       	in	r24, 0x04	; 4
     a40:	8e 7f       	andi	r24, 0xFE	; 254
     a42:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a44:	e0 e3       	ldi	r30, 0x30	; 48
     a46:	f4 e0       	ldi	r31, 0x04	; 4
     a48:	80 81       	ld	r24, Z
     a4a:	88 7f       	andi	r24, 0xF8	; 248
     a4c:	84 60       	ori	r24, 0x04	; 4
     a4e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a50:	80 81       	ld	r24, Z
     a52:	87 7f       	andi	r24, 0xF7	; 247
     a54:	80 83       	st	Z, r24
			SY_set_pull_mode(PORT_PULL_OFF);
		
			//ADC0.MUXPOS = ADC_MUXPOS_AIN11_gc;
			//_delay_us(TRANSFER_DELAY);
		
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
     a56:	8b e0       	ldi	r24, 0x0B	; 11
     a58:	76 dd       	rcall	.-1300   	; 0x546 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     a5a:	2a e0       	ldi	r18, 0x0A	; 10
     a5c:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f75ae>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     a60:	24 b1       	in	r18, 0x04	; 4
     a62:	2d 7f       	andi	r18, 0xFD	; 253
     a64:	24 b9       	out	0x04, r18	; 4
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a66:	e1 e3       	ldi	r30, 0x31	; 49
     a68:	f4 e0       	ldi	r31, 0x04	; 4
     a6a:	20 81       	ld	r18, Z
     a6c:	28 7f       	andi	r18, 0xF8	; 248
     a6e:	24 60       	ori	r18, 0x04	; 4
     a70:	20 83       	st	Z, r18
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a72:	20 81       	ld	r18, Z
     a74:	27 7f       	andi	r18, 0xF7	; 247
     a76:	20 83       	st	Z, r18
			PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			PARTNER_set_pull_mode(PORT_PULL_OFF);
			//SY_set_level(true);
			//SY_set_dir(PORT_DIR_OUT);
		
			return var;
     a78:	08 95       	ret
		
		default:
		break;
	}
	
	return var;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
}
     a7e:	08 95       	ret

00000a80 <USART_0_init>:
uint8_t USART_0_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f8 e0       	ldi	r31, 0x08	; 8
     a84:	83 e2       	ldi	r24, 0x23	; 35
     a86:	98 e0       	ldi	r25, 0x08	; 8
     a88:	80 87       	std	Z+8, r24	; 0x08
     a8a:	91 87       	std	Z+9, r25	; 0x09
     a8c:	80 ec       	ldi	r24, 0xC0	; 192
     a8e:	86 83       	std	Z+6, r24	; 0x06
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	9e e3       	ldi	r25, 0x3E	; 62
     a94:	80 93 df 3e 	sts	0x3EDF, r24	; 0x803edf <__iob+0x2>
     a98:	90 93 e0 3e 	sts	0x3EE0, r25	; 0x803ee0 <__iob+0x3>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	08 95       	ret

00000aa0 <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART0.STATUS & USART_DREIF_bm))
     aa0:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <payloadBufferStartByte+0x7f77ac>
     aa4:	95 ff       	sbrs	r25, 5
     aa6:	fc cf       	rjmp	.-8      	; 0xaa0 <USART_0_write>
		;
	USART0.TXDATAL = data;
     aa8:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <payloadBufferStartByte+0x7f77aa>
     aac:	08 95       	ret

00000aae <USART_0_printCHAR>:

#if defined(__GNUC__)

int USART_0_printCHAR(char character, FILE *stream)
{
	USART_0_write(character);
     aae:	f8 df       	rcall	.-16     	; 0xaa0 <USART_0_write>
	return 0;
}
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	08 95       	ret

00000ab6 <printf>:
     ab6:	a0 e0       	ldi	r26, 0x00	; 0
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e0 e6       	ldi	r30, 0x60	; 96
     abc:	f5 e0       	ldi	r31, 0x05	; 5
     abe:	a0 c2       	rjmp	.+1344   	; 0x1000 <__prologue_saves__+0x20>
     ac0:	ae 01       	movw	r20, r28
     ac2:	4b 5f       	subi	r20, 0xFB	; 251
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	fa 01       	movw	r30, r20
     ac8:	61 91       	ld	r22, Z+
     aca:	71 91       	ld	r23, Z+
     acc:	af 01       	movw	r20, r30
     ace:	80 91 df 3e 	lds	r24, 0x3EDF	; 0x803edf <__iob+0x2>
     ad2:	90 91 e0 3e 	lds	r25, 0x3EE0	; 0x803ee0 <__iob+0x3>
     ad6:	02 d0       	rcall	.+4      	; 0xadc <vfprintf>
     ad8:	e2 e0       	ldi	r30, 0x02	; 2
     ada:	ab c2       	rjmp	.+1366   	; 0x1032 <__epilogue_restores__+0x20>

00000adc <vfprintf>:
     adc:	ab e0       	ldi	r26, 0x0B	; 11
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e3 e7       	ldi	r30, 0x73	; 115
     ae2:	f5 e0       	ldi	r31, 0x05	; 5
     ae4:	7d c2       	rjmp	.+1274   	; 0xfe0 <__prologue_saves__>
     ae6:	6c 01       	movw	r12, r24
     ae8:	7b 01       	movw	r14, r22
     aea:	8a 01       	movw	r16, r20
     aec:	fc 01       	movw	r30, r24
     aee:	16 82       	std	Z+6, r1	; 0x06
     af0:	17 82       	std	Z+7, r1	; 0x07
     af2:	83 81       	ldd	r24, Z+3	; 0x03
     af4:	81 ff       	sbrs	r24, 1
     af6:	bf c1       	rjmp	.+894    	; 0xe76 <vfprintf+0x39a>
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	3c 01       	movw	r6, r24
     afe:	f6 01       	movw	r30, r12
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	f7 01       	movw	r30, r14
     b04:	93 fd       	sbrc	r25, 3
     b06:	85 91       	lpm	r24, Z+
     b08:	93 ff       	sbrs	r25, 3
     b0a:	81 91       	ld	r24, Z+
     b0c:	7f 01       	movw	r14, r30
     b0e:	88 23       	and	r24, r24
     b10:	09 f4       	brne	.+2      	; 0xb14 <vfprintf+0x38>
     b12:	ad c1       	rjmp	.+858    	; 0xe6e <vfprintf+0x392>
     b14:	85 32       	cpi	r24, 0x25	; 37
     b16:	39 f4       	brne	.+14     	; 0xb26 <vfprintf+0x4a>
     b18:	93 fd       	sbrc	r25, 3
     b1a:	85 91       	lpm	r24, Z+
     b1c:	93 ff       	sbrs	r25, 3
     b1e:	81 91       	ld	r24, Z+
     b20:	7f 01       	movw	r14, r30
     b22:	85 32       	cpi	r24, 0x25	; 37
     b24:	21 f4       	brne	.+8      	; 0xb2e <vfprintf+0x52>
     b26:	b6 01       	movw	r22, r12
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	c0 d1       	rcall	.+896    	; 0xeac <fputc>
     b2c:	e8 cf       	rjmp	.-48     	; 0xafe <vfprintf+0x22>
     b2e:	91 2c       	mov	r9, r1
     b30:	21 2c       	mov	r2, r1
     b32:	31 2c       	mov	r3, r1
     b34:	ff e1       	ldi	r31, 0x1F	; 31
     b36:	f3 15       	cp	r31, r3
     b38:	d8 f0       	brcs	.+54     	; 0xb70 <vfprintf+0x94>
     b3a:	8b 32       	cpi	r24, 0x2B	; 43
     b3c:	79 f0       	breq	.+30     	; 0xb5c <vfprintf+0x80>
     b3e:	38 f4       	brcc	.+14     	; 0xb4e <vfprintf+0x72>
     b40:	80 32       	cpi	r24, 0x20	; 32
     b42:	79 f0       	breq	.+30     	; 0xb62 <vfprintf+0x86>
     b44:	83 32       	cpi	r24, 0x23	; 35
     b46:	a1 f4       	brne	.+40     	; 0xb70 <vfprintf+0x94>
     b48:	23 2d       	mov	r18, r3
     b4a:	20 61       	ori	r18, 0x10	; 16
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <vfprintf+0xac>
     b4e:	8d 32       	cpi	r24, 0x2D	; 45
     b50:	61 f0       	breq	.+24     	; 0xb6a <vfprintf+0x8e>
     b52:	80 33       	cpi	r24, 0x30	; 48
     b54:	69 f4       	brne	.+26     	; 0xb70 <vfprintf+0x94>
     b56:	23 2d       	mov	r18, r3
     b58:	21 60       	ori	r18, 0x01	; 1
     b5a:	16 c0       	rjmp	.+44     	; 0xb88 <vfprintf+0xac>
     b5c:	83 2d       	mov	r24, r3
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	38 2e       	mov	r3, r24
     b62:	e3 2d       	mov	r30, r3
     b64:	e4 60       	ori	r30, 0x04	; 4
     b66:	3e 2e       	mov	r3, r30
     b68:	2a c0       	rjmp	.+84     	; 0xbbe <vfprintf+0xe2>
     b6a:	f3 2d       	mov	r31, r3
     b6c:	f8 60       	ori	r31, 0x08	; 8
     b6e:	1d c0       	rjmp	.+58     	; 0xbaa <vfprintf+0xce>
     b70:	37 fc       	sbrc	r3, 7
     b72:	2d c0       	rjmp	.+90     	; 0xbce <vfprintf+0xf2>
     b74:	20 ed       	ldi	r18, 0xD0	; 208
     b76:	28 0f       	add	r18, r24
     b78:	2a 30       	cpi	r18, 0x0A	; 10
     b7a:	40 f0       	brcs	.+16     	; 0xb8c <vfprintf+0xb0>
     b7c:	8e 32       	cpi	r24, 0x2E	; 46
     b7e:	b9 f4       	brne	.+46     	; 0xbae <vfprintf+0xd2>
     b80:	36 fc       	sbrc	r3, 6
     b82:	75 c1       	rjmp	.+746    	; 0xe6e <vfprintf+0x392>
     b84:	23 2d       	mov	r18, r3
     b86:	20 64       	ori	r18, 0x40	; 64
     b88:	32 2e       	mov	r3, r18
     b8a:	19 c0       	rjmp	.+50     	; 0xbbe <vfprintf+0xe2>
     b8c:	36 fe       	sbrs	r3, 6
     b8e:	06 c0       	rjmp	.+12     	; 0xb9c <vfprintf+0xc0>
     b90:	8a e0       	ldi	r24, 0x0A	; 10
     b92:	98 9e       	mul	r9, r24
     b94:	20 0d       	add	r18, r0
     b96:	11 24       	eor	r1, r1
     b98:	92 2e       	mov	r9, r18
     b9a:	11 c0       	rjmp	.+34     	; 0xbbe <vfprintf+0xe2>
     b9c:	ea e0       	ldi	r30, 0x0A	; 10
     b9e:	2e 9e       	mul	r2, r30
     ba0:	20 0d       	add	r18, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	22 2e       	mov	r2, r18
     ba6:	f3 2d       	mov	r31, r3
     ba8:	f0 62       	ori	r31, 0x20	; 32
     baa:	3f 2e       	mov	r3, r31
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <vfprintf+0xe2>
     bae:	8c 36       	cpi	r24, 0x6C	; 108
     bb0:	21 f4       	brne	.+8      	; 0xbba <vfprintf+0xde>
     bb2:	83 2d       	mov	r24, r3
     bb4:	80 68       	ori	r24, 0x80	; 128
     bb6:	38 2e       	mov	r3, r24
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0xe2>
     bba:	88 36       	cpi	r24, 0x68	; 104
     bbc:	41 f4       	brne	.+16     	; 0xbce <vfprintf+0xf2>
     bbe:	f7 01       	movw	r30, r14
     bc0:	93 fd       	sbrc	r25, 3
     bc2:	85 91       	lpm	r24, Z+
     bc4:	93 ff       	sbrs	r25, 3
     bc6:	81 91       	ld	r24, Z+
     bc8:	7f 01       	movw	r14, r30
     bca:	81 11       	cpse	r24, r1
     bcc:	b3 cf       	rjmp	.-154    	; 0xb34 <vfprintf+0x58>
     bce:	98 2f       	mov	r25, r24
     bd0:	9f 7d       	andi	r25, 0xDF	; 223
     bd2:	95 54       	subi	r25, 0x45	; 69
     bd4:	93 30       	cpi	r25, 0x03	; 3
     bd6:	28 f4       	brcc	.+10     	; 0xbe2 <vfprintf+0x106>
     bd8:	0c 5f       	subi	r16, 0xFC	; 252
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	9f e3       	ldi	r25, 0x3F	; 63
     bde:	99 83       	std	Y+1, r25	; 0x01
     be0:	0d c0       	rjmp	.+26     	; 0xbfc <vfprintf+0x120>
     be2:	83 36       	cpi	r24, 0x63	; 99
     be4:	31 f0       	breq	.+12     	; 0xbf2 <vfprintf+0x116>
     be6:	83 37       	cpi	r24, 0x73	; 115
     be8:	71 f0       	breq	.+28     	; 0xc06 <vfprintf+0x12a>
     bea:	83 35       	cpi	r24, 0x53	; 83
     bec:	09 f0       	breq	.+2      	; 0xbf0 <vfprintf+0x114>
     bee:	55 c0       	rjmp	.+170    	; 0xc9a <vfprintf+0x1be>
     bf0:	20 c0       	rjmp	.+64     	; 0xc32 <vfprintf+0x156>
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 81       	ld	r24, Z
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	0e 5f       	subi	r16, 0xFE	; 254
     bfa:	1f 4f       	sbci	r17, 0xFF	; 255
     bfc:	88 24       	eor	r8, r8
     bfe:	83 94       	inc	r8
     c00:	91 2c       	mov	r9, r1
     c02:	53 01       	movw	r10, r6
     c04:	12 c0       	rjmp	.+36     	; 0xc2a <vfprintf+0x14e>
     c06:	28 01       	movw	r4, r16
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	4f 0e       	add	r4, r31
     c0c:	51 1c       	adc	r5, r1
     c0e:	f8 01       	movw	r30, r16
     c10:	a0 80       	ld	r10, Z
     c12:	b1 80       	ldd	r11, Z+1	; 0x01
     c14:	36 fe       	sbrs	r3, 6
     c16:	03 c0       	rjmp	.+6      	; 0xc1e <vfprintf+0x142>
     c18:	69 2d       	mov	r22, r9
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <vfprintf+0x146>
     c1e:	6f ef       	ldi	r22, 0xFF	; 255
     c20:	7f ef       	ldi	r23, 0xFF	; 255
     c22:	c5 01       	movw	r24, r10
     c24:	38 d1       	rcall	.+624    	; 0xe96 <strnlen>
     c26:	4c 01       	movw	r8, r24
     c28:	82 01       	movw	r16, r4
     c2a:	f3 2d       	mov	r31, r3
     c2c:	ff 77       	andi	r31, 0x7F	; 127
     c2e:	3f 2e       	mov	r3, r31
     c30:	15 c0       	rjmp	.+42     	; 0xc5c <vfprintf+0x180>
     c32:	28 01       	movw	r4, r16
     c34:	22 e0       	ldi	r18, 0x02	; 2
     c36:	42 0e       	add	r4, r18
     c38:	51 1c       	adc	r5, r1
     c3a:	f8 01       	movw	r30, r16
     c3c:	a0 80       	ld	r10, Z
     c3e:	b1 80       	ldd	r11, Z+1	; 0x01
     c40:	36 fe       	sbrs	r3, 6
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <vfprintf+0x16e>
     c44:	69 2d       	mov	r22, r9
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0x172>
     c4a:	6f ef       	ldi	r22, 0xFF	; 255
     c4c:	7f ef       	ldi	r23, 0xFF	; 255
     c4e:	c5 01       	movw	r24, r10
     c50:	17 d1       	rcall	.+558    	; 0xe80 <strnlen_P>
     c52:	4c 01       	movw	r8, r24
     c54:	f3 2d       	mov	r31, r3
     c56:	f0 68       	ori	r31, 0x80	; 128
     c58:	3f 2e       	mov	r3, r31
     c5a:	82 01       	movw	r16, r4
     c5c:	33 fc       	sbrc	r3, 3
     c5e:	19 c0       	rjmp	.+50     	; 0xc92 <vfprintf+0x1b6>
     c60:	82 2d       	mov	r24, r2
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	88 16       	cp	r8, r24
     c66:	99 06       	cpc	r9, r25
     c68:	a0 f4       	brcc	.+40     	; 0xc92 <vfprintf+0x1b6>
     c6a:	b6 01       	movw	r22, r12
     c6c:	80 e2       	ldi	r24, 0x20	; 32
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	1d d1       	rcall	.+570    	; 0xeac <fputc>
     c72:	2a 94       	dec	r2
     c74:	f5 cf       	rjmp	.-22     	; 0xc60 <vfprintf+0x184>
     c76:	f5 01       	movw	r30, r10
     c78:	37 fc       	sbrc	r3, 7
     c7a:	85 91       	lpm	r24, Z+
     c7c:	37 fe       	sbrs	r3, 7
     c7e:	81 91       	ld	r24, Z+
     c80:	5f 01       	movw	r10, r30
     c82:	b6 01       	movw	r22, r12
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	12 d1       	rcall	.+548    	; 0xeac <fputc>
     c88:	21 10       	cpse	r2, r1
     c8a:	2a 94       	dec	r2
     c8c:	21 e0       	ldi	r18, 0x01	; 1
     c8e:	82 1a       	sub	r8, r18
     c90:	91 08       	sbc	r9, r1
     c92:	81 14       	cp	r8, r1
     c94:	91 04       	cpc	r9, r1
     c96:	79 f7       	brne	.-34     	; 0xc76 <vfprintf+0x19a>
     c98:	e1 c0       	rjmp	.+450    	; 0xe5c <vfprintf+0x380>
     c9a:	84 36       	cpi	r24, 0x64	; 100
     c9c:	11 f0       	breq	.+4      	; 0xca2 <vfprintf+0x1c6>
     c9e:	89 36       	cpi	r24, 0x69	; 105
     ca0:	39 f5       	brne	.+78     	; 0xcf0 <vfprintf+0x214>
     ca2:	f8 01       	movw	r30, r16
     ca4:	37 fe       	sbrs	r3, 7
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <vfprintf+0x1da>
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	0c 5f       	subi	r16, 0xFC	; 252
     cb2:	1f 4f       	sbci	r17, 0xFF	; 255
     cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <vfprintf+0x1ea>
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	07 2e       	mov	r0, r23
     cbc:	00 0c       	add	r0, r0
     cbe:	88 0b       	sbc	r24, r24
     cc0:	99 0b       	sbc	r25, r25
     cc2:	0e 5f       	subi	r16, 0xFE	; 254
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	f3 2d       	mov	r31, r3
     cc8:	ff 76       	andi	r31, 0x6F	; 111
     cca:	3f 2e       	mov	r3, r31
     ccc:	97 ff       	sbrs	r25, 7
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <vfprintf+0x206>
     cd0:	90 95       	com	r25
     cd2:	80 95       	com	r24
     cd4:	70 95       	com	r23
     cd6:	61 95       	neg	r22
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	8f 4f       	sbci	r24, 0xFF	; 255
     cdc:	9f 4f       	sbci	r25, 0xFF	; 255
     cde:	f0 68       	ori	r31, 0x80	; 128
     ce0:	3f 2e       	mov	r3, r31
     ce2:	2a e0       	ldi	r18, 0x0A	; 10
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	a3 01       	movw	r20, r6
     ce8:	1d d1       	rcall	.+570    	; 0xf24 <__ultoa_invert>
     cea:	88 2e       	mov	r8, r24
     cec:	86 18       	sub	r8, r6
     cee:	44 c0       	rjmp	.+136    	; 0xd78 <vfprintf+0x29c>
     cf0:	85 37       	cpi	r24, 0x75	; 117
     cf2:	31 f4       	brne	.+12     	; 0xd00 <vfprintf+0x224>
     cf4:	23 2d       	mov	r18, r3
     cf6:	2f 7e       	andi	r18, 0xEF	; 239
     cf8:	b2 2e       	mov	r11, r18
     cfa:	2a e0       	ldi	r18, 0x0A	; 10
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	25 c0       	rjmp	.+74     	; 0xd4a <vfprintf+0x26e>
     d00:	93 2d       	mov	r25, r3
     d02:	99 7f       	andi	r25, 0xF9	; 249
     d04:	b9 2e       	mov	r11, r25
     d06:	8f 36       	cpi	r24, 0x6F	; 111
     d08:	c1 f0       	breq	.+48     	; 0xd3a <vfprintf+0x25e>
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <vfprintf+0x236>
     d0c:	88 35       	cpi	r24, 0x58	; 88
     d0e:	79 f0       	breq	.+30     	; 0xd2e <vfprintf+0x252>
     d10:	ae c0       	rjmp	.+348    	; 0xe6e <vfprintf+0x392>
     d12:	80 37       	cpi	r24, 0x70	; 112
     d14:	19 f0       	breq	.+6      	; 0xd1c <vfprintf+0x240>
     d16:	88 37       	cpi	r24, 0x78	; 120
     d18:	21 f0       	breq	.+8      	; 0xd22 <vfprintf+0x246>
     d1a:	a9 c0       	rjmp	.+338    	; 0xe6e <vfprintf+0x392>
     d1c:	e9 2f       	mov	r30, r25
     d1e:	e0 61       	ori	r30, 0x10	; 16
     d20:	be 2e       	mov	r11, r30
     d22:	b4 fe       	sbrs	r11, 4
     d24:	0d c0       	rjmp	.+26     	; 0xd40 <vfprintf+0x264>
     d26:	fb 2d       	mov	r31, r11
     d28:	f4 60       	ori	r31, 0x04	; 4
     d2a:	bf 2e       	mov	r11, r31
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <vfprintf+0x264>
     d2e:	34 fe       	sbrs	r3, 4
     d30:	0a c0       	rjmp	.+20     	; 0xd46 <vfprintf+0x26a>
     d32:	29 2f       	mov	r18, r25
     d34:	26 60       	ori	r18, 0x06	; 6
     d36:	b2 2e       	mov	r11, r18
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x26a>
     d3a:	28 e0       	ldi	r18, 0x08	; 8
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <vfprintf+0x26e>
     d40:	20 e1       	ldi	r18, 0x10	; 16
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x26e>
     d46:	20 e1       	ldi	r18, 0x10	; 16
     d48:	32 e0       	ldi	r19, 0x02	; 2
     d4a:	f8 01       	movw	r30, r16
     d4c:	b7 fe       	sbrs	r11, 7
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <vfprintf+0x282>
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	0c 5f       	subi	r16, 0xFC	; 252
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <vfprintf+0x28e>
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 5f       	subi	r16, 0xFE	; 254
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	a3 01       	movw	r20, r6
     d6c:	db d0       	rcall	.+438    	; 0xf24 <__ultoa_invert>
     d6e:	88 2e       	mov	r8, r24
     d70:	86 18       	sub	r8, r6
     d72:	fb 2d       	mov	r31, r11
     d74:	ff 77       	andi	r31, 0x7F	; 127
     d76:	3f 2e       	mov	r3, r31
     d78:	36 fe       	sbrs	r3, 6
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <vfprintf+0x2ba>
     d7c:	23 2d       	mov	r18, r3
     d7e:	2e 7f       	andi	r18, 0xFE	; 254
     d80:	a2 2e       	mov	r10, r18
     d82:	89 14       	cp	r8, r9
     d84:	58 f4       	brcc	.+22     	; 0xd9c <vfprintf+0x2c0>
     d86:	34 fe       	sbrs	r3, 4
     d88:	0b c0       	rjmp	.+22     	; 0xda0 <vfprintf+0x2c4>
     d8a:	32 fc       	sbrc	r3, 2
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <vfprintf+0x2c4>
     d8e:	83 2d       	mov	r24, r3
     d90:	8e 7e       	andi	r24, 0xEE	; 238
     d92:	a8 2e       	mov	r10, r24
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <vfprintf+0x2c4>
     d96:	b8 2c       	mov	r11, r8
     d98:	a3 2c       	mov	r10, r3
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <vfprintf+0x2c6>
     d9c:	b8 2c       	mov	r11, r8
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <vfprintf+0x2c6>
     da0:	b9 2c       	mov	r11, r9
     da2:	a4 fe       	sbrs	r10, 4
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <vfprintf+0x2e8>
     da6:	fe 01       	movw	r30, r28
     da8:	e8 0d       	add	r30, r8
     daa:	f1 1d       	adc	r31, r1
     dac:	80 81       	ld	r24, Z
     dae:	80 33       	cpi	r24, 0x30	; 48
     db0:	21 f4       	brne	.+8      	; 0xdba <vfprintf+0x2de>
     db2:	9a 2d       	mov	r25, r10
     db4:	99 7e       	andi	r25, 0xE9	; 233
     db6:	a9 2e       	mov	r10, r25
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <vfprintf+0x2f0>
     dba:	a2 fe       	sbrs	r10, 2
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0x2ee>
     dbe:	b3 94       	inc	r11
     dc0:	b3 94       	inc	r11
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <vfprintf+0x2f0>
     dc4:	8a 2d       	mov	r24, r10
     dc6:	86 78       	andi	r24, 0x86	; 134
     dc8:	09 f0       	breq	.+2      	; 0xdcc <vfprintf+0x2f0>
     dca:	b3 94       	inc	r11
     dcc:	a3 fc       	sbrc	r10, 3
     dce:	10 c0       	rjmp	.+32     	; 0xdf0 <vfprintf+0x314>
     dd0:	a0 fe       	sbrs	r10, 0
     dd2:	06 c0       	rjmp	.+12     	; 0xde0 <vfprintf+0x304>
     dd4:	b2 14       	cp	r11, r2
     dd6:	80 f4       	brcc	.+32     	; 0xdf8 <vfprintf+0x31c>
     dd8:	28 0c       	add	r2, r8
     dda:	92 2c       	mov	r9, r2
     ddc:	9b 18       	sub	r9, r11
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x31e>
     de0:	b2 14       	cp	r11, r2
     de2:	58 f4       	brcc	.+22     	; 0xdfa <vfprintf+0x31e>
     de4:	b6 01       	movw	r22, r12
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	60 d0       	rcall	.+192    	; 0xeac <fputc>
     dec:	b3 94       	inc	r11
     dee:	f8 cf       	rjmp	.-16     	; 0xde0 <vfprintf+0x304>
     df0:	b2 14       	cp	r11, r2
     df2:	18 f4       	brcc	.+6      	; 0xdfa <vfprintf+0x31e>
     df4:	2b 18       	sub	r2, r11
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x320>
     df8:	98 2c       	mov	r9, r8
     dfa:	21 2c       	mov	r2, r1
     dfc:	a4 fe       	sbrs	r10, 4
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <vfprintf+0x342>
     e00:	b6 01       	movw	r22, r12
     e02:	80 e3       	ldi	r24, 0x30	; 48
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	52 d0       	rcall	.+164    	; 0xeac <fputc>
     e08:	a2 fe       	sbrs	r10, 2
     e0a:	16 c0       	rjmp	.+44     	; 0xe38 <vfprintf+0x35c>
     e0c:	a1 fc       	sbrc	r10, 1
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <vfprintf+0x33a>
     e10:	88 e7       	ldi	r24, 0x78	; 120
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <vfprintf+0x33e>
     e16:	88 e5       	ldi	r24, 0x58	; 88
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	b6 01       	movw	r22, r12
     e1c:	0c c0       	rjmp	.+24     	; 0xe36 <vfprintf+0x35a>
     e1e:	8a 2d       	mov	r24, r10
     e20:	86 78       	andi	r24, 0x86	; 134
     e22:	51 f0       	breq	.+20     	; 0xe38 <vfprintf+0x35c>
     e24:	a1 fe       	sbrs	r10, 1
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <vfprintf+0x350>
     e28:	8b e2       	ldi	r24, 0x2B	; 43
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <vfprintf+0x352>
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	a7 fc       	sbrc	r10, 7
     e30:	8d e2       	ldi	r24, 0x2D	; 45
     e32:	b6 01       	movw	r22, r12
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	3a d0       	rcall	.+116    	; 0xeac <fputc>
     e38:	89 14       	cp	r8, r9
     e3a:	30 f4       	brcc	.+12     	; 0xe48 <vfprintf+0x36c>
     e3c:	b6 01       	movw	r22, r12
     e3e:	80 e3       	ldi	r24, 0x30	; 48
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	34 d0       	rcall	.+104    	; 0xeac <fputc>
     e44:	9a 94       	dec	r9
     e46:	f8 cf       	rjmp	.-16     	; 0xe38 <vfprintf+0x35c>
     e48:	8a 94       	dec	r8
     e4a:	f3 01       	movw	r30, r6
     e4c:	e8 0d       	add	r30, r8
     e4e:	f1 1d       	adc	r31, r1
     e50:	80 81       	ld	r24, Z
     e52:	b6 01       	movw	r22, r12
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	2a d0       	rcall	.+84     	; 0xeac <fputc>
     e58:	81 10       	cpse	r8, r1
     e5a:	f6 cf       	rjmp	.-20     	; 0xe48 <vfprintf+0x36c>
     e5c:	22 20       	and	r2, r2
     e5e:	09 f4       	brne	.+2      	; 0xe62 <vfprintf+0x386>
     e60:	4e ce       	rjmp	.-868    	; 0xafe <vfprintf+0x22>
     e62:	b6 01       	movw	r22, r12
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	21 d0       	rcall	.+66     	; 0xeac <fputc>
     e6a:	2a 94       	dec	r2
     e6c:	f7 cf       	rjmp	.-18     	; 0xe5c <vfprintf+0x380>
     e6e:	f6 01       	movw	r30, r12
     e70:	86 81       	ldd	r24, Z+6	; 0x06
     e72:	97 81       	ldd	r25, Z+7	; 0x07
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x39e>
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	9f ef       	ldi	r25, 0xFF	; 255
     e7a:	2b 96       	adiw	r28, 0x0b	; 11
     e7c:	e2 e1       	ldi	r30, 0x12	; 18
     e7e:	c9 c0       	rjmp	.+402    	; 0x1012 <__epilogue_restores__>

00000e80 <strnlen_P>:
     e80:	fc 01       	movw	r30, r24
     e82:	05 90       	lpm	r0, Z+
     e84:	61 50       	subi	r22, 0x01	; 1
     e86:	70 40       	sbci	r23, 0x00	; 0
     e88:	01 10       	cpse	r0, r1
     e8a:	d8 f7       	brcc	.-10     	; 0xe82 <strnlen_P+0x2>
     e8c:	80 95       	com	r24
     e8e:	90 95       	com	r25
     e90:	8e 0f       	add	r24, r30
     e92:	9f 1f       	adc	r25, r31
     e94:	08 95       	ret

00000e96 <strnlen>:
     e96:	fc 01       	movw	r30, r24
     e98:	61 50       	subi	r22, 0x01	; 1
     e9a:	70 40       	sbci	r23, 0x00	; 0
     e9c:	01 90       	ld	r0, Z+
     e9e:	01 10       	cpse	r0, r1
     ea0:	d8 f7       	brcc	.-10     	; 0xe98 <strnlen+0x2>
     ea2:	80 95       	com	r24
     ea4:	90 95       	com	r25
     ea6:	8e 0f       	add	r24, r30
     ea8:	9f 1f       	adc	r25, r31
     eaa:	08 95       	ret

00000eac <fputc>:
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	fb 01       	movw	r30, r22
     eb6:	23 81       	ldd	r18, Z+3	; 0x03
     eb8:	21 fd       	sbrc	r18, 1
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <fputc+0x16>
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	9f ef       	ldi	r25, 0xFF	; 255
     ec0:	2c c0       	rjmp	.+88     	; 0xf1a <fputc+0x6e>
     ec2:	22 ff       	sbrs	r18, 2
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <fputc+0x46>
     ec6:	46 81       	ldd	r20, Z+6	; 0x06
     ec8:	57 81       	ldd	r21, Z+7	; 0x07
     eca:	24 81       	ldd	r18, Z+4	; 0x04
     ecc:	35 81       	ldd	r19, Z+5	; 0x05
     ece:	42 17       	cp	r20, r18
     ed0:	53 07       	cpc	r21, r19
     ed2:	44 f4       	brge	.+16     	; 0xee4 <fputc+0x38>
     ed4:	a0 81       	ld	r26, Z
     ed6:	b1 81       	ldd	r27, Z+1	; 0x01
     ed8:	9d 01       	movw	r18, r26
     eda:	2f 5f       	subi	r18, 0xFF	; 255
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	20 83       	st	Z, r18
     ee0:	31 83       	std	Z+1, r19	; 0x01
     ee2:	8c 93       	st	X, r24
     ee4:	26 81       	ldd	r18, Z+6	; 0x06
     ee6:	37 81       	ldd	r19, Z+7	; 0x07
     ee8:	2f 5f       	subi	r18, 0xFF	; 255
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	26 83       	std	Z+6, r18	; 0x06
     eee:	37 83       	std	Z+7, r19	; 0x07
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <fputc+0x6e>
     ef2:	8b 01       	movw	r16, r22
     ef4:	ec 01       	movw	r28, r24
     ef6:	fb 01       	movw	r30, r22
     ef8:	00 84       	ldd	r0, Z+8	; 0x08
     efa:	f1 85       	ldd	r31, Z+9	; 0x09
     efc:	e0 2d       	mov	r30, r0
     efe:	09 95       	icall
     f00:	89 2b       	or	r24, r25
     f02:	e1 f6       	brne	.-72     	; 0xebc <fputc+0x10>
     f04:	d8 01       	movw	r26, r16
     f06:	16 96       	adiw	r26, 0x06	; 6
     f08:	8d 91       	ld	r24, X+
     f0a:	9c 91       	ld	r25, X
     f0c:	17 97       	sbiw	r26, 0x07	; 7
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	16 96       	adiw	r26, 0x06	; 6
     f12:	8d 93       	st	X+, r24
     f14:	9c 93       	st	X, r25
     f16:	17 97       	sbiw	r26, 0x07	; 7
     f18:	ce 01       	movw	r24, r28
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <__ultoa_invert>:
     f24:	fa 01       	movw	r30, r20
     f26:	aa 27       	eor	r26, r26
     f28:	28 30       	cpi	r18, 0x08	; 8
     f2a:	51 f1       	breq	.+84     	; 0xf80 <__ultoa_invert+0x5c>
     f2c:	20 31       	cpi	r18, 0x10	; 16
     f2e:	81 f1       	breq	.+96     	; 0xf90 <__ultoa_invert+0x6c>
     f30:	e8 94       	clt
     f32:	6f 93       	push	r22
     f34:	6e 7f       	andi	r22, 0xFE	; 254
     f36:	6e 5f       	subi	r22, 0xFE	; 254
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	8f 4f       	sbci	r24, 0xFF	; 255
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	af 4f       	sbci	r26, 0xFF	; 255
     f40:	b1 e0       	ldi	r27, 0x01	; 1
     f42:	3e d0       	rcall	.+124    	; 0xfc0 <__ultoa_invert+0x9c>
     f44:	b4 e0       	ldi	r27, 0x04	; 4
     f46:	3c d0       	rcall	.+120    	; 0xfc0 <__ultoa_invert+0x9c>
     f48:	67 0f       	add	r22, r23
     f4a:	78 1f       	adc	r23, r24
     f4c:	89 1f       	adc	r24, r25
     f4e:	9a 1f       	adc	r25, r26
     f50:	a1 1d       	adc	r26, r1
     f52:	68 0f       	add	r22, r24
     f54:	79 1f       	adc	r23, r25
     f56:	8a 1f       	adc	r24, r26
     f58:	91 1d       	adc	r25, r1
     f5a:	a1 1d       	adc	r26, r1
     f5c:	6a 0f       	add	r22, r26
     f5e:	71 1d       	adc	r23, r1
     f60:	81 1d       	adc	r24, r1
     f62:	91 1d       	adc	r25, r1
     f64:	a1 1d       	adc	r26, r1
     f66:	20 d0       	rcall	.+64     	; 0xfa8 <__ultoa_invert+0x84>
     f68:	09 f4       	brne	.+2      	; 0xf6c <__ultoa_invert+0x48>
     f6a:	68 94       	set
     f6c:	3f 91       	pop	r19
     f6e:	2a e0       	ldi	r18, 0x0A	; 10
     f70:	26 9f       	mul	r18, r22
     f72:	11 24       	eor	r1, r1
     f74:	30 19       	sub	r19, r0
     f76:	30 5d       	subi	r19, 0xD0	; 208
     f78:	31 93       	st	Z+, r19
     f7a:	de f6       	brtc	.-74     	; 0xf32 <__ultoa_invert+0xe>
     f7c:	cf 01       	movw	r24, r30
     f7e:	08 95       	ret
     f80:	46 2f       	mov	r20, r22
     f82:	47 70       	andi	r20, 0x07	; 7
     f84:	40 5d       	subi	r20, 0xD0	; 208
     f86:	41 93       	st	Z+, r20
     f88:	b3 e0       	ldi	r27, 0x03	; 3
     f8a:	0f d0       	rcall	.+30     	; 0xfaa <__ultoa_invert+0x86>
     f8c:	c9 f7       	brne	.-14     	; 0xf80 <__ultoa_invert+0x5c>
     f8e:	f6 cf       	rjmp	.-20     	; 0xf7c <__ultoa_invert+0x58>
     f90:	46 2f       	mov	r20, r22
     f92:	4f 70       	andi	r20, 0x0F	; 15
     f94:	40 5d       	subi	r20, 0xD0	; 208
     f96:	4a 33       	cpi	r20, 0x3A	; 58
     f98:	18 f0       	brcs	.+6      	; 0xfa0 <__ultoa_invert+0x7c>
     f9a:	49 5d       	subi	r20, 0xD9	; 217
     f9c:	31 fd       	sbrc	r19, 1
     f9e:	40 52       	subi	r20, 0x20	; 32
     fa0:	41 93       	st	Z+, r20
     fa2:	02 d0       	rcall	.+4      	; 0xfa8 <__ultoa_invert+0x84>
     fa4:	a9 f7       	brne	.-22     	; 0xf90 <__ultoa_invert+0x6c>
     fa6:	ea cf       	rjmp	.-44     	; 0xf7c <__ultoa_invert+0x58>
     fa8:	b4 e0       	ldi	r27, 0x04	; 4
     faa:	a6 95       	lsr	r26
     fac:	97 95       	ror	r25
     fae:	87 95       	ror	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	ba 95       	dec	r27
     fb6:	c9 f7       	brne	.-14     	; 0xfaa <__ultoa_invert+0x86>
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	61 05       	cpc	r22, r1
     fbc:	71 05       	cpc	r23, r1
     fbe:	08 95       	ret
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	0a 2e       	mov	r0, r26
     fc6:	06 94       	lsr	r0
     fc8:	57 95       	ror	r21
     fca:	47 95       	ror	r20
     fcc:	37 95       	ror	r19
     fce:	27 95       	ror	r18
     fd0:	ba 95       	dec	r27
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <__ultoa_invert+0xa2>
     fd4:	62 0f       	add	r22, r18
     fd6:	73 1f       	adc	r23, r19
     fd8:	84 1f       	adc	r24, r20
     fda:	95 1f       	adc	r25, r21
     fdc:	a0 1d       	adc	r26, r0
     fde:	08 95       	ret

00000fe0 <__prologue_saves__>:
     fe0:	2f 92       	push	r2
     fe2:	3f 92       	push	r3
     fe4:	4f 92       	push	r4
     fe6:	5f 92       	push	r5
     fe8:	6f 92       	push	r6
     fea:	7f 92       	push	r7
     fec:	8f 92       	push	r8
     fee:	9f 92       	push	r9
     ff0:	af 92       	push	r10
     ff2:	bf 92       	push	r11
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	ca 1b       	sub	r28, r26
    100a:	db 0b       	sbc	r29, r27
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	09 94       	ijmp

00001012 <__epilogue_restores__>:
    1012:	2a 88       	ldd	r2, Y+18	; 0x12
    1014:	39 88       	ldd	r3, Y+17	; 0x11
    1016:	48 88       	ldd	r4, Y+16	; 0x10
    1018:	5f 84       	ldd	r5, Y+15	; 0x0f
    101a:	6e 84       	ldd	r6, Y+14	; 0x0e
    101c:	7d 84       	ldd	r7, Y+13	; 0x0d
    101e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1020:	9b 84       	ldd	r9, Y+11	; 0x0b
    1022:	aa 84       	ldd	r10, Y+10	; 0x0a
    1024:	b9 84       	ldd	r11, Y+9	; 0x09
    1026:	c8 84       	ldd	r12, Y+8	; 0x08
    1028:	df 80       	ldd	r13, Y+7	; 0x07
    102a:	ee 80       	ldd	r14, Y+6	; 0x06
    102c:	fd 80       	ldd	r15, Y+5	; 0x05
    102e:	0c 81       	ldd	r16, Y+4	; 0x04
    1030:	1b 81       	ldd	r17, Y+3	; 0x03
    1032:	aa 81       	ldd	r26, Y+2	; 0x02
    1034:	b9 81       	ldd	r27, Y+1	; 0x01
    1036:	ce 0f       	add	r28, r30
    1038:	d1 1d       	adc	r29, r1
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	ed 01       	movw	r28, r26
    1040:	08 95       	ret

00001042 <_exit>:
    1042:	f8 94       	cli

00001044 <__stop_program>:
    1044:	ff cf       	rjmp	.-2      	; 0x1044 <__stop_program>
