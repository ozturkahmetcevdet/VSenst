
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00803e00  0000135d  00001411  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000135c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  0000935c  0000135c  00001410  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000a1  00803e42  00803e42  00001453  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b8  00000000  00000000  000014c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007271  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000028ea  00000000  00000000  000089e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f95  00000000  00000000  0000b2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000049c  00000000  00000000  0000d268  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022e1  00000000  00000000  0000d704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f5d  00000000  00000000  0000f9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001e0  00000000  00000000  00011942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	ed e5       	ldi	r30, 0x5D	; 93
      48:	f3 e1       	ldi	r31, 0x13	; 19
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a2 34       	cpi	r26, 0x42	; 66
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a2 e4       	ldi	r26, 0x42	; 66
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a3 3e       	cpi	r26, 0xE3	; 227
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	29 d0       	rcall	.+82     	; 0xba <main>
      68:	77 c9       	rjmp	.-3346   	; 0xfffff358 <__eeprom_end+0xff7ef358>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	62 d4       	rcall	.+2244   	; 0x932 <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
	/* Insert your PIT interrupt handling code here */

	/* The interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6df7>
}
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:

ISR(PORTA_PORT_vect)
{
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
	PORTA.INTFLAGS = PORT_INT_gm;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f70ad>
}
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <ConfigPIT>:

uint8_t sleepTimeSequence = T_2048;

void ConfigPIT(uint8_t timeSequence)
{
	RTC.PITCTRLA = timeSequence 
      ac:	81 60       	ori	r24, 0x01	; 1
      ae:	e0 e4       	ldi	r30, 0x40	; 64
      b0:	f1 e0       	ldi	r31, 0x01	; 1
      b2:	80 8b       	std	Z+16, r24	; 0x10
	| 1 << RTC_PITEN_bp;
	RTC.PITINTFLAGS = RTC_PI_bm;
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	83 8b       	std	Z+19, r24	; 0x13
      b8:	08 95       	ret

000000ba <main>:
}

int main(void)
{
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	12 c0       	rjmp	.+36     	; 0xe2 <main+0x28>
	case PORT_DIR_OFF:
		/*/ should activate the pullup for power saving
		  but a bit costly to do it here */
		{
			for (uint8_t i = 0; i < 8; i++) {
				if (mask & 1 << i) {
      be:	2f ef       	ldi	r18, 0xFF	; 255
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	08 2e       	mov	r0, r24
      c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x10>
      c6:	35 95       	asr	r19
      c8:	27 95       	ror	r18
      ca:	0a 94       	dec	r0
      cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0xc>
      ce:	20 ff       	sbrs	r18, 0
      d0:	07 c0       	rjmp	.+14     	; 0xe0 <main+0x26>
					*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
      d2:	e8 2f       	mov	r30, r24
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	e0 5f       	subi	r30, 0xF0	; 240
      d8:	fb 4f       	sbci	r31, 0xFB	; 251
      da:	90 81       	ld	r25, Z
      dc:	98 60       	ori	r25, 0x08	; 8
      de:	90 83       	st	Z, r25
		break;
	case PORT_DIR_OFF:
		/*/ should activate the pullup for power saving
		  but a bit costly to do it here */
		{
			for (uint8_t i = 0; i < 8; i++) {
      e0:	8f 5f       	subi	r24, 0xFF	; 255
      e2:	88 30       	cpi	r24, 0x08	; 8
      e4:	60 f3       	brcs	.-40     	; 0xbe <main+0x4>
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	12 c0       	rjmp	.+36     	; 0x10e <main+0x54>
	case PORT_DIR_OFF:
		/*/ should activate the pullup for power saving
		  but a bit costly to do it here */
		{
			for (uint8_t i = 0; i < 8; i++) {
				if (mask & 1 << i) {
      ea:	2f ef       	ldi	r18, 0xFF	; 255
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	08 2e       	mov	r0, r24
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <main+0x3c>
      f2:	35 95       	asr	r19
      f4:	27 95       	ror	r18
      f6:	0a 94       	dec	r0
      f8:	e2 f7       	brpl	.-8      	; 0xf2 <main+0x38>
      fa:	20 ff       	sbrs	r18, 0
      fc:	07 c0       	rjmp	.+14     	; 0x10c <main+0x52>
					*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
      fe:	e8 2f       	mov	r30, r24
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	e0 5d       	subi	r30, 0xD0	; 208
     104:	fb 4f       	sbci	r31, 0xFB	; 251
     106:	90 81       	ld	r25, Z
     108:	98 60       	ori	r25, 0x08	; 8
     10a:	90 83       	st	Z, r25
		break;
	case PORT_DIR_OFF:
		/*/ should activate the pullup for power saving
		  but a bit costly to do it here */
		{
			for (uint8_t i = 0; i < 8; i++) {
     10c:	8f 5f       	subi	r24, 0xFF	; 255
     10e:	88 30       	cpi	r24, 0x08	; 8
     110:	60 f3       	brcs	.-40     	; 0xea <main+0x30>
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	12 c0       	rjmp	.+36     	; 0x13a <main+0x80>
	case PORT_DIR_OFF:
		/*/ should activate the pullup for power saving
		  but a bit costly to do it here */
		{
			for (uint8_t i = 0; i < 8; i++) {
				if (mask & 1 << i) {
     116:	2f ef       	ldi	r18, 0xFF	; 255
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	08 2e       	mov	r0, r24
     11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0x68>
     11e:	35 95       	asr	r19
     120:	27 95       	ror	r18
     122:	0a 94       	dec	r0
     124:	e2 f7       	brpl	.-8      	; 0x11e <main+0x64>
     126:	20 ff       	sbrs	r18, 0
     128:	07 c0       	rjmp	.+14     	; 0x138 <main+0x7e>
					*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     12a:	e8 2f       	mov	r30, r24
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	e0 5b       	subi	r30, 0xB0	; 176
     130:	fb 4f       	sbci	r31, 0xFB	; 251
     132:	90 81       	ld	r25, Z
     134:	98 60       	ori	r25, 0x08	; 8
     136:	90 83       	st	Z, r25
		break;
	case PORT_DIR_OFF:
		/*/ should activate the pullup for power saving
		  but a bit costly to do it here */
		{
			for (uint8_t i = 0; i < 8; i++) {
     138:	8f 5f       	subi	r24, 0xFF	; 255
     13a:	88 30       	cpi	r24, 0x08	; 8
     13c:	60 f3       	brcs	.-40     	; 0x116 <main+0x5c>
	PORTA_set_port_dir(0xFF, PORT_DIR_OFF);
	PORTB_set_port_dir(0xFF, PORT_DIR_OFF);
	PORTC_set_port_dir(0xFF, PORT_DIR_OFF);
	atmel_start_init();
     13e:	96 df       	rcall	.-212    	; 0x6c <atmel_start_init>
	
	
	
	batVar = FLASH_0_read_eeprom_byte(0);
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	59 d4       	rcall	.+2226   	; 0x9f8 <FLASH_0_read_eeprom_byte>
     146:	c8 2f       	mov	r28, r24
     148:	80 93 42 3e 	sts	0x3E42, r24	; 0x803e42 <__data_end>
	BatteryLevelCounter *= batVar > 100 ? 1 : (((float)batVar) / 100.0f);  
     14c:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     150:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     154:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     158:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     15c:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     160:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     164:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     168:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     16c:	5c d7       	rcall	.+3768   	; 0x1026 <__floatundisf>
     16e:	6b 01       	movw	r12, r22
     170:	7c 01       	movw	r14, r24
     172:	c5 36       	cpi	r28, 0x65	; 101
     174:	58 f4       	brcc	.+22     	; 0x18c <main+0xd2>
     176:	6c 2f       	mov	r22, r28
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	16 d7       	rcall	.+3628   	; 0xfac <__floatunsisf>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	48 ec       	ldi	r20, 0xC8	; 200
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	63 d6       	rcall	.+3270   	; 0xe50 <__divsf3>
     18a:	04 c0       	rjmp	.+8      	; 0x194 <main+0xda>
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	80 e8       	ldi	r24, 0x80	; 128
     192:	9f e3       	ldi	r25, 0x3F	; 63
     194:	a7 01       	movw	r20, r14
     196:	96 01       	movw	r18, r12
     198:	e5 d7       	rcall	.+4042   	; 0x1164 <__mulsf3>
     19a:	d1 d6       	rcall	.+3490   	; 0xf3e <__fixunssfdi>
     19c:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     1a0:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     1a4:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     1a8:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     1ac:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     1b0:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     1b4:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     1b8:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1bc:	89 b1       	in	r24, 0x09	; 9
     1be:	8f 7e       	andi	r24, 0xEF	; 239
     1c0:	89 b9       	out	0x09, r24	; 9
	
	DATA_set_level(false);
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM7;
     1c2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <payloadBufferStartByte+0x7f7dae>
     1c6:	e1 e3       	ldi	r30, 0x31	; 49
     1c8:	fe e3       	ldi	r31, 0x3E	; 62
     1ca:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM8;
     1cc:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f7daf>
     1d0:	87 83       	std	Z+7, r24	; 0x07
	payloadBuffer[payloadBufferStartByte + 2] = SIGROW_SERNUM9;
     1d2:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f7db0>
     1d6:	80 87       	std	Z+8, r24	; 0x08
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     1d8:	46 e0       	ldi	r20, 0x06	; 6
     1da:	60 e1       	ldi	r22, 0x10	; 16
     1dc:	cf 01       	movw	r24, r30
     1de:	f6 d4       	rcall	.+2540   	; 0xbcc <SX1243Init>
	
	while(true) 
	{
		BatteryLevelCounter -= (BAT_ADC_CONSTANT >> sleepTimeSequence);
     1e0:	ee e1       	ldi	r30, 0x1E	; 30
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <main+0x134>
     1ea:	f5 95       	asr	r31
     1ec:	e7 95       	ror	r30
     1ee:	0a 94       	dec	r0
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <main+0x130>
     1f2:	1f 2f       	mov	r17, r31
     1f4:	11 0f       	add	r17, r17
     1f6:	11 0b       	sbc	r17, r17
     1f8:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     1fc:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     200:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     204:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     208:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     20c:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     210:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     214:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     218:	ae 2e       	mov	r10, r30
     21a:	bf 2e       	mov	r11, r31
     21c:	c1 2e       	mov	r12, r17
     21e:	d1 2e       	mov	r13, r17
     220:	e1 2e       	mov	r14, r17
     222:	f1 2e       	mov	r15, r17
     224:	01 2f       	mov	r16, r17
     226:	83 d8       	rcall	.-3834   	; 0xfffff32e <__eeprom_end+0xff7ef32e>
     228:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     22c:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     230:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     234:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     238:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     23c:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     240:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     244:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     248:	24 e1       	ldi	r18, 0x14	; 20
     24a:	34 e0       	ldi	r19, 0x04	; 4
     24c:	f9 01       	movw	r30, r18
     24e:	80 81       	ld	r24, Z
     250:	88 60       	ori	r24, 0x08	; 8
     252:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     254:	c4 e3       	ldi	r28, 0x34	; 52
     256:	d4 e0       	ldi	r29, 0x04	; 4
     258:	88 81       	ld	r24, Y
     25a:	88 60       	ori	r24, 0x08	; 8
     25c:	88 83       	st	Y, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     25e:	a5 e1       	ldi	r26, 0x15	; 21
     260:	b4 e0       	ldi	r27, 0x04	; 4
     262:	8c 91       	ld	r24, X
     264:	88 60       	ori	r24, 0x08	; 8
     266:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     268:	45 e3       	ldi	r20, 0x35	; 53
     26a:	54 e0       	ldi	r21, 0x04	; 4
     26c:	fa 01       	movw	r30, r20
     26e:	80 81       	ld	r24, Z
     270:	88 60       	ori	r24, 0x08	; 8
     272:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     274:	80 b1       	in	r24, 0x00	; 0
     276:	8f 7e       	andi	r24, 0xEF	; 239
     278:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     27a:	84 b1       	in	r24, 0x04	; 4
     27c:	8f 7e       	andi	r24, 0xEF	; 239
     27e:	84 b9       	out	0x04, r24	; 4
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     280:	80 b1       	in	r24, 0x00	; 0
     282:	8f 7d       	andi	r24, 0xDF	; 223
     284:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     286:	84 b1       	in	r24, 0x04	; 4
     288:	8f 7d       	andi	r24, 0xDF	; 223
     28a:	84 b9       	out	0x04, r24	; 4
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     28c:	92 b0       	in	r9, 0x02	; 2
		SB1_set_dir(PORT_DIR_IN);
		SB2_set_dir(PORT_DIR_IN);
		PSD1_set_dir(PORT_DIR_IN);
		PSD2_set_dir(PORT_DIR_IN);
		
		uint8_t In_SB1  = !SB1_get_level();
     28e:	96 94       	lsr	r9
     290:	96 94       	lsr	r9
     292:	96 94       	lsr	r9
     294:	96 94       	lsr	r9
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	99 2d       	mov	r25, r9
     29a:	98 27       	eor	r25, r24
     29c:	91 70       	andi	r25, 0x01	; 1
     29e:	29 2e       	mov	r2, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     2a0:	86 b0       	in	r8, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     2a2:	86 94       	lsr	r8
     2a4:	86 94       	lsr	r8
     2a6:	86 94       	lsr	r8
     2a8:	86 94       	lsr	r8
     2aa:	98 2d       	mov	r25, r8
     2ac:	98 27       	eor	r25, r24
     2ae:	91 70       	andi	r25, 0x01	; 1
     2b0:	39 2e       	mov	r3, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     2b2:	62 b0       	in	r6, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
     2b4:	66 94       	lsr	r6
     2b6:	66 94       	lsr	r6
     2b8:	66 94       	lsr	r6
     2ba:	66 94       	lsr	r6
     2bc:	66 94       	lsr	r6
     2be:	96 2d       	mov	r25, r6
     2c0:	98 27       	eor	r25, r24
     2c2:	91 70       	andi	r25, 0x01	; 1
     2c4:	69 2e       	mov	r6, r25
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     2c6:	76 b0       	in	r7, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
     2c8:	76 94       	lsr	r7
     2ca:	76 94       	lsr	r7
     2cc:	76 94       	lsr	r7
     2ce:	76 94       	lsr	r7
     2d0:	76 94       	lsr	r7
     2d2:	87 25       	eor	r24, r7
     2d4:	81 70       	andi	r24, 0x01	; 1
     2d6:	78 2e       	mov	r7, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2d8:	f9 01       	movw	r30, r18
     2da:	80 81       	ld	r24, Z
     2dc:	87 7f       	andi	r24, 0xF7	; 247
     2de:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2e0:	88 81       	ld	r24, Y
     2e2:	87 7f       	andi	r24, 0xF7	; 247
     2e4:	88 83       	st	Y, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2e6:	8c 91       	ld	r24, X
     2e8:	87 7f       	andi	r24, 0xF7	; 247
     2ea:	8c 93       	st	X, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     2ec:	fa 01       	movw	r30, r20
     2ee:	80 81       	ld	r24, Z
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2f4:	81 b1       	in	r24, 0x01	; 1
     2f6:	8f 7e       	andi	r24, 0xEF	; 239
     2f8:	81 b9       	out	0x01, r24	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     2fa:	85 b1       	in	r24, 0x05	; 5
     2fc:	8f 7e       	andi	r24, 0xEF	; 239
     2fe:	85 b9       	out	0x05, r24	; 5
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     300:	81 b1       	in	r24, 0x01	; 1
     302:	8f 7d       	andi	r24, 0xDF	; 223
     304:	81 b9       	out	0x01, r24	; 1
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     306:	85 b1       	in	r24, 0x05	; 5
     308:	8f 7d       	andi	r24, 0xDF	; 223
     30a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     30c:	80 b1       	in	r24, 0x00	; 0
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     312:	84 b1       	in	r24, 0x04	; 4
     314:	80 61       	ori	r24, 0x10	; 16
     316:	84 b9       	out	0x04, r24	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     318:	80 b1       	in	r24, 0x00	; 0
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	80 b9       	out	0x00, r24	; 0
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     31e:	84 b1       	in	r24, 0x04	; 4
     320:	80 62       	ori	r24, 0x20	; 32
     322:	84 b9       	out	0x04, r24	; 4
		SB1_set_dir(PORT_DIR_OUT);
		SB2_set_dir(PORT_DIR_OUT);
		PSD1_set_dir(PORT_DIR_OUT);
		PSD2_set_dir(PORT_DIR_OUT);
		
		QTOUCH_GetSensorValue(0, false);
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	24 d5       	rcall	.+2632   	; 0xd72 <QTOUCH_GetSensorValue>
		
		
		for(uint8_t j = 0; j < 2; j++)
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	b4 c0       	rjmp	.+360    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		{
			QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle = SAMPLE_COUNT;
     32e:	c1 2f       	mov	r28, r17
     330:	d0 e0       	ldi	r29, 0x00	; 0
     332:	fe 01       	movw	r30, r28
     334:	e2 95       	swap	r30
     336:	f2 95       	swap	r31
     338:	f0 7f       	andi	r31, 0xF0	; 240
     33a:	fe 27       	eor	r31, r30
     33c:	e0 7f       	andi	r30, 0xF0	; 240
     33e:	fe 27       	eor	r31, r30
     340:	e3 5f       	subi	r30, 0xF3	; 243
     342:	f1 4c       	sbci	r31, 0xC1	; 193
     344:	80 e4       	ldi	r24, 0x40	; 64
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	84 87       	std	Z+12, r24	; 0x0c
     34a:	95 87       	std	Z+13, r25	; 0x0d
			QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc = 0;
     34c:	10 86       	std	Z+8, r1	; 0x08
     34e:	11 86       	std	Z+9, r1	; 0x09
     350:	12 86       	std	Z+10, r1	; 0x0a
     352:	13 86       	std	Z+11, r1	; 0x0b
			while(--QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle)
     354:	21 c0       	rjmp	.+66     	; 0x398 <__DATA_REGION_LENGTH__+0x198>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc += QTOUCH_GetSensorValue(j, false) - QTOUCH_GetSensorValue(j, true);
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	81 2f       	mov	r24, r17
     35a:	0b d5       	rcall	.+2582   	; 0xd72 <QTOUCH_GetSensorValue>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	81 2f       	mov	r24, r17
     364:	06 d5       	rcall	.+2572   	; 0xd72 <QTOUCH_GetSensorValue>
     366:	c6 1a       	sub	r12, r22
     368:	d7 0a       	sbc	r13, r23
     36a:	e8 0a       	sbc	r14, r24
     36c:	f9 0a       	sbc	r15, r25
     36e:	fe 01       	movw	r30, r28
     370:	e2 95       	swap	r30
     372:	f2 95       	swap	r31
     374:	f0 7f       	andi	r31, 0xF0	; 240
     376:	fe 27       	eor	r31, r30
     378:	e0 7f       	andi	r30, 0xF0	; 240
     37a:	fe 27       	eor	r31, r30
     37c:	e3 5f       	subi	r30, 0xF3	; 243
     37e:	f1 4c       	sbci	r31, 0xC1	; 193
     380:	80 85       	ldd	r24, Z+8	; 0x08
     382:	91 85       	ldd	r25, Z+9	; 0x09
     384:	a2 85       	ldd	r26, Z+10	; 0x0a
     386:	b3 85       	ldd	r27, Z+11	; 0x0b
     388:	c8 0e       	add	r12, r24
     38a:	d9 1e       	adc	r13, r25
     38c:	ea 1e       	adc	r14, r26
     38e:	fb 1e       	adc	r15, r27
     390:	c0 86       	std	Z+8, r12	; 0x08
     392:	d1 86       	std	Z+9, r13	; 0x09
     394:	e2 86       	std	Z+10, r14	; 0x0a
     396:	f3 86       	std	Z+11, r15	; 0x0b
		
		for(uint8_t j = 0; j < 2; j++)
		{
			QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle = SAMPLE_COUNT;
			QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc = 0;
			while(--QTOUCHADC_REFERANCE_FILTER_P[j].LoopCycle)
     398:	fe 01       	movw	r30, r28
     39a:	e2 95       	swap	r30
     39c:	f2 95       	swap	r31
     39e:	f0 7f       	andi	r31, 0xF0	; 240
     3a0:	fe 27       	eor	r31, r30
     3a2:	e0 7f       	andi	r30, 0xF0	; 240
     3a4:	fe 27       	eor	r31, r30
     3a6:	e3 5f       	subi	r30, 0xF3	; 243
     3a8:	f1 4c       	sbci	r31, 0xC1	; 193
     3aa:	84 85       	ldd	r24, Z+12	; 0x0c
     3ac:	95 85       	ldd	r25, Z+13	; 0x0d
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	84 87       	std	Z+12, r24	; 0x0c
     3b2:	95 87       	std	Z+13, r25	; 0x0d
     3b4:	89 2b       	or	r24, r25
     3b6:	79 f6       	brne	.-98     	; 0x356 <__DATA_REGION_LENGTH__+0x156>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider = 2;
				QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier = 3;
			}*/
			
			QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  = (QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  >> QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider) * QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier + 
     3b8:	fe 01       	movw	r30, r28
     3ba:	e2 95       	swap	r30
     3bc:	f2 95       	swap	r31
     3be:	f0 7f       	andi	r31, 0xF0	; 240
     3c0:	fe 27       	eor	r31, r30
     3c2:	e0 7f       	andi	r30, 0xF0	; 240
     3c4:	fe 27       	eor	r31, r30
     3c6:	e3 5f       	subi	r30, 0xF3	; 243
     3c8:	f1 4c       	sbci	r31, 0xC1	; 193
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	a2 81       	ldd	r26, Z+2	; 0x02
     3d0:	b3 81       	ldd	r27, Z+3	; 0x03
     3d2:	f6 84       	ldd	r15, Z+14	; 0x0e
     3d4:	9c 01       	movw	r18, r24
     3d6:	ad 01       	movw	r20, r26
     3d8:	0f 2c       	mov	r0, r15
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <__DATA_REGION_LENGTH__+0x1e4>
     3dc:	55 95       	asr	r21
     3de:	47 95       	ror	r20
     3e0:	37 95       	ror	r19
     3e2:	27 95       	ror	r18
     3e4:	0a 94       	dec	r0
     3e6:	d2 f7       	brpl	.-12     	; 0x3dc <__DATA_REGION_LENGTH__+0x1dc>
     3e8:	a7 85       	ldd	r26, Z+15	; 0x0f
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	28 d7       	rcall	.+3664   	; 0x123e <__muluhisi3>
														((QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc << (SAMPLE_MULTIPLIER))    >> (SAMPLE_DIVIDER + QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider));
     3ee:	80 84       	ldd	r8, Z+8	; 0x08
     3f0:	91 84       	ldd	r9, Z+9	; 0x09
     3f2:	a2 84       	ldd	r10, Z+10	; 0x0a
     3f4:	b3 84       	ldd	r11, Z+11	; 0x0b
     3f6:	88 0c       	add	r8, r8
     3f8:	99 1c       	adc	r9, r9
     3fa:	aa 1c       	adc	r10, r10
     3fc:	bb 1c       	adc	r11, r11
     3fe:	a5 01       	movw	r20, r10
     400:	94 01       	movw	r18, r8
     402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     404:	55 95       	asr	r21
     406:	47 95       	ror	r20
     408:	37 95       	ror	r19
     40a:	27 95       	ror	r18
     40c:	fa 94       	dec	r15
     40e:	d2 f7       	brpl	.-12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			{
				QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider = 2;
				QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier = 3;
			}*/
			
			QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  = (QTOUCHADC_REFERANCE_FILTER_P[j].RawValue  >> QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider) * QTOUCHADC_REFERANCE_FILTER_P[j].AlphaMultiplier + 
     410:	dc 01       	movw	r26, r24
     412:	cb 01       	movw	r24, r22
     414:	82 0f       	add	r24, r18
     416:	93 1f       	adc	r25, r19
     418:	a4 1f       	adc	r26, r20
     41a:	b5 1f       	adc	r27, r21
     41c:	80 83       	st	Z, r24
     41e:	91 83       	std	Z+1, r25	; 0x01
     420:	a2 83       	std	Z+2, r26	; 0x02
     422:	b3 83       	std	Z+3, r27	; 0x03
														((QTOUCHADC_REFERANCE_FILTER_P[j].RawAdc << (SAMPLE_MULTIPLIER))    >> (SAMPLE_DIVIDER + QTOUCHADC_REFERANCE_FILTER_P[j].AlphaDivider));
			isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[j].RawValue > (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue + DATA_CHANGE_CONSTANT) || QTOUCHADC_REFERANCE_FILTER_P[j].RawValue < (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue - DATA_CHANGE_CONSTANT);
     424:	20 91 43 3e 	lds	r18, 0x3E43	; 0x803e43 <isDataChanged>
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	c4 80       	ldd	r12, Z+4	; 0x04
     42c:	d5 80       	ldd	r13, Z+5	; 0x05
     42e:	e6 80       	ldd	r14, Z+6	; 0x06
     430:	f7 80       	ldd	r15, Z+7	; 0x07
     432:	b7 01       	movw	r22, r14
     434:	a6 01       	movw	r20, r12
     436:	41 5f       	subi	r20, 0xF1	; 241
     438:	5f 4f       	sbci	r21, 0xFF	; 255
     43a:	6f 4f       	sbci	r22, 0xFF	; 255
     43c:	7f 4f       	sbci	r23, 0xFF	; 255
     43e:	48 17       	cp	r20, r24
     440:	59 07       	cpc	r21, r25
     442:	6a 07       	cpc	r22, r26
     444:	7b 07       	cpc	r23, r27
     446:	6c f0       	brlt	.+26     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     448:	4f e0       	ldi	r20, 0x0F	; 15
     44a:	c4 1a       	sub	r12, r20
     44c:	d1 08       	sbc	r13, r1
     44e:	e1 08       	sbc	r14, r1
     450:	f1 08       	sbc	r15, r1
     452:	8c 15       	cp	r24, r12
     454:	9d 05       	cpc	r25, r13
     456:	ae 05       	cpc	r26, r14
     458:	bf 05       	cpc	r27, r15
     45a:	34 f4       	brge	.+12     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	05 c0       	rjmp	.+10     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     462:	41 e0       	ldi	r20, 0x01	; 1
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	24 2b       	or	r18, r20
     46e:	35 2b       	or	r19, r21
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	23 2b       	or	r18, r19
     474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	40 e0       	ldi	r20, 0x00	; 0
     478:	40 93 43 3e 	sts	0x3E43, r20	; 0x803e43 <isDataChanged>
			QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
     47c:	c2 95       	swap	r28
     47e:	d2 95       	swap	r29
     480:	d0 7f       	andi	r29, 0xF0	; 240
     482:	dc 27       	eor	r29, r28
     484:	c0 7f       	andi	r28, 0xF0	; 240
     486:	dc 27       	eor	r29, r28
     488:	c3 5f       	subi	r28, 0xF3	; 243
     48a:	d1 4c       	sbci	r29, 0xC1	; 193
     48c:	8c 83       	std	Y+4, r24	; 0x04
     48e:	9d 83       	std	Y+5, r25	; 0x05
     490:	ae 83       	std	Y+6, r26	; 0x06
     492:	bf 83       	std	Y+7, r27	; 0x07
		PSD2_set_dir(PORT_DIR_OUT);
		
		QTOUCH_GetSensorValue(0, false);
		
		
		for(uint8_t j = 0; j < 2; j++)
     494:	1f 5f       	subi	r17, 0xFF	; 255
     496:	12 30       	cpi	r17, 0x02	; 2
     498:	08 f4       	brcc	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49a:	49 cf       	rjmp	.-366    	; 0x32e <__DATA_REGION_LENGTH__+0x12e>
			isDataChanged |= QTOUCHADC_REFERANCE_FILTER_P[j].RawValue > (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue + DATA_CHANGE_CONSTANT) || QTOUCHADC_REFERANCE_FILTER_P[j].RawValue < (QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue - DATA_CHANGE_CONSTANT);
			QTOUCHADC_REFERANCE_FILTER_P[j].LastRawValue = QTOUCHADC_REFERANCE_FILTER_P[j].RawValue;
		}
		//ATtiny817
		
		prox1CounterBase[1] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].RawValue >> 8) & 0x00FF);
     49c:	ed e0       	ldi	r30, 0x0D	; 13
     49e:	fe e3       	ldi	r31, 0x3E	; 62
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	a6 e4       	ldi	r26, 0x46	; 70
     4a6:	be e3       	ldi	r27, 0x3E	; 62
     4a8:	11 96       	adiw	r26, 0x01	; 1
     4aa:	9c 93       	st	X, r25
     4ac:	11 97       	sbiw	r26, 0x01	; 1
		prox1CounterBase[0] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[0].RawValue >> 0) & 0x00FF);
     4ae:	8c 93       	st	X, r24
		prox2CounterBase[1] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].RawValue >> 8) & 0x00FF);
     4b0:	80 89       	ldd	r24, Z+16	; 0x10
     4b2:	91 89       	ldd	r25, Z+17	; 0x11
     4b4:	e4 e4       	ldi	r30, 0x44	; 68
     4b6:	fe e3       	ldi	r31, 0x3E	; 62
     4b8:	91 83       	std	Z+1, r25	; 0x01
		prox2CounterBase[0] = (uint8_t)((QTOUCHADC_REFERANCE_FILTER_P[1].RawValue >> 0) & 0x00FF);
     4ba:	80 83       	st	Z, r24
			
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     4bc:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     4c0:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     4c4:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     4c8:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     4cc:	81 38       	cpi	r24, 0x81	; 129
     4ce:	91 45       	sbci	r25, 0x51	; 81
     4d0:	a1 40       	sbci	r26, 0x01	; 1
     4d2:	b1 05       	cpc	r27, r1
     4d4:	08 f4       	brcc	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d6:	66 c0       	rjmp	.+204    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
		{
			batVar = (uint8_t)((uint64_t)(BatteryLevelCounter * 100) / (uint64_t)BAT_FULL_CAPACITY);
     4d8:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     4dc:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     4e0:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     4e4:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     4e8:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     4ec:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     4f0:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     4f4:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     4f8:	02 e0       	ldi	r16, 0x02	; 2
     4fa:	f7 d6       	rcall	.+3566   	; 0x12ea <__ashldi3>
     4fc:	42 2e       	mov	r4, r18
     4fe:	53 2e       	mov	r5, r19
     500:	d4 2f       	mov	r29, r20
     502:	c5 2f       	mov	r28, r21
     504:	b6 2f       	mov	r27, r22
     506:	a7 2f       	mov	r26, r23
     508:	f8 2f       	mov	r31, r24
     50a:	e9 2f       	mov	r30, r25
     50c:	ee d6       	rcall	.+3548   	; 0x12ea <__ashldi3>
     50e:	a2 2e       	mov	r10, r18
     510:	b3 2e       	mov	r11, r19
     512:	c4 2e       	mov	r12, r20
     514:	d5 2e       	mov	r13, r21
     516:	e6 2e       	mov	r14, r22
     518:	f7 2e       	mov	r15, r23
     51a:	08 2f       	mov	r16, r24
     51c:	19 2f       	mov	r17, r25
     51e:	24 2d       	mov	r18, r4
     520:	35 2d       	mov	r19, r5
     522:	4d 2f       	mov	r20, r29
     524:	5c 2f       	mov	r21, r28
     526:	6b 2f       	mov	r22, r27
     528:	7a 2f       	mov	r23, r26
     52a:	8f 2f       	mov	r24, r31
     52c:	9e 2f       	mov	r25, r30
     52e:	f6 d6       	rcall	.+3564   	; 0x131c <__adddi3>
     530:	42 2e       	mov	r4, r18
     532:	53 2e       	mov	r5, r19
     534:	d4 2f       	mov	r29, r20
     536:	c5 2f       	mov	r28, r21
     538:	b6 2f       	mov	r27, r22
     53a:	a7 2f       	mov	r26, r23
     53c:	f8 2f       	mov	r31, r24
     53e:	e9 2f       	mov	r30, r25
     540:	02 e0       	ldi	r16, 0x02	; 2
     542:	d3 d6       	rcall	.+3494   	; 0x12ea <__ashldi3>
     544:	a2 2e       	mov	r10, r18
     546:	b3 2e       	mov	r11, r19
     548:	c4 2e       	mov	r12, r20
     54a:	d5 2e       	mov	r13, r21
     54c:	e6 2e       	mov	r14, r22
     54e:	f7 2e       	mov	r15, r23
     550:	08 2f       	mov	r16, r24
     552:	19 2f       	mov	r17, r25
     554:	24 2d       	mov	r18, r4
     556:	35 2d       	mov	r19, r5
     558:	4d 2f       	mov	r20, r29
     55a:	5c 2f       	mov	r21, r28
     55c:	6b 2f       	mov	r22, r27
     55e:	7a 2f       	mov	r23, r26
     560:	8f 2f       	mov	r24, r31
     562:	9e 2f       	mov	r25, r30
     564:	db d6       	rcall	.+3510   	; 0x131c <__adddi3>
     566:	68 94       	set
     568:	aa 24       	eor	r10, r10
     56a:	a6 f8       	bld	r10, 6
     56c:	0f 2e       	mov	r0, r31
     56e:	fc ea       	ldi	r31, 0xAC	; 172
     570:	bf 2e       	mov	r11, r31
     572:	f0 2d       	mov	r31, r0
     574:	0f 2e       	mov	r0, r31
     576:	f7 e2       	ldi	r31, 0x27	; 39
     578:	cf 2e       	mov	r12, r31
     57a:	f0 2d       	mov	r31, r0
     57c:	d1 2c       	mov	r13, r1
     57e:	e1 2c       	mov	r14, r1
     580:	f1 2c       	mov	r15, r1
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	10 e0       	ldi	r17, 0x00	; 0
     586:	67 d6       	rcall	.+3278   	; 0x1256 <__udivdi3>
     588:	20 93 42 3e 	sts	0x3E42, r18	; 0x803e42 <__data_end>
			FLASH_0_write_eeprom_byte(0, batVar);
     58c:	62 2f       	mov	r22, r18
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	36 d2       	rcall	.+1132   	; 0xa00 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     594:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <BatteryLevelCalculateCounter>
     598:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     59c:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     5a0:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
		}
		BatteryLevelCalculateCounter++;
     5a4:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     5a8:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     5ac:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     5b0:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	a1 1d       	adc	r26, r1
     5b8:	b1 1d       	adc	r27, r1
     5ba:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <BatteryLevelCalculateCounter>
     5be:	90 93 02 3e 	sts	0x3E02, r25	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     5c2:	a0 93 03 3e 	sts	0x3E03, r26	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     5c6:	b0 93 04 3e 	sts	0x3E04, r27	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
     5ca:	20 91 42 3e 	lds	r18, 0x3E42	; 0x803e42 <__data_end>
     5ce:	82 2d       	mov	r24, r2
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	92 2f       	mov	r25, r18
     5d8:	90 7f       	andi	r25, 0xF0	; 240
     5da:	89 2b       	or	r24, r25
     5dc:	68 2a       	or	r6, r24
     5de:	e9 e4       	ldi	r30, 0x49	; 73
     5e0:	fe e3       	ldi	r31, 0x3E	; 62
     5e2:	60 82       	st	Z, r6
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
     5e4:	30 e1       	ldi	r19, 0x10	; 16
     5e6:	23 9f       	mul	r18, r19
     5e8:	c0 01       	movw	r24, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	83 2c       	mov	r8, r3
     5ee:	91 2c       	mov	r9, r1
     5f0:	88 0c       	add	r8, r8
     5f2:	99 1c       	adc	r9, r9
     5f4:	88 2a       	or	r8, r24
     5f6:	87 28       	or	r8, r7
     5f8:	81 82       	std	Z+1, r8	; 0x01
		
		isDataChanged |= (seatFlagStatus[0]	!= payloadBuffer[payloadBufferStartByte + 3]) || (seatFlagStatus[1] != payloadBuffer[payloadBufferStartByte + 4]);
     5fa:	80 91 43 3e 	lds	r24, 0x3E43	; 0x803e43 <isDataChanged>
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	20 91 3a 3e 	lds	r18, 0x3E3A	; 0x803e3a <payloadBuffer+0x9>
     604:	62 12       	cpse	r6, r18
     606:	07 c0       	rjmp	.+14     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     608:	20 91 3b 3e 	lds	r18, 0x3E3B	; 0x803e3b <payloadBuffer+0xa>
     60c:	82 16       	cp	r8, r18
     60e:	31 f0       	breq	.+12     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     610:	21 e0       	ldi	r18, 0x01	; 1
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	05 c0       	rjmp	.+10     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	82 2b       	or	r24, r18
     622:	93 2b       	or	r25, r19
     624:	21 e0       	ldi	r18, 0x01	; 1
     626:	89 2b       	or	r24, r25
     628:	09 f4       	brne	.+2      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     62a:	20 e0       	ldi	r18, 0x00	; 0
		
		repeatDataCounter = (isDataChanged && (repeatDataCounter <= (TRANSMIT_COUNT >> 2))) || (dataRefreshCounter == 0) ? TRANSMIT_COUNT : repeatDataCounter;
     62c:	22 23       	and	r18, r18
     62e:	21 f0       	breq	.+8      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     630:	80 91 30 3e 	lds	r24, 0x3E30	; 0x803e30 <repeatDataCounter>
     634:	8b 30       	cpi	r24, 0x0B	; 11
     636:	48 f0       	brcs	.+18     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     638:	80 91 2e 3e 	lds	r24, 0x3E2E	; 0x803e2e <dataRefreshCounter>
     63c:	90 91 2f 3e 	lds	r25, 0x3E2F	; 0x803e2f <dataRefreshCounter+0x1>
     640:	89 2b       	or	r24, r25
     642:	29 f0       	breq	.+10     	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     644:	20 91 30 3e 	lds	r18, 0x3E30	; 0x803e30 <repeatDataCounter>
     648:	03 c0       	rjmp	.+6      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     64a:	29 e2       	ldi	r18, 0x29	; 41
     64c:	01 c0       	rjmp	.+2      	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     64e:	29 e2       	ldi	r18, 0x29	; 41
     650:	20 93 30 3e 	sts	0x3E30, r18	; 0x803e30 <repeatDataCounter>
		dataRefreshCounter -= (dataRefreshCounter > 0) && (repeatDataCounter == 0) ? 1 : DATA_REFRESH_TIME;
     654:	80 91 2e 3e 	lds	r24, 0x3E2E	; 0x803e2e <dataRefreshCounter>
     658:	90 91 2f 3e 	lds	r25, 0x3E2F	; 0x803e2f <dataRefreshCounter+0x1>
     65c:	00 97       	sbiw	r24, 0x00	; 0
     65e:	29 f0       	breq	.+10     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     660:	22 23       	and	r18, r18
     662:	31 f0       	breq	.+12     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     664:	4c e2       	ldi	r20, 0x2C	; 44
     666:	51 e0       	ldi	r21, 0x01	; 1
     668:	05 c0       	rjmp	.+10     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     66a:	4c e2       	ldi	r20, 0x2C	; 44
     66c:	51 e0       	ldi	r21, 0x01	; 1
     66e:	02 c0       	rjmp	.+4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	84 1b       	sub	r24, r20
     676:	95 0b       	sbc	r25, r21
     678:	80 93 2e 3e 	sts	0x3E2E, r24	; 0x803e2e <dataRefreshCounter>
     67c:	90 93 2f 3e 	sts	0x3E2F, r25	; 0x803e2f <dataRefreshCounter+0x1>
		isDataChanged = false;
     680:	10 92 43 3e 	sts	0x3E43, r1	; 0x803e43 <isDataChanged>
		
		if(repeatDataCounter && startupDelay == 0)
     684:	22 23       	and	r18, r18
     686:	09 f4       	brne	.+2      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
     688:	5a c0       	rjmp	.+180    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
     68a:	80 91 2d 3e 	lds	r24, 0x3E2D	; 0x803e2d <startupDelay>
     68e:	81 11       	cpse	r24, r1
     690:	56 c0       	rjmp	.+172    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
		{
			payloadBuffer[payloadBufferStartByte + 3] = seatFlagStatus[0];
     692:	c1 e3       	ldi	r28, 0x31	; 49
     694:	de e3       	ldi	r29, 0x3E	; 62
     696:	69 86       	std	Y+9, r6	; 0x09
			payloadBuffer[payloadBufferStartByte + 4] = seatFlagStatus[1];
     698:	8a 86       	std	Y+10, r8	; 0x0a
			payloadBuffer[payloadBufferStartByte + 5] = prox1CounterBase[1];
     69a:	e6 e4       	ldi	r30, 0x46	; 70
     69c:	fe e3       	ldi	r31, 0x3E	; 62
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	8b 87       	std	Y+11, r24	; 0x0b
			payloadBuffer[payloadBufferStartByte + 6] = prox1CounterBase[0];
     6a2:	80 81       	ld	r24, Z
     6a4:	8c 87       	std	Y+12, r24	; 0x0c
			payloadBuffer[payloadBufferStartByte + 7] = prox2CounterBase[1];
     6a6:	e4 e4       	ldi	r30, 0x44	; 68
     6a8:	fe e3       	ldi	r31, 0x3E	; 62
     6aa:	81 81       	ldd	r24, Z+1	; 0x01
     6ac:	8d 87       	std	Y+13, r24	; 0x0d
			payloadBuffer[payloadBufferStartByte + 8] = prox2CounterBase[0];
     6ae:	80 81       	ld	r24, Z
     6b0:	8e 87       	std	Y+14, r24	; 0x0e
			payloadBuffer[payloadBufferStartByte + 9] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 3]);
     6b2:	8a e3       	ldi	r24, 0x3A	; 58
     6b4:	9e e3       	ldi	r25, 0x3E	; 62
     6b6:	d7 d2       	rcall	.+1454   	; 0xc66 <SX1243CRC8>
     6b8:	8f 87       	std	Y+15, r24	; 0x0f
			
			if(SX1243Process() != SX_OK)
     6ba:	e5 d2       	rcall	.+1482   	; 0xc86 <SX1243Process>
     6bc:	88 23       	and	r24, r24
     6be:	31 f0       	breq	.+12     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
			{
				repeatDataCounter++;
     6c0:	80 91 30 3e 	lds	r24, 0x3E30	; 0x803e30 <repeatDataCounter>
     6c4:	8f 5f       	subi	r24, 0xFF	; 255
     6c6:	80 93 30 3e 	sts	0x3E30, r24	; 0x803e30 <repeatDataCounter>
     6ca:	05 c0       	rjmp	.+10     	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
			}
			else
				repeatDataCounter--;
     6cc:	80 91 30 3e 	lds	r24, 0x3E30	; 0x803e30 <repeatDataCounter>
     6d0:	81 50       	subi	r24, 0x01	; 1
     6d2:	80 93 30 3e 	sts	0x3E30, r24	; 0x803e30 <repeatDataCounter>
			BatteryLevelCounter -= (BAT_TRANSMIT_CONSTANT >> sleepTimeSequence);
     6d6:	e8 e2       	ldi	r30, 0x28	; 40
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     6e0:	f5 95       	asr	r31
     6e2:	e7 95       	ror	r30
     6e4:	0a 94       	dec	r0
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
     6e8:	1f 2f       	mov	r17, r31
     6ea:	11 0f       	add	r17, r17
     6ec:	11 0b       	sbc	r17, r17
     6ee:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     6f2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     6f6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     6fa:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     6fe:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     702:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     706:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     70a:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     70e:	ae 2e       	mov	r10, r30
     710:	bf 2e       	mov	r11, r31
     712:	c1 2e       	mov	r12, r17
     714:	d1 2e       	mov	r13, r17
     716:	e1 2e       	mov	r14, r17
     718:	f1 2e       	mov	r15, r17
     71a:	01 2f       	mov	r16, r17
     71c:	08 d6       	rcall	.+3088   	; 0x132e <__subdi3>
     71e:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     722:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     726:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     72a:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     72e:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     732:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     736:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     73a:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		}
		
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     73e:	e0 e5       	ldi	r30, 0x50	; 80
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	89 7f       	andi	r24, 0xF9	; 249
     746:	84 60       	ori	r24, 0x04	; 4
     748:	80 83       	st	Z, r24
		cli();
     74a:	f8 94       	cli
		sleepTimeSequence = (repeatDataCounter >= (TRANSMIT_COUNT >> 1)) ? T_512 : (repeatDataCounter > 0) ? T_1024 : T_2048;
     74c:	80 91 30 3e 	lds	r24, 0x3E30	; 0x803e30 <repeatDataCounter>
     750:	84 31       	cpi	r24, 0x14	; 20
     752:	20 f4       	brcc	.+8      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     754:	88 23       	and	r24, r24
     756:	21 f0       	breq	.+8      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	03 c0       	rjmp	.+6      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
		ConfigPIT(GET_PERIODIC_TIMER_VALUE(sleepTimeSequence));
     766:	89 5f       	subi	r24, 0xF9	; 249
     768:	88 0f       	add	r24, r24
     76a:	88 0f       	add	r24, r24
     76c:	88 0f       	add	r24, r24
     76e:	9e dc       	rcall	.-1732   	; 0xac <ConfigPIT>
		
		sleep_enable();
     770:	e0 e5       	ldi	r30, 0x50	; 80
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	81 60       	ori	r24, 0x01	; 1
     778:	80 83       	st	Z, r24
		sei();
     77a:	78 94       	sei
		sleep_cpu();
     77c:	88 95       	sleep
		sleep_disable();
     77e:	80 81       	ld	r24, Z
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	80 83       	st	Z, r24
		cli();
     784:	f8 94       	cli
		BatteryLevelCounter -= (BAT_SLEEP_CONSTANT >> sleepTimeSequence);
     786:	ec e3       	ldi	r30, 0x3C	; 60
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	00 90 00 3e 	lds	r0, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     78e:	02 c0       	rjmp	.+4      	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
     790:	f5 95       	asr	r31
     792:	e7 95       	ror	r30
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     798:	1f 2f       	mov	r17, r31
     79a:	11 0f       	add	r17, r17
     79c:	11 0b       	sbc	r17, r17
     79e:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     7a2:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     7a6:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     7aa:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     7ae:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     7b2:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     7b6:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     7ba:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     7be:	ae 2e       	mov	r10, r30
     7c0:	bf 2e       	mov	r11, r31
     7c2:	c1 2e       	mov	r12, r17
     7c4:	d1 2e       	mov	r13, r17
     7c6:	e1 2e       	mov	r14, r17
     7c8:	f1 2e       	mov	r15, r17
     7ca:	01 2f       	mov	r16, r17
     7cc:	b0 d5       	rcall	.+2912   	; 0x132e <__subdi3>
     7ce:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     7d2:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     7d6:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     7da:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     7de:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     7e2:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     7e6:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     7ea:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     7ee:	80 b1       	in	r24, 0x00	; 0
     7f0:	87 7f       	andi	r24, 0xF7	; 247
     7f2:	80 b9       	out	0x00, r24	; 0
		
		CBT_set_dir(PORT_DIR_IN);
		if(CBT_get_level() == false)
     7f4:	13 9b       	sbis	0x02, 3	; 2
     7f6:	0b c0       	rjmp	.+22     	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
     7f8:	24 c0       	rjmp	.+72     	; 0x842 <__LOCK_REGION_LENGTH__+0x442>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7fa:	e3 e2       	ldi	r30, 0x23	; 35
     7fc:	f4 ef       	ldi	r31, 0xF4	; 244
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     802:	00 c0       	rjmp	.+0      	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
     804:	00 00       	nop
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
     806:	8a b1       	in	r24, 0x0a	; 10
     808:	80 61       	ori	r24, 0x10	; 16
     80a:	8a b9       	out	0x0a, r24	; 10
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     80e:	94 e6       	ldi	r25, 0x64	; 100
		{
			uint8_t timeOut = 100;
			while(CBT_get_level() == false && --timeOut)
     810:	13 99       	sbic	0x02, 3	; 2
     812:	02 c0       	rjmp	.+4      	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
     814:	91 50       	subi	r25, 0x01	; 1
     816:	89 f7       	brne	.-30     	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
			{
				_delay_ms(50);
				DATA_toggle_level();
			}
			if(timeOut < 1)
     818:	91 11       	cpse	r25, r1
     81a:	0e c0       	rjmp	.+28     	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
			{
				FLASH_0_write_eeprom_byte(0, 100);
     81c:	64 e6       	ldi	r22, 0x64	; 100
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	ee d0       	rcall	.+476    	; 0xa00 <FLASH_0_write_eeprom_byte>
				while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm);
     824:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7ca6>
     828:	81 fd       	sbrc	r24, 1
     82a:	fc cf       	rjmp	.-8      	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
     82c:	89 e6       	ldi	r24, 0x69	; 105
     82e:	98 e1       	ldi	r25, 0x18	; 24
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
     834:	00 c0       	rjmp	.+0      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
     836:	00 00       	nop
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	68 ed       	ldi	r22, 0xD8	; 216
     83c:	81 e4       	ldi	r24, 0x41	; 65
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	f9 d0       	rcall	.+498    	; 0xa34 <protected_write_io>
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     842:	e3 e1       	ldi	r30, 0x13	; 19
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	80 81       	ld	r24, Z
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	80 83       	st	Z, r24
			}
			RSTCTRL_reset();
		}
		CBT_set_dir(PORT_DIR_OFF);
		
		startupDelay -= startupDelay > 0 ? 1 : 0;
     84c:	80 91 2d 3e 	lds	r24, 0x3E2D	; 0x803e2d <startupDelay>
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	81 11       	cpse	r24, r1
     854:	01 c0       	rjmp	.+2      	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	89 1b       	sub	r24, r25
     85a:	80 93 2d 3e 	sts	0x3E2D, r24	; 0x803e2d <startupDelay>
	}
     85e:	c0 cc       	rjmp	.-1664   	; 0x1e0 <main+0x126>

00000860 <ADC_0_init>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
     860:	e0 e0       	ldi	r30, 0x00	; 0
     862:	f6 e0       	ldi	r31, 0x06	; 6
     864:	82 e5       	ldi	r24, 0x52	; 82
     866:	82 83       	std	Z+2, r24	; 0x02
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 83       	st	Z, r24
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	08 95       	ret

00000870 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     870:	e0 e0       	ldi	r30, 0x00	; 0
     872:	f6 e0       	ldi	r31, 0x06	; 6
     874:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	80 87       	std	Z+8, r24	; 0x08
     87a:	08 95       	ret

0000087c <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
     87c:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f72af>
}
     880:	81 70       	andi	r24, 0x01	; 1
     882:	08 95       	ret

00000884 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
     884:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f72b4>
     888:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f72b5>
}
     88c:	08 95       	ret

0000088e <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
     88e:	f0 df       	rcall	.-32     	; 0x870 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
     890:	f5 df       	rcall	.-22     	; 0x87c <ADC_0_is_conversion_done>
     892:	88 23       	and	r24, r24
     894:	e9 f3       	breq	.-6      	; 0x890 <ADC_0_get_conversion+0x2>
		;
	res = ADC_0_get_conversion_result();
     896:	f6 df       	rcall	.-20     	; 0x884 <ADC_0_get_conversion_result>
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     898:	e0 e0       	ldi	r30, 0x00	; 0
     89a:	f6 e0       	ldi	r31, 0x06	; 6
     89c:	23 85       	ldd	r18, Z+11	; 0x0b
     89e:	21 60       	ori	r18, 0x01	; 1
     8a0:	23 87       	std	Z+11, r18	; 0x0b
	return res;
}
     8a2:	08 95       	ret

000008a4 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret

000008a8 <CLKCTRL_init>:
     8a8:	43 e0       	ldi	r20, 0x03	; 3
     8aa:	68 ed       	ldi	r22, 0xD8	; 216
     8ac:	81 e6       	ldi	r24, 0x61	; 97
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	c1 d0       	rcall	.+386    	; 0xa34 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret

000008b6 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     8b6:	78 94       	sei

	return 0;
}
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	08 95       	ret

000008bc <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	08 c0       	rjmp	.+16     	; 0x8d0 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8c0:	e8 2f       	mov	r30, r24
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	e0 5f       	subi	r30, 0xF0	; 240
     8c6:	fb 4f       	sbci	r31, 0xFB	; 251
     8c8:	90 81       	ld	r25, Z
     8ca:	98 60       	ori	r25, 0x08	; 8
     8cc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	88 30       	cpi	r24, 0x08	; 8
     8d2:	b0 f3       	brcs	.-20     	; 0x8c0 <mcu_init+0x4>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 c0       	rjmp	.+16     	; 0x8e8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8d8:	e8 2f       	mov	r30, r24
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e0 5d       	subi	r30, 0xD0	; 208
     8de:	fb 4f       	sbci	r31, 0xFB	; 251
     8e0:	90 81       	ld	r25, Z
     8e2:	98 60       	ori	r25, 0x08	; 8
     8e4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8e6:	8f 5f       	subi	r24, 0xFF	; 255
     8e8:	88 30       	cpi	r24, 0x08	; 8
     8ea:	b0 f3       	brcs	.-20     	; 0x8d8 <mcu_init+0x1c>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     8f0:	e8 2f       	mov	r30, r24
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	e0 5b       	subi	r30, 0xB0	; 176
     8f6:	fb 4f       	sbci	r31, 0xFB	; 251
     8f8:	90 81       	ld	r25, Z
     8fa:	98 60       	ori	r25, 0x08	; 8
     8fc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	88 30       	cpi	r24, 0x08	; 8
     902:	b0 f3       	brcs	.-20     	; 0x8f0 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     904:	08 95       	ret

00000906 <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     906:	e6 e1       	ldi	r30, 0x16	; 22
     908:	f4 e0       	ldi	r31, 0x04	; 4
     90a:	80 81       	ld	r24, Z
     90c:	88 7f       	andi	r24, 0xF8	; 248
     90e:	84 60       	ori	r24, 0x04	; 4
     910:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     912:	80 81       	ld	r24, Z
     914:	87 7f       	andi	r24, 0xF7	; 247
     916:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     918:	e0 e3       	ldi	r30, 0x30	; 48
     91a:	f4 e0       	ldi	r31, 0x04	; 4
     91c:	80 81       	ld	r24, Z
     91e:	88 7f       	andi	r24, 0xF8	; 248
     920:	84 60       	ori	r24, 0x04	; 4
     922:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     924:	80 81       	ld	r24, Z
     926:	87 7f       	andi	r24, 0xF7	; 247
     928:	80 83       	st	Z, r24
	// Disable digital input buffer
	SY_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	SY_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     92a:	9a df       	rcall	.-204    	; 0x860 <ADC_0_init>
     92c:	08 95       	ret

0000092e <FLASH_0_initialization>:
}

/* Initialize registers */
void FLASH_0_initialization(void)
{
	FLASH_0_init();
     92e:	62 d0       	rcall	.+196    	; 0x9f4 <FLASH_0_init>
     930:	08 95       	ret

00000932 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     932:	c4 df       	rcall	.-120    	; 0x8bc <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     934:	80 b1       	in	r24, 0x00	; 0
     936:	87 7f       	andi	r24, 0xF7	; 247
     938:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     93a:	e3 e1       	ldi	r30, 0x13	; 19
     93c:	f4 e0       	ldi	r31, 0x04	; 4
     93e:	80 81       	ld	r24, Z
     940:	88 60       	ori	r24, 0x08	; 8
     942:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     944:	80 b1       	in	r24, 0x00	; 0
     946:	8f 7e       	andi	r24, 0xEF	; 239
     948:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     94a:	e4 e1       	ldi	r30, 0x14	; 20
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	80 81       	ld	r24, Z
     950:	88 60       	ori	r24, 0x08	; 8
     952:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     954:	80 b1       	in	r24, 0x00	; 0
     956:	8f 7d       	andi	r24, 0xDF	; 223
     958:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     95a:	e5 e1       	ldi	r30, 0x15	; 21
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	80 81       	ld	r24, Z
     960:	88 60       	ori	r24, 0x08	; 8
     962:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     964:	81 b1       	in	r24, 0x01	; 1
     966:	8f 77       	andi	r24, 0x7F	; 127
     968:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     96a:	80 b1       	in	r24, 0x00	; 0
     96c:	80 68       	ori	r24, 0x80	; 128
     96e:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     970:	84 b1       	in	r24, 0x04	; 4
     972:	8d 7f       	andi	r24, 0xFD	; 253
     974:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     976:	e1 e3       	ldi	r30, 0x31	; 49
     978:	f4 e0       	ldi	r31, 0x04	; 4
     97a:	80 81       	ld	r24, Z
     97c:	87 7f       	andi	r24, 0xF7	; 247
     97e:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     980:	84 b1       	in	r24, 0x04	; 4
     982:	8f 7e       	andi	r24, 0xEF	; 239
     984:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     986:	e4 e3       	ldi	r30, 0x34	; 52
     988:	f4 e0       	ldi	r31, 0x04	; 4
     98a:	80 81       	ld	r24, Z
     98c:	88 60       	ori	r24, 0x08	; 8
     98e:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     990:	84 b1       	in	r24, 0x04	; 4
     992:	8f 7d       	andi	r24, 0xDF	; 223
     994:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     996:	e5 e3       	ldi	r30, 0x35	; 53
     998:	f4 e0       	ldi	r31, 0x04	; 4
     99a:	80 81       	ld	r24, Z
     99c:	88 60       	ori	r24, 0x08	; 8
     99e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     9a0:	88 b1       	in	r24, 0x08	; 8
     9a2:	8d 7f       	andi	r24, 0xFD	; 253
     9a4:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     9a6:	e1 e5       	ldi	r30, 0x51	; 81
     9a8:	f4 e0       	ldi	r31, 0x04	; 4
     9aa:	80 81       	ld	r24, Z
     9ac:	88 60       	ori	r24, 0x08	; 8
     9ae:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     9b0:	88 b1       	in	r24, 0x08	; 8
     9b2:	8b 7f       	andi	r24, 0xFB	; 251
     9b4:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     9b6:	e2 e5       	ldi	r30, 0x52	; 82
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	80 81       	ld	r24, Z
     9bc:	88 60       	ori	r24, 0x08	; 8
     9be:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     9c0:	89 b1       	in	r24, 0x09	; 9
     9c2:	87 7f       	andi	r24, 0xF7	; 247
     9c4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     9c6:	88 b1       	in	r24, 0x08	; 8
     9c8:	88 60       	ori	r24, 0x08	; 8
     9ca:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     9cc:	89 b1       	in	r24, 0x09	; 9
     9ce:	8f 7e       	andi	r24, 0xEF	; 239
     9d0:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     9d2:	88 b1       	in	r24, 0x08	; 8
     9d4:	80 61       	ori	r24, 0x10	; 16
     9d6:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     9d8:	89 b1       	in	r24, 0x09	; 9
     9da:	8f 7d       	andi	r24, 0xDF	; 223
     9dc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     9de:	88 b1       	in	r24, 0x08	; 8
     9e0:	80 62       	ori	r24, 0x20	; 32
     9e2:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	NRESET_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     9e4:	61 df       	rcall	.-318    	; 0x8a8 <CLKCTRL_init>

	RTC_0_init();
     9e6:	2a d0       	rcall	.+84     	; 0xa3c <RTC_0_init>

	ADC_0_initialization();
     9e8:	8e df       	rcall	.-228    	; 0x906 <ADC_0_initialization>

	FLASH_0_initialization();
     9ea:	a1 df       	rcall	.-190    	; 0x92e <FLASH_0_initialization>

	CPUINT_init();
     9ec:	64 df       	rcall	.-312    	; 0x8b6 <CPUINT_init>

	SLPCTRL_init();
     9ee:	3c d0       	rcall	.+120    	; 0xa68 <SLPCTRL_init>

	BOD_init();
     9f0:	59 df       	rcall	.-334    	; 0x8a4 <BOD_init>
     9f2:	08 95       	ret

000009f4 <FLASH_0_init>:
	//		 | 0 << NVMCTRL_BOOTLOCK_bp; /* Boot Lock: disabled */

	// NVMCTRL.INTCTRL = 0 << NVMCTRL_EEREADY_bp; /* EEPROM Ready: disabled */

	return 0;
}
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 95       	ret

000009f8 <FLASH_0_read_eeprom_byte>:
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{

	// Read operation will be stalled by hardware if any write is in progress

	return *(uint8_t *)(EEPROM_START + eeprom_adr);
     9f8:	9c 5e       	subi	r25, 0xEC	; 236
}
     9fa:	fc 01       	movw	r30, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	08 95       	ret

00000a00 <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	ec 01       	movw	r28, r24
     a08:	16 2f       	mov	r17, r22

	/* Wait for completion of previous write */
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
     a0a:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7ca6>
     a0e:	81 fd       	sbrc	r24, 1
     a10:	fc cf       	rjmp	.-8      	; 0xa0a <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
     a12:	44 e0       	ldi	r20, 0x04	; 4
     a14:	6d e9       	ldi	r22, 0x9D	; 157
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e1       	ldi	r25, 0x10	; 16
     a1a:	0c d0       	rcall	.+24     	; 0xa34 <protected_write_io>

	/* Clear page buffer */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEBUFCLR_gc);

	/* Write byte to page buffer */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
     a1c:	dc 5e       	subi	r29, 0xEC	; 236
     a1e:	18 83       	st	Y, r17
     a20:	43 e0       	ldi	r20, 0x03	; 3
     a22:	6d e9       	ldi	r22, 0x9D	; 157
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e1       	ldi	r25, 0x10	; 16
     a28:	05 d0       	rcall	.+10     	; 0xa34 <protected_write_io>

	/* Erase byte and program it with desired value */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);

	return NVM_OK;
}
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	08 95       	ret

00000a34 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     a34:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     a36:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     a38:	40 83       	st	Z, r20
	ret                             // Return to caller
     a3a:	08 95       	ret

00000a3c <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     a3c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6de5>
     a40:	81 11       	cpse	r24, r1
     a42:	fc cf       	rjmp	.-8      	; 0xa3c <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc /* 32768 */
     a44:	e0 e4       	ldi	r30, 0x40	; 64
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	88 e7       	ldi	r24, 0x78	; 120
     a4a:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp       /* Enable: disabled */
	            | 0 << RTC_RUNSTDBY_bp;   /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; /* 32KHz divided by 32 */
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	87 83       	std	Z+7, r24	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     a50:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6df5>
     a54:	81 11       	cpse	r24, r1
     a56:	fc cf       	rjmp	.-8      	; 0xa50 <RTC_0_init+0x14>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* RTC Clock Cycles 1024 */
     a58:	e0 e4       	ldi	r30, 0x40	; 64
     a5a:	f1 e0       	ldi	r31, 0x01	; 1
     a5c:	89 e4       	ldi	r24, 0x49	; 73
     a5e:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;   /* Enable: enabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	08 95       	ret

00000a68 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6cf4>
	                | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret

00000a72 <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     a72:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     a74:	11 c0       	rjmp	.+34     	; 0xa98 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     a76:	29 b1       	in	r18, 0x09	; 9
     a78:	27 7f       	andi	r18, 0xF7	; 247
     a7a:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     a7c:	29 2f       	mov	r18, r25
     a7e:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     a80:	21 f0       	breq	.+8      	; 0xa8a <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     a82:	29 b1       	in	r18, 0x09	; 9
     a84:	20 61       	ori	r18, 0x10	; 16
     a86:	29 b9       	out	0x09, r18	; 9
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     a8a:	29 b1       	in	r18, 0x09	; 9
     a8c:	2f 7e       	andi	r18, 0xEF	; 239
     a8e:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     a90:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     a92:	29 b1       	in	r18, 0x09	; 9
     a94:	28 60       	ori	r18, 0x08	; 8
     a96:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     a98:	91 11       	cpse	r25, r1
     a9a:	ed cf       	rjmp	.-38     	; 0xa76 <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     a9c:	89 b1       	in	r24, 0x09	; 9
     a9e:	87 7f       	andi	r24, 0xF7	; 247
     aa0:	89 b9       	out	0x09, r24	; 9
     aa2:	08 95       	ret

00000aa4 <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	6a 01       	movw	r12, r20
     aae:	7b 01       	movw	r14, r22
	switch(instruction)
     ab0:	88 23       	and	r24, r24
     ab2:	19 f0       	breq	.+6      	; 0xaba <SX1243Write+0x16>
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	21 f0       	breq	.+8      	; 0xac0 <SX1243Write+0x1c>
     ab8:	16 c0       	rjmp	.+44     	; 0xae6 <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	da df       	rcall	.-76     	; 0xa72 <SpiOut>
		break;
     abe:	0a c0       	rjmp	.+20     	; 0xad4 <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     ac0:	db 01       	movw	r26, r22
     ac2:	ca 01       	movw	r24, r20
     ac4:	88 27       	eor	r24, r24
     ac6:	99 27       	eor	r25, r25
     ac8:	a7 70       	andi	r26, 0x07	; 7
     aca:	bb 27       	eor	r27, r27
     acc:	bc 01       	movw	r22, r24
     ace:	cd 01       	movw	r24, r26
     ad0:	88 61       	ori	r24, 0x18	; 24
     ad2:	cf df       	rcall	.-98     	; 0xa72 <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     ad4:	8d 2d       	mov	r24, r13
     ad6:	cd df       	rcall	.-102    	; 0xa72 <SpiOut>
	SpiOut(data & 0xFF);
     ad8:	8c 2d       	mov	r24, r12
     ada:	cb df       	rcall	.-106    	; 0xa72 <SpiOut>
     adc:	89 b1       	in	r24, 0x09	; 9
     ade:	8f 7e       	andi	r24, 0xEF	; 239
     ae0:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	08 95       	ret

00000af2 <SX1243Reset>:
     af2:	89 b1       	in	r24, 0x09	; 9
     af4:	8f 7d       	andi	r24, 0xDF	; 223
     af6:	89 b9       	out	0x09, r24	; 9
     af8:	83 ed       	ldi	r24, 0xD3	; 211
     afa:	90 e3       	ldi	r25, 0x30	; 48
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	f1 f7       	brne	.-4      	; 0xafc <SX1243Reset+0xa>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <SX1243Reset+0x10>
     b02:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     b04:	89 b1       	in	r24, 0x09	; 9
     b06:	80 62       	ori	r24, 0x20	; 32
     b08:	89 b9       	out	0x09, r24	; 9
     b0a:	08 95       	ret

00000b0c <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	4a c0       	rjmp	.+148    	; 0xba4 <Sx1243ConvertBuffer+0x98>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80;
     b10:	9c 01       	movw	r18, r24
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	22 0f       	add	r18, r18
     b18:	33 1f       	adc	r19, r19
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	e0 91 de 3e 	lds	r30, 0x3EDE	; 0x803ede <TxParam+0x13>
     b22:	f0 91 df 3e 	lds	r31, 0x3EDF	; 0x803edf <TxParam+0x14>
     b26:	e8 0f       	add	r30, r24
     b28:	f9 1f       	adc	r31, r25
     b2a:	40 81       	ld	r20, Z
     b2c:	44 1f       	adc	r20, r20
     b2e:	44 27       	eor	r20, r20
     b30:	44 1f       	adc	r20, r20
     b32:	d9 01       	movw	r26, r18
     b34:	a5 5b       	subi	r26, 0xB5	; 181
     b36:	b1 4c       	sbci	r27, 0xC1	; 193
     b38:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40;
     b3a:	40 81       	ld	r20, Z
     b3c:	46 fb       	bst	r20, 6
     b3e:	44 27       	eor	r20, r20
     b40:	40 f9       	bld	r20, 0
     b42:	d9 01       	movw	r26, r18
     b44:	a4 5b       	subi	r26, 0xB4	; 180
     b46:	b1 4c       	sbci	r27, 0xC1	; 193
     b48:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20;
     b4a:	40 81       	ld	r20, Z
     b4c:	45 fb       	bst	r20, 5
     b4e:	44 27       	eor	r20, r20
     b50:	40 f9       	bld	r20, 0
     b52:	d9 01       	movw	r26, r18
     b54:	a3 5b       	subi	r26, 0xB3	; 179
     b56:	b1 4c       	sbci	r27, 0xC1	; 193
     b58:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10;
     b5a:	40 81       	ld	r20, Z
     b5c:	42 95       	swap	r20
     b5e:	41 70       	andi	r20, 0x01	; 1
     b60:	d9 01       	movw	r26, r18
     b62:	a2 5b       	subi	r26, 0xB2	; 178
     b64:	b1 4c       	sbci	r27, 0xC1	; 193
     b66:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
     b68:	40 81       	ld	r20, Z
     b6a:	43 fb       	bst	r20, 3
     b6c:	44 27       	eor	r20, r20
     b6e:	40 f9       	bld	r20, 0
     b70:	d9 01       	movw	r26, r18
     b72:	a1 5b       	subi	r26, 0xB1	; 177
     b74:	b1 4c       	sbci	r27, 0xC1	; 193
     b76:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
     b78:	40 81       	ld	r20, Z
     b7a:	42 fb       	bst	r20, 2
     b7c:	44 27       	eor	r20, r20
     b7e:	40 f9       	bld	r20, 0
     b80:	d9 01       	movw	r26, r18
     b82:	a0 5b       	subi	r26, 0xB0	; 176
     b84:	b1 4c       	sbci	r27, 0xC1	; 193
     b86:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
     b88:	40 81       	ld	r20, Z
     b8a:	46 95       	lsr	r20
     b8c:	41 70       	andi	r20, 0x01	; 1
     b8e:	d9 01       	movw	r26, r18
     b90:	af 5a       	subi	r26, 0xAF	; 175
     b92:	b1 4c       	sbci	r27, 0xC1	; 193
     b94:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
     b96:	40 81       	ld	r20, Z
     b98:	41 70       	andi	r20, 0x01	; 1
     b9a:	f9 01       	movw	r30, r18
     b9c:	ee 5a       	subi	r30, 0xAE	; 174
     b9e:	f1 4c       	sbci	r31, 0xC1	; 193
     ba0:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	20 91 dd 3e 	lds	r18, 0x3EDD	; 0x803edd <TxParam+0x12>
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	82 17       	cp	r24, r18
     bac:	93 07       	cpc	r25, r19
     bae:	08 f4       	brcc	.+2      	; 0xbb2 <Sx1243ConvertBuffer+0xa6>
     bb0:	af cf       	rjmp	.-162    	; 0xb10 <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}
     bb2:	08 95       	ret

00000bb4 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
     bb4:	eb ec       	ldi	r30, 0xCB	; 203
     bb6:	fe e3       	ldi	r31, 0x3E	; 62
     bb8:	83 8b       	std	Z+19, r24	; 0x13
     bba:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
     bbc:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	80 93 48 3e 	sts	0x3E48, r24	; 0x803e48 <fastBufSize>
	Sx1243ConvertBuffer(0);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	a2 df       	rcall	.-188    	; 0xb0c <Sx1243ConvertBuffer>
	return SX_OK;
}
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret

00000bcc <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	8c 01       	movw	r16, r24
     bd8:	f6 2e       	mov	r15, r22
     bda:	c4 2f       	mov	r28, r20
	SX1243Reset();
     bdc:	8a df       	rcall	.-236    	; 0xaf2 <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
     bde:	eb ec       	ldi	r30, 0xCB	; 203
     be0:	fe e3       	ldi	r31, 0x3E	; 62
     be2:	10 8a       	std	Z+16, r1	; 0x10
     be4:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
     be6:	16 86       	std	Z+14, r1	; 0x0e
     be8:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e2       	ldi	r25, 0x20	; 32
     bee:	84 87       	std	Z+12, r24	; 0x0c
     bf0:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	98 e0       	ldi	r25, 0x08	; 8
     bf6:	82 87       	std	Z+10, r24	; 0x0a
     bf8:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
     bfa:	10 86       	std	Z+8, r1	; 0x08
     bfc:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
     bfe:	16 82       	std	Z+6, r1	; 0x06
     c00:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
     c02:	84 e0       	ldi	r24, 0x04	; 4
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	84 83       	std	Z+4, r24	; 0x04
     c08:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
     c0a:	87 e2       	ldi	r24, 0x27	; 39
     c0c:	96 e6       	ldi	r25, 0x66	; 102
     c0e:	a4 e0       	ldi	r26, 0x04	; 4
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	80 83       	st	Z, r24
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	a2 83       	std	Z+2, r26	; 0x02
     c18:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	98 e2       	ldi	r25, 0x28	; 40
     c1e:	85 8b       	std	Z+21, r24	; 0x15
     c20:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
     c22:	4c 2f       	mov	r20, r28
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	d8 01       	movw	r26, r16
     c28:	a4 0f       	add	r26, r20
     c2a:	b5 1f       	adc	r27, r21
     c2c:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1] ^ 
     c2e:	9a 01       	movw	r18, r20
     c30:	2f 5f       	subi	r18, 0xFF	; 255
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	20 0f       	add	r18, r16
     c36:	31 1f       	adc	r19, r17
						 PayloadBuffer[DataStartByte + 2];
     c38:	4e 5f       	subi	r20, 0xFE	; 254
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	d8 01       	movw	r26, r16
     c3e:	a4 0f       	add	r26, r20
     c40:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
     c42:	e9 01       	movw	r28, r18
     c44:	88 81       	ld	r24, Y
     c46:	89 27       	eor	r24, r25
     c48:	9c 91       	ld	r25, X
     c4a:	89 27       	eor	r24, r25
     c4c:	9b ed       	ldi	r25, 0xDB	; 219
     c4e:	89 27       	eor	r24, r25
     c50:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1] ^ 
						 PayloadBuffer[DataStartByte + 2];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
     c52:	6f 2d       	mov	r22, r15
     c54:	c8 01       	movw	r24, r16
     c56:	ae df       	rcall	.-164    	; 0xbb4 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	08 95       	ret

00000c66 <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
     c66:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^ 
     c68:	80 91 e2 3e 	lds	r24, 0x3EE2	; 0x803ee2 <TxParam+0x17>
					 buffer[0]		  ^ 
     c6c:	50 81       	ld	r21, Z
					 buffer[1]		  ^ 
     c6e:	41 81       	ldd	r20, Z+1	; 0x01
					 buffer[2]		  ^ 
     c70:	32 81       	ldd	r19, Z+2	; 0x02
					 buffer[3]		  ^ 
     c72:	23 81       	ldd	r18, Z+3	; 0x03
					 buffer[4]		  ^ 
     c74:	94 81       	ldd	r25, Z+4	; 0x04
					 buffer[5]);
     c76:	65 81       	ldd	r22, Z+5	; 0x05
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^ 
     c78:	85 27       	eor	r24, r21
     c7a:	84 27       	eor	r24, r20
     c7c:	83 27       	eor	r24, r19
     c7e:	82 27       	eor	r24, r18
     c80:	89 27       	eor	r24, r25
					 buffer[1]		  ^ 
					 buffer[2]		  ^ 
					 buffer[3]		  ^ 
					 buffer[4]		  ^ 
					 buffer[5]);
}
     c82:	86 27       	eor	r24, r22
     c84:	08 95       	ret

00000c86 <SX1243Process>:

//ATtiny817
U8 SX1243Process(void)
{
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;

	TxParam.Config |= 0x8000;
     c8c:	cb ec       	ldi	r28, 0xCB	; 203
     c8e:	de e3       	ldi	r29, 0x3E	; 62
     c90:	4d 89       	ldd	r20, Y+21	; 0x15
     c92:	5e 89       	ldd	r21, Y+22	; 0x16
     c94:	50 68       	ori	r21, 0x80	; 128
     c96:	4d 8b       	std	Y+21, r20	; 0x15
     c98:	5e 8b       	std	Y+22, r21	; 0x16
	state |= SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	01 df       	rcall	.-510    	; 0xaa4 <SX1243Write>
     ca2:	18 2f       	mov	r17, r24
	state |= SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
     ca4:	48 81       	ld	r20, Y
     ca6:	59 81       	ldd	r21, Y+1	; 0x01
     ca8:	6a 81       	ldd	r22, Y+2	; 0x02
     caa:	7b 81       	ldd	r23, Y+3	; 0x03
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	fa de       	rcall	.-524    	; 0xaa4 <SX1243Write>
     cb0:	18 2b       	or	r17, r24
	TxParam.Config &= 0x7FFF;
     cb2:	8d 89       	ldd	r24, Y+21	; 0x15
     cb4:	9e 89       	ldd	r25, Y+22	; 0x16
     cb6:	9f 77       	andi	r25, 0x7F	; 127
     cb8:	8d 8b       	std	Y+21, r24	; 0x15
     cba:	9e 8b       	std	Y+22, r25	; 0x16

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
     cbc:	80 91 5c 93 	lds	r24, 0x935C	; 0x80935c <__bss_end+0x5479>
     cc0:	8d 5f       	subi	r24, 0xFD	; 253
     cc2:	24 df       	rcall	.-440    	; 0xb0c <Sx1243ConvertBuffer>
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     cc4:	e2 e5       	ldi	r30, 0x52	; 82
     cc6:	f4 e0       	ldi	r31, 0x04	; 4
     cc8:	80 81       	ld	r24, Z
     cca:	88 60       	ori	r24, 0x08	; 8
     ccc:	80 83       	st	Z, r24

//ATtiny817
U8 SX1243Process(void)
{
	U8 state = SX_OK;
	U16 j = 0;
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <SX1243Process+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd4:	80 e1       	ldi	r24, 0x10	; 16
     cd6:	8a 95       	dec	r24
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <SX1243Process+0x50>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <SX1243Process+0x56>
	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
	{
		_delay_us(10);
		j++;
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
	state |= SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	TX_READY_set_pull_mode(PORT_PULL_UP);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     ce0:	52 99       	sbic	0x0a, 2	; 10
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <SX1243Process+0x64>
     ce4:	2c 3d       	cpi	r18, 0xDC	; 220
     ce6:	31 05       	cpc	r19, r1
     ce8:	a8 f3       	brcs	.-22     	; 0xcd4 <SX1243Process+0x4e>
	{
		_delay_us(10);
		j++;
	}
	state = j >= TRANSMITTER_READY_TIMEOUT ? SX_ERROR : state;
     cea:	2c 3d       	cpi	r18, 0xDC	; 220
     cec:	31 05       	cpc	r19, r1
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <SX1243Process+0x6c>
     cf0:	11 e0       	ldi	r17, 0x01	; 1
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     cf2:	e2 e5       	ldi	r30, 0x52	; 82
     cf4:	f4 e0       	ldi	r31, 0x04	; 4
     cf6:	80 81       	ld	r24, Z
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	80 83       	st	Z, r24
	TX_READY_set_pull_mode(PORT_PULL_OFF);
	
	
	if (j < TRANSMITTER_READY_TIMEOUT)
     cfc:	2c 3d       	cpi	r18, 0xDC	; 220
     cfe:	31 05       	cpc	r19, r1
     d00:	f0 f0       	brcs	.+60     	; 0xd3e <SX1243Process+0xb8>
			j++;
		}
	}
	else
	{
		state = SX_ERROR;
     d02:	11 e0       	ldi	r17, 0x01	; 1
     d04:	24 c0       	rjmp	.+72     	; 0xd4e <SX1243Process+0xc8>
	{
		j = 0;
		
		while (j < fastBufSize)
		{
			DATA_set_level(fastBuf[j]);
     d06:	f9 01       	movw	r30, r18
     d08:	e5 5b       	subi	r30, 0xB5	; 181
     d0a:	f1 4c       	sbci	r31, 0xC1	; 193
     d0c:	90 81       	ld	r25, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     d0e:	99 23       	and	r25, r25
     d10:	21 f0       	breq	.+8      	; 0xd1a <SX1243Process+0x94>
		VPORTC.OUT |= (1 << pin);
     d12:	99 b1       	in	r25, 0x09	; 9
     d14:	90 61       	ori	r25, 0x10	; 16
     d16:	99 b9       	out	0x09, r25	; 9
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <SX1243Process+0x9a>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     d1a:	99 b1       	in	r25, 0x09	; 9
     d1c:	9f 7e       	andi	r25, 0xEF	; 239
     d1e:	99 b9       	out	0x09, r25	; 9
     d20:	8a e0       	ldi	r24, 0x0A	; 10
     d22:	8a 95       	dec	r24
     d24:	f1 f7       	brne	.-4      	; 0xd22 <SX1243Process+0x9c>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <SX1243Process+0xa2>
			_delay_us(6.4);
			if (!fastBuf[j])
     d28:	f9 01       	movw	r30, r18
     d2a:	e5 5b       	subi	r30, 0xB5	; 181
     d2c:	f1 4c       	sbci	r31, 0xC1	; 193
     d2e:	90 81       	ld	r25, Z
     d30:	91 11       	cpse	r25, r1
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <SX1243Process+0xb2>
			{
				_NOP();
     d34:	00 00       	nop
				_NOP();
     d36:	00 00       	nop
			}
			j++;
     d38:	2f 5f       	subi	r18, 0xFF	; 255
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <SX1243Process+0xbc>
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
	
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		
		while (j < fastBufSize)
     d42:	40 91 48 3e 	lds	r20, 0x3E48	; 0x803e48 <fastBufSize>
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	24 17       	cp	r18, r20
     d4a:	35 07       	cpc	r19, r21
     d4c:	e0 f2       	brcs	.-72     	; 0xd06 <SX1243Process+0x80>
	else
	{
		state = SX_ERROR;
	}
	
	state |= SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     d4e:	40 91 e0 3e 	lds	r20, 0x3EE0	; 0x803ee0 <TxParam+0x15>
     d52:	50 91 e1 3e 	lds	r21, 0x3EE1	; 0x803ee1 <TxParam+0x16>
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	a3 de       	rcall	.-698    	; 0xaa4 <SX1243Write>
     d5e:	c1 2f       	mov	r28, r17
     d60:	c8 2b       	or	r28, r24
	
	if (state == SX_ERROR)
     d62:	c1 30       	cpi	r28, 0x01	; 1
     d64:	09 f4       	brne	.+2      	; 0xd68 <SX1243Process+0xe2>
	{
		SX1243Reset();
     d66:	c5 de       	rcall	.-630    	; 0xaf2 <SX1243Reset>
	}
		
	return state;
     d68:	8c 2f       	mov	r24, r28
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	08 95       	ret

00000d72 <QTOUCH_GetSensorValue>:

int32_t QTOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	int32_t var = 0;
	
	switch (touchPin)
     d72:	88 23       	and	r24, r24
     d74:	19 f0       	breq	.+6      	; 0xd7c <QTOUCH_GetSensorValue+0xa>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	a1 f1       	breq	.+104    	; 0xde2 <QTOUCH_GetSensorValue+0x70>
     d7a:	66 c0       	rjmp	.+204    	; 0xe48 <QTOUCH_GetSensorValue+0xd6>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     d7c:	66 23       	and	r22, r22
     d7e:	21 f0       	breq	.+8      	; 0xd88 <QTOUCH_GetSensorValue+0x16>
		VPORTB.OUT |= (1 << pin);
     d80:	85 b1       	in	r24, 0x05	; 5
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	85 b9       	out	0x05, r24	; 5
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <QTOUCH_GetSensorValue+0x1c>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     d88:	85 b1       	in	r24, 0x05	; 5
     d8a:	8d 7f       	andi	r24, 0xFD	; 253
     d8c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     d8e:	84 b1       	in	r24, 0x04	; 4
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	84 b9       	out	0x04, r24	; 4
			* Set PARTNER pin state for charging or discharging ADC sample capacitance.
			* If dir == true sample capacitance charged else discharged.
			*/
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f72aa>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     d9a:	61 30       	cpi	r22, 0x01	; 1
     d9c:	21 f0       	breq	.+8      	; 0xda6 <QTOUCH_GetSensorValue+0x34>
		VPORTA.OUT |= (1 << pin);
     d9e:	81 b1       	in	r24, 0x01	; 1
     da0:	80 64       	ori	r24, 0x40	; 64
     da2:	81 b9       	out	0x01, r24	; 1
     da4:	03 c0       	rjmp	.+6      	; 0xdac <QTOUCH_GetSensorValue+0x3a>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     da6:	81 b1       	in	r24, 0x01	; 1
     da8:	8f 7b       	andi	r24, 0xBF	; 191
     daa:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     dac:	80 b1       	in	r24, 0x00	; 0
     dae:	80 64       	ori	r24, 0x40	; 64
     db0:	80 b9       	out	0x00, r24	; 0
     db2:	85 e0       	ldi	r24, 0x05	; 5
     db4:	8a 95       	dec	r24
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <QTOUCH_GetSensorValue+0x42>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     db8:	80 b1       	in	r24, 0x00	; 0
     dba:	8f 7b       	andi	r24, 0xBF	; 191
     dbc:	80 b9       	out	0x00, r24	; 0
			
			/*!
			* Set SENSOR pin to ADC input and complete conversion.
			*/
			SX_set_dir(PORT_DIR_IN);
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
     dbe:	86 e0       	ldi	r24, 0x06	; 6
     dc0:	66 dd       	rcall	.-1332   	; 0x88e <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     dc2:	2a e0       	ldi	r18, 0x0A	; 10
     dc4:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f72aa>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     dc8:	25 b1       	in	r18, 0x05	; 5
     dca:	22 60       	ori	r18, 0x02	; 2
     dcc:	25 b9       	out	0x05, r18	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     dce:	21 b1       	in	r18, 0x01	; 1
     dd0:	20 64       	ori	r18, 0x40	; 64
     dd2:	21 b9       	out	0x01, r18	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     dd4:	20 b1       	in	r18, 0x00	; 0
     dd6:	20 64       	ori	r18, 0x40	; 64
     dd8:	20 b9       	out	0x00, r18	; 0
			*/
			PARTNER_set_level(true);
			SX_set_level(true);
			SX_set_dir(PORT_DIR_OUT);
			
			return var;
     dda:	bc 01       	movw	r22, r24
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     de2:	66 23       	and	r22, r22
     de4:	21 f0       	breq	.+8      	; 0xdee <QTOUCH_GetSensorValue+0x7c>
		VPORTB.OUT |= (1 << pin);
     de6:	85 b1       	in	r24, 0x05	; 5
     de8:	82 60       	ori	r24, 0x02	; 2
     dea:	85 b9       	out	0x05, r24	; 5
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <QTOUCH_GetSensorValue+0x82>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     dee:	85 b1       	in	r24, 0x05	; 5
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     df4:	84 b1       	in	r24, 0x04	; 4
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	84 b9       	out	0x04, r24	; 4
			* Set PARTNER pin state for charging or discharging ADC sample capacitance.
			* If dir == true sample capacitance charged else discharged.
			*/
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     dfa:	8a e0       	ldi	r24, 0x0A	; 10
     dfc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f72aa>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     e00:	61 30       	cpi	r22, 0x01	; 1
     e02:	21 f0       	breq	.+8      	; 0xe0c <QTOUCH_GetSensorValue+0x9a>
		VPORTB.OUT |= (1 << pin);
     e04:	85 b1       	in	r24, 0x05	; 5
     e06:	81 60       	ori	r24, 0x01	; 1
     e08:	85 b9       	out	0x05, r24	; 5
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <QTOUCH_GetSensorValue+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     e0c:	85 b1       	in	r24, 0x05	; 5
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     e12:	84 b1       	in	r24, 0x04	; 4
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	84 b9       	out	0x04, r24	; 4
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	8a 95       	dec	r24
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <QTOUCH_GetSensorValue+0xa8>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     e1e:	84 b1       	in	r24, 0x04	; 4
     e20:	8e 7f       	andi	r24, 0xFE	; 254
     e22:	84 b9       	out	0x04, r24	; 4
			
			/*!
			* Set SENSOR pin to ADC input and complete conversion.
			*/
			SY_set_dir(PORT_DIR_IN);
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
     e24:	8b e0       	ldi	r24, 0x0B	; 11
     e26:	33 dd       	rcall	.-1434   	; 0x88e <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;			
     e28:	2a e0       	ldi	r18, 0x0A	; 10
     e2a:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f72aa>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     e2e:	25 b1       	in	r18, 0x05	; 5
     e30:	22 60       	ori	r18, 0x02	; 2
     e32:	25 b9       	out	0x05, r18	; 5
     e34:	25 b1       	in	r18, 0x05	; 5
     e36:	21 60       	ori	r18, 0x01	; 1
     e38:	25 b9       	out	0x05, r18	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     e3a:	24 b1       	in	r18, 0x04	; 4
     e3c:	21 60       	ori	r18, 0x01	; 1
     e3e:	24 b9       	out	0x04, r18	; 4
			*/
			PARTNER_set_level(true);
			SY_set_level(true);
			SY_set_dir(PORT_DIR_OUT);
			
			return var;
     e40:	bc 01       	movw	r22, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	08 95       	ret
		* Do nothing! 
		*/
		break;
	}
	
	return var;
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	cb 01       	movw	r24, r22
}
     e4e:	08 95       	ret

00000e50 <__divsf3>:
     e50:	0e 94 3c 07 	call	0xe78	; 0xe78 <__divsf3x>
     e54:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_round>
     e58:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_pscB>
     e5c:	58 f0       	brcs	.+22     	; 0xe74 <__divsf3+0x24>
     e5e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscA>
     e62:	40 f0       	brcs	.+16     	; 0xe74 <__divsf3+0x24>
     e64:	29 f4       	brne	.+10     	; 0xe70 <__divsf3+0x20>
     e66:	5f 3f       	cpi	r21, 0xFF	; 255
     e68:	29 f0       	breq	.+10     	; 0xe74 <__divsf3+0x24>
     e6a:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__fp_inf>
     e6e:	51 11       	cpse	r21, r1
     e70:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_szero>
     e74:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__fp_nan>

00000e78 <__divsf3x>:
     e78:	0e 94 89 08 	call	0x1112	; 0x1112 <__fp_split3>
     e7c:	68 f3       	brcs	.-38     	; 0xe58 <__divsf3+0x8>

00000e7e <__divsf3_pse>:
     e7e:	99 23       	and	r25, r25
     e80:	b1 f3       	breq	.-20     	; 0xe6e <__divsf3+0x1e>
     e82:	55 23       	and	r21, r21
     e84:	91 f3       	breq	.-28     	; 0xe6a <__divsf3+0x1a>
     e86:	95 1b       	sub	r25, r21
     e88:	55 0b       	sbc	r21, r21
     e8a:	bb 27       	eor	r27, r27
     e8c:	aa 27       	eor	r26, r26
     e8e:	62 17       	cp	r22, r18
     e90:	73 07       	cpc	r23, r19
     e92:	84 07       	cpc	r24, r20
     e94:	38 f0       	brcs	.+14     	; 0xea4 <__divsf3_pse+0x26>
     e96:	9f 5f       	subi	r25, 0xFF	; 255
     e98:	5f 4f       	sbci	r21, 0xFF	; 255
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	aa 1f       	adc	r26, r26
     ea2:	a9 f3       	breq	.-22     	; 0xe8e <__divsf3_pse+0x10>
     ea4:	35 d0       	rcall	.+106    	; 0xf10 <__divsf3_pse+0x92>
     ea6:	0e 2e       	mov	r0, r30
     ea8:	3a f0       	brmi	.+14     	; 0xeb8 <__divsf3_pse+0x3a>
     eaa:	e0 e8       	ldi	r30, 0x80	; 128
     eac:	32 d0       	rcall	.+100    	; 0xf12 <__divsf3_pse+0x94>
     eae:	91 50       	subi	r25, 0x01	; 1
     eb0:	50 40       	sbci	r21, 0x00	; 0
     eb2:	e6 95       	lsr	r30
     eb4:	00 1c       	adc	r0, r0
     eb6:	ca f7       	brpl	.-14     	; 0xeaa <__divsf3_pse+0x2c>
     eb8:	2b d0       	rcall	.+86     	; 0xf10 <__divsf3_pse+0x92>
     eba:	fe 2f       	mov	r31, r30
     ebc:	29 d0       	rcall	.+82     	; 0xf10 <__divsf3_pse+0x92>
     ebe:	66 0f       	add	r22, r22
     ec0:	77 1f       	adc	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	bb 1f       	adc	r27, r27
     ec6:	26 17       	cp	r18, r22
     ec8:	37 07       	cpc	r19, r23
     eca:	48 07       	cpc	r20, r24
     ecc:	ab 07       	cpc	r26, r27
     ece:	b0 e8       	ldi	r27, 0x80	; 128
     ed0:	09 f0       	breq	.+2      	; 0xed4 <__divsf3_pse+0x56>
     ed2:	bb 0b       	sbc	r27, r27
     ed4:	80 2d       	mov	r24, r0
     ed6:	bf 01       	movw	r22, r30
     ed8:	ff 27       	eor	r31, r31
     eda:	93 58       	subi	r25, 0x83	; 131
     edc:	5f 4f       	sbci	r21, 0xFF	; 255
     ede:	3a f0       	brmi	.+14     	; 0xeee <__divsf3_pse+0x70>
     ee0:	9e 3f       	cpi	r25, 0xFE	; 254
     ee2:	51 05       	cpc	r21, r1
     ee4:	78 f0       	brcs	.+30     	; 0xf04 <__divsf3_pse+0x86>
     ee6:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__fp_inf>
     eea:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_szero>
     eee:	5f 3f       	cpi	r21, 0xFF	; 255
     ef0:	e4 f3       	brlt	.-8      	; 0xeea <__divsf3_pse+0x6c>
     ef2:	98 3e       	cpi	r25, 0xE8	; 232
     ef4:	d4 f3       	brlt	.-12     	; 0xeea <__divsf3_pse+0x6c>
     ef6:	86 95       	lsr	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f7 95       	ror	r31
     f00:	9f 5f       	subi	r25, 0xFF	; 255
     f02:	c9 f7       	brne	.-14     	; 0xef6 <__divsf3_pse+0x78>
     f04:	88 0f       	add	r24, r24
     f06:	91 1d       	adc	r25, r1
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	97 f9       	bld	r25, 7
     f0e:	08 95       	ret
     f10:	e1 e0       	ldi	r30, 0x01	; 1
     f12:	66 0f       	add	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	bb 1f       	adc	r27, r27
     f1a:	62 17       	cp	r22, r18
     f1c:	73 07       	cpc	r23, r19
     f1e:	84 07       	cpc	r24, r20
     f20:	ba 07       	cpc	r27, r26
     f22:	20 f0       	brcs	.+8      	; 0xf2c <__divsf3_pse+0xae>
     f24:	62 1b       	sub	r22, r18
     f26:	73 0b       	sbc	r23, r19
     f28:	84 0b       	sbc	r24, r20
     f2a:	ba 0b       	sbc	r27, r26
     f2c:	ee 1f       	adc	r30, r30
     f2e:	88 f7       	brcc	.-30     	; 0xf12 <__divsf3_pse+0x94>
     f30:	e0 95       	com	r30
     f32:	08 95       	ret

00000f34 <__fixsfdi>:
     f34:	be e3       	ldi	r27, 0x3E	; 62
     f36:	04 d0       	rcall	.+8      	; 0xf40 <__fixunssfdi+0x2>
     f38:	08 f4       	brcc	.+2      	; 0xf3c <__fixsfdi+0x8>
     f3a:	90 e8       	ldi	r25, 0x80	; 128
     f3c:	08 95       	ret

00000f3e <__fixunssfdi>:
     f3e:	bf e3       	ldi	r27, 0x3F	; 63
     f40:	22 27       	eor	r18, r18
     f42:	33 27       	eor	r19, r19
     f44:	a9 01       	movw	r20, r18
     f46:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_splitA>
     f4a:	60 f1       	brcs	.+88     	; 0xfa4 <__fixunssfdi+0x66>
     f4c:	9f 57       	subi	r25, 0x7F	; 127
     f4e:	48 f1       	brcs	.+82     	; 0xfa2 <__fixunssfdi+0x64>
     f50:	b9 17       	cp	r27, r25
     f52:	40 f1       	brcs	.+80     	; 0xfa4 <__fixunssfdi+0x66>
     f54:	bf e3       	ldi	r27, 0x3F	; 63
     f56:	b9 1b       	sub	r27, r25
     f58:	99 27       	eor	r25, r25
     f5a:	b8 50       	subi	r27, 0x08	; 8
     f5c:	3a f4       	brpl	.+14     	; 0xf6c <__fixunssfdi+0x2e>
     f5e:	66 0f       	add	r22, r22
     f60:	77 1f       	adc	r23, r23
     f62:	88 1f       	adc	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	b3 95       	inc	r27
     f68:	d2 f3       	brmi	.-12     	; 0xf5e <__fixunssfdi+0x20>
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <__fixunssfdi+0x5a>
     f6c:	b8 50       	subi	r27, 0x08	; 8
     f6e:	4a f0       	brmi	.+18     	; 0xf82 <__fixunssfdi+0x44>
     f70:	23 2f       	mov	r18, r19
     f72:	34 2f       	mov	r19, r20
     f74:	45 2f       	mov	r20, r21
     f76:	56 2f       	mov	r21, r22
     f78:	67 2f       	mov	r22, r23
     f7a:	78 2f       	mov	r23, r24
     f7c:	88 27       	eor	r24, r24
     f7e:	b8 50       	subi	r27, 0x08	; 8
     f80:	ba f7       	brpl	.-18     	; 0xf70 <__fixunssfdi+0x32>
     f82:	b8 5f       	subi	r27, 0xF8	; 248
     f84:	49 f0       	breq	.+18     	; 0xf98 <__fixunssfdi+0x5a>
     f86:	86 95       	lsr	r24
     f88:	77 95       	ror	r23
     f8a:	67 95       	ror	r22
     f8c:	57 95       	ror	r21
     f8e:	47 95       	ror	r20
     f90:	37 95       	ror	r19
     f92:	27 95       	ror	r18
     f94:	ba 95       	dec	r27
     f96:	b9 f7       	brne	.-18     	; 0xf86 <__fixunssfdi+0x48>
     f98:	16 f4       	brtc	.+4      	; 0xf9e <__fixunssfdi+0x60>
     f9a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__fp_negdi>
     f9e:	88 94       	clc
     fa0:	08 95       	ret
     fa2:	88 94       	clc
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	cb 01       	movw	r24, r22
     faa:	08 95       	ret

00000fac <__floatunsisf>:
     fac:	e8 94       	clt
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <__floatsisf+0x12>

00000fb0 <__floatsisf>:
     fb0:	97 fb       	bst	r25, 7
     fb2:	3e f4       	brtc	.+14     	; 0xfc2 <__floatsisf+0x12>
     fb4:	90 95       	com	r25
     fb6:	80 95       	com	r24
     fb8:	70 95       	com	r23
     fba:	61 95       	neg	r22
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	8f 4f       	sbci	r24, 0xFF	; 255
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	99 23       	and	r25, r25
     fc4:	a9 f0       	breq	.+42     	; 0xff0 <__floatsisf+0x40>
     fc6:	f9 2f       	mov	r31, r25
     fc8:	96 e9       	ldi	r25, 0x96	; 150
     fca:	bb 27       	eor	r27, r27
     fcc:	93 95       	inc	r25
     fce:	f6 95       	lsr	r31
     fd0:	87 95       	ror	r24
     fd2:	77 95       	ror	r23
     fd4:	67 95       	ror	r22
     fd6:	b7 95       	ror	r27
     fd8:	f1 11       	cpse	r31, r1
     fda:	f8 cf       	rjmp	.-16     	; 0xfcc <__floatsisf+0x1c>
     fdc:	fa f4       	brpl	.+62     	; 0x101c <__floatsisf+0x6c>
     fde:	bb 0f       	add	r27, r27
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <__floatsisf+0x36>
     fe2:	60 ff       	sbrs	r22, 0
     fe4:	1b c0       	rjmp	.+54     	; 0x101c <__floatsisf+0x6c>
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	16 c0       	rjmp	.+44     	; 0x101c <__floatsisf+0x6c>
     ff0:	88 23       	and	r24, r24
     ff2:	11 f0       	breq	.+4      	; 0xff8 <__floatsisf+0x48>
     ff4:	96 e9       	ldi	r25, 0x96	; 150
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <__floatsisf+0x6a>
     ff8:	77 23       	and	r23, r23
     ffa:	21 f0       	breq	.+8      	; 0x1004 <__floatsisf+0x54>
     ffc:	9e e8       	ldi	r25, 0x8E	; 142
     ffe:	87 2f       	mov	r24, r23
    1000:	76 2f       	mov	r23, r22
    1002:	05 c0       	rjmp	.+10     	; 0x100e <__floatsisf+0x5e>
    1004:	66 23       	and	r22, r22
    1006:	71 f0       	breq	.+28     	; 0x1024 <__floatsisf+0x74>
    1008:	96 e8       	ldi	r25, 0x86	; 134
    100a:	86 2f       	mov	r24, r22
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	2a f0       	brmi	.+10     	; 0x101c <__floatsisf+0x6c>
    1012:	9a 95       	dec	r25
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	da f7       	brpl	.-10     	; 0x1012 <__floatsisf+0x62>
    101c:	88 0f       	add	r24, r24
    101e:	96 95       	lsr	r25
    1020:	87 95       	ror	r24
    1022:	97 f9       	bld	r25, 7
    1024:	08 95       	ret

00001026 <__floatundisf>:
    1026:	e8 94       	clt

00001028 <__fp_di2sf>:
    1028:	f9 2f       	mov	r31, r25
    102a:	96 eb       	ldi	r25, 0xB6	; 182
    102c:	ff 23       	and	r31, r31
    102e:	81 f0       	breq	.+32     	; 0x1050 <__fp_di2sf+0x28>
    1030:	12 16       	cp	r1, r18
    1032:	13 06       	cpc	r1, r19
    1034:	14 06       	cpc	r1, r20
    1036:	44 0b       	sbc	r20, r20
    1038:	93 95       	inc	r25
    103a:	f6 95       	lsr	r31
    103c:	87 95       	ror	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	57 95       	ror	r21
    1044:	40 40       	sbci	r20, 0x00	; 0
    1046:	ff 23       	and	r31, r31
    1048:	b9 f7       	brne	.-18     	; 0x1038 <__fp_di2sf+0x10>
    104a:	1b c0       	rjmp	.+54     	; 0x1082 <__fp_di2sf+0x5a>
    104c:	99 27       	eor	r25, r25
    104e:	08 95       	ret
    1050:	88 23       	and	r24, r24
    1052:	51 f4       	brne	.+20     	; 0x1068 <__fp_di2sf+0x40>
    1054:	98 50       	subi	r25, 0x08	; 8
    1056:	d2 f7       	brpl	.-12     	; 0x104c <__fp_di2sf+0x24>
    1058:	87 2b       	or	r24, r23
    105a:	76 2f       	mov	r23, r22
    105c:	65 2f       	mov	r22, r21
    105e:	54 2f       	mov	r21, r20
    1060:	43 2f       	mov	r20, r19
    1062:	32 2f       	mov	r19, r18
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	b1 f3       	breq	.-20     	; 0x1054 <__fp_di2sf+0x2c>
    1068:	12 16       	cp	r1, r18
    106a:	13 06       	cpc	r1, r19
    106c:	14 06       	cpc	r1, r20
    106e:	44 0b       	sbc	r20, r20
    1070:	88 23       	and	r24, r24
    1072:	3a f0       	brmi	.+14     	; 0x1082 <__fp_di2sf+0x5a>
    1074:	9a 95       	dec	r25
    1076:	44 0f       	add	r20, r20
    1078:	55 1f       	adc	r21, r21
    107a:	66 1f       	adc	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	ca f7       	brpl	.-14     	; 0x1074 <__fp_di2sf+0x4c>
    1082:	55 23       	and	r21, r21
    1084:	4a f4       	brpl	.+18     	; 0x1098 <__fp_di2sf+0x70>
    1086:	44 0f       	add	r20, r20
    1088:	55 1f       	adc	r21, r21
    108a:	11 f4       	brne	.+4      	; 0x1090 <__fp_di2sf+0x68>
    108c:	60 ff       	sbrs	r22, 0
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <__fp_di2sf+0x70>
    1090:	6f 5f       	subi	r22, 0xFF	; 255
    1092:	7f 4f       	sbci	r23, 0xFF	; 255
    1094:	8f 4f       	sbci	r24, 0xFF	; 255
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	88 0f       	add	r24, r24
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24
    109e:	97 f9       	bld	r25, 7
    10a0:	08 95       	ret

000010a2 <__fp_inf>:
    10a2:	97 f9       	bld	r25, 7
    10a4:	9f 67       	ori	r25, 0x7F	; 127
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	08 95       	ret

000010ae <__fp_nan>:
    10ae:	9f ef       	ldi	r25, 0xFF	; 255
    10b0:	80 ec       	ldi	r24, 0xC0	; 192
    10b2:	08 95       	ret

000010b4 <__fp_negdi>:
    10b4:	90 95       	com	r25
    10b6:	80 95       	com	r24
    10b8:	70 95       	com	r23
    10ba:	60 95       	com	r22
    10bc:	50 95       	com	r21
    10be:	40 95       	com	r20
    10c0:	30 95       	com	r19
    10c2:	21 95       	neg	r18
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	4f 4f       	sbci	r20, 0xFF	; 255
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	6f 4f       	sbci	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	08 95       	ret

000010d4 <__fp_pscA>:
    10d4:	00 24       	eor	r0, r0
    10d6:	0a 94       	dec	r0
    10d8:	16 16       	cp	r1, r22
    10da:	17 06       	cpc	r1, r23
    10dc:	18 06       	cpc	r1, r24
    10de:	09 06       	cpc	r0, r25
    10e0:	08 95       	ret

000010e2 <__fp_pscB>:
    10e2:	00 24       	eor	r0, r0
    10e4:	0a 94       	dec	r0
    10e6:	12 16       	cp	r1, r18
    10e8:	13 06       	cpc	r1, r19
    10ea:	14 06       	cpc	r1, r20
    10ec:	05 06       	cpc	r0, r21
    10ee:	08 95       	ret

000010f0 <__fp_round>:
    10f0:	09 2e       	mov	r0, r25
    10f2:	03 94       	inc	r0
    10f4:	00 0c       	add	r0, r0
    10f6:	11 f4       	brne	.+4      	; 0x10fc <__fp_round+0xc>
    10f8:	88 23       	and	r24, r24
    10fa:	52 f0       	brmi	.+20     	; 0x1110 <__fp_round+0x20>
    10fc:	bb 0f       	add	r27, r27
    10fe:	40 f4       	brcc	.+16     	; 0x1110 <__fp_round+0x20>
    1100:	bf 2b       	or	r27, r31
    1102:	11 f4       	brne	.+4      	; 0x1108 <__fp_round+0x18>
    1104:	60 ff       	sbrs	r22, 0
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <__fp_round+0x20>
    1108:	6f 5f       	subi	r22, 0xFF	; 255
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__fp_split3>:
    1112:	57 fd       	sbrc	r21, 7
    1114:	90 58       	subi	r25, 0x80	; 128
    1116:	44 0f       	add	r20, r20
    1118:	55 1f       	adc	r21, r21
    111a:	59 f0       	breq	.+22     	; 0x1132 <__fp_splitA+0x10>
    111c:	5f 3f       	cpi	r21, 0xFF	; 255
    111e:	71 f0       	breq	.+28     	; 0x113c <__fp_splitA+0x1a>
    1120:	47 95       	ror	r20

00001122 <__fp_splitA>:
    1122:	88 0f       	add	r24, r24
    1124:	97 fb       	bst	r25, 7
    1126:	99 1f       	adc	r25, r25
    1128:	61 f0       	breq	.+24     	; 0x1142 <__fp_splitA+0x20>
    112a:	9f 3f       	cpi	r25, 0xFF	; 255
    112c:	79 f0       	breq	.+30     	; 0x114c <__fp_splitA+0x2a>
    112e:	87 95       	ror	r24
    1130:	08 95       	ret
    1132:	12 16       	cp	r1, r18
    1134:	13 06       	cpc	r1, r19
    1136:	14 06       	cpc	r1, r20
    1138:	55 1f       	adc	r21, r21
    113a:	f2 cf       	rjmp	.-28     	; 0x1120 <__fp_split3+0xe>
    113c:	46 95       	lsr	r20
    113e:	f1 df       	rcall	.-30     	; 0x1122 <__fp_splitA>
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <__fp_splitA+0x30>
    1142:	16 16       	cp	r1, r22
    1144:	17 06       	cpc	r1, r23
    1146:	18 06       	cpc	r1, r24
    1148:	99 1f       	adc	r25, r25
    114a:	f1 cf       	rjmp	.-30     	; 0x112e <__fp_splitA+0xc>
    114c:	86 95       	lsr	r24
    114e:	71 05       	cpc	r23, r1
    1150:	61 05       	cpc	r22, r1
    1152:	08 94       	sec
    1154:	08 95       	ret

00001156 <__fp_zero>:
    1156:	e8 94       	clt

00001158 <__fp_szero>:
    1158:	bb 27       	eor	r27, r27
    115a:	66 27       	eor	r22, r22
    115c:	77 27       	eor	r23, r23
    115e:	cb 01       	movw	r24, r22
    1160:	97 f9       	bld	r25, 7
    1162:	08 95       	ret

00001164 <__mulsf3>:
    1164:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
    1168:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__fp_round>
    116c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscA>
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__mulsf3+0x1c>
    1172:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_pscB>
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__mulsf3+0x1c>
    1178:	95 23       	and	r25, r21
    117a:	11 f0       	breq	.+4      	; 0x1180 <__mulsf3+0x1c>
    117c:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__fp_inf>
    1180:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_szero>

0000118a <__mulsf3x>:
    118a:	0e 94 89 08 	call	0x1112	; 0x1112 <__fp_split3>
    118e:	70 f3       	brcs	.-36     	; 0x116c <__mulsf3+0x8>

00001190 <__mulsf3_pse>:
    1190:	95 9f       	mul	r25, r21
    1192:	c1 f3       	breq	.-16     	; 0x1184 <__mulsf3+0x20>
    1194:	95 0f       	add	r25, r21
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	55 1f       	adc	r21, r21
    119a:	62 9f       	mul	r22, r18
    119c:	f0 01       	movw	r30, r0
    119e:	72 9f       	mul	r23, r18
    11a0:	bb 27       	eor	r27, r27
    11a2:	f0 0d       	add	r31, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	63 9f       	mul	r22, r19
    11a8:	aa 27       	eor	r26, r26
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	aa 1f       	adc	r26, r26
    11b0:	64 9f       	mul	r22, r20
    11b2:	66 27       	eor	r22, r22
    11b4:	b0 0d       	add	r27, r0
    11b6:	a1 1d       	adc	r26, r1
    11b8:	66 1f       	adc	r22, r22
    11ba:	82 9f       	mul	r24, r18
    11bc:	22 27       	eor	r18, r18
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	62 1f       	adc	r22, r18
    11c4:	73 9f       	mul	r23, r19
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	83 9f       	mul	r24, r19
    11ce:	a0 0d       	add	r26, r0
    11d0:	61 1d       	adc	r22, r1
    11d2:	22 1f       	adc	r18, r18
    11d4:	74 9f       	mul	r23, r20
    11d6:	33 27       	eor	r19, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	23 1f       	adc	r18, r19
    11de:	84 9f       	mul	r24, r20
    11e0:	60 0d       	add	r22, r0
    11e2:	21 1d       	adc	r18, r1
    11e4:	82 2f       	mov	r24, r18
    11e6:	76 2f       	mov	r23, r22
    11e8:	6a 2f       	mov	r22, r26
    11ea:	11 24       	eor	r1, r1
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	9a f0       	brmi	.+38     	; 0x1218 <__mulsf3_pse+0x88>
    11f2:	f1 f0       	breq	.+60     	; 0x1230 <__mulsf3_pse+0xa0>
    11f4:	88 23       	and	r24, r24
    11f6:	4a f0       	brmi	.+18     	; 0x120a <__mulsf3_pse+0x7a>
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	bb 1f       	adc	r27, r27
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__mulsf3_pse+0x64>
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	51 05       	cpc	r21, r1
    120e:	80 f0       	brcs	.+32     	; 0x1230 <__mulsf3_pse+0xa0>
    1210:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__fp_inf>
    1214:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__fp_szero>
    1218:	5f 3f       	cpi	r21, 0xFF	; 255
    121a:	e4 f3       	brlt	.-8      	; 0x1214 <__mulsf3_pse+0x84>
    121c:	98 3e       	cpi	r25, 0xE8	; 232
    121e:	d4 f3       	brlt	.-12     	; 0x1214 <__mulsf3_pse+0x84>
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	e7 95       	ror	r30
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	c1 f7       	brne	.-16     	; 0x1220 <__mulsf3_pse+0x90>
    1230:	fe 2b       	or	r31, r30
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret

0000123e <__muluhisi3>:
    123e:	80 d0       	rcall	.+256    	; 0x1340 <__umulhisi3>
    1240:	a5 9f       	mul	r26, r21
    1242:	90 0d       	add	r25, r0
    1244:	b4 9f       	mul	r27, r20
    1246:	90 0d       	add	r25, r0
    1248:	a4 9f       	mul	r26, r20
    124a:	80 0d       	add	r24, r0
    124c:	91 1d       	adc	r25, r1
    124e:	11 24       	eor	r1, r1
    1250:	08 95       	ret

00001252 <__umoddi3>:
    1252:	68 94       	set
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <__udivdi3_umoddi3>

00001256 <__udivdi3>:
    1256:	e8 94       	clt

00001258 <__udivdi3_umoddi3>:
    1258:	8f 92       	push	r8
    125a:	9f 92       	push	r9
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	05 d0       	rcall	.+10     	; 0x126c <__udivmod64>
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	9f 90       	pop	r9
    1268:	8f 90       	pop	r8
    126a:	08 95       	ret

0000126c <__udivmod64>:
    126c:	88 24       	eor	r8, r8
    126e:	99 24       	eor	r9, r9
    1270:	f4 01       	movw	r30, r8
    1272:	e4 01       	movw	r28, r8
    1274:	b0 e4       	ldi	r27, 0x40	; 64
    1276:	1b 2e       	mov	r1, r27
    1278:	d4 01       	movw	r26, r8
    127a:	9d 15       	cp	r25, r13
    127c:	8e 04       	cpc	r8, r14
    127e:	9f 04       	cpc	r9, r15
    1280:	e0 07       	cpc	r30, r16
    1282:	f1 07       	cpc	r31, r17
    1284:	38 f4       	brcc	.+14     	; 0x1294 <__udivmod64+0x28>
    1286:	fc 01       	movw	r30, r24
    1288:	4b 01       	movw	r8, r22
    128a:	ca 01       	movw	r24, r20
    128c:	b9 01       	movw	r22, r18
    128e:	ad 01       	movw	r20, r26
    1290:	9e 01       	movw	r18, r28
    1292:	16 94       	lsr	r1
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	44 1f       	adc	r20, r20
    129a:	55 1f       	adc	r21, r21
    129c:	66 1f       	adc	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	88 1c       	adc	r8, r8
    12a6:	99 1c       	adc	r9, r9
    12a8:	ee 1f       	adc	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	cc 1f       	adc	r28, r28
    12ae:	dd 1f       	adc	r29, r29
    12b0:	aa 1f       	adc	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	8a 14       	cp	r8, r10
    12b6:	9b 04       	cpc	r9, r11
    12b8:	ec 05       	cpc	r30, r12
    12ba:	fd 05       	cpc	r31, r13
    12bc:	ce 05       	cpc	r28, r14
    12be:	df 05       	cpc	r29, r15
    12c0:	a0 07       	cpc	r26, r16
    12c2:	b1 07       	cpc	r27, r17
    12c4:	48 f0       	brcs	.+18     	; 0x12d8 <__udivmod64+0x6c>
    12c6:	8a 18       	sub	r8, r10
    12c8:	9b 08       	sbc	r9, r11
    12ca:	ec 09       	sbc	r30, r12
    12cc:	fd 09       	sbc	r31, r13
    12ce:	ce 09       	sbc	r28, r14
    12d0:	df 09       	sbc	r29, r15
    12d2:	a0 0b       	sbc	r26, r16
    12d4:	b1 0b       	sbc	r27, r17
    12d6:	21 60       	ori	r18, 0x01	; 1
    12d8:	1a 94       	dec	r1
    12da:	e1 f6       	brne	.-72     	; 0x1294 <__udivmod64+0x28>
    12dc:	2e f4       	brtc	.+10     	; 0x12e8 <__udivmod64+0x7c>
    12de:	94 01       	movw	r18, r8
    12e0:	af 01       	movw	r20, r30
    12e2:	be 01       	movw	r22, r28
    12e4:	cd 01       	movw	r24, r26
    12e6:	00 0c       	add	r0, r0
    12e8:	08 95       	ret

000012ea <__ashldi3>:
    12ea:	0f 93       	push	r16
    12ec:	08 30       	cpi	r16, 0x08	; 8
    12ee:	90 f0       	brcs	.+36     	; 0x1314 <__ashldi3+0x2a>
    12f0:	98 2f       	mov	r25, r24
    12f2:	87 2f       	mov	r24, r23
    12f4:	76 2f       	mov	r23, r22
    12f6:	65 2f       	mov	r22, r21
    12f8:	54 2f       	mov	r21, r20
    12fa:	43 2f       	mov	r20, r19
    12fc:	32 2f       	mov	r19, r18
    12fe:	22 27       	eor	r18, r18
    1300:	08 50       	subi	r16, 0x08	; 8
    1302:	f4 cf       	rjmp	.-24     	; 0x12ec <__ashldi3+0x2>
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	44 1f       	adc	r20, r20
    130a:	55 1f       	adc	r21, r21
    130c:	66 1f       	adc	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 95       	dec	r16
    1316:	b2 f7       	brpl	.-20     	; 0x1304 <__ashldi3+0x1a>
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <__adddi3>:
    131c:	2a 0d       	add	r18, r10
    131e:	3b 1d       	adc	r19, r11
    1320:	4c 1d       	adc	r20, r12
    1322:	5d 1d       	adc	r21, r13
    1324:	6e 1d       	adc	r22, r14
    1326:	7f 1d       	adc	r23, r15
    1328:	80 1f       	adc	r24, r16
    132a:	91 1f       	adc	r25, r17
    132c:	08 95       	ret

0000132e <__subdi3>:
    132e:	2a 19       	sub	r18, r10
    1330:	3b 09       	sbc	r19, r11
    1332:	4c 09       	sbc	r20, r12
    1334:	5d 09       	sbc	r21, r13
    1336:	6e 09       	sbc	r22, r14
    1338:	7f 09       	sbc	r23, r15
    133a:	80 0b       	sbc	r24, r16
    133c:	91 0b       	sbc	r25, r17
    133e:	08 95       	ret

00001340 <__umulhisi3>:
    1340:	a2 9f       	mul	r26, r18
    1342:	b0 01       	movw	r22, r0
    1344:	b3 9f       	mul	r27, r19
    1346:	c0 01       	movw	r24, r0
    1348:	a3 9f       	mul	r26, r19
    134a:	01 d0       	rcall	.+2      	; 0x134e <__umulhisi3+0xe>
    134c:	b2 9f       	mul	r27, r18
    134e:	70 0d       	add	r23, r0
    1350:	81 1d       	adc	r24, r1
    1352:	11 24       	eor	r1, r1
    1354:	91 1d       	adc	r25, r1
    1356:	08 95       	ret

00001358 <_exit>:
    1358:	f8 94       	cli

0000135a <__stop_program>:
    135a:	ff cf       	rjmp	.-2      	; 0x135a <__stop_program>
