
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00803e00  00001541  000015f5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001540  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  00009540  00001540  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000d0  00803e1e  00803e1e  00001613  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  00001680  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006857  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000281d  00000000  00000000  00008187  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ffb  00000000  00000000  0000a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000488  00000000  00000000  0000c9a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022c8  00000000  00000000  0000ce28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ce7  00000000  00000000  0000f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  00010dd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e1 e4       	ldi	r30, 0x41	; 65
      48:	f5 e1       	ldi	r31, 0x15	; 21
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ae 31       	cpi	r26, 0x1E	; 30
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	ae e1       	ldi	r26, 0x1E	; 30
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ae 3e       	cpi	r26, 0xEE	; 238
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	22 d0       	rcall	.+68     	; 0xac <main>
      68:	69 ca       	rjmp	.-2862   	; 0xfffff53c <__eeprom_end+0xff7ef53c>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	66 d5       	rcall	.+2764   	; 0xb3a <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
	/* Insert your PIT interrupt handling code here */

	/* The interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6c13>
}
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:

ISR(PORTA_PORT_vect)
{
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
	PORTA.INTFLAGS = PORT_INT_gm;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f6ec9>
}
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <main>:
uint8_t overSampleThresholdValue = 0;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      ac:	df df       	rcall	.-66     	; 0x6c <atmel_start_init>
	
	uint8_t startupDelay = 100;
      ae:	84 e6       	ldi	r24, 0x64	; 100
	
	while (startupDelay--)
      b0:	0a c0       	rjmp	.+20     	; 0xc6 <main+0x1a>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
      b2:	8a b1       	in	r24, 0x0a	; 10
      b4:	80 61       	ori	r24, 0x10	; 16
      b6:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b8:	c7 ea       	ldi	r28, 0xA7	; 167
      ba:	d1 e6       	ldi	r29, 0x61	; 97
      bc:	21 97       	sbiw	r28, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <main+0x10>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x16>
      c2:	00 00       	nop
      c4:	89 2f       	mov	r24, r25
      c6:	9f ef       	ldi	r25, 0xFF	; 255
      c8:	98 0f       	add	r25, r24
      ca:	81 11       	cpse	r24, r1
      cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0x6>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
      ce:	89 b1       	in	r24, 0x09	; 9
      d0:	80 61       	ori	r24, 0x10	; 16
      d2:	89 b9       	out	0x09, r24	; 9
		DATA_toggle_level();
		_delay_ms(20);
	}
	DATA_set_level(true);
	
	batVar = FLASH_0_read_eeprom_byte(0);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	93 d5       	rcall	.+2854   	; 0xc00 <FLASH_0_read_eeprom_byte>
      da:	c8 2f       	mov	r28, r24
      dc:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <batVar>
	BatteryLevelCounter *= batVar > 100 ? 1 : (((float)batVar) / 100.0f);  
      e0:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
      e4:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
      e8:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
      ec:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
      f0:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
      f4:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
      f8:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
      fc:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     100:	ac d8       	rcall	.-3752   	; 0xfffff25a <__eeprom_end+0xff7ef25a>
     102:	6b 01       	movw	r12, r22
     104:	7c 01       	movw	r14, r24
     106:	c5 36       	cpi	r28, 0x65	; 101
     108:	58 f4       	brcc	.+22     	; 0x120 <main+0x74>
     10a:	6c 2f       	mov	r22, r28
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	66 d8       	rcall	.-3892   	; 0xfffff1e0 <__eeprom_end+0xff7ef1e0>
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	48 ec       	ldi	r20, 0xC8	; 200
     11a:	52 e4       	ldi	r21, 0x42	; 66
     11c:	84 d7       	rcall	.+3848   	; 0x1026 <__divsf3>
     11e:	04 c0       	rjmp	.+8      	; 0x128 <main+0x7c>
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	80 e8       	ldi	r24, 0x80	; 128
     126:	9f e3       	ldi	r25, 0x3F	; 63
     128:	a7 01       	movw	r20, r14
     12a:	96 01       	movw	r18, r12
     12c:	35 d9       	rcall	.-3478   	; 0xfffff398 <__eeprom_end+0xff7ef398>
     12e:	f2 d7       	rcall	.+4068   	; 0x1114 <__fixunssfdi>
     130:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     134:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     138:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     13c:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     140:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     144:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     148:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     14c:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
	
	TOUCH_GetSensorValue(0, false);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	fd d6       	rcall	.+3578   	; 0xf50 <TOUCH_GetSensorValue>
	
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 5 : 1;
     156:	15 99       	sbic	0x02, 5	; 2
     158:	04 c0       	rjmp	.+8      	; 0x162 <main+0xb6>
     15a:	35 99       	sbic	0x06, 5	; 6
     15c:	04 c0       	rjmp	.+8      	; 0x166 <main+0xba>
     15e:	95 e0       	ldi	r25, 0x05	; 5
     160:	03 c0       	rjmp	.+6      	; 0x168 <main+0xbc>
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <main+0xbc>
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     16c:	89 9f       	mul	r24, r25
     16e:	80 2d       	mov	r24, r0
     170:	11 24       	eor	r1, r1
     172:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     176:	92 b1       	in	r25, 0x02	; 2
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 2 : 0;
     178:	89 2f       	mov	r24, r25
     17a:	80 72       	andi	r24, 0x20	; 32
     17c:	95 fd       	sbrc	r25, 5
     17e:	04 c0       	rjmp	.+8      	; 0x188 <main+0xdc>
     180:	35 99       	sbic	0x06, 5	; 6
     182:	03 c0       	rjmp	.+6      	; 0x18a <main+0xde>
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	01 c0       	rjmp	.+2      	; 0x18a <main+0xde>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	80 93 1e 3e 	sts	0x3E1E, r24	; 0x803e1e <__data_end>
	
	uint32_t T_refP1 = 0, T_refP2 = 0;
	for (uint8_t j = 0; j < 9; j++)
     18e:	c0 e0       	ldi	r28, 0x00	; 0
	TOUCH_GetSensorValue(0, false);
	
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 5 : 1;
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 2 : 0;
	
	uint32_t T_refP1 = 0, T_refP2 = 0;
     190:	41 2c       	mov	r4, r1
     192:	51 2c       	mov	r5, r1
     194:	32 01       	movw	r6, r4
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	76 01       	movw	r14, r12
	for (uint8_t j = 0; j < 9; j++)
     19c:	f1 c0       	rjmp	.+482    	; 0x380 <__DATA_REGION_LENGTH__+0x180>
	{
		whileLoopCycle = 32;
     19e:	80 e2       	ldi	r24, 0x20	; 32
     1a0:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <whileLoopCycle>
		while(whileLoopCycle--)
     1a4:	2e c0       	rjmp	.+92     	; 0x202 <__DATA_REGION_LENGTH__+0x2>
		{
			ref1 += TOUCH_GetSensorValue(0, false);
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	d2 d6       	rcall	.+3492   	; 0xf50 <TOUCH_GetSensorValue>
     1ac:	40 91 2b 3e 	lds	r20, 0x3E2B	; 0x803e2b <ref1>
     1b0:	50 91 2c 3e 	lds	r21, 0x3E2C	; 0x803e2c <ref1+0x1>
     1b4:	60 91 2d 3e 	lds	r22, 0x3E2D	; 0x803e2d <ref1+0x2>
     1b8:	70 91 2e 3e 	lds	r23, 0x3E2E	; 0x803e2e <ref1+0x3>
     1bc:	48 0f       	add	r20, r24
     1be:	59 1f       	adc	r21, r25
     1c0:	61 1d       	adc	r22, r1
     1c2:	71 1d       	adc	r23, r1
     1c4:	40 93 2b 3e 	sts	0x3E2B, r20	; 0x803e2b <ref1>
     1c8:	50 93 2c 3e 	sts	0x3E2C, r21	; 0x803e2c <ref1+0x1>
     1cc:	60 93 2d 3e 	sts	0x3E2D, r22	; 0x803e2d <ref1+0x2>
     1d0:	70 93 2e 3e 	sts	0x3E2E, r23	; 0x803e2e <ref1+0x3>
			ref2 += TOUCH_GetSensorValue(0, true);
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	bb d6       	rcall	.+3446   	; 0xf50 <TOUCH_GetSensorValue>
     1da:	40 91 27 3e 	lds	r20, 0x3E27	; 0x803e27 <ref2>
     1de:	50 91 28 3e 	lds	r21, 0x3E28	; 0x803e28 <ref2+0x1>
     1e2:	60 91 29 3e 	lds	r22, 0x3E29	; 0x803e29 <ref2+0x2>
     1e6:	70 91 2a 3e 	lds	r23, 0x3E2A	; 0x803e2a <ref2+0x3>
     1ea:	48 0f       	add	r20, r24
     1ec:	59 1f       	adc	r21, r25
     1ee:	61 1d       	adc	r22, r1
     1f0:	71 1d       	adc	r23, r1
     1f2:	40 93 27 3e 	sts	0x3E27, r20	; 0x803e27 <ref2>
     1f6:	50 93 28 3e 	sts	0x3E28, r21	; 0x803e28 <ref2+0x1>
     1fa:	60 93 29 3e 	sts	0x3E29, r22	; 0x803e29 <ref2+0x2>
     1fe:	70 93 2a 3e 	sts	0x3E2A, r23	; 0x803e2a <ref2+0x3>
	
	uint32_t T_refP1 = 0, T_refP2 = 0;
	for (uint8_t j = 0; j < 9; j++)
	{
		whileLoopCycle = 32;
		while(whileLoopCycle--)
     202:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <whileLoopCycle>
     206:	9f ef       	ldi	r25, 0xFF	; 255
     208:	98 0f       	add	r25, r24
     20a:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <whileLoopCycle>
     20e:	81 11       	cpse	r24, r1
     210:	ca cf       	rjmp	.-108    	; 0x1a6 <main+0xfa>
		{
			ref1 += TOUCH_GetSensorValue(0, false);
			ref2 += TOUCH_GetSensorValue(0, true);
		}
		ref1 >>= (2 + overSampleThresholdValue);
     212:	20 91 1e 3e 	lds	r18, 0x3E1E	; 0x803e1e <__data_end>
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	2e 5f       	subi	r18, 0xFE	; 254
     21a:	3f 4f       	sbci	r19, 0xFF	; 255
     21c:	80 91 2b 3e 	lds	r24, 0x3E2B	; 0x803e2b <ref1>
     220:	90 91 2c 3e 	lds	r25, 0x3E2C	; 0x803e2c <ref1+0x1>
     224:	a0 91 2d 3e 	lds	r26, 0x3E2D	; 0x803e2d <ref1+0x2>
     228:	b0 91 2e 3e 	lds	r27, 0x3E2E	; 0x803e2e <ref1+0x3>
     22c:	02 2e       	mov	r0, r18
     22e:	04 c0       	rjmp	.+8      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
     230:	b5 95       	asr	r27
     232:	a7 95       	ror	r26
     234:	97 95       	ror	r25
     236:	87 95       	ror	r24
     238:	0a 94       	dec	r0
     23a:	d2 f7       	brpl	.-12     	; 0x230 <__DATA_REGION_LENGTH__+0x30>
		ref2 >>= (2 + overSampleThresholdValue);
     23c:	40 91 27 3e 	lds	r20, 0x3E27	; 0x803e27 <ref2>
     240:	50 91 28 3e 	lds	r21, 0x3E28	; 0x803e28 <ref2+0x1>
     244:	60 91 29 3e 	lds	r22, 0x3E29	; 0x803e29 <ref2+0x2>
     248:	70 91 2a 3e 	lds	r23, 0x3E2A	; 0x803e2a <ref2+0x3>
     24c:	04 c0       	rjmp	.+8      	; 0x256 <__DATA_REGION_LENGTH__+0x56>
     24e:	75 95       	asr	r23
     250:	67 95       	ror	r22
     252:	57 95       	ror	r21
     254:	47 95       	ror	r20
     256:	2a 95       	dec	r18
     258:	d2 f7       	brpl	.-12     	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
		
		//refP1 = refP1 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP1;
		T_refP1 += (int16_t)(ref1 - ref2);
     25a:	84 1b       	sub	r24, r20
     25c:	95 0b       	sbc	r25, r21
     25e:	09 2e       	mov	r0, r25
     260:	00 0c       	add	r0, r0
     262:	aa 0b       	sbc	r26, r26
     264:	bb 0b       	sbc	r27, r27
     266:	c8 0e       	add	r12, r24
     268:	d9 1e       	adc	r13, r25
     26a:	ea 1e       	adc	r14, r26
     26c:	fb 1e       	adc	r15, r27
		ref1 = ref2 = 0;
     26e:	10 92 27 3e 	sts	0x3E27, r1	; 0x803e27 <ref2>
     272:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <ref2+0x1>
     276:	10 92 29 3e 	sts	0x3E29, r1	; 0x803e29 <ref2+0x2>
     27a:	10 92 2a 3e 	sts	0x3E2A, r1	; 0x803e2a <ref2+0x3>
     27e:	10 92 2b 3e 	sts	0x3E2B, r1	; 0x803e2b <ref1>
     282:	10 92 2c 3e 	sts	0x3E2C, r1	; 0x803e2c <ref1+0x1>
     286:	10 92 2d 3e 	sts	0x3E2D, r1	; 0x803e2d <ref1+0x2>
     28a:	10 92 2e 3e 	sts	0x3E2E, r1	; 0x803e2e <ref1+0x3>
		
		whileLoopCycle = 32;
     28e:	80 e2       	ldi	r24, 0x20	; 32
     290:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <whileLoopCycle>
		while(whileLoopCycle--)
     294:	2e c0       	rjmp	.+92     	; 0x2f2 <__DATA_REGION_LENGTH__+0xf2>
		{
			ref1 += TOUCH_GetSensorValue(1, false);
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	5a d6       	rcall	.+3252   	; 0xf50 <TOUCH_GetSensorValue>
     29c:	40 91 2b 3e 	lds	r20, 0x3E2B	; 0x803e2b <ref1>
     2a0:	50 91 2c 3e 	lds	r21, 0x3E2C	; 0x803e2c <ref1+0x1>
     2a4:	60 91 2d 3e 	lds	r22, 0x3E2D	; 0x803e2d <ref1+0x2>
     2a8:	70 91 2e 3e 	lds	r23, 0x3E2E	; 0x803e2e <ref1+0x3>
     2ac:	48 0f       	add	r20, r24
     2ae:	59 1f       	adc	r21, r25
     2b0:	61 1d       	adc	r22, r1
     2b2:	71 1d       	adc	r23, r1
     2b4:	40 93 2b 3e 	sts	0x3E2B, r20	; 0x803e2b <ref1>
     2b8:	50 93 2c 3e 	sts	0x3E2C, r21	; 0x803e2c <ref1+0x1>
     2bc:	60 93 2d 3e 	sts	0x3E2D, r22	; 0x803e2d <ref1+0x2>
     2c0:	70 93 2e 3e 	sts	0x3E2E, r23	; 0x803e2e <ref1+0x3>
			ref2 += TOUCH_GetSensorValue(1, true);
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	43 d6       	rcall	.+3206   	; 0xf50 <TOUCH_GetSensorValue>
     2ca:	40 91 27 3e 	lds	r20, 0x3E27	; 0x803e27 <ref2>
     2ce:	50 91 28 3e 	lds	r21, 0x3E28	; 0x803e28 <ref2+0x1>
     2d2:	60 91 29 3e 	lds	r22, 0x3E29	; 0x803e29 <ref2+0x2>
     2d6:	70 91 2a 3e 	lds	r23, 0x3E2A	; 0x803e2a <ref2+0x3>
     2da:	48 0f       	add	r20, r24
     2dc:	59 1f       	adc	r21, r25
     2de:	61 1d       	adc	r22, r1
     2e0:	71 1d       	adc	r23, r1
     2e2:	40 93 27 3e 	sts	0x3E27, r20	; 0x803e27 <ref2>
     2e6:	50 93 28 3e 	sts	0x3E28, r21	; 0x803e28 <ref2+0x1>
     2ea:	60 93 29 3e 	sts	0x3E29, r22	; 0x803e29 <ref2+0x2>
     2ee:	70 93 2a 3e 	sts	0x3E2A, r23	; 0x803e2a <ref2+0x3>
		//refP1 = refP1 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP1;
		T_refP1 += (int16_t)(ref1 - ref2);
		ref1 = ref2 = 0;
		
		whileLoopCycle = 32;
		while(whileLoopCycle--)
     2f2:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <whileLoopCycle>
     2f6:	9f ef       	ldi	r25, 0xFF	; 255
     2f8:	98 0f       	add	r25, r24
     2fa:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <whileLoopCycle>
     2fe:	81 11       	cpse	r24, r1
     300:	ca cf       	rjmp	.-108    	; 0x296 <__DATA_REGION_LENGTH__+0x96>
		{
			ref1 += TOUCH_GetSensorValue(1, false);
			ref2 += TOUCH_GetSensorValue(1, true);
		}
		ref1 >>= (2 + overSampleThresholdValue);
     302:	20 91 1e 3e 	lds	r18, 0x3E1E	; 0x803e1e <__data_end>
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	2e 5f       	subi	r18, 0xFE	; 254
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	80 91 2b 3e 	lds	r24, 0x3E2B	; 0x803e2b <ref1>
     310:	90 91 2c 3e 	lds	r25, 0x3E2C	; 0x803e2c <ref1+0x1>
     314:	a0 91 2d 3e 	lds	r26, 0x3E2D	; 0x803e2d <ref1+0x2>
     318:	b0 91 2e 3e 	lds	r27, 0x3E2E	; 0x803e2e <ref1+0x3>
     31c:	02 2e       	mov	r0, r18
     31e:	04 c0       	rjmp	.+8      	; 0x328 <__DATA_REGION_LENGTH__+0x128>
     320:	b5 95       	asr	r27
     322:	a7 95       	ror	r26
     324:	97 95       	ror	r25
     326:	87 95       	ror	r24
     328:	0a 94       	dec	r0
     32a:	d2 f7       	brpl	.-12     	; 0x320 <__DATA_REGION_LENGTH__+0x120>
		ref2 >>= (2 + overSampleThresholdValue);
     32c:	40 91 27 3e 	lds	r20, 0x3E27	; 0x803e27 <ref2>
     330:	50 91 28 3e 	lds	r21, 0x3E28	; 0x803e28 <ref2+0x1>
     334:	60 91 29 3e 	lds	r22, 0x3E29	; 0x803e29 <ref2+0x2>
     338:	70 91 2a 3e 	lds	r23, 0x3E2A	; 0x803e2a <ref2+0x3>
     33c:	04 c0       	rjmp	.+8      	; 0x346 <__DATA_REGION_LENGTH__+0x146>
     33e:	75 95       	asr	r23
     340:	67 95       	ror	r22
     342:	57 95       	ror	r21
     344:	47 95       	ror	r20
     346:	2a 95       	dec	r18
     348:	d2 f7       	brpl	.-12     	; 0x33e <__DATA_REGION_LENGTH__+0x13e>
		
		//refP2 = refP2 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP2;
		T_refP2 += (int16_t)(ref1 - ref2);
     34a:	84 1b       	sub	r24, r20
     34c:	95 0b       	sbc	r25, r21
     34e:	09 2e       	mov	r0, r25
     350:	00 0c       	add	r0, r0
     352:	aa 0b       	sbc	r26, r26
     354:	bb 0b       	sbc	r27, r27
     356:	48 0e       	add	r4, r24
     358:	59 1e       	adc	r5, r25
     35a:	6a 1e       	adc	r6, r26
     35c:	7b 1e       	adc	r7, r27
		ref1 = ref2 = 0;
     35e:	10 92 27 3e 	sts	0x3E27, r1	; 0x803e27 <ref2>
     362:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <ref2+0x1>
     366:	10 92 29 3e 	sts	0x3E29, r1	; 0x803e29 <ref2+0x2>
     36a:	10 92 2a 3e 	sts	0x3E2A, r1	; 0x803e2a <ref2+0x3>
     36e:	10 92 2b 3e 	sts	0x3E2B, r1	; 0x803e2b <ref1>
     372:	10 92 2c 3e 	sts	0x3E2C, r1	; 0x803e2c <ref1+0x1>
     376:	10 92 2d 3e 	sts	0x3E2D, r1	; 0x803e2d <ref1+0x2>
     37a:	10 92 2e 3e 	sts	0x3E2E, r1	; 0x803e2e <ref1+0x3>
	
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 5 : 1;
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 2 : 0;
	
	uint32_t T_refP1 = 0, T_refP2 = 0;
	for (uint8_t j = 0; j < 9; j++)
     37e:	cf 5f       	subi	r28, 0xFF	; 255
     380:	c9 30       	cpi	r28, 0x09	; 9
     382:	08 f4       	brcc	.+2      	; 0x386 <__DATA_REGION_LENGTH__+0x186>
     384:	0c cf       	rjmp	.-488    	; 0x19e <main+0xf2>
		//refP2 = refP2 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP2;
		T_refP2 += (int16_t)(ref1 - ref2);
		ref1 = ref2 = 0;
	}
	
	refP1 = T_refP1 / 9;
     386:	c7 01       	movw	r24, r14
     388:	b6 01       	movw	r22, r12
     38a:	29 e3       	ldi	r18, 0x39	; 57
     38c:	3e e8       	ldi	r19, 0x8E	; 142
     38e:	43 ee       	ldi	r20, 0xE3	; 227
     390:	58 e3       	ldi	r21, 0x38	; 56
     392:	6f d8       	rcall	.-3874   	; 0xfffff472 <__eeprom_end+0xff7ef472>
     394:	00 e2       	ldi	r16, 0x20	; 32
     396:	96 d8       	rcall	.-3796   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     398:	82 2e       	mov	r8, r18
     39a:	93 2e       	mov	r9, r19
     39c:	a4 2e       	mov	r10, r20
     39e:	b5 2e       	mov	r11, r21
     3a0:	b6 94       	lsr	r11
     3a2:	a7 94       	ror	r10
     3a4:	97 94       	ror	r9
     3a6:	87 94       	ror	r8
     3a8:	80 92 25 3e 	sts	0x3E25, r8	; 0x803e25 <refP1>
     3ac:	90 92 26 3e 	sts	0x3E26, r9	; 0x803e26 <refP1+0x1>
	refP2 = T_refP2 / 9;
     3b0:	c3 01       	movw	r24, r6
     3b2:	b2 01       	movw	r22, r4
     3b4:	29 e3       	ldi	r18, 0x39	; 57
     3b6:	3e e8       	ldi	r19, 0x8E	; 142
     3b8:	43 ee       	ldi	r20, 0xE3	; 227
     3ba:	58 e3       	ldi	r21, 0x38	; 56
     3bc:	5a d8       	rcall	.-3916   	; 0xfffff472 <__eeprom_end+0xff7ef472>
     3be:	82 d8       	rcall	.-3836   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     3c0:	82 2e       	mov	r8, r18
     3c2:	93 2e       	mov	r9, r19
     3c4:	a4 2e       	mov	r10, r20
     3c6:	b5 2e       	mov	r11, r21
     3c8:	b6 94       	lsr	r11
     3ca:	a7 94       	ror	r10
     3cc:	97 94       	ror	r9
     3ce:	87 94       	ror	r8
     3d0:	80 92 23 3e 	sts	0x3E23, r8	; 0x803e23 <refP2>
     3d4:	90 92 24 3e 	sts	0x3E24, r9	; 0x803e24 <refP2+0x1>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     3d8:	89 b1       	in	r24, 0x09	; 9
     3da:	8f 7e       	andi	r24, 0xEF	; 239
     3dc:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     3de:	e3 e1       	ldi	r30, 0x13	; 19
     3e0:	f4 e0       	ldi	r31, 0x04	; 4
     3e2:	80 81       	ld	r24, Z
     3e4:	88 7f       	andi	r24, 0xF8	; 248
     3e6:	81 60       	ori	r24, 0x01	; 1
     3e8:	80 83       	st	Z, r24
	DATA_set_level(false);
	
	CBT_set_isc(PORT_ISC_BOTHEDGES_gc);
	
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM7;
     3ea:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <payloadBufferStartByte+0x7f7bca>
     3ee:	ee e0       	ldi	r30, 0x0E	; 14
     3f0:	fe e3       	ldi	r31, 0x3E	; 62
     3f2:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM8;
     3f4:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f7bcb>
     3f8:	87 83       	std	Z+7, r24	; 0x07
	payloadBuffer[payloadBufferStartByte + 2] = SIGROW_SERNUM9;
     3fa:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f7bcc>
     3fe:	80 87       	std	Z+8, r24	; 0x08
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     400:	46 e0       	ldi	r20, 0x06	; 6
     402:	60 e1       	ldi	r22, 0x10	; 16
     404:	cf 01       	movw	r24, r30
     406:	e6 d4       	rcall	.+2508   	; 0xdd4 <SX1243Init>

	/* Replace with your application code */
	while (1) {
		BatteryLevelCounter -= BAT_ADC_CONSTANT;
     408:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     40c:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     410:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     414:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     418:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     41c:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     420:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     424:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     428:	ad ef       	ldi	r26, 0xFD	; 253
     42a:	68 d8       	rcall	.-3888   	; 0xfffff4fc <__eeprom_end+0xff7ef4fc>
     42c:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     430:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     434:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     438:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     43c:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     440:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     444:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     448:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     44c:	44 e1       	ldi	r20, 0x14	; 20
     44e:	54 e0       	ldi	r21, 0x04	; 4
     450:	fa 01       	movw	r30, r20
     452:	80 81       	ld	r24, Z
     454:	88 60       	ori	r24, 0x08	; 8
     456:	80 83       	st	Z, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     458:	24 e3       	ldi	r18, 0x34	; 52
     45a:	34 e0       	ldi	r19, 0x04	; 4
     45c:	e9 01       	movw	r28, r18
     45e:	88 81       	ld	r24, Y
     460:	88 60       	ori	r24, 0x08	; 8
     462:	88 83       	st	Y, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     464:	a5 e1       	ldi	r26, 0x15	; 21
     466:	b4 e0       	ldi	r27, 0x04	; 4
     468:	8c 91       	ld	r24, X
     46a:	88 60       	ori	r24, 0x08	; 8
     46c:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     46e:	e5 e3       	ldi	r30, 0x35	; 53
     470:	f4 e0       	ldi	r31, 0x04	; 4
     472:	80 81       	ld	r24, Z
     474:	88 60       	ori	r24, 0x08	; 8
     476:	80 83       	st	Z, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     478:	c2 b1       	in	r28, 0x02	; 2
		SB1_set_pull_mode(PORT_PULL_UP);
		SB2_set_pull_mode(PORT_PULL_UP);
		PSD1_set_pull_mode(PORT_PULL_UP);
		PSD2_set_pull_mode(PORT_PULL_UP);
		
		uint8_t In_SB1  = !SB1_get_level();
     47a:	c2 95       	swap	r28
     47c:	cf 70       	andi	r28, 0x0F	; 15
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	c8 27       	eor	r28, r24
     482:	c1 70       	andi	r28, 0x01	; 1
     484:	bc 2e       	mov	r11, r28
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     486:	d6 b1       	in	r29, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     488:	d2 95       	swap	r29
     48a:	df 70       	andi	r29, 0x0F	; 15
     48c:	d8 27       	eor	r29, r24
     48e:	d1 70       	andi	r29, 0x01	; 1
     490:	ad 2e       	mov	r10, r29
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     492:	ea 01       	movw	r28, r20
     494:	88 81       	ld	r24, Y
     496:	87 7f       	andi	r24, 0xF7	; 247
     498:	88 83       	st	Y, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     49a:	e9 01       	movw	r28, r18
     49c:	88 81       	ld	r24, Y
     49e:	87 7f       	andi	r24, 0xF7	; 247
     4a0:	88 83       	st	Y, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     4a2:	8c 91       	ld	r24, X
     4a4:	87 7f       	andi	r24, 0xF7	; 247
     4a6:	8c 93       	st	X, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     4a8:	80 81       	ld	r24, Z
     4aa:	87 7f       	andi	r24, 0xF7	; 247
     4ac:	80 83       	st	Z, r24
		SB2_set_pull_mode(PORT_PULL_OFF);
		PSD1_set_pull_mode(PORT_PULL_OFF);
		PSD2_set_pull_mode(PORT_PULL_OFF);
		
		//ADC ENABLE
		ADC_0_enable();	
     4ae:	d8 d2       	rcall	.+1456   	; 0xa60 <ADC_0_enable>
		TOUCH_GetSensorValue(0, false);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	4d d5       	rcall	.+2714   	; 0xf50 <TOUCH_GetSensorValue>
		
		
		whileLoopCycle = 32;
     4b6:	80 e2       	ldi	r24, 0x20	; 32
     4b8:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <whileLoopCycle>
		while(whileLoopCycle--)
     4bc:	2e c0       	rjmp	.+92     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		{
			adc1 += TOUCH_GetSensorValue(0, false);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	46 d5       	rcall	.+2700   	; 0xf50 <TOUCH_GetSensorValue>
     4c4:	40 91 33 3e 	lds	r20, 0x3E33	; 0x803e33 <adc1>
     4c8:	50 91 34 3e 	lds	r21, 0x3E34	; 0x803e34 <adc1+0x1>
     4cc:	60 91 35 3e 	lds	r22, 0x3E35	; 0x803e35 <adc1+0x2>
     4d0:	70 91 36 3e 	lds	r23, 0x3E36	; 0x803e36 <adc1+0x3>
     4d4:	48 0f       	add	r20, r24
     4d6:	59 1f       	adc	r21, r25
     4d8:	61 1d       	adc	r22, r1
     4da:	71 1d       	adc	r23, r1
     4dc:	40 93 33 3e 	sts	0x3E33, r20	; 0x803e33 <adc1>
     4e0:	50 93 34 3e 	sts	0x3E34, r21	; 0x803e34 <adc1+0x1>
     4e4:	60 93 35 3e 	sts	0x3E35, r22	; 0x803e35 <adc1+0x2>
     4e8:	70 93 36 3e 	sts	0x3E36, r23	; 0x803e36 <adc1+0x3>
			adc2 += TOUCH_GetSensorValue(0, true);
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	2f d5       	rcall	.+2654   	; 0xf50 <TOUCH_GetSensorValue>
     4f2:	40 91 2f 3e 	lds	r20, 0x3E2F	; 0x803e2f <adc2>
     4f6:	50 91 30 3e 	lds	r21, 0x3E30	; 0x803e30 <adc2+0x1>
     4fa:	60 91 31 3e 	lds	r22, 0x3E31	; 0x803e31 <adc2+0x2>
     4fe:	70 91 32 3e 	lds	r23, 0x3E32	; 0x803e32 <adc2+0x3>
     502:	48 0f       	add	r20, r24
     504:	59 1f       	adc	r21, r25
     506:	61 1d       	adc	r22, r1
     508:	71 1d       	adc	r23, r1
     50a:	40 93 2f 3e 	sts	0x3E2F, r20	; 0x803e2f <adc2>
     50e:	50 93 30 3e 	sts	0x3E30, r21	; 0x803e30 <adc2+0x1>
     512:	60 93 31 3e 	sts	0x3E31, r22	; 0x803e31 <adc2+0x2>
     516:	70 93 32 3e 	sts	0x3E32, r23	; 0x803e32 <adc2+0x3>
		ADC_0_enable();	
		TOUCH_GetSensorValue(0, false);
		
		
		whileLoopCycle = 32;
		while(whileLoopCycle--)
     51a:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <whileLoopCycle>
     51e:	9f ef       	ldi	r25, 0xFF	; 255
     520:	98 0f       	add	r25, r24
     522:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <whileLoopCycle>
     526:	81 11       	cpse	r24, r1
     528:	ca cf       	rjmp	.-108    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			adc1 += TOUCH_GetSensorValue(0, false);
			adc2 += TOUCH_GetSensorValue(0, true);
		}
		adc1 >>= (2 + overSampleThresholdValue);
     52a:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <__data_end>
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 96       	adiw	r24, 0x02	; 2
     532:	40 91 33 3e 	lds	r20, 0x3E33	; 0x803e33 <adc1>
     536:	50 91 34 3e 	lds	r21, 0x3E34	; 0x803e34 <adc1+0x1>
     53a:	60 91 35 3e 	lds	r22, 0x3E35	; 0x803e35 <adc1+0x2>
     53e:	70 91 36 3e 	lds	r23, 0x3E36	; 0x803e36 <adc1+0x3>
     542:	08 2e       	mov	r0, r24
     544:	04 c0       	rjmp	.+8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     546:	75 95       	asr	r23
     548:	67 95       	ror	r22
     54a:	57 95       	ror	r21
     54c:	47 95       	ror	r20
     54e:	0a 94       	dec	r0
     550:	d2 f7       	brpl	.-12     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		adc2 >>= (2 + overSampleThresholdValue);
     552:	c0 90 2f 3e 	lds	r12, 0x3E2F	; 0x803e2f <adc2>
     556:	d0 90 30 3e 	lds	r13, 0x3E30	; 0x803e30 <adc2+0x1>
     55a:	e0 90 31 3e 	lds	r14, 0x3E31	; 0x803e31 <adc2+0x2>
     55e:	f0 90 32 3e 	lds	r15, 0x3E32	; 0x803e32 <adc2+0x3>
     562:	97 01       	movw	r18, r14
     564:	86 01       	movw	r16, r12
     566:	04 c0       	rjmp	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     568:	35 95       	asr	r19
     56a:	27 95       	ror	r18
     56c:	17 95       	ror	r17
     56e:	07 95       	ror	r16
     570:	8a 95       	dec	r24
     572:	d2 f7       	brpl	.-12     	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
		
		rawAdc[0][rawAdcCount] = ((int16_t)(adc1 - adc2) - refP1);
     574:	e0 91 22 3e 	lds	r30, 0x3E22	; 0x803e22 <rawAdcCount>
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	40 1b       	sub	r20, r16
     57c:	51 0b       	sbc	r21, r17
     57e:	80 91 25 3e 	lds	r24, 0x3E25	; 0x803e25 <refP1>
     582:	90 91 26 3e 	lds	r25, 0x3E26	; 0x803e26 <refP1+0x1>
     586:	9a 01       	movw	r18, r20
     588:	28 1b       	sub	r18, r24
     58a:	39 0b       	sbc	r19, r25
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e1 5c       	subi	r30, 0xC1	; 193
     592:	f1 4c       	sbci	r31, 0xC1	; 193
     594:	20 83       	st	Z, r18
     596:	31 83       	std	Z+1, r19	; 0x01
		if(rawAdc[0][rawAdcCount] < negativeThresholdValue)
     598:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     59c:	08 2e       	mov	r0, r24
     59e:	00 0c       	add	r0, r0
     5a0:	99 0b       	sbc	r25, r25
     5a2:	28 17       	cp	r18, r24
     5a4:	39 07       	cpc	r19, r25
     5a6:	24 f4       	brge	.+8      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
		{
			refP1 = (int16_t)(adc1 - adc2);
     5a8:	40 93 25 3e 	sts	0x3E25, r20	; 0x803e25 <refP1>
     5ac:	50 93 26 3e 	sts	0x3E26, r21	; 0x803e26 <refP1+0x1>
	TOUCH_GetSensorValue(0, false);
	
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 5 : 1;
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 2 : 0;
	
	uint32_t T_refP1 = 0, T_refP2 = 0;
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	21 c0       	rjmp	.+66     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
			refP1 = (int16_t)(adc1 - adc2);
		}
		
		for (uint8_t j = 0; j < 4; j++)
		{
			rawTotal += rawAdc[0][j];
     5b4:	e2 2f       	mov	r30, r18
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e1 5c       	subi	r30, 0xC1	; 193
     5be:	f1 4c       	sbci	r31, 0xC1	; 193
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	09 2e       	mov	r0, r25
     5c6:	00 0c       	add	r0, r0
     5c8:	aa 0b       	sbc	r26, r26
     5ca:	bb 0b       	sbc	r27, r27
     5cc:	40 91 3b 3e 	lds	r20, 0x3E3B	; 0x803e3b <rawTotal>
     5d0:	50 91 3c 3e 	lds	r21, 0x3E3C	; 0x803e3c <rawTotal+0x1>
     5d4:	60 91 3d 3e 	lds	r22, 0x3E3D	; 0x803e3d <rawTotal+0x2>
     5d8:	70 91 3e 3e 	lds	r23, 0x3E3E	; 0x803e3e <rawTotal+0x3>
     5dc:	84 0f       	add	r24, r20
     5de:	95 1f       	adc	r25, r21
     5e0:	a6 1f       	adc	r26, r22
     5e2:	b7 1f       	adc	r27, r23
     5e4:	80 93 3b 3e 	sts	0x3E3B, r24	; 0x803e3b <rawTotal>
     5e8:	90 93 3c 3e 	sts	0x3E3C, r25	; 0x803e3c <rawTotal+0x1>
     5ec:	a0 93 3d 3e 	sts	0x3E3D, r26	; 0x803e3d <rawTotal+0x2>
     5f0:	b0 93 3e 3e 	sts	0x3E3E, r27	; 0x803e3e <rawTotal+0x3>
		if(rawAdc[0][rawAdcCount] < negativeThresholdValue)
		{
			refP1 = (int16_t)(adc1 - adc2);
		}
		
		for (uint8_t j = 0; j < 4; j++)
     5f4:	2f 5f       	subi	r18, 0xFF	; 255
     5f6:	24 30       	cpi	r18, 0x04	; 4
     5f8:	e8 f2       	brcs	.-70     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
		{
			rawTotal += rawAdc[0][j];
		}
		prox1CurrentValue = (int16_t)(rawTotal >> 1);
     5fa:	80 91 3b 3e 	lds	r24, 0x3E3B	; 0x803e3b <rawTotal>
     5fe:	90 91 3c 3e 	lds	r25, 0x3E3C	; 0x803e3c <rawTotal+0x1>
     602:	a0 91 3d 3e 	lds	r26, 0x3E3D	; 0x803e3d <rawTotal+0x2>
     606:	b0 91 3e 3e 	lds	r27, 0x3E3E	; 0x803e3e <rawTotal+0x3>
     60a:	b5 95       	asr	r27
     60c:	a7 95       	ror	r26
     60e:	97 95       	ror	r25
     610:	87 95       	ror	r24
		rawTotal = 0;
     612:	10 92 3b 3e 	sts	0x3E3B, r1	; 0x803e3b <rawTotal>
     616:	10 92 3c 3e 	sts	0x3E3C, r1	; 0x803e3c <rawTotal+0x1>
     61a:	10 92 3d 3e 	sts	0x3E3D, r1	; 0x803e3d <rawTotal+0x2>
     61e:	10 92 3e 3e 	sts	0x3E3E, r1	; 0x803e3e <rawTotal+0x3>
		adc1 = adc2 = 0;
     622:	10 92 2f 3e 	sts	0x3E2F, r1	; 0x803e2f <adc2>
     626:	10 92 30 3e 	sts	0x3E30, r1	; 0x803e30 <adc2+0x1>
     62a:	10 92 31 3e 	sts	0x3E31, r1	; 0x803e31 <adc2+0x2>
     62e:	10 92 32 3e 	sts	0x3E32, r1	; 0x803e32 <adc2+0x3>
     632:	10 92 33 3e 	sts	0x3E33, r1	; 0x803e33 <adc1>
     636:	10 92 34 3e 	sts	0x3E34, r1	; 0x803e34 <adc1+0x1>
     63a:	10 92 35 3e 	sts	0x3E35, r1	; 0x803e35 <adc1+0x2>
     63e:	10 92 36 3e 	sts	0x3E36, r1	; 0x803e36 <adc1+0x3>
		prox1CurrentValue = prox1CurrentValue < 0 ? 0 : prox1CurrentValue;
     642:	99 23       	and	r25, r25
     644:	14 f4       	brge	.+4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	80 93 4f 3e 	sts	0x3E4F, r24	; 0x803e4f <prox1CurrentValue>
     64e:	90 93 50 3e 	sts	0x3E50, r25	; 0x803e50 <prox1CurrentValue+0x1>
		prox1CounterBase[1] = (uint8_t)((prox1CurrentValue >> 8) & 0x00FF);
     652:	e9 e3       	ldi	r30, 0x39	; 57
     654:	fe e3       	ldi	r31, 0x3E	; 62
     656:	91 83       	std	Z+1, r25	; 0x01
		prox1CounterBase[0] = (uint8_t)((prox1CurrentValue >> 0) & 0x00FF);
     658:	80 83       	st	Z, r24
			
			
		whileLoopCycle = 32;
     65a:	80 e2       	ldi	r24, 0x20	; 32
     65c:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <whileLoopCycle>
		while(whileLoopCycle--)
     660:	2e c0       	rjmp	.+92     	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
		{
			adc1 += TOUCH_GetSensorValue(1, false);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	74 d4       	rcall	.+2280   	; 0xf50 <TOUCH_GetSensorValue>
     668:	40 91 33 3e 	lds	r20, 0x3E33	; 0x803e33 <adc1>
     66c:	50 91 34 3e 	lds	r21, 0x3E34	; 0x803e34 <adc1+0x1>
     670:	60 91 35 3e 	lds	r22, 0x3E35	; 0x803e35 <adc1+0x2>
     674:	70 91 36 3e 	lds	r23, 0x3E36	; 0x803e36 <adc1+0x3>
     678:	48 0f       	add	r20, r24
     67a:	59 1f       	adc	r21, r25
     67c:	61 1d       	adc	r22, r1
     67e:	71 1d       	adc	r23, r1
     680:	40 93 33 3e 	sts	0x3E33, r20	; 0x803e33 <adc1>
     684:	50 93 34 3e 	sts	0x3E34, r21	; 0x803e34 <adc1+0x1>
     688:	60 93 35 3e 	sts	0x3E35, r22	; 0x803e35 <adc1+0x2>
     68c:	70 93 36 3e 	sts	0x3E36, r23	; 0x803e36 <adc1+0x3>
			adc2 += TOUCH_GetSensorValue(1, true);
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	5d d4       	rcall	.+2234   	; 0xf50 <TOUCH_GetSensorValue>
     696:	40 91 2f 3e 	lds	r20, 0x3E2F	; 0x803e2f <adc2>
     69a:	50 91 30 3e 	lds	r21, 0x3E30	; 0x803e30 <adc2+0x1>
     69e:	60 91 31 3e 	lds	r22, 0x3E31	; 0x803e31 <adc2+0x2>
     6a2:	70 91 32 3e 	lds	r23, 0x3E32	; 0x803e32 <adc2+0x3>
     6a6:	48 0f       	add	r20, r24
     6a8:	59 1f       	adc	r21, r25
     6aa:	61 1d       	adc	r22, r1
     6ac:	71 1d       	adc	r23, r1
     6ae:	40 93 2f 3e 	sts	0x3E2F, r20	; 0x803e2f <adc2>
     6b2:	50 93 30 3e 	sts	0x3E30, r21	; 0x803e30 <adc2+0x1>
     6b6:	60 93 31 3e 	sts	0x3E31, r22	; 0x803e31 <adc2+0x2>
     6ba:	70 93 32 3e 	sts	0x3E32, r23	; 0x803e32 <adc2+0x3>
		prox1CounterBase[1] = (uint8_t)((prox1CurrentValue >> 8) & 0x00FF);
		prox1CounterBase[0] = (uint8_t)((prox1CurrentValue >> 0) & 0x00FF);
			
			
		whileLoopCycle = 32;
		while(whileLoopCycle--)
     6be:	80 91 21 3e 	lds	r24, 0x3E21	; 0x803e21 <whileLoopCycle>
     6c2:	9f ef       	ldi	r25, 0xFF	; 255
     6c4:	98 0f       	add	r25, r24
     6c6:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <whileLoopCycle>
     6ca:	81 11       	cpse	r24, r1
     6cc:	ca cf       	rjmp	.-108    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
		{
			adc1 += TOUCH_GetSensorValue(1, false);
			adc2 += TOUCH_GetSensorValue(1, true);
		}
		//ADC DISABLE
		ADC_0_disable();
     6ce:	ce d1       	rcall	.+924    	; 0xa6c <ADC_0_disable>
		adc1 >>= (2 + overSampleThresholdValue);
     6d0:	80 91 1e 3e 	lds	r24, 0x3E1E	; 0x803e1e <__data_end>
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	02 96       	adiw	r24, 0x02	; 2
     6d8:	c0 90 33 3e 	lds	r12, 0x3E33	; 0x803e33 <adc1>
     6dc:	d0 90 34 3e 	lds	r13, 0x3E34	; 0x803e34 <adc1+0x1>
     6e0:	e0 90 35 3e 	lds	r14, 0x3E35	; 0x803e35 <adc1+0x2>
     6e4:	f0 90 36 3e 	lds	r15, 0x3E36	; 0x803e36 <adc1+0x3>
     6e8:	08 2e       	mov	r0, r24
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6ec:	f5 94       	asr	r15
     6ee:	e7 94       	ror	r14
     6f0:	d7 94       	ror	r13
     6f2:	c7 94       	ror	r12
     6f4:	0a 94       	dec	r0
     6f6:	d2 f7       	brpl	.-12     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
		adc2 >>= (2 + overSampleThresholdValue);
     6f8:	40 91 2f 3e 	lds	r20, 0x3E2F	; 0x803e2f <adc2>
     6fc:	50 91 30 3e 	lds	r21, 0x3E30	; 0x803e30 <adc2+0x1>
     700:	60 91 31 3e 	lds	r22, 0x3E31	; 0x803e31 <adc2+0x2>
     704:	70 91 32 3e 	lds	r23, 0x3E32	; 0x803e32 <adc2+0x3>
     708:	8a 01       	movw	r16, r20
     70a:	9b 01       	movw	r18, r22
     70c:	04 c0       	rjmp	.+8      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     70e:	35 95       	asr	r19
     710:	27 95       	ror	r18
     712:	17 95       	ror	r17
     714:	07 95       	ror	r16
     716:	8a 95       	dec	r24
     718:	d2 f7       	brpl	.-12     	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     71a:	d9 01       	movw	r26, r18
     71c:	c8 01       	movw	r24, r16
	 
		rawAdc[1][rawAdcCount] = ((int16_t)(adc1 - adc2) - refP2);
     71e:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <rawAdcCount>
     722:	e3 2f       	mov	r30, r19
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c8 1a       	sub	r12, r24
     728:	d9 0a       	sbc	r13, r25
     72a:	80 91 23 3e 	lds	r24, 0x3E23	; 0x803e23 <refP2>
     72e:	90 91 24 3e 	lds	r25, 0x3E24	; 0x803e24 <refP2+0x1>
     732:	a6 01       	movw	r20, r12
     734:	48 1b       	sub	r20, r24
     736:	59 0b       	sbc	r21, r25
     738:	34 96       	adiw	r30, 0x04	; 4
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e1 5c       	subi	r30, 0xC1	; 193
     740:	f1 4c       	sbci	r31, 0xC1	; 193
     742:	40 83       	st	Z, r20
     744:	51 83       	std	Z+1, r21	; 0x01
		if(rawAdc[1][rawAdcCount] < negativeThresholdValue)
     746:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     74a:	08 2e       	mov	r0, r24
     74c:	00 0c       	add	r0, r0
     74e:	99 0b       	sbc	r25, r25
     750:	48 17       	cp	r20, r24
     752:	59 07       	cpc	r21, r25
     754:	24 f4       	brge	.+8      	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
		{
			refP2 = (int16_t)(adc1 - adc2);
     756:	c0 92 23 3e 	sts	0x3E23, r12	; 0x803e23 <refP2>
     75a:	d0 92 24 3e 	sts	0x3E24, r13	; 0x803e24 <refP2+0x1>
	TOUCH_GetSensorValue(0, false);
	
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 5 : 1;
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 2 : 0;
	
	uint32_t T_refP1 = 0, T_refP2 = 0;
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	22 c0       	rjmp	.+68     	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
			refP2 = (int16_t)(adc1 - adc2);
		}
	
		for (uint8_t j = 0; j < 4; j++)
		{
			rawTotal += rawAdc[1][j];
     762:	e2 2f       	mov	r30, r18
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	34 96       	adiw	r30, 0x04	; 4
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	e1 5c       	subi	r30, 0xC1	; 193
     76e:	f1 4c       	sbci	r31, 0xC1	; 193
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	09 2e       	mov	r0, r25
     776:	00 0c       	add	r0, r0
     778:	aa 0b       	sbc	r26, r26
     77a:	bb 0b       	sbc	r27, r27
     77c:	40 91 3b 3e 	lds	r20, 0x3E3B	; 0x803e3b <rawTotal>
     780:	50 91 3c 3e 	lds	r21, 0x3E3C	; 0x803e3c <rawTotal+0x1>
     784:	60 91 3d 3e 	lds	r22, 0x3E3D	; 0x803e3d <rawTotal+0x2>
     788:	70 91 3e 3e 	lds	r23, 0x3E3E	; 0x803e3e <rawTotal+0x3>
     78c:	84 0f       	add	r24, r20
     78e:	95 1f       	adc	r25, r21
     790:	a6 1f       	adc	r26, r22
     792:	b7 1f       	adc	r27, r23
     794:	80 93 3b 3e 	sts	0x3E3B, r24	; 0x803e3b <rawTotal>
     798:	90 93 3c 3e 	sts	0x3E3C, r25	; 0x803e3c <rawTotal+0x1>
     79c:	a0 93 3d 3e 	sts	0x3E3D, r26	; 0x803e3d <rawTotal+0x2>
     7a0:	b0 93 3e 3e 	sts	0x3E3E, r27	; 0x803e3e <rawTotal+0x3>
		if(rawAdc[1][rawAdcCount] < negativeThresholdValue)
		{
			refP2 = (int16_t)(adc1 - adc2);
		}
	
		for (uint8_t j = 0; j < 4; j++)
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	24 30       	cpi	r18, 0x04	; 4
     7a8:	e0 f2       	brcs	.-72     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
		{
			rawTotal += rawAdc[1][j];
		}
		prox2CurrentValue = (int16_t)(rawTotal >> 1);
     7aa:	80 91 3b 3e 	lds	r24, 0x3E3B	; 0x803e3b <rawTotal>
     7ae:	90 91 3c 3e 	lds	r25, 0x3E3C	; 0x803e3c <rawTotal+0x1>
     7b2:	a0 91 3d 3e 	lds	r26, 0x3E3D	; 0x803e3d <rawTotal+0x2>
     7b6:	b0 91 3e 3e 	lds	r27, 0x3E3E	; 0x803e3e <rawTotal+0x3>
     7ba:	b5 95       	asr	r27
     7bc:	a7 95       	ror	r26
     7be:	97 95       	ror	r25
     7c0:	87 95       	ror	r24
		rawTotal = 0;
     7c2:	10 92 3b 3e 	sts	0x3E3B, r1	; 0x803e3b <rawTotal>
     7c6:	10 92 3c 3e 	sts	0x3E3C, r1	; 0x803e3c <rawTotal+0x1>
     7ca:	10 92 3d 3e 	sts	0x3E3D, r1	; 0x803e3d <rawTotal+0x2>
     7ce:	10 92 3e 3e 	sts	0x3E3E, r1	; 0x803e3e <rawTotal+0x3>
		adc1 = adc2 = 0;
     7d2:	10 92 2f 3e 	sts	0x3E2F, r1	; 0x803e2f <adc2>
     7d6:	10 92 30 3e 	sts	0x3E30, r1	; 0x803e30 <adc2+0x1>
     7da:	10 92 31 3e 	sts	0x3E31, r1	; 0x803e31 <adc2+0x2>
     7de:	10 92 32 3e 	sts	0x3E32, r1	; 0x803e32 <adc2+0x3>
     7e2:	10 92 33 3e 	sts	0x3E33, r1	; 0x803e33 <adc1>
     7e6:	10 92 34 3e 	sts	0x3E34, r1	; 0x803e34 <adc1+0x1>
     7ea:	10 92 35 3e 	sts	0x3E35, r1	; 0x803e35 <adc1+0x2>
     7ee:	10 92 36 3e 	sts	0x3E36, r1	; 0x803e36 <adc1+0x3>
		prox2CurrentValue = prox2CurrentValue < 0 ? 0 : prox2CurrentValue;
     7f2:	99 23       	and	r25, r25
     7f4:	14 f4       	brge	.+4      	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <prox2CurrentValue>
     7fe:	90 93 52 3e 	sts	0x3E52, r25	; 0x803e52 <prox2CurrentValue+0x1>
		prox2CounterBase[1] = (uint8_t)((prox2CurrentValue >> 8) & 0x00FF);
     802:	e7 e3       	ldi	r30, 0x37	; 55
     804:	fe e3       	ldi	r31, 0x3E	; 62
     806:	91 83       	std	Z+1, r25	; 0x01
		prox2CounterBase[0] = (uint8_t)((prox2CurrentValue >> 0) & 0x00FF);
     808:	80 83       	st	Z, r24
			
		
		rawAdcCount += rawAdcCount < 3 ? 1 : -rawAdcCount;
     80a:	33 30       	cpi	r19, 0x03	; 3
     80c:	18 f0       	brcs	.+6      	; 0x814 <__LOCK_REGION_LENGTH__+0x414>
     80e:	83 2f       	mov	r24, r19
     810:	81 95       	neg	r24
     812:	01 c0       	rjmp	.+2      	; 0x816 <__LOCK_REGION_LENGTH__+0x416>
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	38 0f       	add	r19, r24
     818:	30 93 22 3e 	sts	0x3E22, r19	; 0x803e22 <rawAdcCount>
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     81c:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     820:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     824:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     828:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     82c:	81 35       	cpi	r24, 0x51	; 81
     82e:	93 4c       	sbci	r25, 0xC3	; 195
     830:	a1 05       	cpc	r26, r1
     832:	b1 05       	cpc	r27, r1
     834:	48 f1       	brcs	.+82     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
		{
			batVar = (uint8_t)((((float)BatteryLevelCounter) / BAT_FULL_CAPACITY) * 100.0f);
     836:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     83a:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     83e:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     842:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     846:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     84a:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     84e:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     852:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     856:	01 d5       	rcall	.+2562   	; 0x125a <__floatundisf>
     858:	2a ed       	ldi	r18, 0xDA	; 218
     85a:	38 ef       	ldi	r19, 0xF8	; 248
     85c:	4a e1       	ldi	r20, 0x1A	; 26
     85e:	5f e4       	ldi	r21, 0x4F	; 79
     860:	e2 d3       	rcall	.+1988   	; 0x1026 <__divsf3>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	48 ec       	ldi	r20, 0xC8	; 200
     868:	52 e4       	ldi	r21, 0x42	; 66
     86a:	96 d5       	rcall	.+2860   	; 0x1398 <__mulsf3>
     86c:	8a d4       	rcall	.+2324   	; 0x1182 <__fixunssfsi>
     86e:	60 93 1f 3e 	sts	0x3E1F, r22	; 0x803e1f <batVar>
			FLASH_0_write_eeprom_byte(0, batVar);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	c8 d1       	rcall	.+912    	; 0xc08 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     878:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <BatteryLevelCalculateCounter>
     87c:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     880:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     884:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
		}
		BatteryLevelCalculateCounter++;
     888:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <BatteryLevelCalculateCounter>
     88c:	90 91 02 3e 	lds	r25, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     890:	a0 91 03 3e 	lds	r26, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     894:	b0 91 04 3e 	lds	r27, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	a1 1d       	adc	r26, r1
     89c:	b1 1d       	adc	r27, r1
     89e:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <BatteryLevelCalculateCounter>
     8a2:	90 93 02 3e 	sts	0x3E02, r25	; 0x803e02 <BatteryLevelCalculateCounter+0x1>
     8a6:	a0 93 03 3e 	sts	0x3E03, r26	; 0x803e03 <BatteryLevelCalculateCounter+0x2>
     8aa:	b0 93 04 3e 	sts	0x3E04, r27	; 0x803e04 <BatteryLevelCalculateCounter+0x3>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
     8ae:	20 91 1f 3e 	lds	r18, 0x3E1F	; 0x803e1f <batVar>
     8b2:	8b 2d       	mov	r24, r11
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	c2 2f       	mov	r28, r18
     8bc:	c0 7f       	andi	r28, 0xF0	; 240
     8be:	8c 2b       	or	r24, r28
     8c0:	81 60       	ori	r24, 0x01	; 1
     8c2:	e4 e5       	ldi	r30, 0x54	; 84
     8c4:	fe e3       	ldi	r31, 0x3E	; 62
     8c6:	80 83       	st	Z, r24
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
     8c8:	30 e1       	ldi	r19, 0x10	; 16
     8ca:	23 9f       	mul	r18, r19
     8cc:	a0 01       	movw	r20, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	2a 2d       	mov	r18, r10
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	24 2b       	or	r18, r20
     8da:	21 60       	ori	r18, 0x01	; 1
     8dc:	21 83       	std	Z+1, r18	; 0x01
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
     8de:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <payloadBuffer+0x9>
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
     8e2:	89 13       	cpse	r24, r25
     8e4:	1e c0       	rjmp	.+60     	; 0x922 <__LOCK_REGION_LENGTH__+0x522>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
     8e6:	90 91 18 3e 	lds	r25, 0x3E18	; 0x803e18 <payloadBuffer+0xa>
		BatteryLevelCalculateCounter++;
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
     8ea:	29 13       	cpse	r18, r25
     8ec:	1c c0       	rjmp	.+56     	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
     8ee:	30 91 3a 3e 	lds	r19, 0x3E3A	; 0x803e3a <prox1CounterBase+0x1>
     8f2:	90 91 19 3e 	lds	r25, 0x3E19	; 0x803e19 <payloadBuffer+0xb>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
     8f6:	39 13       	cpse	r19, r25
     8f8:	18 c0       	rjmp	.+48     	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
     8fa:	30 91 39 3e 	lds	r19, 0x3E39	; 0x803e39 <prox1CounterBase>
     8fe:	90 91 1a 3e 	lds	r25, 0x3E1A	; 0x803e1a <payloadBuffer+0xc>
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
     902:	39 13       	cpse	r19, r25
     904:	14 c0       	rjmp	.+40     	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
     906:	30 91 38 3e 	lds	r19, 0x3E38	; 0x803e38 <prox2CounterBase+0x1>
     90a:	90 91 1b 3e 	lds	r25, 0x3E1B	; 0x803e1b <payloadBuffer+0xd>
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
     90e:	39 13       	cpse	r19, r25
     910:	10 c0       	rjmp	.+32     	; 0x932 <__LOCK_REGION_LENGTH__+0x532>
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
						(prox2CounterBase[0] != payloadBuffer[payloadBufferStartByte + 8]);
     912:	30 91 37 3e 	lds	r19, 0x3E37	; 0x803e37 <prox2CounterBase>
     916:	90 91 1c 3e 	lds	r25, 0x3E1C	; 0x803e1c <payloadBuffer+0xe>
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
     91a:	39 17       	cp	r19, r25
     91c:	61 f0       	breq	.+24     	; 0x936 <__LOCK_REGION_LENGTH__+0x536>
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0b c0       	rjmp	.+22     	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	09 c0       	rjmp	.+18     	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	07 c0       	rjmp	.+14     	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	05 c0       	rjmp	.+10     	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	03 c0       	rjmp	.+6      	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	01 c0       	rjmp	.+2      	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	91 70       	andi	r25, 0x01	; 1
		BatteryLevelCalculateCounter++;
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
     93a:	90 93 20 3e 	sts	0x3E20, r25	; 0x803e20 <isDataChanged>
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
						(prox2CounterBase[0] != payloadBuffer[payloadBufferStartByte + 8]);
		
		repeatDataCounter = isDataChanged ? 20 : repeatDataCounter;
     93e:	91 11       	cpse	r25, r1
     940:	03 c0       	rjmp	.+6      	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
     942:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <repeatDataCounter>
     946:	01 c0       	rjmp	.+2      	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
     948:	94 e1       	ldi	r25, 0x14	; 20
     94a:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <repeatDataCounter>
		
		if(repeatDataCounter)
     94e:	99 23       	and	r25, r25
     950:	09 f4       	brne	.+2      	; 0x954 <__LOCK_REGION_LENGTH__+0x554>
     952:	44 c0       	rjmp	.+136    	; 0x9dc <__LOCK_REGION_LENGTH__+0x5dc>
		{
			payloadBuffer[payloadBufferStartByte + 3] = seatFlagStatus[0];
     954:	ce e0       	ldi	r28, 0x0E	; 14
     956:	de e3       	ldi	r29, 0x3E	; 62
     958:	89 87       	std	Y+9, r24	; 0x09
			payloadBuffer[payloadBufferStartByte + 4] = seatFlagStatus[1];
     95a:	2a 87       	std	Y+10, r18	; 0x0a
			payloadBuffer[payloadBufferStartByte + 5] = prox1CounterBase[1];
     95c:	e9 e3       	ldi	r30, 0x39	; 57
     95e:	fe e3       	ldi	r31, 0x3E	; 62
     960:	81 81       	ldd	r24, Z+1	; 0x01
     962:	8b 87       	std	Y+11, r24	; 0x0b
			payloadBuffer[payloadBufferStartByte + 6] = prox1CounterBase[0];
     964:	80 81       	ld	r24, Z
     966:	8c 87       	std	Y+12, r24	; 0x0c
			payloadBuffer[payloadBufferStartByte + 7] = prox2CounterBase[1];
     968:	e7 e3       	ldi	r30, 0x37	; 55
     96a:	fe e3       	ldi	r31, 0x3E	; 62
     96c:	81 81       	ldd	r24, Z+1	; 0x01
     96e:	8d 87       	std	Y+13, r24	; 0x0d
			payloadBuffer[payloadBufferStartByte + 8] = prox2CounterBase[0];
     970:	80 81       	ld	r24, Z
     972:	8e 87       	std	Y+14, r24	; 0x0e
			payloadBuffer[payloadBufferStartByte + 9] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 3]);
     974:	87 e1       	ldi	r24, 0x17	; 23
     976:	9e e3       	ldi	r25, 0x3E	; 62
     978:	7a d2       	rcall	.+1268   	; 0xe6e <SX1243CRC8>
     97a:	8f 87       	std	Y+15, r24	; 0x0f
			
			if(SX1243Process() != SX_OK)
     97c:	88 d2       	rcall	.+1296   	; 0xe8e <SX1243Process>
     97e:	88 23       	and	r24, r24
     980:	31 f0       	breq	.+12     	; 0x98e <__LOCK_REGION_LENGTH__+0x58e>
			{
				repeatDataCounter++;
     982:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <repeatDataCounter>
     986:	8f 5f       	subi	r24, 0xFF	; 255
     988:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <repeatDataCounter>
     98c:	05 c0       	rjmp	.+10     	; 0x998 <__LOCK_REGION_LENGTH__+0x598>
			}
			else
				repeatDataCounter--;
     98e:	80 91 0d 3e 	lds	r24, 0x3E0D	; 0x803e0d <repeatDataCounter>
     992:	81 50       	subi	r24, 0x01	; 1
     994:	80 93 0d 3e 	sts	0x3E0D, r24	; 0x803e0d <repeatDataCounter>
			BatteryLevelCounter -= BAT_TRANSMIT_CONSTANT;
     998:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     99c:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     9a0:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     9a4:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     9a8:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     9ac:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     9b0:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     9b4:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     9b8:	ab ef       	ldi	r26, 0xFB	; 251
     9ba:	a0 d5       	rcall	.+2880   	; 0x14fc <__adddi3_s8>
     9bc:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     9c0:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     9c4:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     9c8:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     9cc:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     9d0:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     9d4:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     9d8:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		//printf("adc1: %4d, adc2: %4d\r",adc1, adc2);
		//printf("P1: %4d, P2: %4d\r",prox1CurrentValue, prox2CurrentValue);
		
		//_delay_ms(5);
		
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     9dc:	e0 e5       	ldi	r30, 0x50	; 80
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	89 7f       	andi	r24, 0xF9	; 249
     9e4:	84 60       	ori	r24, 0x04	; 4
     9e6:	80 83       	st	Z, r24
		cli();
     9e8:	f8 94       	cli
		
		sleep_enable();
     9ea:	80 81       	ld	r24, Z
     9ec:	81 60       	ori	r24, 0x01	; 1
     9ee:	80 83       	st	Z, r24
		sei();
     9f0:	78 94       	sei
		sleep_cpu();
     9f2:	88 95       	sleep
		sleep_disable();
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	80 83       	st	Z, r24
		cli();
     9fa:	f8 94       	cli
		BatteryLevelCounter -= BAT_SLEEP_CONSTANT;
     9fc:	20 91 05 3e 	lds	r18, 0x3E05	; 0x803e05 <BatteryLevelCounter>
     a00:	30 91 06 3e 	lds	r19, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x1>
     a04:	40 91 07 3e 	lds	r20, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x2>
     a08:	50 91 08 3e 	lds	r21, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x3>
     a0c:	60 91 09 3e 	lds	r22, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x4>
     a10:	70 91 0a 3e 	lds	r23, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x5>
     a14:	80 91 0b 3e 	lds	r24, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x6>
     a18:	90 91 0c 3e 	lds	r25, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x7>
     a1c:	a7 ef       	ldi	r26, 0xF7	; 247
     a1e:	6e d5       	rcall	.+2780   	; 0x14fc <__adddi3_s8>
     a20:	20 93 05 3e 	sts	0x3E05, r18	; 0x803e05 <BatteryLevelCounter>
     a24:	30 93 06 3e 	sts	0x3E06, r19	; 0x803e06 <BatteryLevelCounter+0x1>
     a28:	40 93 07 3e 	sts	0x3E07, r20	; 0x803e07 <BatteryLevelCounter+0x2>
     a2c:	50 93 08 3e 	sts	0x3E08, r21	; 0x803e08 <BatteryLevelCounter+0x3>
     a30:	60 93 09 3e 	sts	0x3E09, r22	; 0x803e09 <BatteryLevelCounter+0x4>
     a34:	70 93 0a 3e 	sts	0x3E0A, r23	; 0x803e0a <BatteryLevelCounter+0x5>
     a38:	80 93 0b 3e 	sts	0x3E0B, r24	; 0x803e0b <BatteryLevelCounter+0x6>
     a3c:	90 93 0c 3e 	sts	0x3E0C, r25	; 0x803e0c <BatteryLevelCounter+0x7>
		
		if(CBT_get_level() == false)
     a40:	13 99       	sbic	0x02, 3	; 2
     a42:	e2 cc       	rjmp	.-1596   	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	68 ed       	ldi	r22, 0xD8	; 216
     a48:	81 e4       	ldi	r24, 0x41	; 65
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	f7 d0       	rcall	.+494    	; 0xc3c <protected_write_io>
     a4e:	dc cc       	rjmp	.-1608   	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

00000a50 <ADC_0_init>:

	// ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV2_gc    /* CLK_PER divided by 128 */
     a50:	e0 e0       	ldi	r30, 0x00	; 0
     a52:	f6 e0       	ldi	r31, 0x06	; 6
     a54:	80 e5       	ldi	r24, 0x50	; 80
     a56:	82 83       	std	Z+2, r24	; 0x02

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	08 95       	ret

00000a60 <ADC_0_enable>:
 *
 * \return Nothing
 */
void ADC_0_enable()
{
	ADC0.CTRLA |= ADC_ENABLE_bm;
     a60:	e0 e0       	ldi	r30, 0x00	; 0
     a62:	f6 e0       	ldi	r31, 0x06	; 6
     a64:	80 81       	ld	r24, Z
     a66:	81 60       	ori	r24, 0x01	; 1
     a68:	80 83       	st	Z, r24
     a6a:	08 95       	ret

00000a6c <ADC_0_disable>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f6 e0       	ldi	r31, 0x06	; 6
     a70:	80 81       	ld	r24, Z
     a72:	8e 7f       	andi	r24, 0xFE	; 254
     a74:	80 83       	st	Z, r24
     a76:	08 95       	ret

00000a78 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     a78:	e0 e0       	ldi	r30, 0x00	; 0
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	80 87       	std	Z+8, r24	; 0x08
     a82:	08 95       	ret

00000a84 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
     a84:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f70cb>
}
     a88:	81 70       	andi	r24, 0x01	; 1
     a8a:	08 95       	ret

00000a8c <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
     a8c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f70d0>
     a90:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f70d1>
}
     a94:	08 95       	ret

00000a96 <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
     a96:	f0 df       	rcall	.-32     	; 0xa78 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
     a98:	f5 df       	rcall	.-22     	; 0xa84 <ADC_0_is_conversion_done>
     a9a:	88 23       	and	r24, r24
     a9c:	e9 f3       	breq	.-6      	; 0xa98 <ADC_0_get_conversion+0x2>
		;
	res = ADC_0_get_conversion_result();
     a9e:	f6 df       	rcall	.-20     	; 0xa8c <ADC_0_get_conversion_result>
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     aa0:	e0 e0       	ldi	r30, 0x00	; 0
     aa2:	f6 e0       	ldi	r31, 0x06	; 6
     aa4:	23 85       	ldd	r18, Z+11	; 0x0b
     aa6:	21 60       	ori	r18, 0x01	; 1
     aa8:	23 87       	std	Z+11, r18	; 0x0b
	return res;
}
     aaa:	08 95       	ret

00000aac <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret

00000ab0 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     ab0:	43 e0       	ldi	r20, 0x03	; 3
     ab2:	68 ed       	ldi	r22, 0xD8	; 216
     ab4:	81 e6       	ldi	r24, 0x61	; 97
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	c1 d0       	rcall	.+386    	; 0xc3c <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret

00000abe <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     abe:	78 94       	sei

	return 0;
}
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret

00000ac4 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 c0       	rjmp	.+16     	; 0xad8 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ac8:	e8 2f       	mov	r30, r24
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	e0 5f       	subi	r30, 0xF0	; 240
     ace:	fb 4f       	sbci	r31, 0xFB	; 251
     ad0:	90 81       	ld	r25, Z
     ad2:	98 60       	ori	r25, 0x08	; 8
     ad4:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	88 30       	cpi	r24, 0x08	; 8
     ada:	b0 f3       	brcs	.-20     	; 0xac8 <mcu_init+0x4>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ae0:	e8 2f       	mov	r30, r24
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	e0 5d       	subi	r30, 0xD0	; 208
     ae6:	fb 4f       	sbci	r31, 0xFB	; 251
     ae8:	90 81       	ld	r25, Z
     aea:	98 60       	ori	r25, 0x08	; 8
     aec:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	88 30       	cpi	r24, 0x08	; 8
     af2:	b0 f3       	brcs	.-20     	; 0xae0 <mcu_init+0x1c>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	08 c0       	rjmp	.+16     	; 0xb08 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     af8:	e8 2f       	mov	r30, r24
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	e0 5b       	subi	r30, 0xB0	; 176
     afe:	fb 4f       	sbci	r31, 0xFB	; 251
     b00:	90 81       	ld	r25, Z
     b02:	98 60       	ori	r25, 0x08	; 8
     b04:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     b06:	8f 5f       	subi	r24, 0xFF	; 255
     b08:	88 30       	cpi	r24, 0x08	; 8
     b0a:	b0 f3       	brcs	.-20     	; 0xaf8 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     b0c:	08 95       	ret

00000b0e <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     b0e:	e6 e1       	ldi	r30, 0x16	; 22
     b10:	f4 e0       	ldi	r31, 0x04	; 4
     b12:	80 81       	ld	r24, Z
     b14:	88 7f       	andi	r24, 0xF8	; 248
     b16:	84 60       	ori	r24, 0x04	; 4
     b18:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b1a:	80 81       	ld	r24, Z
     b1c:	87 7f       	andi	r24, 0xF7	; 247
     b1e:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     b20:	e0 e3       	ldi	r30, 0x30	; 48
     b22:	f4 e0       	ldi	r31, 0x04	; 4
     b24:	80 81       	ld	r24, Z
     b26:	88 7f       	andi	r24, 0xF8	; 248
     b28:	84 60       	ori	r24, 0x04	; 4
     b2a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b2c:	80 81       	ld	r24, Z
     b2e:	87 7f       	andi	r24, 0xF7	; 247
     b30:	80 83       	st	Z, r24
	// Disable digital input buffer
	SY_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	SY_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     b32:	8e df       	rcall	.-228    	; 0xa50 <ADC_0_init>
     b34:	08 95       	ret

00000b36 <FLASH_0_initialization>:
}

/* Initialize registers */
void FLASH_0_initialization(void)
{
	FLASH_0_init();
     b36:	62 d0       	rcall	.+196    	; 0xbfc <FLASH_0_init>
     b38:	08 95       	ret

00000b3a <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     b3a:	c4 df       	rcall	.-120    	; 0xac4 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     b3c:	80 b1       	in	r24, 0x00	; 0
     b3e:	87 7f       	andi	r24, 0xF7	; 247
     b40:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b42:	e3 e1       	ldi	r30, 0x13	; 19
     b44:	f4 e0       	ldi	r31, 0x04	; 4
     b46:	80 81       	ld	r24, Z
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     b4c:	80 b1       	in	r24, 0x00	; 0
     b4e:	8f 7e       	andi	r24, 0xEF	; 239
     b50:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b52:	e4 e1       	ldi	r30, 0x14	; 20
     b54:	f4 e0       	ldi	r31, 0x04	; 4
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     b5c:	80 b1       	in	r24, 0x00	; 0
     b5e:	8f 7d       	andi	r24, 0xDF	; 223
     b60:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b62:	e5 e1       	ldi	r30, 0x15	; 21
     b64:	f4 e0       	ldi	r31, 0x04	; 4
     b66:	80 81       	ld	r24, Z
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     b6c:	81 b1       	in	r24, 0x01	; 1
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b72:	80 b1       	in	r24, 0x00	; 0
     b74:	80 68       	ori	r24, 0x80	; 128
     b76:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     b78:	84 b1       	in	r24, 0x04	; 4
     b7a:	8d 7f       	andi	r24, 0xFD	; 253
     b7c:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     b7e:	e1 e3       	ldi	r30, 0x31	; 49
     b80:	f4 e0       	ldi	r31, 0x04	; 4
     b82:	80 81       	ld	r24, Z
     b84:	87 7f       	andi	r24, 0xF7	; 247
     b86:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     b88:	84 b1       	in	r24, 0x04	; 4
     b8a:	8f 7e       	andi	r24, 0xEF	; 239
     b8c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b8e:	e4 e3       	ldi	r30, 0x34	; 52
     b90:	f4 e0       	ldi	r31, 0x04	; 4
     b92:	80 81       	ld	r24, Z
     b94:	88 60       	ori	r24, 0x08	; 8
     b96:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     b98:	84 b1       	in	r24, 0x04	; 4
     b9a:	8f 7d       	andi	r24, 0xDF	; 223
     b9c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b9e:	e5 e3       	ldi	r30, 0x35	; 53
     ba0:	f4 e0       	ldi	r31, 0x04	; 4
     ba2:	80 81       	ld	r24, Z
     ba4:	88 60       	ori	r24, 0x08	; 8
     ba6:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     ba8:	88 b1       	in	r24, 0x08	; 8
     baa:	8d 7f       	andi	r24, 0xFD	; 253
     bac:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     bae:	e1 e5       	ldi	r30, 0x51	; 81
     bb0:	f4 e0       	ldi	r31, 0x04	; 4
     bb2:	80 81       	ld	r24, Z
     bb4:	88 60       	ori	r24, 0x08	; 8
     bb6:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     bb8:	88 b1       	in	r24, 0x08	; 8
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     bbe:	e2 e5       	ldi	r30, 0x52	; 82
     bc0:	f4 e0       	ldi	r31, 0x04	; 4
     bc2:	80 81       	ld	r24, Z
     bc4:	88 60       	ori	r24, 0x08	; 8
     bc6:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     bc8:	89 b1       	in	r24, 0x09	; 9
     bca:	87 7f       	andi	r24, 0xF7	; 247
     bcc:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     bce:	88 b1       	in	r24, 0x08	; 8
     bd0:	88 60       	ori	r24, 0x08	; 8
     bd2:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     bd4:	89 b1       	in	r24, 0x09	; 9
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     bda:	88 b1       	in	r24, 0x08	; 8
     bdc:	80 61       	ori	r24, 0x10	; 16
     bde:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     be0:	89 b1       	in	r24, 0x09	; 9
     be2:	8f 7d       	andi	r24, 0xDF	; 223
     be4:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     be6:	88 b1       	in	r24, 0x08	; 8
     be8:	80 62       	ori	r24, 0x20	; 32
     bea:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	NRESET_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     bec:	61 df       	rcall	.-318    	; 0xab0 <CLKCTRL_init>

	RTC_0_init();
     bee:	2a d0       	rcall	.+84     	; 0xc44 <RTC_0_init>

	ADC_0_initialization();
     bf0:	8e df       	rcall	.-228    	; 0xb0e <ADC_0_initialization>

	FLASH_0_initialization();
     bf2:	a1 df       	rcall	.-190    	; 0xb36 <FLASH_0_initialization>

	CPUINT_init();
     bf4:	64 df       	rcall	.-312    	; 0xabe <CPUINT_init>

	SLPCTRL_init();
     bf6:	3c d0       	rcall	.+120    	; 0xc70 <SLPCTRL_init>

	BOD_init();
     bf8:	59 df       	rcall	.-334    	; 0xaac <BOD_init>
     bfa:	08 95       	ret

00000bfc <FLASH_0_init>:
	//		 | 0 << NVMCTRL_BOOTLOCK_bp; /* Boot Lock: disabled */

	// NVMCTRL.INTCTRL = 0 << NVMCTRL_EEREADY_bp; /* EEPROM Ready: disabled */

	return 0;
}
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	08 95       	ret

00000c00 <FLASH_0_read_eeprom_byte>:
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{

	// Read operation will be stalled by hardware if any write is in progress

	return *(uint8_t *)(EEPROM_START + eeprom_adr);
     c00:	9c 5e       	subi	r25, 0xEC	; 236
}
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	08 95       	ret

00000c08 <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	16 2f       	mov	r17, r22

	/* Wait for completion of previous write */
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
     c12:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7ac2>
     c16:	81 fd       	sbrc	r24, 1
     c18:	fc cf       	rjmp	.-8      	; 0xc12 <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
     c1a:	44 e0       	ldi	r20, 0x04	; 4
     c1c:	6d e9       	ldi	r22, 0x9D	; 157
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e1       	ldi	r25, 0x10	; 16
     c22:	0c d0       	rcall	.+24     	; 0xc3c <protected_write_io>

	/* Clear page buffer */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEBUFCLR_gc);

	/* Write byte to page buffer */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
     c24:	dc 5e       	subi	r29, 0xEC	; 236
     c26:	18 83       	st	Y, r17
     c28:	43 e0       	ldi	r20, 0x03	; 3
     c2a:	6d e9       	ldi	r22, 0x9D	; 157
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e1       	ldi	r25, 0x10	; 16
     c30:	05 d0       	rcall	.+10     	; 0xc3c <protected_write_io>

	/* Erase byte and program it with desired value */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);

	return NVM_OK;
}
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	08 95       	ret

00000c3c <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     c3c:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     c3e:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     c40:	40 83       	st	Z, r20
	ret                             // Return to caller
     c42:	08 95       	ret

00000c44 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     c44:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6c01>
     c48:	81 11       	cpse	r24, r1
     c4a:	fc cf       	rjmp	.-8      	; 0xc44 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc /* 32768 */
     c4c:	e0 e4       	ldi	r30, 0x40	; 64
     c4e:	f1 e0       	ldi	r31, 0x01	; 1
     c50:	88 e7       	ldi	r24, 0x78	; 120
     c52:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp       /* Enable: disabled */
	            | 0 << RTC_RUNSTDBY_bp;   /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; /* 32KHz divided by 32 */
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	87 83       	std	Z+7, r24	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     c58:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6c11>
     c5c:	81 11       	cpse	r24, r1
     c5e:	fc cf       	rjmp	.-8      	; 0xc58 <RTC_0_init+0x14>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* RTC Clock Cycles 4096 */
     c60:	e0 e4       	ldi	r30, 0x40	; 64
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	89 e4       	ldi	r24, 0x49	; 73
     c66:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;   /* Enable: enabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	08 95       	ret

00000c70 <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     c70:	85 e0       	ldi	r24, 0x05	; 5
     c72:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6b10>
	                | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	08 95       	ret

00000c7a <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     c7a:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     c7c:	11 c0       	rjmp	.+34     	; 0xca0 <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c7e:	29 b1       	in	r18, 0x09	; 9
     c80:	27 7f       	andi	r18, 0xF7	; 247
     c82:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     c84:	29 2f       	mov	r18, r25
     c86:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     c88:	21 f0       	breq	.+8      	; 0xc92 <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     c8a:	29 b1       	in	r18, 0x09	; 9
     c8c:	20 61       	ori	r18, 0x10	; 16
     c8e:	29 b9       	out	0x09, r18	; 9
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c92:	29 b1       	in	r18, 0x09	; 9
     c94:	2f 7e       	andi	r18, 0xEF	; 239
     c96:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     c98:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     c9a:	29 b1       	in	r18, 0x09	; 9
     c9c:	28 60       	ori	r18, 0x08	; 8
     c9e:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     ca0:	91 11       	cpse	r25, r1
     ca2:	ed cf       	rjmp	.-38     	; 0xc7e <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     ca4:	89 b1       	in	r24, 0x09	; 9
     ca6:	87 7f       	andi	r24, 0xF7	; 247
     ca8:	89 b9       	out	0x09, r24	; 9
     caa:	08 95       	ret

00000cac <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     cac:	cf 92       	push	r12
     cae:	df 92       	push	r13
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	6a 01       	movw	r12, r20
     cb6:	7b 01       	movw	r14, r22
	switch(instruction)
     cb8:	88 23       	and	r24, r24
     cba:	19 f0       	breq	.+6      	; 0xcc2 <SX1243Write+0x16>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	21 f0       	breq	.+8      	; 0xcc8 <SX1243Write+0x1c>
     cc0:	16 c0       	rjmp	.+44     	; 0xcee <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	da df       	rcall	.-76     	; 0xc7a <SpiOut>
		break;
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     cc8:	db 01       	movw	r26, r22
     cca:	ca 01       	movw	r24, r20
     ccc:	88 27       	eor	r24, r24
     cce:	99 27       	eor	r25, r25
     cd0:	a7 70       	andi	r26, 0x07	; 7
     cd2:	bb 27       	eor	r27, r27
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	88 61       	ori	r24, 0x18	; 24
     cda:	cf df       	rcall	.-98     	; 0xc7a <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     cdc:	8d 2d       	mov	r24, r13
     cde:	cd df       	rcall	.-102    	; 0xc7a <SpiOut>
	SpiOut(data & 0xFF);
     ce0:	8c 2d       	mov	r24, r12
     ce2:	cb df       	rcall	.-106    	; 0xc7a <SpiOut>
     ce4:	89 b1       	in	r24, 0x09	; 9
     ce6:	8f 7e       	andi	r24, 0xEF	; 239
     ce8:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     cee:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	08 95       	ret

00000cfa <SX1243Reset>:
     cfa:	89 b1       	in	r24, 0x09	; 9
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	89 b9       	out	0x09, r24	; 9
     d00:	83 ed       	ldi	r24, 0xD3	; 211
     d02:	90 e3       	ldi	r25, 0x30	; 48
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <SX1243Reset+0xa>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <SX1243Reset+0x10>
     d0a:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     d0c:	89 b1       	in	r24, 0x09	; 9
     d0e:	80 62       	ori	r24, 0x20	; 32
     d10:	89 b9       	out	0x09, r24	; 9
     d12:	08 95       	ret

00000d14 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	4a c0       	rjmp	.+148    	; 0xdac <Sx1243ConvertBuffer+0x98>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80;
     d18:	9c 01       	movw	r18, r24
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	22 0f       	add	r18, r18
     d20:	33 1f       	adc	r19, r19
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	e0 91 e9 3e 	lds	r30, 0x3EE9	; 0x803ee9 <TxParam+0x13>
     d2a:	f0 91 ea 3e 	lds	r31, 0x3EEA	; 0x803eea <TxParam+0x14>
     d2e:	e8 0f       	add	r30, r24
     d30:	f9 1f       	adc	r31, r25
     d32:	40 81       	ld	r20, Z
     d34:	44 1f       	adc	r20, r20
     d36:	44 27       	eor	r20, r20
     d38:	44 1f       	adc	r20, r20
     d3a:	d9 01       	movw	r26, r18
     d3c:	aa 5a       	subi	r26, 0xAA	; 170
     d3e:	b1 4c       	sbci	r27, 0xC1	; 193
     d40:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40;
     d42:	40 81       	ld	r20, Z
     d44:	46 fb       	bst	r20, 6
     d46:	44 27       	eor	r20, r20
     d48:	40 f9       	bld	r20, 0
     d4a:	d9 01       	movw	r26, r18
     d4c:	a9 5a       	subi	r26, 0xA9	; 169
     d4e:	b1 4c       	sbci	r27, 0xC1	; 193
     d50:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20;
     d52:	40 81       	ld	r20, Z
     d54:	45 fb       	bst	r20, 5
     d56:	44 27       	eor	r20, r20
     d58:	40 f9       	bld	r20, 0
     d5a:	d9 01       	movw	r26, r18
     d5c:	a8 5a       	subi	r26, 0xA8	; 168
     d5e:	b1 4c       	sbci	r27, 0xC1	; 193
     d60:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10;
     d62:	40 81       	ld	r20, Z
     d64:	42 95       	swap	r20
     d66:	41 70       	andi	r20, 0x01	; 1
     d68:	d9 01       	movw	r26, r18
     d6a:	a7 5a       	subi	r26, 0xA7	; 167
     d6c:	b1 4c       	sbci	r27, 0xC1	; 193
     d6e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
     d70:	40 81       	ld	r20, Z
     d72:	43 fb       	bst	r20, 3
     d74:	44 27       	eor	r20, r20
     d76:	40 f9       	bld	r20, 0
     d78:	d9 01       	movw	r26, r18
     d7a:	a6 5a       	subi	r26, 0xA6	; 166
     d7c:	b1 4c       	sbci	r27, 0xC1	; 193
     d7e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
     d80:	40 81       	ld	r20, Z
     d82:	42 fb       	bst	r20, 2
     d84:	44 27       	eor	r20, r20
     d86:	40 f9       	bld	r20, 0
     d88:	d9 01       	movw	r26, r18
     d8a:	a5 5a       	subi	r26, 0xA5	; 165
     d8c:	b1 4c       	sbci	r27, 0xC1	; 193
     d8e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
     d90:	40 81       	ld	r20, Z
     d92:	46 95       	lsr	r20
     d94:	41 70       	andi	r20, 0x01	; 1
     d96:	d9 01       	movw	r26, r18
     d98:	a4 5a       	subi	r26, 0xA4	; 164
     d9a:	b1 4c       	sbci	r27, 0xC1	; 193
     d9c:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
     d9e:	40 81       	ld	r20, Z
     da0:	41 70       	andi	r20, 0x01	; 1
     da2:	f9 01       	movw	r30, r18
     da4:	e3 5a       	subi	r30, 0xA3	; 163
     da6:	f1 4c       	sbci	r31, 0xC1	; 193
     da8:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	20 91 e8 3e 	lds	r18, 0x3EE8	; 0x803ee8 <TxParam+0x12>
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	82 17       	cp	r24, r18
     db4:	93 07       	cpc	r25, r19
     db6:	08 f4       	brcc	.+2      	; 0xdba <Sx1243ConvertBuffer+0xa6>
     db8:	af cf       	rjmp	.-162    	; 0xd18 <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}
     dba:	08 95       	ret

00000dbc <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
     dbc:	e6 ed       	ldi	r30, 0xD6	; 214
     dbe:	fe e3       	ldi	r31, 0x3E	; 62
     dc0:	83 8b       	std	Z+19, r24	; 0x13
     dc2:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
     dc4:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	80 93 53 3e 	sts	0x3E53, r24	; 0x803e53 <fastBufSize>
	Sx1243ConvertBuffer(0);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	a2 df       	rcall	.-188    	; 0xd14 <Sx1243ConvertBuffer>
	return SX_OK;
}
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret

00000dd4 <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	8c 01       	movw	r16, r24
     de0:	f6 2e       	mov	r15, r22
     de2:	c4 2f       	mov	r28, r20
	SX1243Reset();
     de4:	8a df       	rcall	.-236    	; 0xcfa <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
     de6:	e6 ed       	ldi	r30, 0xD6	; 214
     de8:	fe e3       	ldi	r31, 0x3E	; 62
     dea:	10 8a       	std	Z+16, r1	; 0x10
     dec:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
     dee:	16 86       	std	Z+14, r1	; 0x0e
     df0:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e2       	ldi	r25, 0x20	; 32
     df6:	84 87       	std	Z+12, r24	; 0x0c
     df8:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	98 e0       	ldi	r25, 0x08	; 8
     dfe:	82 87       	std	Z+10, r24	; 0x0a
     e00:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
     e02:	10 86       	std	Z+8, r1	; 0x08
     e04:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
     e06:	16 82       	std	Z+6, r1	; 0x06
     e08:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	84 83       	std	Z+4, r24	; 0x04
     e10:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
     e12:	87 e2       	ldi	r24, 0x27	; 39
     e14:	96 e6       	ldi	r25, 0x66	; 102
     e16:	a4 e0       	ldi	r26, 0x04	; 4
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	80 83       	st	Z, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	a2 83       	std	Z+2, r26	; 0x02
     e20:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	98 e2       	ldi	r25, 0x28	; 40
     e26:	85 8b       	std	Z+21, r24	; 0x15
     e28:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
     e2a:	4c 2f       	mov	r20, r28
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	d8 01       	movw	r26, r16
     e30:	a4 0f       	add	r26, r20
     e32:	b5 1f       	adc	r27, r21
     e34:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1] ^ 
     e36:	9a 01       	movw	r18, r20
     e38:	2f 5f       	subi	r18, 0xFF	; 255
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	20 0f       	add	r18, r16
     e3e:	31 1f       	adc	r19, r17
						 PayloadBuffer[DataStartByte + 2];
     e40:	4e 5f       	subi	r20, 0xFE	; 254
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	d8 01       	movw	r26, r16
     e46:	a4 0f       	add	r26, r20
     e48:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
     e4a:	e9 01       	movw	r28, r18
     e4c:	88 81       	ld	r24, Y
     e4e:	89 27       	eor	r24, r25
     e50:	9c 91       	ld	r25, X
     e52:	89 27       	eor	r24, r25
     e54:	9b ed       	ldi	r25, 0xDB	; 219
     e56:	89 27       	eor	r24, r25
     e58:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1] ^ 
						 PayloadBuffer[DataStartByte + 2];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
     e5a:	6f 2d       	mov	r22, r15
     e5c:	c8 01       	movw	r24, r16
     e5e:	ae df       	rcall	.-164    	; 0xdbc <SX1243SetTxPacketBuffer>
	return SX_OK;
}
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	08 95       	ret

00000e6e <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
     e6e:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^ 
     e70:	80 91 ed 3e 	lds	r24, 0x3EED	; 0x803eed <TxParam+0x17>
					 buffer[0]		  ^ 
     e74:	50 81       	ld	r21, Z
					 buffer[1]		  ^ 
     e76:	41 81       	ldd	r20, Z+1	; 0x01
					 buffer[2]		  ^ 
     e78:	32 81       	ldd	r19, Z+2	; 0x02
					 buffer[3]		  ^ 
     e7a:	23 81       	ldd	r18, Z+3	; 0x03
					 buffer[4]		  ^ 
     e7c:	94 81       	ldd	r25, Z+4	; 0x04
					 buffer[5]);
     e7e:	65 81       	ldd	r22, Z+5	; 0x05
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^ 
     e80:	85 27       	eor	r24, r21
     e82:	84 27       	eor	r24, r20
     e84:	83 27       	eor	r24, r19
     e86:	82 27       	eor	r24, r18
     e88:	89 27       	eor	r24, r25
					 buffer[1]		  ^ 
					 buffer[2]		  ^ 
					 buffer[3]		  ^ 
					 buffer[4]		  ^ 
					 buffer[5]);
}
     e8a:	86 27       	eor	r24, r22
     e8c:	08 95       	ret

00000e8e <SX1243Process>:

U8 SX1243Process(void)
{
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;

	TxParam.Config |= 0x8000;
     e92:	c6 ed       	ldi	r28, 0xD6	; 214
     e94:	de e3       	ldi	r29, 0x3E	; 62
     e96:	4d 89       	ldd	r20, Y+21	; 0x15
     e98:	5e 89       	ldd	r21, Y+22	; 0x16
     e9a:	50 68       	ori	r21, 0x80	; 128
     e9c:	4d 8b       	std	Y+21, r20	; 0x15
     e9e:	5e 8b       	std	Y+22, r21	; 0x16
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	02 df       	rcall	.-508    	; 0xcac <SX1243Write>
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
     ea8:	48 81       	ld	r20, Y
     eaa:	59 81       	ldd	r21, Y+1	; 0x01
     eac:	6a 81       	ldd	r22, Y+2	; 0x02
     eae:	7b 81       	ldd	r23, Y+3	; 0x03
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	fc de       	rcall	.-520    	; 0xcac <SX1243Write>
	TxParam.Config &= 0x7FFF;
     eb4:	8d 89       	ldd	r24, Y+21	; 0x15
     eb6:	9e 89       	ldd	r25, Y+22	; 0x16
     eb8:	9f 77       	andi	r25, 0x7F	; 127
     eba:	8d 8b       	std	Y+21, r24	; 0x15
     ebc:	9e 8b       	std	Y+22, r25	; 0x16

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
     ebe:	80 91 40 95 	lds	r24, 0x9540	; 0x809540 <__bss_end+0x5652>
     ec2:	8d 5f       	subi	r24, 0xFD	; 253
     ec4:	27 df       	rcall	.-434    	; 0xd14 <Sx1243ConvertBuffer>
}

U8 SX1243Process(void)
{
	U8 state = SX_OK;
	U16 j = 0;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <SX1243Process+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ecc:	20 e1       	ldi	r18, 0x10	; 16
     ece:	2a 95       	dec	r18
     ed0:	f1 f7       	brne	.-4      	; 0xece <SX1243Process+0x40>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <SX1243Process+0x46>
	{
		_delay_us(10);
		j++;
     ed4:	01 96       	adiw	r24, 0x01	; 1
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     ed6:	52 99       	sbic	0x0a, 2	; 10
     ed8:	03 c0       	rjmp	.+6      	; 0xee0 <SX1243Process+0x52>
     eda:	8c 3d       	cpi	r24, 0xDC	; 220
     edc:	91 05       	cpc	r25, r1
     ede:	b0 f3       	brcs	.-20     	; 0xecc <SX1243Process+0x3e>
		_delay_us(10);
		j++;
	}
	
	
	if (j < TRANSMITTER_READY_TIMEOUT)
     ee0:	8c 3d       	cpi	r24, 0xDC	; 220
     ee2:	91 05       	cpc	r25, r1
     ee4:	e8 f0       	brcs	.+58     	; 0xf20 <SX1243Process+0x92>
     ee6:	25 c0       	rjmp	.+74     	; 0xf32 <SX1243Process+0xa4>
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
		{
			DATA_set_level(fastBuf[j]);
     ee8:	fc 01       	movw	r30, r24
     eea:	ea 5a       	subi	r30, 0xAA	; 170
     eec:	f1 4c       	sbci	r31, 0xC1	; 193
     eee:	20 81       	ld	r18, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     ef0:	22 23       	and	r18, r18
     ef2:	21 f0       	breq	.+8      	; 0xefc <SX1243Process+0x6e>
		VPORTC.OUT |= (1 << pin);
     ef4:	29 b1       	in	r18, 0x09	; 9
     ef6:	20 61       	ori	r18, 0x10	; 16
     ef8:	29 b9       	out	0x09, r18	; 9
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <SX1243Process+0x74>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     efc:	29 b1       	in	r18, 0x09	; 9
     efe:	2f 7e       	andi	r18, 0xEF	; 239
     f00:	29 b9       	out	0x09, r18	; 9
     f02:	2a e0       	ldi	r18, 0x0A	; 10
     f04:	2a 95       	dec	r18
     f06:	f1 f7       	brne	.-4      	; 0xf04 <SX1243Process+0x76>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <SX1243Process+0x7c>
			_delay_us(6.4);
			if (!fastBuf[j])
     f0a:	fc 01       	movw	r30, r24
     f0c:	ea 5a       	subi	r30, 0xAA	; 170
     f0e:	f1 4c       	sbci	r31, 0xC1	; 193
     f10:	20 81       	ld	r18, Z
     f12:	21 11       	cpse	r18, r1
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <SX1243Process+0x8e>
			{
				_NOP();
     f16:	00 00       	nop
				_NOP();
     f18:	00 00       	nop
				_NOP();
     f1a:	00 00       	nop
			}
			j++;
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <SX1243Process+0x96>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
     f24:	20 91 53 3e 	lds	r18, 0x3E53	; 0x803e53 <fastBufSize>
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	82 17       	cp	r24, r18
     f2c:	93 07       	cpc	r25, r19
     f2e:	e0 f2       	brcs	.-72     	; 0xee8 <SX1243Process+0x5a>
     f30:	03 c0       	rjmp	.+6      	; 0xf38 <SX1243Process+0xaa>
		
		//FLASH_set_level(0);
	}
	else
	{
		SX1243Reset();
     f32:	e3 de       	rcall	.-570    	; 0xcfa <SX1243Reset>
		return SX_ERROR;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <SX1243Process+0xbc>
	}
	
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     f38:	40 91 eb 3e 	lds	r20, 0x3EEB	; 0x803eeb <TxParam+0x15>
     f3c:	50 91 ec 3e 	lds	r21, 0x3EEC	; 0x803eec <TxParam+0x16>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	b2 de       	rcall	.-668    	; 0xcac <SX1243Write>
		
	return state;
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <TOUCH_GetSensorValue>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     f50:	91 b1       	in	r25, 0x01	; 1
     f52:	9f 77       	andi	r25, 0x7F	; 127
     f54:	91 b9       	out	0x01, r25	; 1
uint16_t TOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	uint16_t var = 0;
	SHIELD_set_level(false);
	
	switch (touchPin)
     f56:	88 23       	and	r24, r24
     f58:	19 f0       	breq	.+6      	; 0xf60 <TOUCH_GetSensorValue+0x10>
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	89 f1       	breq	.+98     	; 0xfc0 <TOUCH_GetSensorValue+0x70>
     f5e:	60 c0       	rjmp	.+192    	; 0x1020 <TOUCH_GetSensorValue+0xd0>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     f60:	66 23       	and	r22, r22
     f62:	21 f0       	breq	.+8      	; 0xf6c <TOUCH_GetSensorValue+0x1c>
		VPORTB.OUT |= (1 << pin);
     f64:	85 b1       	in	r24, 0x05	; 5
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	85 b9       	out	0x05, r24	; 5
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <TOUCH_GetSensorValue+0x22>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     f6c:	85 b1       	in	r24, 0x05	; 5
     f6e:	8d 7f       	andi	r24, 0xFD	; 253
     f70:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f72:	84 b1       	in	r24, 0x04	; 4
     f74:	82 60       	ori	r24, 0x02	; 2
     f76:	84 b9       	out	0x04, r24	; 4
	{
		case 0:
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     f78:	8a e0       	ldi	r24, 0x0A	; 10
     f7a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f70c6>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     f7e:	61 30       	cpi	r22, 0x01	; 1
     f80:	21 f0       	breq	.+8      	; 0xf8a <TOUCH_GetSensorValue+0x3a>
		VPORTA.OUT |= (1 << pin);
     f82:	81 b1       	in	r24, 0x01	; 1
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	81 b9       	out	0x01, r24	; 1
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <TOUCH_GetSensorValue+0x40>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     f8a:	81 b1       	in	r24, 0x01	; 1
     f8c:	8f 7b       	andi	r24, 0xBF	; 191
     f8e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     f90:	80 b1       	in	r24, 0x00	; 0
     f92:	80 64       	ori	r24, 0x40	; 64
     f94:	80 b9       	out	0x00, r24	; 0
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	8a 95       	dec	r24
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <TOUCH_GetSensorValue+0x48>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f9c:	80 b1       	in	r24, 0x00	; 0
     f9e:	8f 7b       	andi	r24, 0xBF	; 191
     fa0:	80 b9       	out	0x00, r24	; 0
			//SX_set_pull_mode(PORT_PULL_OFF);
			
			//ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;			
			//_delay_us(TRANSFER_DELAY);
			
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
     fa2:	86 e0       	ldi	r24, 0x06	; 6
     fa4:	78 dd       	rcall	.-1296   	; 0xa96 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f70c6>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     fac:	25 b1       	in	r18, 0x05	; 5
     fae:	22 60       	ori	r18, 0x02	; 2
     fb0:	25 b9       	out	0x05, r18	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     fb2:	21 b1       	in	r18, 0x01	; 1
     fb4:	20 64       	ori	r18, 0x40	; 64
     fb6:	21 b9       	out	0x01, r18	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     fb8:	20 b1       	in	r18, 0x00	; 0
     fba:	20 64       	ori	r18, 0x40	; 64
     fbc:	20 b9       	out	0x00, r18	; 0
			//PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			//PARTNER_set_pull_mode(PORT_PULL_OFF);
			SX_set_level(true);
			SX_set_dir(PORT_DIR_OUT);
			
			return var;
     fbe:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     fc0:	66 23       	and	r22, r22
     fc2:	21 f0       	breq	.+8      	; 0xfcc <TOUCH_GetSensorValue+0x7c>
		VPORTB.OUT |= (1 << pin);
     fc4:	85 b1       	in	r24, 0x05	; 5
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	85 b9       	out	0x05, r24	; 5
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <TOUCH_GetSensorValue+0x82>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     fcc:	85 b1       	in	r24, 0x05	; 5
     fce:	8d 7f       	andi	r24, 0xFD	; 253
     fd0:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     fd2:	84 b1       	in	r24, 0x04	; 4
     fd4:	82 60       	ori	r24, 0x02	; 2
     fd6:	84 b9       	out	0x04, r24	; 4
		break;
		
		case 1:
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     fd8:	8a e0       	ldi	r24, 0x0A	; 10
     fda:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f70c6>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     fde:	61 30       	cpi	r22, 0x01	; 1
     fe0:	21 f0       	breq	.+8      	; 0xfea <TOUCH_GetSensorValue+0x9a>
		VPORTB.OUT |= (1 << pin);
     fe2:	85 b1       	in	r24, 0x05	; 5
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	85 b9       	out	0x05, r24	; 5
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <TOUCH_GetSensorValue+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     fea:	85 b1       	in	r24, 0x05	; 5
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     ff0:	84 b1       	in	r24, 0x04	; 4
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	84 b9       	out	0x04, r24	; 4
     ff6:	85 e0       	ldi	r24, 0x05	; 5
     ff8:	8a 95       	dec	r24
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <TOUCH_GetSensorValue+0xa8>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     ffc:	84 b1       	in	r24, 0x04	; 4
     ffe:	8e 7f       	andi	r24, 0xFE	; 254
    1000:	84 b9       	out	0x04, r24	; 4
			//SY_set_pull_mode(PORT_PULL_OFF);
		
			//ADC0.MUXPOS = ADC_MUXPOS_AIN11_gc;
			//_delay_us(TRANSFER_DELAY);
		
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
    1002:	8b e0       	ldi	r24, 0x0B	; 11
    1004:	48 dd       	rcall	.-1392   	; 0xa96 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    1006:	2a e0       	ldi	r18, 0x0A	; 10
    1008:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f70c6>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    100c:	25 b1       	in	r18, 0x05	; 5
    100e:	22 60       	ori	r18, 0x02	; 2
    1010:	25 b9       	out	0x05, r18	; 5
    1012:	25 b1       	in	r18, 0x05	; 5
    1014:	21 60       	ori	r18, 0x01	; 1
    1016:	25 b9       	out	0x05, r18	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1018:	24 b1       	in	r18, 0x04	; 4
    101a:	21 60       	ori	r18, 0x01	; 1
    101c:	24 b9       	out	0x04, r18	; 4
			//PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			//PARTNER_set_pull_mode(PORT_PULL_OFF);
			SY_set_level(true);
			SY_set_dir(PORT_DIR_OUT);
			
			return var;
    101e:	08 95       	ret
		
		default:
		break;
	}
	
	return var;
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
}
    1024:	08 95       	ret

00001026 <__divsf3>:
    1026:	0e 94 27 08 	call	0x104e	; 0x104e <__divsf3x>
    102a:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_round>
    102e:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_pscB>
    1032:	58 f0       	brcs	.+22     	; 0x104a <__divsf3+0x24>
    1034:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_pscA>
    1038:	40 f0       	brcs	.+16     	; 0x104a <__divsf3+0x24>
    103a:	29 f4       	brne	.+10     	; 0x1046 <__divsf3+0x20>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	29 f0       	breq	.+10     	; 0x104a <__divsf3+0x24>
    1040:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_inf>
    1044:	51 11       	cpse	r21, r1
    1046:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_szero>
    104a:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__fp_nan>

0000104e <__divsf3x>:
    104e:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_split3>
    1052:	68 f3       	brcs	.-38     	; 0x102e <__divsf3+0x8>

00001054 <__divsf3_pse>:
    1054:	99 23       	and	r25, r25
    1056:	b1 f3       	breq	.-20     	; 0x1044 <__divsf3+0x1e>
    1058:	55 23       	and	r21, r21
    105a:	91 f3       	breq	.-28     	; 0x1040 <__divsf3+0x1a>
    105c:	95 1b       	sub	r25, r21
    105e:	55 0b       	sbc	r21, r21
    1060:	bb 27       	eor	r27, r27
    1062:	aa 27       	eor	r26, r26
    1064:	62 17       	cp	r22, r18
    1066:	73 07       	cpc	r23, r19
    1068:	84 07       	cpc	r24, r20
    106a:	38 f0       	brcs	.+14     	; 0x107a <__divsf3_pse+0x26>
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	5f 4f       	sbci	r21, 0xFF	; 255
    1070:	22 0f       	add	r18, r18
    1072:	33 1f       	adc	r19, r19
    1074:	44 1f       	adc	r20, r20
    1076:	aa 1f       	adc	r26, r26
    1078:	a9 f3       	breq	.-22     	; 0x1064 <__divsf3_pse+0x10>
    107a:	35 d0       	rcall	.+106    	; 0x10e6 <__divsf3_pse+0x92>
    107c:	0e 2e       	mov	r0, r30
    107e:	3a f0       	brmi	.+14     	; 0x108e <__divsf3_pse+0x3a>
    1080:	e0 e8       	ldi	r30, 0x80	; 128
    1082:	32 d0       	rcall	.+100    	; 0x10e8 <__divsf3_pse+0x94>
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	50 40       	sbci	r21, 0x00	; 0
    1088:	e6 95       	lsr	r30
    108a:	00 1c       	adc	r0, r0
    108c:	ca f7       	brpl	.-14     	; 0x1080 <__divsf3_pse+0x2c>
    108e:	2b d0       	rcall	.+86     	; 0x10e6 <__divsf3_pse+0x92>
    1090:	fe 2f       	mov	r31, r30
    1092:	29 d0       	rcall	.+82     	; 0x10e6 <__divsf3_pse+0x92>
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	bb 1f       	adc	r27, r27
    109c:	26 17       	cp	r18, r22
    109e:	37 07       	cpc	r19, r23
    10a0:	48 07       	cpc	r20, r24
    10a2:	ab 07       	cpc	r26, r27
    10a4:	b0 e8       	ldi	r27, 0x80	; 128
    10a6:	09 f0       	breq	.+2      	; 0x10aa <__divsf3_pse+0x56>
    10a8:	bb 0b       	sbc	r27, r27
    10aa:	80 2d       	mov	r24, r0
    10ac:	bf 01       	movw	r22, r30
    10ae:	ff 27       	eor	r31, r31
    10b0:	93 58       	subi	r25, 0x83	; 131
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255
    10b4:	3a f0       	brmi	.+14     	; 0x10c4 <__divsf3_pse+0x70>
    10b6:	9e 3f       	cpi	r25, 0xFE	; 254
    10b8:	51 05       	cpc	r21, r1
    10ba:	78 f0       	brcs	.+30     	; 0x10da <__divsf3_pse+0x86>
    10bc:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_inf>
    10c0:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_szero>
    10c4:	5f 3f       	cpi	r21, 0xFF	; 255
    10c6:	e4 f3       	brlt	.-8      	; 0x10c0 <__divsf3_pse+0x6c>
    10c8:	98 3e       	cpi	r25, 0xE8	; 232
    10ca:	d4 f3       	brlt	.-12     	; 0x10c0 <__divsf3_pse+0x6c>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	f7 95       	ror	r31
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__divsf3_pse+0x78>
    10da:	88 0f       	add	r24, r24
    10dc:	91 1d       	adc	r25, r1
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	bb 1f       	adc	r27, r27
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	ba 07       	cpc	r27, r26
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__divsf3_pse+0xae>
    10fa:	62 1b       	sub	r22, r18
    10fc:	73 0b       	sbc	r23, r19
    10fe:	84 0b       	sbc	r24, r20
    1100:	ba 0b       	sbc	r27, r26
    1102:	ee 1f       	adc	r30, r30
    1104:	88 f7       	brcc	.-30     	; 0x10e8 <__divsf3_pse+0x94>
    1106:	e0 95       	com	r30
    1108:	08 95       	ret

0000110a <__fixsfdi>:
    110a:	be e3       	ldi	r27, 0x3E	; 62
    110c:	04 d0       	rcall	.+8      	; 0x1116 <__fixunssfdi+0x2>
    110e:	08 f4       	brcc	.+2      	; 0x1112 <__fixsfdi+0x8>
    1110:	90 e8       	ldi	r25, 0x80	; 128
    1112:	08 95       	ret

00001114 <__fixunssfdi>:
    1114:	bf e3       	ldi	r27, 0x3F	; 63
    1116:	22 27       	eor	r18, r18
    1118:	33 27       	eor	r19, r19
    111a:	a9 01       	movw	r20, r18
    111c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_splitA>
    1120:	60 f1       	brcs	.+88     	; 0x117a <__fixunssfdi+0x66>
    1122:	9f 57       	subi	r25, 0x7F	; 127
    1124:	48 f1       	brcs	.+82     	; 0x1178 <__fixunssfdi+0x64>
    1126:	b9 17       	cp	r27, r25
    1128:	40 f1       	brcs	.+80     	; 0x117a <__fixunssfdi+0x66>
    112a:	bf e3       	ldi	r27, 0x3F	; 63
    112c:	b9 1b       	sub	r27, r25
    112e:	99 27       	eor	r25, r25
    1130:	b8 50       	subi	r27, 0x08	; 8
    1132:	3a f4       	brpl	.+14     	; 0x1142 <__fixunssfdi+0x2e>
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	b3 95       	inc	r27
    113e:	d2 f3       	brmi	.-12     	; 0x1134 <__fixunssfdi+0x20>
    1140:	16 c0       	rjmp	.+44     	; 0x116e <__fixunssfdi+0x5a>
    1142:	b8 50       	subi	r27, 0x08	; 8
    1144:	4a f0       	brmi	.+18     	; 0x1158 <__fixunssfdi+0x44>
    1146:	23 2f       	mov	r18, r19
    1148:	34 2f       	mov	r19, r20
    114a:	45 2f       	mov	r20, r21
    114c:	56 2f       	mov	r21, r22
    114e:	67 2f       	mov	r22, r23
    1150:	78 2f       	mov	r23, r24
    1152:	88 27       	eor	r24, r24
    1154:	b8 50       	subi	r27, 0x08	; 8
    1156:	ba f7       	brpl	.-18     	; 0x1146 <__fixunssfdi+0x32>
    1158:	b8 5f       	subi	r27, 0xF8	; 248
    115a:	49 f0       	breq	.+18     	; 0x116e <__fixunssfdi+0x5a>
    115c:	86 95       	lsr	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	57 95       	ror	r21
    1164:	47 95       	ror	r20
    1166:	37 95       	ror	r19
    1168:	27 95       	ror	r18
    116a:	ba 95       	dec	r27
    116c:	b9 f7       	brne	.-18     	; 0x115c <__fixunssfdi+0x48>
    116e:	16 f4       	brtc	.+4      	; 0x1174 <__fixunssfdi+0x60>
    1170:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__fp_negdi>
    1174:	88 94       	clc
    1176:	08 95       	ret
    1178:	88 94       	clc
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	cb 01       	movw	r24, r22
    1180:	08 95       	ret

00001182 <__fixunssfsi>:
    1182:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_splitA>
    1186:	88 f0       	brcs	.+34     	; 0x11aa <__fixunssfsi+0x28>
    1188:	9f 57       	subi	r25, 0x7F	; 127
    118a:	98 f0       	brcs	.+38     	; 0x11b2 <__fixunssfsi+0x30>
    118c:	b9 2f       	mov	r27, r25
    118e:	99 27       	eor	r25, r25
    1190:	b7 51       	subi	r27, 0x17	; 23
    1192:	b0 f0       	brcs	.+44     	; 0x11c0 <__fixunssfsi+0x3e>
    1194:	e1 f0       	breq	.+56     	; 0x11ce <__fixunssfsi+0x4c>
    1196:	66 0f       	add	r22, r22
    1198:	77 1f       	adc	r23, r23
    119a:	88 1f       	adc	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	1a f0       	brmi	.+6      	; 0x11a6 <__fixunssfsi+0x24>
    11a0:	ba 95       	dec	r27
    11a2:	c9 f7       	brne	.-14     	; 0x1196 <__fixunssfsi+0x14>
    11a4:	14 c0       	rjmp	.+40     	; 0x11ce <__fixunssfsi+0x4c>
    11a6:	b1 30       	cpi	r27, 0x01	; 1
    11a8:	91 f0       	breq	.+36     	; 0x11ce <__fixunssfsi+0x4c>
    11aa:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_zero>
    11ae:	b1 e0       	ldi	r27, 0x01	; 1
    11b0:	08 95       	ret
    11b2:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__fp_zero>
    11b6:	67 2f       	mov	r22, r23
    11b8:	78 2f       	mov	r23, r24
    11ba:	88 27       	eor	r24, r24
    11bc:	b8 5f       	subi	r27, 0xF8	; 248
    11be:	39 f0       	breq	.+14     	; 0x11ce <__fixunssfsi+0x4c>
    11c0:	b9 3f       	cpi	r27, 0xF9	; 249
    11c2:	cc f3       	brlt	.-14     	; 0x11b6 <__fixunssfsi+0x34>
    11c4:	86 95       	lsr	r24
    11c6:	77 95       	ror	r23
    11c8:	67 95       	ror	r22
    11ca:	b3 95       	inc	r27
    11cc:	d9 f7       	brne	.-10     	; 0x11c4 <__fixunssfsi+0x42>
    11ce:	3e f4       	brtc	.+14     	; 0x11de <__fixunssfsi+0x5c>
    11d0:	90 95       	com	r25
    11d2:	80 95       	com	r24
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	8f 4f       	sbci	r24, 0xFF	; 255
    11dc:	9f 4f       	sbci	r25, 0xFF	; 255
    11de:	08 95       	ret

000011e0 <__floatunsisf>:
    11e0:	e8 94       	clt
    11e2:	09 c0       	rjmp	.+18     	; 0x11f6 <__floatsisf+0x12>

000011e4 <__floatsisf>:
    11e4:	97 fb       	bst	r25, 7
    11e6:	3e f4       	brtc	.+14     	; 0x11f6 <__floatsisf+0x12>
    11e8:	90 95       	com	r25
    11ea:	80 95       	com	r24
    11ec:	70 95       	com	r23
    11ee:	61 95       	neg	r22
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	99 23       	and	r25, r25
    11f8:	a9 f0       	breq	.+42     	; 0x1224 <__floatsisf+0x40>
    11fa:	f9 2f       	mov	r31, r25
    11fc:	96 e9       	ldi	r25, 0x96	; 150
    11fe:	bb 27       	eor	r27, r27
    1200:	93 95       	inc	r25
    1202:	f6 95       	lsr	r31
    1204:	87 95       	ror	r24
    1206:	77 95       	ror	r23
    1208:	67 95       	ror	r22
    120a:	b7 95       	ror	r27
    120c:	f1 11       	cpse	r31, r1
    120e:	f8 cf       	rjmp	.-16     	; 0x1200 <__floatsisf+0x1c>
    1210:	fa f4       	brpl	.+62     	; 0x1250 <__floatsisf+0x6c>
    1212:	bb 0f       	add	r27, r27
    1214:	11 f4       	brne	.+4      	; 0x121a <__floatsisf+0x36>
    1216:	60 ff       	sbrs	r22, 0
    1218:	1b c0       	rjmp	.+54     	; 0x1250 <__floatsisf+0x6c>
    121a:	6f 5f       	subi	r22, 0xFF	; 255
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	16 c0       	rjmp	.+44     	; 0x1250 <__floatsisf+0x6c>
    1224:	88 23       	and	r24, r24
    1226:	11 f0       	breq	.+4      	; 0x122c <__floatsisf+0x48>
    1228:	96 e9       	ldi	r25, 0x96	; 150
    122a:	11 c0       	rjmp	.+34     	; 0x124e <__floatsisf+0x6a>
    122c:	77 23       	and	r23, r23
    122e:	21 f0       	breq	.+8      	; 0x1238 <__floatsisf+0x54>
    1230:	9e e8       	ldi	r25, 0x8E	; 142
    1232:	87 2f       	mov	r24, r23
    1234:	76 2f       	mov	r23, r22
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <__floatsisf+0x5e>
    1238:	66 23       	and	r22, r22
    123a:	71 f0       	breq	.+28     	; 0x1258 <__floatsisf+0x74>
    123c:	96 e8       	ldi	r25, 0x86	; 134
    123e:	86 2f       	mov	r24, r22
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	2a f0       	brmi	.+10     	; 0x1250 <__floatsisf+0x6c>
    1246:	9a 95       	dec	r25
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	da f7       	brpl	.-10     	; 0x1246 <__floatsisf+0x62>
    1250:	88 0f       	add	r24, r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	97 f9       	bld	r25, 7
    1258:	08 95       	ret

0000125a <__floatundisf>:
    125a:	e8 94       	clt

0000125c <__fp_di2sf>:
    125c:	f9 2f       	mov	r31, r25
    125e:	96 eb       	ldi	r25, 0xB6	; 182
    1260:	ff 23       	and	r31, r31
    1262:	81 f0       	breq	.+32     	; 0x1284 <__fp_di2sf+0x28>
    1264:	12 16       	cp	r1, r18
    1266:	13 06       	cpc	r1, r19
    1268:	14 06       	cpc	r1, r20
    126a:	44 0b       	sbc	r20, r20
    126c:	93 95       	inc	r25
    126e:	f6 95       	lsr	r31
    1270:	87 95       	ror	r24
    1272:	77 95       	ror	r23
    1274:	67 95       	ror	r22
    1276:	57 95       	ror	r21
    1278:	40 40       	sbci	r20, 0x00	; 0
    127a:	ff 23       	and	r31, r31
    127c:	b9 f7       	brne	.-18     	; 0x126c <__fp_di2sf+0x10>
    127e:	1b c0       	rjmp	.+54     	; 0x12b6 <__fp_di2sf+0x5a>
    1280:	99 27       	eor	r25, r25
    1282:	08 95       	ret
    1284:	88 23       	and	r24, r24
    1286:	51 f4       	brne	.+20     	; 0x129c <__fp_di2sf+0x40>
    1288:	98 50       	subi	r25, 0x08	; 8
    128a:	d2 f7       	brpl	.-12     	; 0x1280 <__fp_di2sf+0x24>
    128c:	87 2b       	or	r24, r23
    128e:	76 2f       	mov	r23, r22
    1290:	65 2f       	mov	r22, r21
    1292:	54 2f       	mov	r21, r20
    1294:	43 2f       	mov	r20, r19
    1296:	32 2f       	mov	r19, r18
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	b1 f3       	breq	.-20     	; 0x1288 <__fp_di2sf+0x2c>
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	14 06       	cpc	r1, r20
    12a2:	44 0b       	sbc	r20, r20
    12a4:	88 23       	and	r24, r24
    12a6:	3a f0       	brmi	.+14     	; 0x12b6 <__fp_di2sf+0x5a>
    12a8:	9a 95       	dec	r25
    12aa:	44 0f       	add	r20, r20
    12ac:	55 1f       	adc	r21, r21
    12ae:	66 1f       	adc	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	ca f7       	brpl	.-14     	; 0x12a8 <__fp_di2sf+0x4c>
    12b6:	55 23       	and	r21, r21
    12b8:	4a f4       	brpl	.+18     	; 0x12cc <__fp_di2sf+0x70>
    12ba:	44 0f       	add	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	11 f4       	brne	.+4      	; 0x12c4 <__fp_di2sf+0x68>
    12c0:	60 ff       	sbrs	r22, 0
    12c2:	04 c0       	rjmp	.+8      	; 0x12cc <__fp_di2sf+0x70>
    12c4:	6f 5f       	subi	r22, 0xFF	; 255
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	88 0f       	add	r24, r24
    12ce:	96 95       	lsr	r25
    12d0:	87 95       	ror	r24
    12d2:	97 f9       	bld	r25, 7
    12d4:	08 95       	ret

000012d6 <__fp_inf>:
    12d6:	97 f9       	bld	r25, 7
    12d8:	9f 67       	ori	r25, 0x7F	; 127
    12da:	80 e8       	ldi	r24, 0x80	; 128
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	08 95       	ret

000012e2 <__fp_nan>:
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	80 ec       	ldi	r24, 0xC0	; 192
    12e6:	08 95       	ret

000012e8 <__fp_negdi>:
    12e8:	90 95       	com	r25
    12ea:	80 95       	com	r24
    12ec:	70 95       	com	r23
    12ee:	60 95       	com	r22
    12f0:	50 95       	com	r21
    12f2:	40 95       	com	r20
    12f4:	30 95       	com	r19
    12f6:	21 95       	neg	r18
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	4f 4f       	sbci	r20, 0xFF	; 255
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	6f 4f       	sbci	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	08 95       	ret

00001308 <__fp_pscA>:
    1308:	00 24       	eor	r0, r0
    130a:	0a 94       	dec	r0
    130c:	16 16       	cp	r1, r22
    130e:	17 06       	cpc	r1, r23
    1310:	18 06       	cpc	r1, r24
    1312:	09 06       	cpc	r0, r25
    1314:	08 95       	ret

00001316 <__fp_pscB>:
    1316:	00 24       	eor	r0, r0
    1318:	0a 94       	dec	r0
    131a:	12 16       	cp	r1, r18
    131c:	13 06       	cpc	r1, r19
    131e:	14 06       	cpc	r1, r20
    1320:	05 06       	cpc	r0, r21
    1322:	08 95       	ret

00001324 <__fp_round>:
    1324:	09 2e       	mov	r0, r25
    1326:	03 94       	inc	r0
    1328:	00 0c       	add	r0, r0
    132a:	11 f4       	brne	.+4      	; 0x1330 <__fp_round+0xc>
    132c:	88 23       	and	r24, r24
    132e:	52 f0       	brmi	.+20     	; 0x1344 <__fp_round+0x20>
    1330:	bb 0f       	add	r27, r27
    1332:	40 f4       	brcc	.+16     	; 0x1344 <__fp_round+0x20>
    1334:	bf 2b       	or	r27, r31
    1336:	11 f4       	brne	.+4      	; 0x133c <__fp_round+0x18>
    1338:	60 ff       	sbrs	r22, 0
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <__fp_round+0x20>
    133c:	6f 5f       	subi	r22, 0xFF	; 255
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	8f 4f       	sbci	r24, 0xFF	; 255
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	08 95       	ret

00001346 <__fp_split3>:
    1346:	57 fd       	sbrc	r21, 7
    1348:	90 58       	subi	r25, 0x80	; 128
    134a:	44 0f       	add	r20, r20
    134c:	55 1f       	adc	r21, r21
    134e:	59 f0       	breq	.+22     	; 0x1366 <__fp_splitA+0x10>
    1350:	5f 3f       	cpi	r21, 0xFF	; 255
    1352:	71 f0       	breq	.+28     	; 0x1370 <__fp_splitA+0x1a>
    1354:	47 95       	ror	r20

00001356 <__fp_splitA>:
    1356:	88 0f       	add	r24, r24
    1358:	97 fb       	bst	r25, 7
    135a:	99 1f       	adc	r25, r25
    135c:	61 f0       	breq	.+24     	; 0x1376 <__fp_splitA+0x20>
    135e:	9f 3f       	cpi	r25, 0xFF	; 255
    1360:	79 f0       	breq	.+30     	; 0x1380 <__fp_splitA+0x2a>
    1362:	87 95       	ror	r24
    1364:	08 95       	ret
    1366:	12 16       	cp	r1, r18
    1368:	13 06       	cpc	r1, r19
    136a:	14 06       	cpc	r1, r20
    136c:	55 1f       	adc	r21, r21
    136e:	f2 cf       	rjmp	.-28     	; 0x1354 <__fp_split3+0xe>
    1370:	46 95       	lsr	r20
    1372:	f1 df       	rcall	.-30     	; 0x1356 <__fp_splitA>
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <__fp_splitA+0x30>
    1376:	16 16       	cp	r1, r22
    1378:	17 06       	cpc	r1, r23
    137a:	18 06       	cpc	r1, r24
    137c:	99 1f       	adc	r25, r25
    137e:	f1 cf       	rjmp	.-30     	; 0x1362 <__fp_splitA+0xc>
    1380:	86 95       	lsr	r24
    1382:	71 05       	cpc	r23, r1
    1384:	61 05       	cpc	r22, r1
    1386:	08 94       	sec
    1388:	08 95       	ret

0000138a <__fp_zero>:
    138a:	e8 94       	clt

0000138c <__fp_szero>:
    138c:	bb 27       	eor	r27, r27
    138e:	66 27       	eor	r22, r22
    1390:	77 27       	eor	r23, r23
    1392:	cb 01       	movw	r24, r22
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret

00001398 <__mulsf3>:
    1398:	0e 94 df 09 	call	0x13be	; 0x13be <__mulsf3x>
    139c:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__fp_round>
    13a0:	0e 94 84 09 	call	0x1308	; 0x1308 <__fp_pscA>
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <__mulsf3+0x1c>
    13a6:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_pscB>
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__mulsf3+0x1c>
    13ac:	95 23       	and	r25, r21
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <__mulsf3+0x1c>
    13b0:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_inf>
    13b4:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__fp_nan>
    13b8:	11 24       	eor	r1, r1
    13ba:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_szero>

000013be <__mulsf3x>:
    13be:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_split3>
    13c2:	70 f3       	brcs	.-36     	; 0x13a0 <__mulsf3+0x8>

000013c4 <__mulsf3_pse>:
    13c4:	95 9f       	mul	r25, r21
    13c6:	c1 f3       	breq	.-16     	; 0x13b8 <__mulsf3+0x20>
    13c8:	95 0f       	add	r25, r21
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	55 1f       	adc	r21, r21
    13ce:	62 9f       	mul	r22, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	72 9f       	mul	r23, r18
    13d4:	bb 27       	eor	r27, r27
    13d6:	f0 0d       	add	r31, r0
    13d8:	b1 1d       	adc	r27, r1
    13da:	63 9f       	mul	r22, r19
    13dc:	aa 27       	eor	r26, r26
    13de:	f0 0d       	add	r31, r0
    13e0:	b1 1d       	adc	r27, r1
    13e2:	aa 1f       	adc	r26, r26
    13e4:	64 9f       	mul	r22, r20
    13e6:	66 27       	eor	r22, r22
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	66 1f       	adc	r22, r22
    13ee:	82 9f       	mul	r24, r18
    13f0:	22 27       	eor	r18, r18
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	62 1f       	adc	r22, r18
    13f8:	73 9f       	mul	r23, r19
    13fa:	b0 0d       	add	r27, r0
    13fc:	a1 1d       	adc	r26, r1
    13fe:	62 1f       	adc	r22, r18
    1400:	83 9f       	mul	r24, r19
    1402:	a0 0d       	add	r26, r0
    1404:	61 1d       	adc	r22, r1
    1406:	22 1f       	adc	r18, r18
    1408:	74 9f       	mul	r23, r20
    140a:	33 27       	eor	r19, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	23 1f       	adc	r18, r19
    1412:	84 9f       	mul	r24, r20
    1414:	60 0d       	add	r22, r0
    1416:	21 1d       	adc	r18, r1
    1418:	82 2f       	mov	r24, r18
    141a:	76 2f       	mov	r23, r22
    141c:	6a 2f       	mov	r22, r26
    141e:	11 24       	eor	r1, r1
    1420:	9f 57       	subi	r25, 0x7F	; 127
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	9a f0       	brmi	.+38     	; 0x144c <__mulsf3_pse+0x88>
    1426:	f1 f0       	breq	.+60     	; 0x1464 <__mulsf3_pse+0xa0>
    1428:	88 23       	and	r24, r24
    142a:	4a f0       	brmi	.+18     	; 0x143e <__mulsf3_pse+0x7a>
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	bb 1f       	adc	r27, r27
    1432:	66 1f       	adc	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__mulsf3_pse+0x64>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	80 f0       	brcs	.+32     	; 0x1464 <__mulsf3_pse+0xa0>
    1444:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_inf>
    1448:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	e4 f3       	brlt	.-8      	; 0x1448 <__mulsf3_pse+0x84>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	d4 f3       	brlt	.-12     	; 0x1448 <__mulsf3_pse+0x84>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	e7 95       	ror	r30
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__mulsf3_pse+0x90>
    1464:	fe 2b       	or	r31, r30
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__umulsidi3>:
    1472:	e8 94       	clt

00001474 <__umulsidi3_helper>:
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	fc 01       	movw	r30, r24
    147a:	db 01       	movw	r26, r22
    147c:	4b d0       	rcall	.+150    	; 0x1514 <__umulhisi3>
    147e:	7f 93       	push	r23
    1480:	6f 93       	push	r22
    1482:	e9 01       	movw	r28, r18
    1484:	9a 01       	movw	r18, r20
    1486:	ac 01       	movw	r20, r24
    1488:	bf 93       	push	r27
    148a:	af 93       	push	r26
    148c:	3f 93       	push	r19
    148e:	2f 93       	push	r18
    1490:	df 01       	movw	r26, r30
    1492:	40 d0       	rcall	.+128    	; 0x1514 <__umulhisi3>
    1494:	26 f4       	brtc	.+8      	; 0x149e <__umulsidi3_helper+0x2a>
    1496:	6c 1b       	sub	r22, r28
    1498:	7d 0b       	sbc	r23, r29
    149a:	82 0b       	sbc	r24, r18
    149c:	93 0b       	sbc	r25, r19
    149e:	9e 01       	movw	r18, r28
    14a0:	eb 01       	movw	r28, r22
    14a2:	fc 01       	movw	r30, r24
    14a4:	43 d0       	rcall	.+134    	; 0x152c <__muldi3_6>
    14a6:	af 91       	pop	r26
    14a8:	bf 91       	pop	r27
    14aa:	2f 91       	pop	r18
    14ac:	3f 91       	pop	r19
    14ae:	3e d0       	rcall	.+124    	; 0x152c <__muldi3_6>
    14b0:	be 01       	movw	r22, r28
    14b2:	cf 01       	movw	r24, r30
    14b4:	f9 01       	movw	r30, r18
    14b6:	2f 91       	pop	r18
    14b8:	3f 91       	pop	r19
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <__ashrdi3>:
    14c0:	97 fb       	bst	r25, 7
    14c2:	10 f8       	bld	r1, 0

000014c4 <__lshrdi3>:
    14c4:	16 94       	lsr	r1
    14c6:	00 08       	sbc	r0, r0
    14c8:	0f 93       	push	r16
    14ca:	08 30       	cpi	r16, 0x08	; 8
    14cc:	98 f0       	brcs	.+38     	; 0x14f4 <__lshrdi3+0x30>
    14ce:	08 50       	subi	r16, 0x08	; 8
    14d0:	23 2f       	mov	r18, r19
    14d2:	34 2f       	mov	r19, r20
    14d4:	45 2f       	mov	r20, r21
    14d6:	56 2f       	mov	r21, r22
    14d8:	67 2f       	mov	r22, r23
    14da:	78 2f       	mov	r23, r24
    14dc:	89 2f       	mov	r24, r25
    14de:	90 2d       	mov	r25, r0
    14e0:	f4 cf       	rjmp	.-24     	; 0x14ca <__lshrdi3+0x6>
    14e2:	05 94       	asr	r0
    14e4:	97 95       	ror	r25
    14e6:	87 95       	ror	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	57 95       	ror	r21
    14ee:	47 95       	ror	r20
    14f0:	37 95       	ror	r19
    14f2:	27 95       	ror	r18
    14f4:	0a 95       	dec	r16
    14f6:	aa f7       	brpl	.-22     	; 0x14e2 <__lshrdi3+0x1e>
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <__adddi3_s8>:
    14fc:	00 24       	eor	r0, r0
    14fe:	a7 fd       	sbrc	r26, 7
    1500:	00 94       	com	r0
    1502:	2a 0f       	add	r18, r26
    1504:	30 1d       	adc	r19, r0
    1506:	40 1d       	adc	r20, r0
    1508:	50 1d       	adc	r21, r0
    150a:	60 1d       	adc	r22, r0
    150c:	70 1d       	adc	r23, r0
    150e:	80 1d       	adc	r24, r0
    1510:	90 1d       	adc	r25, r0
    1512:	08 95       	ret

00001514 <__umulhisi3>:
    1514:	a2 9f       	mul	r26, r18
    1516:	b0 01       	movw	r22, r0
    1518:	b3 9f       	mul	r27, r19
    151a:	c0 01       	movw	r24, r0
    151c:	a3 9f       	mul	r26, r19
    151e:	01 d0       	rcall	.+2      	; 0x1522 <__umulhisi3+0xe>
    1520:	b2 9f       	mul	r27, r18
    1522:	70 0d       	add	r23, r0
    1524:	81 1d       	adc	r24, r1
    1526:	11 24       	eor	r1, r1
    1528:	91 1d       	adc	r25, r1
    152a:	08 95       	ret

0000152c <__muldi3_6>:
    152c:	f3 df       	rcall	.-26     	; 0x1514 <__umulhisi3>
    152e:	46 0f       	add	r20, r22
    1530:	57 1f       	adc	r21, r23
    1532:	c8 1f       	adc	r28, r24
    1534:	d9 1f       	adc	r29, r25
    1536:	08 f4       	brcc	.+2      	; 0x153a <__muldi3_6+0xe>
    1538:	31 96       	adiw	r30, 0x01	; 1
    153a:	08 95       	ret

0000153c <_exit>:
    153c:	f8 94       	cli

0000153e <__stop_program>:
    153e:	ff cf       	rjmp	.-2      	; 0x153e <__stop_program>
