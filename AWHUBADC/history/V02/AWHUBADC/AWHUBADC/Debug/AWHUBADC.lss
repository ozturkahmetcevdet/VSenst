
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00803e00  000014e1  00001595  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  000094e0  000014e0  00001594  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000d0  00803e1c  00803e1c  000015b1  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  00001620  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000683b  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027fd  00000000  00000000  0000810b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001faf  00000000  00000000  0000a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000488  00000000  00000000  0000c8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002227  00000000  00000000  0000cd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001cce  00000000  00000000  0000ef67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000200  00000000  00000000  00010c35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e1 ee       	ldi	r30, 0xE1	; 225
      48:	f4 e1       	ldi	r31, 0x14	; 20
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	ac 31       	cpi	r26, 0x1C	; 28
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	ac e1       	ldi	r26, 0x1C	; 28
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ac 3e       	cpi	r26, 0xEC	; 236
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	22 d0       	rcall	.+68     	; 0xac <main>
      68:	39 ca       	rjmp	.-2958   	; 0xfffff4dc <__eeprom_end+0xff7ef4dc>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	24 d5       	rcall	.+2632   	; 0xab6 <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
	/* Insert your PIT interrupt handling code here */

	/* The interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6c73>
}
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:

ISR(PORTA_PORT_vect)
{
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
	PORTA.INTFLAGS = PORT_INT_gm;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f6f29>
}
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <main>:
uint8_t batVar = 0;

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      ac:	df df       	rcall	.-66     	; 0x6c <atmel_start_init>
	
	uint8_t startupDelay = 200;
      ae:	88 ec       	ldi	r24, 0xC8	; 200
	
	while (startupDelay--)
      b0:	0a c0       	rjmp	.+20     	; 0xc6 <main+0x1a>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
      b2:	8a b1       	in	r24, 0x0a	; 10
      b4:	80 61       	ori	r24, 0x10	; 16
      b6:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b8:	a7 ea       	ldi	r26, 0xA7	; 167
      ba:	b1 e6       	ldi	r27, 0x61	; 97
      bc:	11 97       	sbiw	r26, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <main+0x10>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x16>
      c2:	00 00       	nop
      c4:	89 2f       	mov	r24, r25
      c6:	9f ef       	ldi	r25, 0xFF	; 255
      c8:	98 0f       	add	r25, r24
      ca:	81 11       	cpse	r24, r1
      cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0x6>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
      ce:	89 b1       	in	r24, 0x09	; 9
      d0:	80 61       	ori	r24, 0x10	; 16
      d2:	89 b9       	out	0x09, r24	; 9
		DATA_toggle_level();
		_delay_ms(20);
	}
	DATA_set_level(true);
	
	batVar = FLASH_0_read_eeprom_byte(0);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	51 d5       	rcall	.+2722   	; 0xb7c <FLASH_0_read_eeprom_byte>
      da:	c8 2f       	mov	r28, r24
      dc:	80 93 1c 3e 	sts	0x3E1C, r24	; 0x803e1c <__data_end>
	BatteryLevelCounter *= batVar > 100 ? 1 : (((float)batVar + 1) / 100.0f);  
      e0:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <BatteryLevelCounter>
      e4:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <BatteryLevelCounter+0x1>
      e8:	40 91 06 3e 	lds	r20, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x2>
      ec:	50 91 07 3e 	lds	r21, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x3>
      f0:	60 91 08 3e 	lds	r22, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x4>
      f4:	70 91 09 3e 	lds	r23, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x5>
      f8:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x6>
      fc:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x7>
     100:	d5 d8       	rcall	.-3670   	; 0xfffff2ac <__eeprom_end+0xff7ef2ac>
     102:	6b 01       	movw	r12, r22
     104:	7c 01       	movw	r14, r24
     106:	c5 36       	cpi	r28, 0x65	; 101
     108:	80 f4       	brcc	.+32     	; 0x12a <main+0x7e>
     10a:	6c 2f       	mov	r22, r28
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	8f d8       	rcall	.-3810   	; 0xfffff232 <__eeprom_end+0xff7ef232>
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	40 e8       	ldi	r20, 0x80	; 128
     11a:	5f e3       	ldi	r21, 0x3F	; 63
     11c:	41 d7       	rcall	.+3714   	; 0xfa0 <__addsf3>
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	48 ec       	ldi	r20, 0xC8	; 200
     124:	52 e4       	ldi	r21, 0x42	; 66
     126:	a8 d7       	rcall	.+3920   	; 0x1078 <__divsf3>
     128:	04 c0       	rjmp	.+8      	; 0x132 <main+0x86>
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	9f e3       	ldi	r25, 0x3F	; 63
     132:	a7 01       	movw	r20, r14
     134:	96 01       	movw	r18, r12
     136:	59 d9       	rcall	.-3406   	; 0xfffff3ea <__eeprom_end+0xff7ef3ea>
     138:	16 d8       	rcall	.-4052   	; 0xfffff166 <__eeprom_end+0xff7ef166>
     13a:	20 93 04 3e 	sts	0x3E04, r18	; 0x803e04 <BatteryLevelCounter>
     13e:	30 93 05 3e 	sts	0x3E05, r19	; 0x803e05 <BatteryLevelCounter+0x1>
     142:	40 93 06 3e 	sts	0x3E06, r20	; 0x803e06 <BatteryLevelCounter+0x2>
     146:	50 93 07 3e 	sts	0x3E07, r21	; 0x803e07 <BatteryLevelCounter+0x3>
     14a:	60 93 08 3e 	sts	0x3E08, r22	; 0x803e08 <BatteryLevelCounter+0x4>
     14e:	70 93 09 3e 	sts	0x3E09, r23	; 0x803e09 <BatteryLevelCounter+0x5>
     152:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <BatteryLevelCounter+0x6>
     156:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <BatteryLevelCounter+0x7>
	
	TOUCH_GetSensorValue(0, false);
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	b4 d6       	rcall	.+3432   	; 0xec8 <TOUCH_GetSensorValue>
	
	
	
	for (uint8_t j = 0; j < 10; j++)
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	f1 c0       	rjmp	.+482    	; 0x346 <__DATA_REGION_LENGTH__+0x146>
	{
		whileLoopCycle = 32;
     164:	80 e2       	ldi	r24, 0x20	; 32
     166:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <whileLoopCycle>
		while(whileLoopCycle--)
     16a:	2e c0       	rjmp	.+92     	; 0x1c8 <main+0x11c>
		{
			ref1 += TOUCH_GetSensorValue(0, false);
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	ab d6       	rcall	.+3414   	; 0xec8 <TOUCH_GetSensorValue>
     172:	40 91 29 3e 	lds	r20, 0x3E29	; 0x803e29 <ref1>
     176:	50 91 2a 3e 	lds	r21, 0x3E2A	; 0x803e2a <ref1+0x1>
     17a:	60 91 2b 3e 	lds	r22, 0x3E2B	; 0x803e2b <ref1+0x2>
     17e:	70 91 2c 3e 	lds	r23, 0x3E2C	; 0x803e2c <ref1+0x3>
     182:	48 0f       	add	r20, r24
     184:	59 1f       	adc	r21, r25
     186:	61 1d       	adc	r22, r1
     188:	71 1d       	adc	r23, r1
     18a:	40 93 29 3e 	sts	0x3E29, r20	; 0x803e29 <ref1>
     18e:	50 93 2a 3e 	sts	0x3E2A, r21	; 0x803e2a <ref1+0x1>
     192:	60 93 2b 3e 	sts	0x3E2B, r22	; 0x803e2b <ref1+0x2>
     196:	70 93 2c 3e 	sts	0x3E2C, r23	; 0x803e2c <ref1+0x3>
			ref2 += TOUCH_GetSensorValue(0, true);
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	94 d6       	rcall	.+3368   	; 0xec8 <TOUCH_GetSensorValue>
     1a0:	40 91 25 3e 	lds	r20, 0x3E25	; 0x803e25 <ref2>
     1a4:	50 91 26 3e 	lds	r21, 0x3E26	; 0x803e26 <ref2+0x1>
     1a8:	60 91 27 3e 	lds	r22, 0x3E27	; 0x803e27 <ref2+0x2>
     1ac:	70 91 28 3e 	lds	r23, 0x3E28	; 0x803e28 <ref2+0x3>
     1b0:	48 0f       	add	r20, r24
     1b2:	59 1f       	adc	r21, r25
     1b4:	61 1d       	adc	r22, r1
     1b6:	71 1d       	adc	r23, r1
     1b8:	40 93 25 3e 	sts	0x3E25, r20	; 0x803e25 <ref2>
     1bc:	50 93 26 3e 	sts	0x3E26, r21	; 0x803e26 <ref2+0x1>
     1c0:	60 93 27 3e 	sts	0x3E27, r22	; 0x803e27 <ref2+0x2>
     1c4:	70 93 28 3e 	sts	0x3E28, r23	; 0x803e28 <ref2+0x3>
	
	
	for (uint8_t j = 0; j < 10; j++)
	{
		whileLoopCycle = 32;
		while(whileLoopCycle--)
     1c8:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <whileLoopCycle>
     1cc:	9f ef       	ldi	r25, 0xFF	; 255
     1ce:	98 0f       	add	r25, r24
     1d0:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <whileLoopCycle>
     1d4:	81 11       	cpse	r24, r1
     1d6:	ca cf       	rjmp	.-108    	; 0x16c <main+0xc0>
		{
			ref1 += TOUCH_GetSensorValue(0, false);
			ref2 += TOUCH_GetSensorValue(0, true);
		}
		ref1 >>= 2;
     1d8:	80 91 29 3e 	lds	r24, 0x3E29	; 0x803e29 <ref1>
     1dc:	90 91 2a 3e 	lds	r25, 0x3E2A	; 0x803e2a <ref1+0x1>
     1e0:	a0 91 2b 3e 	lds	r26, 0x3E2B	; 0x803e2b <ref1+0x2>
     1e4:	b0 91 2c 3e 	lds	r27, 0x3E2C	; 0x803e2c <ref1+0x3>
     1e8:	b5 95       	asr	r27
     1ea:	a7 95       	ror	r26
     1ec:	97 95       	ror	r25
     1ee:	87 95       	ror	r24
     1f0:	b5 95       	asr	r27
     1f2:	a7 95       	ror	r26
     1f4:	97 95       	ror	r25
     1f6:	87 95       	ror	r24
		ref2 >>= 2;
     1f8:	40 91 25 3e 	lds	r20, 0x3E25	; 0x803e25 <ref2>
     1fc:	50 91 26 3e 	lds	r21, 0x3E26	; 0x803e26 <ref2+0x1>
     200:	60 91 27 3e 	lds	r22, 0x3E27	; 0x803e27 <ref2+0x2>
     204:	70 91 28 3e 	lds	r23, 0x3E28	; 0x803e28 <ref2+0x3>
     208:	75 95       	asr	r23
     20a:	67 95       	ror	r22
     20c:	57 95       	ror	r21
     20e:	47 95       	ror	r20
     210:	75 95       	asr	r23
     212:	67 95       	ror	r22
     214:	57 95       	ror	r21
     216:	47 95       	ror	r20
		
		refP1 = refP1 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP1;
     218:	84 1b       	sub	r24, r20
     21a:	95 0b       	sbc	r25, r21
     21c:	20 91 23 3e 	lds	r18, 0x3E23	; 0x803e23 <refP1>
     220:	30 91 24 3e 	lds	r19, 0x3E24	; 0x803e24 <refP1+0x1>
     224:	82 17       	cp	r24, r18
     226:	93 07       	cpc	r25, r19
     228:	0c f4       	brge	.+2      	; 0x22c <__DATA_REGION_LENGTH__+0x2c>
     22a:	c9 01       	movw	r24, r18
     22c:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <refP1>
     230:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <refP1+0x1>
		ref1 = ref2 = 0;
     234:	10 92 25 3e 	sts	0x3E25, r1	; 0x803e25 <ref2>
     238:	10 92 26 3e 	sts	0x3E26, r1	; 0x803e26 <ref2+0x1>
     23c:	10 92 27 3e 	sts	0x3E27, r1	; 0x803e27 <ref2+0x2>
     240:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <ref2+0x3>
     244:	10 92 29 3e 	sts	0x3E29, r1	; 0x803e29 <ref1>
     248:	10 92 2a 3e 	sts	0x3E2A, r1	; 0x803e2a <ref1+0x1>
     24c:	10 92 2b 3e 	sts	0x3E2B, r1	; 0x803e2b <ref1+0x2>
     250:	10 92 2c 3e 	sts	0x3E2C, r1	; 0x803e2c <ref1+0x3>
		
		whileLoopCycle = 32;
     254:	80 e2       	ldi	r24, 0x20	; 32
     256:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <whileLoopCycle>
		while(whileLoopCycle--)
     25a:	2e c0       	rjmp	.+92     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
		{
			ref1 += TOUCH_GetSensorValue(1, false);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	33 d6       	rcall	.+3174   	; 0xec8 <TOUCH_GetSensorValue>
     262:	40 91 29 3e 	lds	r20, 0x3E29	; 0x803e29 <ref1>
     266:	50 91 2a 3e 	lds	r21, 0x3E2A	; 0x803e2a <ref1+0x1>
     26a:	60 91 2b 3e 	lds	r22, 0x3E2B	; 0x803e2b <ref1+0x2>
     26e:	70 91 2c 3e 	lds	r23, 0x3E2C	; 0x803e2c <ref1+0x3>
     272:	48 0f       	add	r20, r24
     274:	59 1f       	adc	r21, r25
     276:	61 1d       	adc	r22, r1
     278:	71 1d       	adc	r23, r1
     27a:	40 93 29 3e 	sts	0x3E29, r20	; 0x803e29 <ref1>
     27e:	50 93 2a 3e 	sts	0x3E2A, r21	; 0x803e2a <ref1+0x1>
     282:	60 93 2b 3e 	sts	0x3E2B, r22	; 0x803e2b <ref1+0x2>
     286:	70 93 2c 3e 	sts	0x3E2C, r23	; 0x803e2c <ref1+0x3>
			ref2 += TOUCH_GetSensorValue(1, true);
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	1c d6       	rcall	.+3128   	; 0xec8 <TOUCH_GetSensorValue>
     290:	40 91 25 3e 	lds	r20, 0x3E25	; 0x803e25 <ref2>
     294:	50 91 26 3e 	lds	r21, 0x3E26	; 0x803e26 <ref2+0x1>
     298:	60 91 27 3e 	lds	r22, 0x3E27	; 0x803e27 <ref2+0x2>
     29c:	70 91 28 3e 	lds	r23, 0x3E28	; 0x803e28 <ref2+0x3>
     2a0:	48 0f       	add	r20, r24
     2a2:	59 1f       	adc	r21, r25
     2a4:	61 1d       	adc	r22, r1
     2a6:	71 1d       	adc	r23, r1
     2a8:	40 93 25 3e 	sts	0x3E25, r20	; 0x803e25 <ref2>
     2ac:	50 93 26 3e 	sts	0x3E26, r21	; 0x803e26 <ref2+0x1>
     2b0:	60 93 27 3e 	sts	0x3E27, r22	; 0x803e27 <ref2+0x2>
     2b4:	70 93 28 3e 	sts	0x3E28, r23	; 0x803e28 <ref2+0x3>
		
		refP1 = refP1 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP1;
		ref1 = ref2 = 0;
		
		whileLoopCycle = 32;
		while(whileLoopCycle--)
     2b8:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <whileLoopCycle>
     2bc:	9f ef       	ldi	r25, 0xFF	; 255
     2be:	98 0f       	add	r25, r24
     2c0:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <whileLoopCycle>
     2c4:	81 11       	cpse	r24, r1
     2c6:	ca cf       	rjmp	.-108    	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
		{
			ref1 += TOUCH_GetSensorValue(1, false);
			ref2 += TOUCH_GetSensorValue(1, true);
		}
		ref1 >>= 2;
     2c8:	80 91 29 3e 	lds	r24, 0x3E29	; 0x803e29 <ref1>
     2cc:	90 91 2a 3e 	lds	r25, 0x3E2A	; 0x803e2a <ref1+0x1>
     2d0:	a0 91 2b 3e 	lds	r26, 0x3E2B	; 0x803e2b <ref1+0x2>
     2d4:	b0 91 2c 3e 	lds	r27, 0x3E2C	; 0x803e2c <ref1+0x3>
     2d8:	b5 95       	asr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	b5 95       	asr	r27
     2e2:	a7 95       	ror	r26
     2e4:	97 95       	ror	r25
     2e6:	87 95       	ror	r24
		ref2 >>= 2;
     2e8:	40 91 25 3e 	lds	r20, 0x3E25	; 0x803e25 <ref2>
     2ec:	50 91 26 3e 	lds	r21, 0x3E26	; 0x803e26 <ref2+0x1>
     2f0:	60 91 27 3e 	lds	r22, 0x3E27	; 0x803e27 <ref2+0x2>
     2f4:	70 91 28 3e 	lds	r23, 0x3E28	; 0x803e28 <ref2+0x3>
     2f8:	75 95       	asr	r23
     2fa:	67 95       	ror	r22
     2fc:	57 95       	ror	r21
     2fe:	47 95       	ror	r20
     300:	75 95       	asr	r23
     302:	67 95       	ror	r22
     304:	57 95       	ror	r21
     306:	47 95       	ror	r20
		
		refP2 = refP2 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP2;
     308:	84 1b       	sub	r24, r20
     30a:	95 0b       	sbc	r25, r21
     30c:	20 91 21 3e 	lds	r18, 0x3E21	; 0x803e21 <refP2>
     310:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <refP2+0x1>
     314:	82 17       	cp	r24, r18
     316:	93 07       	cpc	r25, r19
     318:	0c f4       	brge	.+2      	; 0x31c <__DATA_REGION_LENGTH__+0x11c>
     31a:	c9 01       	movw	r24, r18
     31c:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <refP2>
     320:	90 93 22 3e 	sts	0x3E22, r25	; 0x803e22 <refP2+0x1>
		ref1 = ref2 = 0;
     324:	10 92 25 3e 	sts	0x3E25, r1	; 0x803e25 <ref2>
     328:	10 92 26 3e 	sts	0x3E26, r1	; 0x803e26 <ref2+0x1>
     32c:	10 92 27 3e 	sts	0x3E27, r1	; 0x803e27 <ref2+0x2>
     330:	10 92 28 3e 	sts	0x3E28, r1	; 0x803e28 <ref2+0x3>
     334:	10 92 29 3e 	sts	0x3E29, r1	; 0x803e29 <ref1>
     338:	10 92 2a 3e 	sts	0x3E2A, r1	; 0x803e2a <ref1+0x1>
     33c:	10 92 2b 3e 	sts	0x3E2B, r1	; 0x803e2b <ref1+0x2>
     340:	10 92 2c 3e 	sts	0x3E2C, r1	; 0x803e2c <ref1+0x3>
	
	TOUCH_GetSensorValue(0, false);
	
	
	
	for (uint8_t j = 0; j < 10; j++)
     344:	cf 5f       	subi	r28, 0xFF	; 255
     346:	ca 30       	cpi	r28, 0x0A	; 10
     348:	08 f4       	brcc	.+2      	; 0x34c <__DATA_REGION_LENGTH__+0x14c>
     34a:	0c cf       	rjmp	.-488    	; 0x164 <main+0xb8>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     34c:	89 b1       	in	r24, 0x09	; 9
     34e:	8f 7e       	andi	r24, 0xEF	; 239
     350:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     352:	e3 e1       	ldi	r30, 0x13	; 19
     354:	f4 e0       	ldi	r31, 0x04	; 4
     356:	80 81       	ld	r24, Z
     358:	88 7f       	andi	r24, 0xF8	; 248
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	80 83       	st	Z, r24
	DATA_set_level(false);
	
	CBT_set_isc(PORT_ISC_BOTHEDGES_gc);
	
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM7;
     35e:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <payloadBufferStartByte+0x7f7c2a>
     362:	ec e0       	ldi	r30, 0x0C	; 12
     364:	fe e3       	ldi	r31, 0x3E	; 62
     366:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM8;
     368:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f7c2b>
     36c:	87 83       	std	Z+7, r24	; 0x07
	payloadBuffer[payloadBufferStartByte + 2] = SIGROW_SERNUM9;
     36e:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f7c2c>
     372:	80 87       	std	Z+8, r24	; 0x08
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     374:	46 e0       	ldi	r20, 0x06	; 6
     376:	60 e1       	ldi	r22, 0x10	; 16
     378:	cf 01       	movw	r24, r30
     37a:	ea d4       	rcall	.+2516   	; 0xd50 <SX1243Init>

	/* Replace with your application code */
	while (1) {
		BatteryLevelCounter -= BAT_ADC_CONSTANT;
     37c:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <BatteryLevelCounter>
     380:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <BatteryLevelCounter+0x1>
     384:	40 91 06 3e 	lds	r20, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x2>
     388:	50 91 07 3e 	lds	r21, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x3>
     38c:	60 91 08 3e 	lds	r22, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x4>
     390:	70 91 09 3e 	lds	r23, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x5>
     394:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x6>
     398:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x7>
     39c:	a6 ef       	ldi	r26, 0xF6	; 246
     39e:	92 d8       	rcall	.-3804   	; 0xfffff4c4 <__eeprom_end+0xff7ef4c4>
     3a0:	20 93 04 3e 	sts	0x3E04, r18	; 0x803e04 <BatteryLevelCounter>
     3a4:	30 93 05 3e 	sts	0x3E05, r19	; 0x803e05 <BatteryLevelCounter+0x1>
     3a8:	40 93 06 3e 	sts	0x3E06, r20	; 0x803e06 <BatteryLevelCounter+0x2>
     3ac:	50 93 07 3e 	sts	0x3E07, r21	; 0x803e07 <BatteryLevelCounter+0x3>
     3b0:	60 93 08 3e 	sts	0x3E08, r22	; 0x803e08 <BatteryLevelCounter+0x4>
     3b4:	70 93 09 3e 	sts	0x3E09, r23	; 0x803e09 <BatteryLevelCounter+0x5>
     3b8:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <BatteryLevelCounter+0x6>
     3bc:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <BatteryLevelCounter+0x7>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     3c0:	44 e1       	ldi	r20, 0x14	; 20
     3c2:	54 e0       	ldi	r21, 0x04	; 4
     3c4:	ea 01       	movw	r28, r20
     3c6:	88 81       	ld	r24, Y
     3c8:	88 60       	ori	r24, 0x08	; 8
     3ca:	88 83       	st	Y, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     3cc:	24 e3       	ldi	r18, 0x34	; 52
     3ce:	34 e0       	ldi	r19, 0x04	; 4
     3d0:	f9 01       	movw	r30, r18
     3d2:	80 81       	ld	r24, Z
     3d4:	88 60       	ori	r24, 0x08	; 8
     3d6:	80 83       	st	Z, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     3d8:	a5 e1       	ldi	r26, 0x15	; 21
     3da:	b4 e0       	ldi	r27, 0x04	; 4
     3dc:	8c 91       	ld	r24, X
     3de:	88 60       	ori	r24, 0x08	; 8
     3e0:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     3e2:	e5 e3       	ldi	r30, 0x35	; 53
     3e4:	f4 e0       	ldi	r31, 0x04	; 4
     3e6:	80 81       	ld	r24, Z
     3e8:	88 60       	ori	r24, 0x08	; 8
     3ea:	80 83       	st	Z, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     3ec:	d2 b1       	in	r29, 0x02	; 2
		SB1_set_pull_mode(PORT_PULL_UP);
		SB2_set_pull_mode(PORT_PULL_UP);
		PSD1_set_pull_mode(PORT_PULL_UP);
		PSD2_set_pull_mode(PORT_PULL_UP);
		
		uint8_t In_SB1  = !SB1_get_level();
     3ee:	d2 95       	swap	r29
     3f0:	df 70       	andi	r29, 0x0F	; 15
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	d8 27       	eor	r29, r24
     3f6:	d1 70       	andi	r29, 0x01	; 1
     3f8:	fd 2e       	mov	r15, r29
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     3fa:	c6 b1       	in	r28, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     3fc:	c2 95       	swap	r28
     3fe:	cf 70       	andi	r28, 0x0F	; 15
     400:	c8 27       	eor	r28, r24
     402:	c1 70       	andi	r28, 0x01	; 1
     404:	ec 2e       	mov	r14, r28
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     406:	02 b1       	in	r16, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
     408:	02 95       	swap	r16
     40a:	06 95       	lsr	r16
     40c:	07 70       	andi	r16, 0x07	; 7
     40e:	08 27       	eor	r16, r24
     410:	01 70       	andi	r16, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     412:	16 b1       	in	r17, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
     414:	12 95       	swap	r17
     416:	16 95       	lsr	r17
     418:	17 70       	andi	r17, 0x07	; 7
     41a:	18 27       	eor	r17, r24
     41c:	11 70       	andi	r17, 0x01	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     41e:	ea 01       	movw	r28, r20
     420:	88 81       	ld	r24, Y
     422:	87 7f       	andi	r24, 0xF7	; 247
     424:	88 83       	st	Y, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     426:	e9 01       	movw	r28, r18
     428:	88 81       	ld	r24, Y
     42a:	87 7f       	andi	r24, 0xF7	; 247
     42c:	88 83       	st	Y, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     42e:	8c 91       	ld	r24, X
     430:	87 7f       	andi	r24, 0xF7	; 247
     432:	8c 93       	st	X, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     434:	80 81       	ld	r24, Z
     436:	87 7f       	andi	r24, 0xF7	; 247
     438:	80 83       	st	Z, r24
		SB2_set_pull_mode(PORT_PULL_OFF);
		PSD1_set_pull_mode(PORT_PULL_OFF);
		PSD2_set_pull_mode(PORT_PULL_OFF);
		
		//ADC ENABLE
		ADC_0_enable();	
     43a:	d0 d2       	rcall	.+1440   	; 0x9dc <ADC_0_enable>
		TOUCH_GetSensorValue(0, false);
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	43 d5       	rcall	.+2694   	; 0xec8 <TOUCH_GetSensorValue>
		
		//if(In_PSD1)
		{
			whileLoopCycle = 32;
     442:	80 e2       	ldi	r24, 0x20	; 32
     444:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <whileLoopCycle>
			while(whileLoopCycle--)
     448:	2e c0       	rjmp	.+92     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
			{
				adc1 += TOUCH_GetSensorValue(0, false);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	3c d5       	rcall	.+2680   	; 0xec8 <TOUCH_GetSensorValue>
     450:	40 91 31 3e 	lds	r20, 0x3E31	; 0x803e31 <adc1>
     454:	50 91 32 3e 	lds	r21, 0x3E32	; 0x803e32 <adc1+0x1>
     458:	60 91 33 3e 	lds	r22, 0x3E33	; 0x803e33 <adc1+0x2>
     45c:	70 91 34 3e 	lds	r23, 0x3E34	; 0x803e34 <adc1+0x3>
     460:	48 0f       	add	r20, r24
     462:	59 1f       	adc	r21, r25
     464:	61 1d       	adc	r22, r1
     466:	71 1d       	adc	r23, r1
     468:	40 93 31 3e 	sts	0x3E31, r20	; 0x803e31 <adc1>
     46c:	50 93 32 3e 	sts	0x3E32, r21	; 0x803e32 <adc1+0x1>
     470:	60 93 33 3e 	sts	0x3E33, r22	; 0x803e33 <adc1+0x2>
     474:	70 93 34 3e 	sts	0x3E34, r23	; 0x803e34 <adc1+0x3>
				adc2 += TOUCH_GetSensorValue(0, true);
     478:	61 e0       	ldi	r22, 0x01	; 1
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	25 d5       	rcall	.+2634   	; 0xec8 <TOUCH_GetSensorValue>
     47e:	40 91 2d 3e 	lds	r20, 0x3E2D	; 0x803e2d <adc2>
     482:	50 91 2e 3e 	lds	r21, 0x3E2E	; 0x803e2e <adc2+0x1>
     486:	60 91 2f 3e 	lds	r22, 0x3E2F	; 0x803e2f <adc2+0x2>
     48a:	70 91 30 3e 	lds	r23, 0x3E30	; 0x803e30 <adc2+0x3>
     48e:	48 0f       	add	r20, r24
     490:	59 1f       	adc	r21, r25
     492:	61 1d       	adc	r22, r1
     494:	71 1d       	adc	r23, r1
     496:	40 93 2d 3e 	sts	0x3E2D, r20	; 0x803e2d <adc2>
     49a:	50 93 2e 3e 	sts	0x3E2E, r21	; 0x803e2e <adc2+0x1>
     49e:	60 93 2f 3e 	sts	0x3E2F, r22	; 0x803e2f <adc2+0x2>
     4a2:	70 93 30 3e 	sts	0x3E30, r23	; 0x803e30 <adc2+0x3>
		TOUCH_GetSensorValue(0, false);
		
		//if(In_PSD1)
		{
			whileLoopCycle = 32;
			while(whileLoopCycle--)
     4a6:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <whileLoopCycle>
     4aa:	9f ef       	ldi	r25, 0xFF	; 255
     4ac:	98 0f       	add	r25, r24
     4ae:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <whileLoopCycle>
     4b2:	81 11       	cpse	r24, r1
     4b4:	ca cf       	rjmp	.-108    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			{
				adc1 += TOUCH_GetSensorValue(0, false);
				adc2 += TOUCH_GetSensorValue(0, true);
			}
			adc1 >>= 2;
     4b6:	80 91 31 3e 	lds	r24, 0x3E31	; 0x803e31 <adc1>
     4ba:	90 91 32 3e 	lds	r25, 0x3E32	; 0x803e32 <adc1+0x1>
     4be:	a0 91 33 3e 	lds	r26, 0x3E33	; 0x803e33 <adc1+0x2>
     4c2:	b0 91 34 3e 	lds	r27, 0x3E34	; 0x803e34 <adc1+0x3>
     4c6:	b5 95       	asr	r27
     4c8:	a7 95       	ror	r26
     4ca:	97 95       	ror	r25
     4cc:	87 95       	ror	r24
     4ce:	b5 95       	asr	r27
     4d0:	a7 95       	ror	r26
     4d2:	97 95       	ror	r25
     4d4:	87 95       	ror	r24
			adc2 >>= 2;
     4d6:	40 91 2d 3e 	lds	r20, 0x3E2D	; 0x803e2d <adc2>
     4da:	50 91 2e 3e 	lds	r21, 0x3E2E	; 0x803e2e <adc2+0x1>
     4de:	60 91 2f 3e 	lds	r22, 0x3E2F	; 0x803e2f <adc2+0x2>
     4e2:	70 91 30 3e 	lds	r23, 0x3E30	; 0x803e30 <adc2+0x3>
     4e6:	75 95       	asr	r23
     4e8:	67 95       	ror	r22
     4ea:	57 95       	ror	r21
     4ec:	47 95       	ror	r20
     4ee:	75 95       	asr	r23
     4f0:	67 95       	ror	r22
     4f2:	57 95       	ror	r21
     4f4:	47 95       	ror	r20
		
			rawAdc[0][rawAdcCount] = ((int16_t)(adc1 - adc2) - refP1);
     4f6:	e0 91 20 3e 	lds	r30, 0x3E20	; 0x803e20 <rawAdcCount>
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	84 1b       	sub	r24, r20
     4fe:	95 0b       	sbc	r25, r21
     500:	20 91 23 3e 	lds	r18, 0x3E23	; 0x803e23 <refP1>
     504:	30 91 24 3e 	lds	r19, 0x3E24	; 0x803e24 <refP1+0x1>
     508:	ac 01       	movw	r20, r24
     50a:	42 1b       	sub	r20, r18
     50c:	53 0b       	sbc	r21, r19
     50e:	9a 01       	movw	r18, r20
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	e3 5c       	subi	r30, 0xC3	; 195
     516:	f1 4c       	sbci	r31, 0xC1	; 193
     518:	40 83       	st	Z, r20
     51a:	51 83       	std	Z+1, r21	; 0x01
			if(rawAdc[0][rawAdcCount] < -12)
     51c:	24 3f       	cpi	r18, 0xF4	; 244
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
     520:	24 f4       	brge	.+8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			{
				refP1 = (int16_t)(adc1 - adc2);
     522:	80 93 23 3e 	sts	0x3E23, r24	; 0x803e23 <refP1>
     526:	90 93 24 3e 	sts	0x3E24, r25	; 0x803e24 <refP1+0x1>
	
	TOUCH_GetSensorValue(0, false);
	
	
	
	for (uint8_t j = 0; j < 10; j++)
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	21 c0       	rjmp	.+66     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
				refP1 = (int16_t)(adc1 - adc2);
			}
		
			for (uint8_t j = 0; j < 2; j++)
			{
				rawTotal += rawAdc[0][j];
     52e:	e2 2f       	mov	r30, r18
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	ee 0f       	add	r30, r30
     534:	ff 1f       	adc	r31, r31
     536:	e3 5c       	subi	r30, 0xC3	; 195
     538:	f1 4c       	sbci	r31, 0xC1	; 193
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	09 2e       	mov	r0, r25
     540:	00 0c       	add	r0, r0
     542:	aa 0b       	sbc	r26, r26
     544:	bb 0b       	sbc	r27, r27
     546:	40 91 39 3e 	lds	r20, 0x3E39	; 0x803e39 <rawTotal>
     54a:	50 91 3a 3e 	lds	r21, 0x3E3A	; 0x803e3a <rawTotal+0x1>
     54e:	60 91 3b 3e 	lds	r22, 0x3E3B	; 0x803e3b <rawTotal+0x2>
     552:	70 91 3c 3e 	lds	r23, 0x3E3C	; 0x803e3c <rawTotal+0x3>
     556:	84 0f       	add	r24, r20
     558:	95 1f       	adc	r25, r21
     55a:	a6 1f       	adc	r26, r22
     55c:	b7 1f       	adc	r27, r23
     55e:	80 93 39 3e 	sts	0x3E39, r24	; 0x803e39 <rawTotal>
     562:	90 93 3a 3e 	sts	0x3E3A, r25	; 0x803e3a <rawTotal+0x1>
     566:	a0 93 3b 3e 	sts	0x3E3B, r26	; 0x803e3b <rawTotal+0x2>
     56a:	b0 93 3c 3e 	sts	0x3E3C, r27	; 0x803e3c <rawTotal+0x3>
			if(rawAdc[0][rawAdcCount] < -12)
			{
				refP1 = (int16_t)(adc1 - adc2);
			}
		
			for (uint8_t j = 0; j < 2; j++)
     56e:	2f 5f       	subi	r18, 0xFF	; 255
     570:	22 30       	cpi	r18, 0x02	; 2
     572:	e8 f2       	brcs	.-70     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
			{
				rawTotal += rawAdc[0][j];
			}
			prox1CurrentValue = (int16_t)(rawTotal >> 1);
     574:	80 91 39 3e 	lds	r24, 0x3E39	; 0x803e39 <rawTotal>
     578:	90 91 3a 3e 	lds	r25, 0x3E3A	; 0x803e3a <rawTotal+0x1>
     57c:	a0 91 3b 3e 	lds	r26, 0x3E3B	; 0x803e3b <rawTotal+0x2>
     580:	b0 91 3c 3e 	lds	r27, 0x3E3C	; 0x803e3c <rawTotal+0x3>
     584:	b5 95       	asr	r27
     586:	a7 95       	ror	r26
     588:	97 95       	ror	r25
     58a:	87 95       	ror	r24
			rawTotal = 0;
     58c:	10 92 39 3e 	sts	0x3E39, r1	; 0x803e39 <rawTotal>
     590:	10 92 3a 3e 	sts	0x3E3A, r1	; 0x803e3a <rawTotal+0x1>
     594:	10 92 3b 3e 	sts	0x3E3B, r1	; 0x803e3b <rawTotal+0x2>
     598:	10 92 3c 3e 	sts	0x3E3C, r1	; 0x803e3c <rawTotal+0x3>
			adc1 = adc2 = 0;
     59c:	10 92 2d 3e 	sts	0x3E2D, r1	; 0x803e2d <adc2>
     5a0:	10 92 2e 3e 	sts	0x3E2E, r1	; 0x803e2e <adc2+0x1>
     5a4:	10 92 2f 3e 	sts	0x3E2F, r1	; 0x803e2f <adc2+0x2>
     5a8:	10 92 30 3e 	sts	0x3E30, r1	; 0x803e30 <adc2+0x3>
     5ac:	10 92 31 3e 	sts	0x3E31, r1	; 0x803e31 <adc1>
     5b0:	10 92 32 3e 	sts	0x3E32, r1	; 0x803e32 <adc1+0x1>
     5b4:	10 92 33 3e 	sts	0x3E33, r1	; 0x803e33 <adc1+0x2>
     5b8:	10 92 34 3e 	sts	0x3E34, r1	; 0x803e34 <adc1+0x3>
			prox1CurrentValue = prox1CurrentValue < 0 ? 0 : prox1CurrentValue;
     5bc:	99 23       	and	r25, r25
     5be:	14 f4       	brge	.+4      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	80 93 4d 3e 	sts	0x3E4D, r24	; 0x803e4d <prox1CurrentValue>
     5c8:	90 93 4e 3e 	sts	0x3E4E, r25	; 0x803e4e <prox1CurrentValue+0x1>
			prox1CounterBase[1] = (uint8_t)((prox1CurrentValue >> 8) & 0x00FF);
     5cc:	e7 e3       	ldi	r30, 0x37	; 55
     5ce:	fe e3       	ldi	r31, 0x3E	; 62
     5d0:	91 83       	std	Z+1, r25	; 0x01
			prox1CounterBase[0] = (uint8_t)((prox1CurrentValue >> 0) & 0x00FF);
     5d2:	80 83       	st	Z, r24
		}
		
		//if(In_PSD2)
		{
			whileLoopCycle = 32;
     5d4:	80 e2       	ldi	r24, 0x20	; 32
     5d6:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <whileLoopCycle>
			while(whileLoopCycle--)
     5da:	2e c0       	rjmp	.+92     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
			{
				adc1 += TOUCH_GetSensorValue(1, false);
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	73 d4       	rcall	.+2278   	; 0xec8 <TOUCH_GetSensorValue>
     5e2:	40 91 31 3e 	lds	r20, 0x3E31	; 0x803e31 <adc1>
     5e6:	50 91 32 3e 	lds	r21, 0x3E32	; 0x803e32 <adc1+0x1>
     5ea:	60 91 33 3e 	lds	r22, 0x3E33	; 0x803e33 <adc1+0x2>
     5ee:	70 91 34 3e 	lds	r23, 0x3E34	; 0x803e34 <adc1+0x3>
     5f2:	48 0f       	add	r20, r24
     5f4:	59 1f       	adc	r21, r25
     5f6:	61 1d       	adc	r22, r1
     5f8:	71 1d       	adc	r23, r1
     5fa:	40 93 31 3e 	sts	0x3E31, r20	; 0x803e31 <adc1>
     5fe:	50 93 32 3e 	sts	0x3E32, r21	; 0x803e32 <adc1+0x1>
     602:	60 93 33 3e 	sts	0x3E33, r22	; 0x803e33 <adc1+0x2>
     606:	70 93 34 3e 	sts	0x3E34, r23	; 0x803e34 <adc1+0x3>
				adc2 += TOUCH_GetSensorValue(1, true);
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	5c d4       	rcall	.+2232   	; 0xec8 <TOUCH_GetSensorValue>
     610:	40 91 2d 3e 	lds	r20, 0x3E2D	; 0x803e2d <adc2>
     614:	50 91 2e 3e 	lds	r21, 0x3E2E	; 0x803e2e <adc2+0x1>
     618:	60 91 2f 3e 	lds	r22, 0x3E2F	; 0x803e2f <adc2+0x2>
     61c:	70 91 30 3e 	lds	r23, 0x3E30	; 0x803e30 <adc2+0x3>
     620:	48 0f       	add	r20, r24
     622:	59 1f       	adc	r21, r25
     624:	61 1d       	adc	r22, r1
     626:	71 1d       	adc	r23, r1
     628:	40 93 2d 3e 	sts	0x3E2D, r20	; 0x803e2d <adc2>
     62c:	50 93 2e 3e 	sts	0x3E2E, r21	; 0x803e2e <adc2+0x1>
     630:	60 93 2f 3e 	sts	0x3E2F, r22	; 0x803e2f <adc2+0x2>
     634:	70 93 30 3e 	sts	0x3E30, r23	; 0x803e30 <adc2+0x3>
		}
		
		//if(In_PSD2)
		{
			whileLoopCycle = 32;
			while(whileLoopCycle--)
     638:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <whileLoopCycle>
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	98 0f       	add	r25, r24
     640:	90 93 1f 3e 	sts	0x3E1F, r25	; 0x803e1f <whileLoopCycle>
     644:	81 11       	cpse	r24, r1
     646:	ca cf       	rjmp	.-108    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
			{
				adc1 += TOUCH_GetSensorValue(1, false);
				adc2 += TOUCH_GetSensorValue(1, true);
			}
			adc1 >>= 2;
     648:	80 91 31 3e 	lds	r24, 0x3E31	; 0x803e31 <adc1>
     64c:	90 91 32 3e 	lds	r25, 0x3E32	; 0x803e32 <adc1+0x1>
     650:	a0 91 33 3e 	lds	r26, 0x3E33	; 0x803e33 <adc1+0x2>
     654:	b0 91 34 3e 	lds	r27, 0x3E34	; 0x803e34 <adc1+0x3>
     658:	b5 95       	asr	r27
     65a:	a7 95       	ror	r26
     65c:	97 95       	ror	r25
     65e:	87 95       	ror	r24
     660:	b5 95       	asr	r27
     662:	a7 95       	ror	r26
     664:	97 95       	ror	r25
     666:	87 95       	ror	r24
			adc2 >>= 2;
     668:	40 91 2d 3e 	lds	r20, 0x3E2D	; 0x803e2d <adc2>
     66c:	50 91 2e 3e 	lds	r21, 0x3E2E	; 0x803e2e <adc2+0x1>
     670:	60 91 2f 3e 	lds	r22, 0x3E2F	; 0x803e2f <adc2+0x2>
     674:	70 91 30 3e 	lds	r23, 0x3E30	; 0x803e30 <adc2+0x3>
     678:	75 95       	asr	r23
     67a:	67 95       	ror	r22
     67c:	57 95       	ror	r21
     67e:	47 95       	ror	r20
     680:	75 95       	asr	r23
     682:	67 95       	ror	r22
     684:	57 95       	ror	r21
     686:	47 95       	ror	r20
	
			rawAdc[1][rawAdcCount] = ((int16_t)(adc1 - adc2) - refP2);
     688:	e0 91 20 3e 	lds	r30, 0x3E20	; 0x803e20 <rawAdcCount>
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	84 1b       	sub	r24, r20
     690:	95 0b       	sbc	r25, r21
     692:	20 91 21 3e 	lds	r18, 0x3E21	; 0x803e21 <refP2>
     696:	30 91 22 3e 	lds	r19, 0x3E22	; 0x803e22 <refP2+0x1>
     69a:	dc 01       	movw	r26, r24
     69c:	a2 1b       	sub	r26, r18
     69e:	b3 0b       	sbc	r27, r19
     6a0:	9d 01       	movw	r18, r26
     6a2:	34 96       	adiw	r30, 0x04	; 4
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	e3 5c       	subi	r30, 0xC3	; 195
     6aa:	f1 4c       	sbci	r31, 0xC1	; 193
     6ac:	a0 83       	st	Z, r26
     6ae:	b1 83       	std	Z+1, r27	; 0x01
			if(rawAdc[1][rawAdcCount] < -12)
     6b0:	24 3f       	cpi	r18, 0xF4	; 244
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	24 f4       	brge	.+8      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
			{
				refP2 = (int16_t)(adc1 - adc2);
     6b6:	80 93 21 3e 	sts	0x3E21, r24	; 0x803e21 <refP2>
     6ba:	90 93 22 3e 	sts	0x3E22, r25	; 0x803e22 <refP2+0x1>
	
	TOUCH_GetSensorValue(0, false);
	
	
	
	for (uint8_t j = 0; j < 10; j++)
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	22 c0       	rjmp	.+68     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
				refP2 = (int16_t)(adc1 - adc2);
			}
	
			for (uint8_t j = 0; j < 2; j++)
			{
				rawTotal += rawAdc[1][j];
     6c2:	e2 2f       	mov	r30, r18
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	34 96       	adiw	r30, 0x04	; 4
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	e3 5c       	subi	r30, 0xC3	; 195
     6ce:	f1 4c       	sbci	r31, 0xC1	; 193
     6d0:	80 81       	ld	r24, Z
     6d2:	91 81       	ldd	r25, Z+1	; 0x01
     6d4:	09 2e       	mov	r0, r25
     6d6:	00 0c       	add	r0, r0
     6d8:	aa 0b       	sbc	r26, r26
     6da:	bb 0b       	sbc	r27, r27
     6dc:	40 91 39 3e 	lds	r20, 0x3E39	; 0x803e39 <rawTotal>
     6e0:	50 91 3a 3e 	lds	r21, 0x3E3A	; 0x803e3a <rawTotal+0x1>
     6e4:	60 91 3b 3e 	lds	r22, 0x3E3B	; 0x803e3b <rawTotal+0x2>
     6e8:	70 91 3c 3e 	lds	r23, 0x3E3C	; 0x803e3c <rawTotal+0x3>
     6ec:	84 0f       	add	r24, r20
     6ee:	95 1f       	adc	r25, r21
     6f0:	a6 1f       	adc	r26, r22
     6f2:	b7 1f       	adc	r27, r23
     6f4:	80 93 39 3e 	sts	0x3E39, r24	; 0x803e39 <rawTotal>
     6f8:	90 93 3a 3e 	sts	0x3E3A, r25	; 0x803e3a <rawTotal+0x1>
     6fc:	a0 93 3b 3e 	sts	0x3E3B, r26	; 0x803e3b <rawTotal+0x2>
     700:	b0 93 3c 3e 	sts	0x3E3C, r27	; 0x803e3c <rawTotal+0x3>
			if(rawAdc[1][rawAdcCount] < -12)
			{
				refP2 = (int16_t)(adc1 - adc2);
			}
	
			for (uint8_t j = 0; j < 2; j++)
     704:	2f 5f       	subi	r18, 0xFF	; 255
     706:	22 30       	cpi	r18, 0x02	; 2
     708:	e0 f2       	brcs	.-72     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
			{
				rawTotal += rawAdc[1][j];
			}
			prox2CurrentValue = (int16_t)(rawTotal >> 1);
     70a:	80 91 39 3e 	lds	r24, 0x3E39	; 0x803e39 <rawTotal>
     70e:	90 91 3a 3e 	lds	r25, 0x3E3A	; 0x803e3a <rawTotal+0x1>
     712:	a0 91 3b 3e 	lds	r26, 0x3E3B	; 0x803e3b <rawTotal+0x2>
     716:	b0 91 3c 3e 	lds	r27, 0x3E3C	; 0x803e3c <rawTotal+0x3>
     71a:	b5 95       	asr	r27
     71c:	a7 95       	ror	r26
     71e:	97 95       	ror	r25
     720:	87 95       	ror	r24
			rawTotal = 0;
     722:	10 92 39 3e 	sts	0x3E39, r1	; 0x803e39 <rawTotal>
     726:	10 92 3a 3e 	sts	0x3E3A, r1	; 0x803e3a <rawTotal+0x1>
     72a:	10 92 3b 3e 	sts	0x3E3B, r1	; 0x803e3b <rawTotal+0x2>
     72e:	10 92 3c 3e 	sts	0x3E3C, r1	; 0x803e3c <rawTotal+0x3>
			adc1 = adc2 = 0;
     732:	10 92 2d 3e 	sts	0x3E2D, r1	; 0x803e2d <adc2>
     736:	10 92 2e 3e 	sts	0x3E2E, r1	; 0x803e2e <adc2+0x1>
     73a:	10 92 2f 3e 	sts	0x3E2F, r1	; 0x803e2f <adc2+0x2>
     73e:	10 92 30 3e 	sts	0x3E30, r1	; 0x803e30 <adc2+0x3>
     742:	10 92 31 3e 	sts	0x3E31, r1	; 0x803e31 <adc1>
     746:	10 92 32 3e 	sts	0x3E32, r1	; 0x803e32 <adc1+0x1>
     74a:	10 92 33 3e 	sts	0x3E33, r1	; 0x803e33 <adc1+0x2>
     74e:	10 92 34 3e 	sts	0x3E34, r1	; 0x803e34 <adc1+0x3>
			prox2CurrentValue = prox2CurrentValue < 0 ? 0 : prox2CurrentValue;
     752:	99 23       	and	r25, r25
     754:	14 f4       	brge	.+4      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	80 93 4f 3e 	sts	0x3E4F, r24	; 0x803e4f <prox2CurrentValue>
     75e:	90 93 50 3e 	sts	0x3E50, r25	; 0x803e50 <prox2CurrentValue+0x1>
			prox2CounterBase[1] = (uint8_t)((prox2CurrentValue >> 8) & 0x00FF);
     762:	e5 e3       	ldi	r30, 0x35	; 53
     764:	fe e3       	ldi	r31, 0x3E	; 62
     766:	91 83       	std	Z+1, r25	; 0x01
			prox2CounterBase[0] = (uint8_t)((prox2CurrentValue >> 0) & 0x00FF);
     768:	80 83       	st	Z, r24
		}
		//ADC DISABLE
		ADC_0_disable();
     76a:	3e d1       	rcall	.+636    	; 0x9e8 <ADC_0_disable>
		
		rawAdcCount += rawAdcCount < 1 ? 1 : -rawAdcCount;
     76c:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <rawAdcCount>
     770:	88 23       	and	r24, r24
     772:	19 f0       	breq	.+6      	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
     774:	98 2f       	mov	r25, r24
     776:	91 95       	neg	r25
     778:	01 c0       	rjmp	.+2      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	89 0f       	add	r24, r25
     77e:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <rawAdcCount>
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     782:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     786:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     78a:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
     78e:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
     792:	81 35       	cpi	r24, 0x51	; 81
     794:	93 4c       	sbci	r25, 0xC3	; 195
     796:	a1 05       	cpc	r26, r1
     798:	b1 05       	cpc	r27, r1
     79a:	48 f1       	brcs	.+82     	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
		{
			batVar = (uint8_t)((((float)BatteryLevelCounter) / BAT_FULL_CAPACITY) * 100.0f);
     79c:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <BatteryLevelCounter>
     7a0:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <BatteryLevelCounter+0x1>
     7a4:	40 91 06 3e 	lds	r20, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x2>
     7a8:	50 91 07 3e 	lds	r21, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x3>
     7ac:	60 91 08 3e 	lds	r22, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x4>
     7b0:	70 91 09 3e 	lds	r23, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x5>
     7b4:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x6>
     7b8:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x7>
     7bc:	77 d5       	rcall	.+2798   	; 0x12ac <__floatundisf>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	31 eb       	ldi	r19, 0xB1	; 177
     7c2:	4e e1       	ldi	r20, 0x1E	; 30
     7c4:	5a e4       	ldi	r21, 0x4A	; 74
     7c6:	58 d4       	rcall	.+2224   	; 0x1078 <__divsf3>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	48 ec       	ldi	r20, 0xC8	; 200
     7ce:	52 e4       	ldi	r21, 0x42	; 66
     7d0:	0c d6       	rcall	.+3096   	; 0x13ea <__mulsf3>
     7d2:	00 d5       	rcall	.+2560   	; 0x11d4 <__fixunssfsi>
     7d4:	60 93 1c 3e 	sts	0x3E1C, r22	; 0x803e1c <__data_end>
			FLASH_0_write_eeprom_byte(0, batVar);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	d3 d1       	rcall	.+934    	; 0xb84 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     7de:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
     7e2:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     7e6:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
     7ea:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
		}
		BatteryLevelCalculateCounter++;
     7ee:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     7f2:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     7f6:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
     7fa:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	a1 1d       	adc	r26, r1
     802:	b1 1d       	adc	r27, r1
     804:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
     808:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     80c:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
     810:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
     814:	20 91 1c 3e 	lds	r18, 0x3E1C	; 0x803e1c <__data_end>
     818:	8f 2d       	mov	r24, r15
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	d2 2f       	mov	r29, r18
     822:	d0 7f       	andi	r29, 0xF0	; 240
     824:	8d 2b       	or	r24, r29
     826:	80 2b       	or	r24, r16
     828:	e2 e5       	ldi	r30, 0x52	; 82
     82a:	fe e3       	ldi	r31, 0x3E	; 62
     82c:	80 83       	st	Z, r24
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
     82e:	d0 e1       	ldi	r29, 0x10	; 16
     830:	2d 9f       	mul	r18, r29
     832:	90 01       	movw	r18, r0
     834:	11 24       	eor	r1, r1
     836:	ce 2d       	mov	r28, r14
     838:	d0 e0       	ldi	r29, 0x00	; 0
     83a:	cc 0f       	add	r28, r28
     83c:	dd 1f       	adc	r29, r29
     83e:	c2 2b       	or	r28, r18
     840:	c1 2b       	or	r28, r17
     842:	c1 83       	std	Z+1, r28	; 0x01
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
     844:	90 91 15 3e 	lds	r25, 0x3E15	; 0x803e15 <payloadBuffer+0x9>
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
     848:	89 13       	cpse	r24, r25
     84a:	1e c0       	rjmp	.+60     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
     84c:	90 91 16 3e 	lds	r25, 0x3E16	; 0x803e16 <payloadBuffer+0xa>
		BatteryLevelCalculateCounter++;
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
     850:	c9 13       	cpse	r28, r25
     852:	1c c0       	rjmp	.+56     	; 0x88c <__LOCK_REGION_LENGTH__+0x48c>
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
     854:	20 91 38 3e 	lds	r18, 0x3E38	; 0x803e38 <prox1CounterBase+0x1>
     858:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <payloadBuffer+0xb>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
     85c:	29 13       	cpse	r18, r25
     85e:	18 c0       	rjmp	.+48     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
     860:	20 91 37 3e 	lds	r18, 0x3E37	; 0x803e37 <prox1CounterBase>
     864:	90 91 18 3e 	lds	r25, 0x3E18	; 0x803e18 <payloadBuffer+0xc>
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
     868:	29 13       	cpse	r18, r25
     86a:	14 c0       	rjmp	.+40     	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
     86c:	20 91 36 3e 	lds	r18, 0x3E36	; 0x803e36 <prox2CounterBase+0x1>
     870:	90 91 19 3e 	lds	r25, 0x3E19	; 0x803e19 <payloadBuffer+0xd>
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
     874:	29 13       	cpse	r18, r25
     876:	10 c0       	rjmp	.+32     	; 0x898 <__LOCK_REGION_LENGTH__+0x498>
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
						(prox2CounterBase[0] != payloadBuffer[payloadBufferStartByte + 8]);
     878:	20 91 35 3e 	lds	r18, 0x3E35	; 0x803e35 <prox2CounterBase>
     87c:	90 91 1a 3e 	lds	r25, 0x3E1A	; 0x803e1a <payloadBuffer+0xe>
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4]) ||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
     880:	29 17       	cp	r18, r25
     882:	61 f0       	breq	.+24     	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
     884:	21 e0       	ldi	r18, 0x01	; 1
     886:	0b c0       	rjmp	.+22     	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     888:	21 e0       	ldi	r18, 0x01	; 1
     88a:	09 c0       	rjmp	.+18     	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	07 c0       	rjmp	.+14     	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     890:	21 e0       	ldi	r18, 0x01	; 1
     892:	05 c0       	rjmp	.+10     	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	03 c0       	rjmp	.+6      	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	01 c0       	rjmp	.+2      	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	92 2f       	mov	r25, r18
     8a0:	91 70       	andi	r25, 0x01	; 1
		BatteryLevelCalculateCounter++;
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3]) ||	\
     8a2:	90 93 1e 3e 	sts	0x3E1E, r25	; 0x803e1e <isDataChanged>
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5]) ||	\
						(prox1CounterBase[0] != payloadBuffer[payloadBufferStartByte + 6]) ||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7]) ||	\
						(prox2CounterBase[0] != payloadBuffer[payloadBufferStartByte + 8]);
		
		repeatDataCounter = isDataChanged ? 20 : repeatDataCounter;
     8a6:	91 11       	cpse	r25, r1
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
     8aa:	90 91 1d 3e 	lds	r25, 0x3E1D	; 0x803e1d <repeatDataCounter>
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
     8b0:	94 e1       	ldi	r25, 0x14	; 20
     8b2:	90 93 1d 3e 	sts	0x3E1D, r25	; 0x803e1d <repeatDataCounter>
		
		if(repeatDataCounter)
     8b6:	99 23       	and	r25, r25
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__LOCK_REGION_LENGTH__+0x4bc>
     8ba:	4e c0       	rjmp	.+156    	; 0x958 <__LOCK_REGION_LENGTH__+0x558>
		{
			payloadBuffer[payloadBufferStartByte + 3] = seatFlagStatus[0];
     8bc:	0c e0       	ldi	r16, 0x0C	; 12
     8be:	1e e3       	ldi	r17, 0x3E	; 62
     8c0:	f8 01       	movw	r30, r16
     8c2:	81 87       	std	Z+9, r24	; 0x09
			payloadBuffer[payloadBufferStartByte + 4] = seatFlagStatus[1];
     8c4:	c2 87       	std	Z+10, r28	; 0x0a
			payloadBuffer[payloadBufferStartByte + 5] = prox1CounterBase[1];
     8c6:	e7 e3       	ldi	r30, 0x37	; 55
     8c8:	fe e3       	ldi	r31, 0x3E	; 62
     8ca:	81 81       	ldd	r24, Z+1	; 0x01
     8cc:	d8 01       	movw	r26, r16
     8ce:	1b 96       	adiw	r26, 0x0b	; 11
     8d0:	8c 93       	st	X, r24
     8d2:	1b 97       	sbiw	r26, 0x0b	; 11
			payloadBuffer[payloadBufferStartByte + 6] = prox1CounterBase[0];
     8d4:	80 81       	ld	r24, Z
     8d6:	1c 96       	adiw	r26, 0x0c	; 12
     8d8:	8c 93       	st	X, r24
     8da:	1c 97       	sbiw	r26, 0x0c	; 12
			payloadBuffer[payloadBufferStartByte + 7] = prox2CounterBase[1];
     8dc:	e5 e3       	ldi	r30, 0x35	; 53
     8de:	fe e3       	ldi	r31, 0x3E	; 62
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
     8e2:	1d 96       	adiw	r26, 0x0d	; 13
     8e4:	8c 93       	st	X, r24
     8e6:	1d 97       	sbiw	r26, 0x0d	; 13
			payloadBuffer[payloadBufferStartByte + 8] = prox2CounterBase[0];
     8e8:	80 81       	ld	r24, Z
     8ea:	1e 96       	adiw	r26, 0x0e	; 14
     8ec:	8c 93       	st	X, r24
			payloadBuffer[payloadBufferStartByte + 9] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 3]);
     8ee:	85 e1       	ldi	r24, 0x15	; 21
     8f0:	9e e3       	ldi	r25, 0x3E	; 62
     8f2:	7b d2       	rcall	.+1270   	; 0xdea <SX1243CRC8>
     8f4:	e8 01       	movw	r28, r16
     8f6:	8f 87       	std	Y+15, r24	; 0x0f
			
			if(SX1243Process() != SX_OK)
     8f8:	88 d2       	rcall	.+1296   	; 0xe0a <SX1243Process>
     8fa:	88 23       	and	r24, r24
     8fc:	31 f0       	breq	.+12     	; 0x90a <__LOCK_REGION_LENGTH__+0x50a>
			{
				repeatDataCounter++;
     8fe:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <repeatDataCounter>
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <repeatDataCounter>
     908:	05 c0       	rjmp	.+10     	; 0x914 <__LOCK_REGION_LENGTH__+0x514>
			}
			else
				repeatDataCounter--;
     90a:	80 91 1d 3e 	lds	r24, 0x3E1D	; 0x803e1d <repeatDataCounter>
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	80 93 1d 3e 	sts	0x3E1D, r24	; 0x803e1d <repeatDataCounter>
			BatteryLevelCounter -= BAT_TRANSMIT_CONSTANT;
     914:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <BatteryLevelCounter>
     918:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <BatteryLevelCounter+0x1>
     91c:	40 91 06 3e 	lds	r20, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x2>
     920:	50 91 07 3e 	lds	r21, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x3>
     924:	60 91 08 3e 	lds	r22, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x4>
     928:	70 91 09 3e 	lds	r23, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x5>
     92c:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x6>
     930:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x7>
     934:	ac ee       	ldi	r26, 0xEC	; 236
     936:	c6 d5       	rcall	.+2956   	; 0x14c4 <__adddi3_s8>
     938:	20 93 04 3e 	sts	0x3E04, r18	; 0x803e04 <BatteryLevelCounter>
     93c:	30 93 05 3e 	sts	0x3E05, r19	; 0x803e05 <BatteryLevelCounter+0x1>
     940:	40 93 06 3e 	sts	0x3E06, r20	; 0x803e06 <BatteryLevelCounter+0x2>
     944:	50 93 07 3e 	sts	0x3E07, r21	; 0x803e07 <BatteryLevelCounter+0x3>
     948:	60 93 08 3e 	sts	0x3E08, r22	; 0x803e08 <BatteryLevelCounter+0x4>
     94c:	70 93 09 3e 	sts	0x3E09, r23	; 0x803e09 <BatteryLevelCounter+0x5>
     950:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <BatteryLevelCounter+0x6>
     954:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <BatteryLevelCounter+0x7>
		//printf("adc1: %4d, adc2: %4d\r",adc1, adc2);
		//printf("P1: %4d, P2: %4d\r",prox1CurrentValue, prox2CurrentValue);
		
		//_delay_ms(5);
		
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     958:	e0 e5       	ldi	r30, 0x50	; 80
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	89 7f       	andi	r24, 0xF9	; 249
     960:	84 60       	ori	r24, 0x04	; 4
     962:	80 83       	st	Z, r24
		cli();
     964:	f8 94       	cli
		
		sleep_enable();
     966:	80 81       	ld	r24, Z
     968:	81 60       	ori	r24, 0x01	; 1
     96a:	80 83       	st	Z, r24
		sei();
     96c:	78 94       	sei
		sleep_cpu();
     96e:	88 95       	sleep
		sleep_disable();
     970:	80 81       	ld	r24, Z
     972:	8e 7f       	andi	r24, 0xFE	; 254
     974:	80 83       	st	Z, r24
		cli();
     976:	f8 94       	cli
		BatteryLevelCounter -= BAT_SLEEP_CONSTANT;
     978:	20 91 04 3e 	lds	r18, 0x3E04	; 0x803e04 <BatteryLevelCounter>
     97c:	30 91 05 3e 	lds	r19, 0x3E05	; 0x803e05 <BatteryLevelCounter+0x1>
     980:	40 91 06 3e 	lds	r20, 0x3E06	; 0x803e06 <BatteryLevelCounter+0x2>
     984:	50 91 07 3e 	lds	r21, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x3>
     988:	60 91 08 3e 	lds	r22, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x4>
     98c:	70 91 09 3e 	lds	r23, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x5>
     990:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x6>
     994:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x7>
     998:	a2 ee       	ldi	r26, 0xE2	; 226
     99a:	94 d5       	rcall	.+2856   	; 0x14c4 <__adddi3_s8>
     99c:	20 93 04 3e 	sts	0x3E04, r18	; 0x803e04 <BatteryLevelCounter>
     9a0:	30 93 05 3e 	sts	0x3E05, r19	; 0x803e05 <BatteryLevelCounter+0x1>
     9a4:	40 93 06 3e 	sts	0x3E06, r20	; 0x803e06 <BatteryLevelCounter+0x2>
     9a8:	50 93 07 3e 	sts	0x3E07, r21	; 0x803e07 <BatteryLevelCounter+0x3>
     9ac:	60 93 08 3e 	sts	0x3E08, r22	; 0x803e08 <BatteryLevelCounter+0x4>
     9b0:	70 93 09 3e 	sts	0x3E09, r23	; 0x803e09 <BatteryLevelCounter+0x5>
     9b4:	80 93 0a 3e 	sts	0x3E0A, r24	; 0x803e0a <BatteryLevelCounter+0x6>
     9b8:	90 93 0b 3e 	sts	0x3E0B, r25	; 0x803e0b <BatteryLevelCounter+0x7>
		
		if(CBT_get_level() == false)
     9bc:	13 99       	sbic	0x02, 3	; 2
     9be:	de cc       	rjmp	.-1604   	; 0x37c <__DATA_REGION_LENGTH__+0x17c>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     9c0:	41 e0       	ldi	r20, 0x01	; 1
     9c2:	68 ed       	ldi	r22, 0xD8	; 216
     9c4:	81 e4       	ldi	r24, 0x41	; 65
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	f7 d0       	rcall	.+494    	; 0xbb8 <protected_write_io>
     9ca:	d8 cc       	rjmp	.-1616   	; 0x37c <__DATA_REGION_LENGTH__+0x17c>

000009cc <ADC_0_init>:

	// ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV2_gc    /* CLK_PER divided by 128 */
     9cc:	e0 e0       	ldi	r30, 0x00	; 0
     9ce:	f6 e0       	ldi	r31, 0x06	; 6
     9d0:	80 e1       	ldi	r24, 0x10	; 16
     9d2:	82 83       	std	Z+2, r24	; 0x02

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	08 95       	ret

000009dc <ADC_0_enable>:
 *
 * \return Nothing
 */
void ADC_0_enable()
{
	ADC0.CTRLA |= ADC_ENABLE_bm;
     9dc:	e0 e0       	ldi	r30, 0x00	; 0
     9de:	f6 e0       	ldi	r31, 0x06	; 6
     9e0:	80 81       	ld	r24, Z
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 83       	st	Z, r24
     9e6:	08 95       	ret

000009e8 <ADC_0_disable>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
     9e8:	e0 e0       	ldi	r30, 0x00	; 0
     9ea:	f6 e0       	ldi	r31, 0x06	; 6
     9ec:	80 81       	ld	r24, Z
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 83       	st	Z, r24
     9f2:	08 95       	ret

000009f4 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     9f4:	e0 e0       	ldi	r30, 0x00	; 0
     9f6:	f6 e0       	ldi	r31, 0x06	; 6
     9f8:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 87       	std	Z+8, r24	; 0x08
     9fe:	08 95       	ret

00000a00 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
     a00:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f712b>
}
     a04:	81 70       	andi	r24, 0x01	; 1
     a06:	08 95       	ret

00000a08 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
     a08:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f7130>
     a0c:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f7131>
}
     a10:	08 95       	ret

00000a12 <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
     a12:	f0 df       	rcall	.-32     	; 0x9f4 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
     a14:	f5 df       	rcall	.-22     	; 0xa00 <ADC_0_is_conversion_done>
     a16:	88 23       	and	r24, r24
     a18:	e9 f3       	breq	.-6      	; 0xa14 <ADC_0_get_conversion+0x2>
		;
	res = ADC_0_get_conversion_result();
     a1a:	f6 df       	rcall	.-20     	; 0xa08 <ADC_0_get_conversion_result>
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     a1c:	e0 e0       	ldi	r30, 0x00	; 0
     a1e:	f6 e0       	ldi	r31, 0x06	; 6
     a20:	23 85       	ldd	r18, Z+11	; 0x0b
     a22:	21 60       	ori	r18, 0x01	; 1
     a24:	23 87       	std	Z+11, r18	; 0x0b
	return res;
}
     a26:	08 95       	ret

00000a28 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret

00000a2c <CLKCTRL_init>:
     a2c:	43 e0       	ldi	r20, 0x03	; 3
     a2e:	68 ed       	ldi	r22, 0xD8	; 216
     a30:	81 e6       	ldi	r24, 0x61	; 97
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	c1 d0       	rcall	.+386    	; 0xbb8 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	08 95       	ret

00000a3a <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     a3a:	78 94       	sei

	return 0;
}
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret

00000a40 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 c0       	rjmp	.+16     	; 0xa54 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a44:	e8 2f       	mov	r30, r24
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	e0 5f       	subi	r30, 0xF0	; 240
     a4a:	fb 4f       	sbci	r31, 0xFB	; 251
     a4c:	90 81       	ld	r25, Z
     a4e:	98 60       	ori	r25, 0x08	; 8
     a50:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	88 30       	cpi	r24, 0x08	; 8
     a56:	b0 f3       	brcs	.-20     	; 0xa44 <mcu_init+0x4>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a5c:	e8 2f       	mov	r30, r24
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	e0 5d       	subi	r30, 0xD0	; 208
     a62:	fb 4f       	sbci	r31, 0xFB	; 251
     a64:	90 81       	ld	r25, Z
     a66:	98 60       	ori	r25, 0x08	; 8
     a68:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	88 30       	cpi	r24, 0x08	; 8
     a6e:	b0 f3       	brcs	.-20     	; 0xa5c <mcu_init+0x1c>
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     a74:	e8 2f       	mov	r30, r24
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e0 5b       	subi	r30, 0xB0	; 176
     a7a:	fb 4f       	sbci	r31, 0xFB	; 251
     a7c:	90 81       	ld	r25, Z
     a7e:	98 60       	ori	r25, 0x08	; 8
     a80:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	88 30       	cpi	r24, 0x08	; 8
     a86:	b0 f3       	brcs	.-20     	; 0xa74 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     a88:	08 95       	ret

00000a8a <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a8a:	e6 e1       	ldi	r30, 0x16	; 22
     a8c:	f4 e0       	ldi	r31, 0x04	; 4
     a8e:	80 81       	ld	r24, Z
     a90:	88 7f       	andi	r24, 0xF8	; 248
     a92:	84 60       	ori	r24, 0x04	; 4
     a94:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     a96:	80 81       	ld	r24, Z
     a98:	87 7f       	andi	r24, 0xF7	; 247
     a9a:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     a9c:	e0 e3       	ldi	r30, 0x30	; 48
     a9e:	f4 e0       	ldi	r31, 0x04	; 4
     aa0:	80 81       	ld	r24, Z
     aa2:	88 7f       	andi	r24, 0xF8	; 248
     aa4:	84 60       	ori	r24, 0x04	; 4
     aa6:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     aa8:	80 81       	ld	r24, Z
     aaa:	87 7f       	andi	r24, 0xF7	; 247
     aac:	80 83       	st	Z, r24
	// Disable digital input buffer
	SY_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	SY_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     aae:	8e df       	rcall	.-228    	; 0x9cc <ADC_0_init>
     ab0:	08 95       	ret

00000ab2 <FLASH_0_initialization>:
}

/* Initialize registers */
void FLASH_0_initialization(void)
{
	FLASH_0_init();
     ab2:	62 d0       	rcall	.+196    	; 0xb78 <FLASH_0_init>
     ab4:	08 95       	ret

00000ab6 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     ab6:	c4 df       	rcall	.-120    	; 0xa40 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ab8:	80 b1       	in	r24, 0x00	; 0
     aba:	87 7f       	andi	r24, 0xF7	; 247
     abc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     abe:	e3 e1       	ldi	r30, 0x13	; 19
     ac0:	f4 e0       	ldi	r31, 0x04	; 4
     ac2:	80 81       	ld	r24, Z
     ac4:	88 60       	ori	r24, 0x08	; 8
     ac6:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ac8:	80 b1       	in	r24, 0x00	; 0
     aca:	8f 7e       	andi	r24, 0xEF	; 239
     acc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     ace:	e4 e1       	ldi	r30, 0x14	; 20
     ad0:	f4 e0       	ldi	r31, 0x04	; 4
     ad2:	80 81       	ld	r24, Z
     ad4:	88 60       	ori	r24, 0x08	; 8
     ad6:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ad8:	80 b1       	in	r24, 0x00	; 0
     ada:	8f 7d       	andi	r24, 0xDF	; 223
     adc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     ade:	e5 e1       	ldi	r30, 0x15	; 21
     ae0:	f4 e0       	ldi	r31, 0x04	; 4
     ae2:	80 81       	ld	r24, Z
     ae4:	88 60       	ori	r24, 0x08	; 8
     ae6:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     ae8:	81 b1       	in	r24, 0x01	; 1
     aea:	8f 77       	andi	r24, 0x7F	; 127
     aec:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     aee:	80 b1       	in	r24, 0x00	; 0
     af0:	80 68       	ori	r24, 0x80	; 128
     af2:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     af4:	84 b1       	in	r24, 0x04	; 4
     af6:	8d 7f       	andi	r24, 0xFD	; 253
     af8:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     afa:	e1 e3       	ldi	r30, 0x31	; 49
     afc:	f4 e0       	ldi	r31, 0x04	; 4
     afe:	80 81       	ld	r24, Z
     b00:	87 7f       	andi	r24, 0xF7	; 247
     b02:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     b04:	84 b1       	in	r24, 0x04	; 4
     b06:	8f 7e       	andi	r24, 0xEF	; 239
     b08:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b0a:	e4 e3       	ldi	r30, 0x34	; 52
     b0c:	f4 e0       	ldi	r31, 0x04	; 4
     b0e:	80 81       	ld	r24, Z
     b10:	88 60       	ori	r24, 0x08	; 8
     b12:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     b14:	84 b1       	in	r24, 0x04	; 4
     b16:	8f 7d       	andi	r24, 0xDF	; 223
     b18:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b1a:	e5 e3       	ldi	r30, 0x35	; 53
     b1c:	f4 e0       	ldi	r31, 0x04	; 4
     b1e:	80 81       	ld	r24, Z
     b20:	88 60       	ori	r24, 0x08	; 8
     b22:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     b24:	88 b1       	in	r24, 0x08	; 8
     b26:	8d 7f       	andi	r24, 0xFD	; 253
     b28:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b2a:	e1 e5       	ldi	r30, 0x51	; 81
     b2c:	f4 e0       	ldi	r31, 0x04	; 4
     b2e:	80 81       	ld	r24, Z
     b30:	88 60       	ori	r24, 0x08	; 8
     b32:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     b34:	88 b1       	in	r24, 0x08	; 8
     b36:	8b 7f       	andi	r24, 0xFB	; 251
     b38:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     b3a:	e2 e5       	ldi	r30, 0x52	; 82
     b3c:	f4 e0       	ldi	r31, 0x04	; 4
     b3e:	80 81       	ld	r24, Z
     b40:	88 60       	ori	r24, 0x08	; 8
     b42:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     b44:	89 b1       	in	r24, 0x09	; 9
     b46:	87 7f       	andi	r24, 0xF7	; 247
     b48:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     b4a:	88 b1       	in	r24, 0x08	; 8
     b4c:	88 60       	ori	r24, 0x08	; 8
     b4e:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     b50:	89 b1       	in	r24, 0x09	; 9
     b52:	8f 7e       	andi	r24, 0xEF	; 239
     b54:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     b56:	88 b1       	in	r24, 0x08	; 8
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     b5c:	89 b1       	in	r24, 0x09	; 9
     b5e:	8f 7d       	andi	r24, 0xDF	; 223
     b60:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     b62:	88 b1       	in	r24, 0x08	; 8
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	NRESET_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
     b68:	61 df       	rcall	.-318    	; 0xa2c <CLKCTRL_init>

	RTC_0_init();
     b6a:	2a d0       	rcall	.+84     	; 0xbc0 <RTC_0_init>

	ADC_0_initialization();
     b6c:	8e df       	rcall	.-228    	; 0xa8a <ADC_0_initialization>

	FLASH_0_initialization();
     b6e:	a1 df       	rcall	.-190    	; 0xab2 <FLASH_0_initialization>

	CPUINT_init();
     b70:	64 df       	rcall	.-312    	; 0xa3a <CPUINT_init>

	SLPCTRL_init();
     b72:	3c d0       	rcall	.+120    	; 0xbec <SLPCTRL_init>

	BOD_init();
     b74:	59 df       	rcall	.-334    	; 0xa28 <BOD_init>
     b76:	08 95       	ret

00000b78 <FLASH_0_init>:
	//		 | 0 << NVMCTRL_BOOTLOCK_bp; /* Boot Lock: disabled */

	// NVMCTRL.INTCTRL = 0 << NVMCTRL_EEREADY_bp; /* EEPROM Ready: disabled */

	return 0;
}
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <FLASH_0_read_eeprom_byte>:
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{

	// Read operation will be stalled by hardware if any write is in progress

	return *(uint8_t *)(EEPROM_START + eeprom_adr);
     b7c:	9c 5e       	subi	r25, 0xEC	; 236
}
     b7e:	fc 01       	movw	r30, r24
     b80:	80 81       	ld	r24, Z
     b82:	08 95       	ret

00000b84 <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	16 2f       	mov	r17, r22

	/* Wait for completion of previous write */
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
     b8e:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f7b22>
     b92:	81 fd       	sbrc	r24, 1
     b94:	fc cf       	rjmp	.-8      	; 0xb8e <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
     b96:	44 e0       	ldi	r20, 0x04	; 4
     b98:	6d e9       	ldi	r22, 0x9D	; 157
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e1       	ldi	r25, 0x10	; 16
     b9e:	0c d0       	rcall	.+24     	; 0xbb8 <protected_write_io>

	/* Clear page buffer */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEBUFCLR_gc);

	/* Write byte to page buffer */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
     ba0:	dc 5e       	subi	r29, 0xEC	; 236
     ba2:	18 83       	st	Y, r17
     ba4:	43 e0       	ldi	r20, 0x03	; 3
     ba6:	6d e9       	ldi	r22, 0x9D	; 157
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	90 e1       	ldi	r25, 0x10	; 16
     bac:	05 d0       	rcall	.+10     	; 0xbb8 <protected_write_io>

	/* Erase byte and program it with desired value */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);

	return NVM_OK;
}
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	08 95       	ret

00000bb8 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     bb8:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     bba:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     bbc:	40 83       	st	Z, r20
	ret                             // Return to caller
     bbe:	08 95       	ret

00000bc0 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     bc0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6c61>
     bc4:	81 11       	cpse	r24, r1
     bc6:	fc cf       	rjmp	.-8      	; 0xbc0 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc /* 32768 */
     bc8:	e0 e4       	ldi	r30, 0x40	; 64
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	88 e7       	ldi	r24, 0x78	; 120
     bce:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp       /* Enable: disabled */
	            | 0 << RTC_RUNSTDBY_bp;   /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; /* 32KHz divided by 32 */
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	87 83       	std	Z+7, r24	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
     bd4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6c71>
     bd8:	81 11       	cpse	r24, r1
     bda:	fc cf       	rjmp	.-8      	; 0xbd4 <RTC_0_init+0x14>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC1024_gc /* RTC Clock Cycles 4096 */
     bdc:	e0 e4       	ldi	r30, 0x40	; 64
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	89 e4       	ldi	r24, 0x49	; 73
     be2:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;   /* Enable: enabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	08 95       	ret

00000bec <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
     bec:	85 e0       	ldi	r24, 0x05	; 5
     bee:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6b70>
	                | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret

00000bf6 <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
     bf6:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     bfa:	29 b1       	in	r18, 0x09	; 9
     bfc:	27 7f       	andi	r18, 0xF7	; 247
     bfe:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
     c00:	29 2f       	mov	r18, r25
     c02:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     c04:	21 f0       	breq	.+8      	; 0xc0e <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
     c06:	29 b1       	in	r18, 0x09	; 9
     c08:	20 61       	ori	r18, 0x10	; 16
     c0a:	29 b9       	out	0x09, r18	; 9
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c0e:	29 b1       	in	r18, 0x09	; 9
     c10:	2f 7e       	andi	r18, 0xEF	; 239
     c12:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
     c14:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     c16:	29 b1       	in	r18, 0x09	; 9
     c18:	28 60       	ori	r18, 0x08	; 8
     c1a:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
     c1c:	91 11       	cpse	r25, r1
     c1e:	ed cf       	rjmp	.-38     	; 0xbfa <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     c20:	89 b1       	in	r24, 0x09	; 9
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	89 b9       	out	0x09, r24	; 9
     c26:	08 95       	ret

00000c28 <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	6a 01       	movw	r12, r20
     c32:	7b 01       	movw	r14, r22
	switch(instruction)
     c34:	88 23       	and	r24, r24
     c36:	19 f0       	breq	.+6      	; 0xc3e <SX1243Write+0x16>
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	21 f0       	breq	.+8      	; 0xc44 <SX1243Write+0x1c>
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	da df       	rcall	.-76     	; 0xbf6 <SpiOut>
		break;
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
     c44:	db 01       	movw	r26, r22
     c46:	ca 01       	movw	r24, r20
     c48:	88 27       	eor	r24, r24
     c4a:	99 27       	eor	r25, r25
     c4c:	a7 70       	andi	r26, 0x07	; 7
     c4e:	bb 27       	eor	r27, r27
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	88 61       	ori	r24, 0x18	; 24
     c56:	cf df       	rcall	.-98     	; 0xbf6 <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
     c58:	8d 2d       	mov	r24, r13
     c5a:	cd df       	rcall	.-102    	; 0xbf6 <SpiOut>
	SpiOut(data & 0xFF);
     c5c:	8c 2d       	mov	r24, r12
     c5e:	cb df       	rcall	.-106    	; 0xbf6 <SpiOut>
     c60:	89 b1       	in	r24, 0x09	; 9
     c62:	8f 7e       	andi	r24, 0xEF	; 239
     c64:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <SX1243Reset>:
     c76:	89 b1       	in	r24, 0x09	; 9
     c78:	8f 7d       	andi	r24, 0xDF	; 223
     c7a:	89 b9       	out	0x09, r24	; 9
     c7c:	83 ed       	ldi	r24, 0xD3	; 211
     c7e:	90 e3       	ldi	r25, 0x30	; 48
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <SX1243Reset+0xa>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <SX1243Reset+0x10>
     c86:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     c88:	89 b1       	in	r24, 0x09	; 9
     c8a:	80 62       	ori	r24, 0x20	; 32
     c8c:	89 b9       	out	0x09, r24	; 9
     c8e:	08 95       	ret

00000c90 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	4a c0       	rjmp	.+148    	; 0xd28 <Sx1243ConvertBuffer+0x98>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80;
     c94:	9c 01       	movw	r18, r24
     c96:	22 0f       	add	r18, r18
     c98:	33 1f       	adc	r19, r19
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	e0 91 e7 3e 	lds	r30, 0x3EE7	; 0x803ee7 <TxParam+0x13>
     ca6:	f0 91 e8 3e 	lds	r31, 0x3EE8	; 0x803ee8 <TxParam+0x14>
     caa:	e8 0f       	add	r30, r24
     cac:	f9 1f       	adc	r31, r25
     cae:	40 81       	ld	r20, Z
     cb0:	44 1f       	adc	r20, r20
     cb2:	44 27       	eor	r20, r20
     cb4:	44 1f       	adc	r20, r20
     cb6:	d9 01       	movw	r26, r18
     cb8:	ac 5a       	subi	r26, 0xAC	; 172
     cba:	b1 4c       	sbci	r27, 0xC1	; 193
     cbc:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40;
     cbe:	40 81       	ld	r20, Z
     cc0:	46 fb       	bst	r20, 6
     cc2:	44 27       	eor	r20, r20
     cc4:	40 f9       	bld	r20, 0
     cc6:	d9 01       	movw	r26, r18
     cc8:	ab 5a       	subi	r26, 0xAB	; 171
     cca:	b1 4c       	sbci	r27, 0xC1	; 193
     ccc:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20;
     cce:	40 81       	ld	r20, Z
     cd0:	45 fb       	bst	r20, 5
     cd2:	44 27       	eor	r20, r20
     cd4:	40 f9       	bld	r20, 0
     cd6:	d9 01       	movw	r26, r18
     cd8:	aa 5a       	subi	r26, 0xAA	; 170
     cda:	b1 4c       	sbci	r27, 0xC1	; 193
     cdc:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10;
     cde:	40 81       	ld	r20, Z
     ce0:	42 95       	swap	r20
     ce2:	41 70       	andi	r20, 0x01	; 1
     ce4:	d9 01       	movw	r26, r18
     ce6:	a9 5a       	subi	r26, 0xA9	; 169
     ce8:	b1 4c       	sbci	r27, 0xC1	; 193
     cea:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
     cec:	40 81       	ld	r20, Z
     cee:	43 fb       	bst	r20, 3
     cf0:	44 27       	eor	r20, r20
     cf2:	40 f9       	bld	r20, 0
     cf4:	d9 01       	movw	r26, r18
     cf6:	a8 5a       	subi	r26, 0xA8	; 168
     cf8:	b1 4c       	sbci	r27, 0xC1	; 193
     cfa:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
     cfc:	40 81       	ld	r20, Z
     cfe:	42 fb       	bst	r20, 2
     d00:	44 27       	eor	r20, r20
     d02:	40 f9       	bld	r20, 0
     d04:	d9 01       	movw	r26, r18
     d06:	a7 5a       	subi	r26, 0xA7	; 167
     d08:	b1 4c       	sbci	r27, 0xC1	; 193
     d0a:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
     d0c:	40 81       	ld	r20, Z
     d0e:	46 95       	lsr	r20
     d10:	41 70       	andi	r20, 0x01	; 1
     d12:	d9 01       	movw	r26, r18
     d14:	a6 5a       	subi	r26, 0xA6	; 166
     d16:	b1 4c       	sbci	r27, 0xC1	; 193
     d18:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
     d1a:	40 81       	ld	r20, Z
     d1c:	41 70       	andi	r20, 0x01	; 1
     d1e:	f9 01       	movw	r30, r18
     d20:	e5 5a       	subi	r30, 0xA5	; 165
     d22:	f1 4c       	sbci	r31, 0xC1	; 193
     d24:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	20 91 e6 3e 	lds	r18, 0x3EE6	; 0x803ee6 <TxParam+0x12>
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	82 17       	cp	r24, r18
     d30:	93 07       	cpc	r25, r19
     d32:	08 f4       	brcc	.+2      	; 0xd36 <Sx1243ConvertBuffer+0xa6>
     d34:	af cf       	rjmp	.-162    	; 0xc94 <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}
     d36:	08 95       	ret

00000d38 <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
     d38:	e4 ed       	ldi	r30, 0xD4	; 212
     d3a:	fe e3       	ldi	r31, 0x3E	; 62
     d3c:	83 8b       	std	Z+19, r24	; 0x13
     d3e:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
     d40:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
     d42:	80 e8       	ldi	r24, 0x80	; 128
     d44:	80 93 51 3e 	sts	0x3E51, r24	; 0x803e51 <fastBufSize>
	Sx1243ConvertBuffer(0);
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	a2 df       	rcall	.-188    	; 0xc90 <Sx1243ConvertBuffer>
	return SX_OK;
}
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret

00000d50 <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	8c 01       	movw	r16, r24
     d5c:	f6 2e       	mov	r15, r22
     d5e:	c4 2f       	mov	r28, r20
	SX1243Reset();
     d60:	8a df       	rcall	.-236    	; 0xc76 <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
     d62:	e4 ed       	ldi	r30, 0xD4	; 212
     d64:	fe e3       	ldi	r31, 0x3E	; 62
     d66:	10 8a       	std	Z+16, r1	; 0x10
     d68:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
     d6a:	16 86       	std	Z+14, r1	; 0x0e
     d6c:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e2       	ldi	r25, 0x20	; 32
     d72:	84 87       	std	Z+12, r24	; 0x0c
     d74:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	98 e0       	ldi	r25, 0x08	; 8
     d7a:	82 87       	std	Z+10, r24	; 0x0a
     d7c:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
     d7e:	10 86       	std	Z+8, r1	; 0x08
     d80:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
     d82:	16 82       	std	Z+6, r1	; 0x06
     d84:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	84 83       	std	Z+4, r24	; 0x04
     d8c:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
     d8e:	87 e2       	ldi	r24, 0x27	; 39
     d90:	96 e6       	ldi	r25, 0x66	; 102
     d92:	a4 e0       	ldi	r26, 0x04	; 4
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	80 83       	st	Z, r24
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	a2 83       	std	Z+2, r26	; 0x02
     d9c:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	98 e2       	ldi	r25, 0x28	; 40
     da2:	85 8b       	std	Z+21, r24	; 0x15
     da4:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
     da6:	4c 2f       	mov	r20, r28
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	d8 01       	movw	r26, r16
     dac:	a4 0f       	add	r26, r20
     dae:	b5 1f       	adc	r27, r21
     db0:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1] ^ 
     db2:	9a 01       	movw	r18, r20
     db4:	2f 5f       	subi	r18, 0xFF	; 255
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	20 0f       	add	r18, r16
     dba:	31 1f       	adc	r19, r17
						 PayloadBuffer[DataStartByte + 2];
     dbc:	4e 5f       	subi	r20, 0xFE	; 254
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	d8 01       	movw	r26, r16
     dc2:	a4 0f       	add	r26, r20
     dc4:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
     dc6:	e9 01       	movw	r28, r18
     dc8:	88 81       	ld	r24, Y
     dca:	89 27       	eor	r24, r25
     dcc:	9c 91       	ld	r25, X
     dce:	89 27       	eor	r24, r25
     dd0:	9b ed       	ldi	r25, 0xDB	; 219
     dd2:	89 27       	eor	r24, r25
     dd4:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1] ^ 
						 PayloadBuffer[DataStartByte + 2];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
     dd6:	6f 2d       	mov	r22, r15
     dd8:	c8 01       	movw	r24, r16
     dda:	ae df       	rcall	.-164    	; 0xd38 <SX1243SetTxPacketBuffer>
	return SX_OK;
}
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	08 95       	ret

00000dea <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
     dea:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^ 
     dec:	80 91 eb 3e 	lds	r24, 0x3EEB	; 0x803eeb <TxParam+0x17>
					 buffer[0]		  ^ 
     df0:	50 81       	ld	r21, Z
					 buffer[1]		  ^ 
     df2:	41 81       	ldd	r20, Z+1	; 0x01
					 buffer[2]		  ^ 
     df4:	32 81       	ldd	r19, Z+2	; 0x02
					 buffer[3]		  ^ 
     df6:	23 81       	ldd	r18, Z+3	; 0x03
					 buffer[4]		  ^ 
     df8:	94 81       	ldd	r25, Z+4	; 0x04
					 buffer[5]);
     dfa:	65 81       	ldd	r22, Z+5	; 0x05
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^ 
     dfc:	85 27       	eor	r24, r21
     dfe:	84 27       	eor	r24, r20
     e00:	83 27       	eor	r24, r19
     e02:	82 27       	eor	r24, r18
     e04:	89 27       	eor	r24, r25
					 buffer[1]		  ^ 
					 buffer[2]		  ^ 
					 buffer[3]		  ^ 
					 buffer[4]		  ^ 
					 buffer[5]);
}
     e06:	86 27       	eor	r24, r22
     e08:	08 95       	ret

00000e0a <SX1243Process>:

U8 SX1243Process(void)
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;

	TxParam.Config |= 0x8000;
     e0e:	c4 ed       	ldi	r28, 0xD4	; 212
     e10:	de e3       	ldi	r29, 0x3E	; 62
     e12:	4d 89       	ldd	r20, Y+21	; 0x15
     e14:	5e 89       	ldd	r21, Y+22	; 0x16
     e16:	50 68       	ori	r21, 0x80	; 128
     e18:	4d 8b       	std	Y+21, r20	; 0x15
     e1a:	5e 8b       	std	Y+22, r21	; 0x16
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	02 df       	rcall	.-508    	; 0xc28 <SX1243Write>
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
     e24:	48 81       	ld	r20, Y
     e26:	59 81       	ldd	r21, Y+1	; 0x01
     e28:	6a 81       	ldd	r22, Y+2	; 0x02
     e2a:	7b 81       	ldd	r23, Y+3	; 0x03
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	fc de       	rcall	.-520    	; 0xc28 <SX1243Write>
	TxParam.Config &= 0x7FFF;
     e30:	8d 89       	ldd	r24, Y+21	; 0x15
     e32:	9e 89       	ldd	r25, Y+22	; 0x16
     e34:	9f 77       	andi	r25, 0x7F	; 127
     e36:	8d 8b       	std	Y+21, r24	; 0x15
     e38:	9e 8b       	std	Y+22, r25	; 0x16

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
     e3a:	80 91 e0 94 	lds	r24, 0x94E0	; 0x8094e0 <__bss_end+0x55f4>
     e3e:	8d 5f       	subi	r24, 0xFD	; 253
     e40:	27 df       	rcall	.-434    	; 0xc90 <Sx1243ConvertBuffer>
}

U8 SX1243Process(void)
{
	U8 state = SX_OK;
	U16 j = 0;
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <SX1243Process+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e48:	20 e1       	ldi	r18, 0x10	; 16
     e4a:	2a 95       	dec	r18
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <SX1243Process+0x40>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <SX1243Process+0x46>
	{
		_delay_us(10);
		j++;
     e50:	01 96       	adiw	r24, 0x01	; 1
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
     e52:	52 99       	sbic	0x0a, 2	; 10
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <SX1243Process+0x52>
     e56:	8c 3d       	cpi	r24, 0xDC	; 220
     e58:	91 05       	cpc	r25, r1
     e5a:	b0 f3       	brcs	.-20     	; 0xe48 <SX1243Process+0x3e>
		_delay_us(10);
		j++;
	}
	
	
	if (j < TRANSMITTER_READY_TIMEOUT)
     e5c:	8c 3d       	cpi	r24, 0xDC	; 220
     e5e:	91 05       	cpc	r25, r1
     e60:	d8 f0       	brcs	.+54     	; 0xe98 <SX1243Process+0x8e>
     e62:	23 c0       	rjmp	.+70     	; 0xeaa <SX1243Process+0xa0>
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
		{
			DATA_set_level(fastBuf[j]);
     e64:	fc 01       	movw	r30, r24
     e66:	ec 5a       	subi	r30, 0xAC	; 172
     e68:	f1 4c       	sbci	r31, 0xC1	; 193
     e6a:	20 81       	ld	r18, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     e6c:	22 23       	and	r18, r18
     e6e:	21 f0       	breq	.+8      	; 0xe78 <SX1243Process+0x6e>
		VPORTC.OUT |= (1 << pin);
     e70:	29 b1       	in	r18, 0x09	; 9
     e72:	20 61       	ori	r18, 0x10	; 16
     e74:	29 b9       	out	0x09, r18	; 9
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <SX1243Process+0x74>
	} else {
		VPORTC.OUT &= ~(1 << pin);
     e78:	29 b1       	in	r18, 0x09	; 9
     e7a:	2f 7e       	andi	r18, 0xEF	; 239
     e7c:	29 b9       	out	0x09, r18	; 9
     e7e:	2a e0       	ldi	r18, 0x0A	; 10
     e80:	2a 95       	dec	r18
     e82:	f1 f7       	brne	.-4      	; 0xe80 <SX1243Process+0x76>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <SX1243Process+0x7c>
			_delay_us(6.4);
			if (!fastBuf[j])
     e86:	fc 01       	movw	r30, r24
     e88:	ec 5a       	subi	r30, 0xAC	; 172
     e8a:	f1 4c       	sbci	r31, 0xC1	; 193
     e8c:	20 81       	ld	r18, Z
     e8e:	21 11       	cpse	r18, r1
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <SX1243Process+0x8a>
			{
				_NOP();
     e92:	00 00       	nop
				//_NOP();
				//_NOP();
			}
			j++;
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <SX1243Process+0x92>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
     e9c:	20 91 51 3e 	lds	r18, 0x3E51	; 0x803e51 <fastBufSize>
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	82 17       	cp	r24, r18
     ea4:	93 07       	cpc	r25, r19
     ea6:	f0 f2       	brcs	.-68     	; 0xe64 <SX1243Process+0x5a>
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <SX1243Process+0xa6>
		
		//FLASH_set_level(0);
	}
	else
	{
		SX1243Reset();
     eaa:	e5 de       	rcall	.-566    	; 0xc76 <SX1243Reset>
		return SX_ERROR;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <SX1243Process+0xb8>
	}
	
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
     eb0:	40 91 e9 3e 	lds	r20, 0x3EE9	; 0x803ee9 <TxParam+0x15>
     eb4:	50 91 ea 3e 	lds	r21, 0x3EEA	; 0x803eea <TxParam+0x16>
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	b4 de       	rcall	.-664    	; 0xc28 <SX1243Write>
		
	return state;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <TOUCH_GetSensorValue>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     ec8:	91 b1       	in	r25, 0x01	; 1
     eca:	9f 77       	andi	r25, 0x7F	; 127
     ecc:	91 b9       	out	0x01, r25	; 1
uint16_t TOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	uint16_t var = 0;
	SHIELD_set_level(false);
	
	switch (touchPin)
     ece:	88 23       	and	r24, r24
     ed0:	19 f0       	breq	.+6      	; 0xed8 <TOUCH_GetSensorValue+0x10>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	89 f1       	breq	.+98     	; 0xf38 <TOUCH_GetSensorValue+0x70>
     ed6:	60 c0       	rjmp	.+192    	; 0xf98 <TOUCH_GetSensorValue+0xd0>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     ed8:	66 23       	and	r22, r22
     eda:	21 f0       	breq	.+8      	; 0xee4 <TOUCH_GetSensorValue+0x1c>
		VPORTB.OUT |= (1 << pin);
     edc:	85 b1       	in	r24, 0x05	; 5
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	85 b9       	out	0x05, r24	; 5
     ee2:	03 c0       	rjmp	.+6      	; 0xeea <TOUCH_GetSensorValue+0x22>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     ee4:	85 b1       	in	r24, 0x05	; 5
     ee6:	8d 7f       	andi	r24, 0xFD	; 253
     ee8:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     eea:	84 b1       	in	r24, 0x04	; 4
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	84 b9       	out	0x04, r24	; 4
	{
		case 0:
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     ef0:	8a e0       	ldi	r24, 0x0A	; 10
     ef2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f7126>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     ef6:	61 30       	cpi	r22, 0x01	; 1
     ef8:	21 f0       	breq	.+8      	; 0xf02 <TOUCH_GetSensorValue+0x3a>
		VPORTA.OUT |= (1 << pin);
     efa:	81 b1       	in	r24, 0x01	; 1
     efc:	80 64       	ori	r24, 0x40	; 64
     efe:	81 b9       	out	0x01, r24	; 1
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <TOUCH_GetSensorValue+0x40>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     f02:	81 b1       	in	r24, 0x01	; 1
     f04:	8f 7b       	andi	r24, 0xBF	; 191
     f06:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     f08:	80 b1       	in	r24, 0x00	; 0
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	80 b9       	out	0x00, r24	; 0
     f0e:	85 e0       	ldi	r24, 0x05	; 5
     f10:	8a 95       	dec	r24
     f12:	f1 f7       	brne	.-4      	; 0xf10 <TOUCH_GetSensorValue+0x48>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f14:	80 b1       	in	r24, 0x00	; 0
     f16:	8f 7b       	andi	r24, 0xBF	; 191
     f18:	80 b9       	out	0x00, r24	; 0
			//SX_set_pull_mode(PORT_PULL_OFF);
			
			//ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;			
			//_delay_us(TRANSFER_DELAY);
			
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
     f1a:	86 e0       	ldi	r24, 0x06	; 6
     f1c:	7a dd       	rcall	.-1292   	; 0xa12 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     f1e:	2a e0       	ldi	r18, 0x0A	; 10
     f20:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f7126>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     f24:	24 b1       	in	r18, 0x04	; 4
     f26:	2d 7f       	andi	r18, 0xFD	; 253
     f28:	24 b9       	out	0x04, r18	; 4
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     f2a:	21 b1       	in	r18, 0x01	; 1
     f2c:	2f 7b       	andi	r18, 0xBF	; 191
     f2e:	21 b9       	out	0x01, r18	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     f30:	20 b1       	in	r18, 0x00	; 0
     f32:	20 64       	ori	r18, 0x40	; 64
     f34:	20 b9       	out	0x00, r18	; 0
			//PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			//PARTNER_set_pull_mode(PORT_PULL_OFF);
			SX_set_level(false);
			SX_set_dir(PORT_DIR_OUT);
			
			return var;
     f36:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     f38:	66 23       	and	r22, r22
     f3a:	21 f0       	breq	.+8      	; 0xf44 <TOUCH_GetSensorValue+0x7c>
		VPORTB.OUT |= (1 << pin);
     f3c:	85 b1       	in	r24, 0x05	; 5
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	85 b9       	out	0x05, r24	; 5
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <TOUCH_GetSensorValue+0x82>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     f44:	85 b1       	in	r24, 0x05	; 5
     f46:	8d 7f       	andi	r24, 0xFD	; 253
     f48:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f4a:	84 b1       	in	r24, 0x04	; 4
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	84 b9       	out	0x04, r24	; 4
		break;
		
		case 1:			
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f7126>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
     f56:	61 30       	cpi	r22, 0x01	; 1
     f58:	21 f0       	breq	.+8      	; 0xf62 <TOUCH_GetSensorValue+0x9a>
		VPORTB.OUT |= (1 << pin);
     f5a:	85 b1       	in	r24, 0x05	; 5
     f5c:	81 60       	ori	r24, 0x01	; 1
     f5e:	85 b9       	out	0x05, r24	; 5
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <TOUCH_GetSensorValue+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
     f62:	85 b1       	in	r24, 0x05	; 5
     f64:	8e 7f       	andi	r24, 0xFE	; 254
     f66:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f68:	84 b1       	in	r24, 0x04	; 4
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	84 b9       	out	0x04, r24	; 4
     f6e:	85 e0       	ldi	r24, 0x05	; 5
     f70:	8a 95       	dec	r24
     f72:	f1 f7       	brne	.-4      	; 0xf70 <TOUCH_GetSensorValue+0xa8>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     f74:	84 b1       	in	r24, 0x04	; 4
     f76:	8e 7f       	andi	r24, 0xFE	; 254
     f78:	84 b9       	out	0x04, r24	; 4
			//SY_set_pull_mode(PORT_PULL_OFF);
		
			//ADC0.MUXPOS = ADC_MUXPOS_AIN11_gc;
			//_delay_us(TRANSFER_DELAY);
		
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
     f7a:	8b e0       	ldi	r24, 0x0B	; 11
     f7c:	4a dd       	rcall	.-1388   	; 0xa12 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
     f7e:	2a e0       	ldi	r18, 0x0A	; 10
     f80:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f7126>
     f84:	24 b1       	in	r18, 0x04	; 4
     f86:	2d 7f       	andi	r18, 0xFD	; 253
     f88:	24 b9       	out	0x04, r18	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     f8a:	25 b1       	in	r18, 0x05	; 5
     f8c:	2e 7f       	andi	r18, 0xFE	; 254
     f8e:	25 b9       	out	0x05, r18	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     f90:	24 b1       	in	r18, 0x04	; 4
     f92:	21 60       	ori	r18, 0x01	; 1
     f94:	24 b9       	out	0x04, r18	; 4
			//PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			//PARTNER_set_pull_mode(PORT_PULL_OFF);
			SY_set_level(false);
			SY_set_dir(PORT_DIR_OUT);
		
			return var;
     f96:	08 95       	ret
		
		default:
		break;
	}
	
	return var;
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
}
     f9c:	08 95       	ret

00000f9e <__subsf3>:
     f9e:	50 58       	subi	r21, 0x80	; 128

00000fa0 <__addsf3>:
     fa0:	bb 27       	eor	r27, r27
     fa2:	aa 27       	eor	r26, r26
     fa4:	0e 94 e7 07 	call	0xfce	; 0xfce <__addsf3x>
     fa8:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_round>
     fac:	0e 94 ad 09 	call	0x135a	; 0x135a <__fp_pscA>
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <__addsf3+0x20>
     fb2:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_pscB>
     fb6:	20 f0       	brcs	.+8      	; 0xfc0 <__addsf3+0x20>
     fb8:	39 f4       	brne	.+14     	; 0xfc8 <__addsf3+0x28>
     fba:	9f 3f       	cpi	r25, 0xFF	; 255
     fbc:	19 f4       	brne	.+6      	; 0xfc4 <__addsf3+0x24>
     fbe:	26 f4       	brtc	.+8      	; 0xfc8 <__addsf3+0x28>
     fc0:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>
     fc4:	0e f4       	brtc	.+2      	; 0xfc8 <__addsf3+0x28>
     fc6:	e0 95       	com	r30
     fc8:	e7 fb       	bst	r30, 7
     fca:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>

00000fce <__addsf3x>:
     fce:	e9 2f       	mov	r30, r25
     fd0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_split3>
     fd4:	58 f3       	brcs	.-42     	; 0xfac <__addsf3+0xc>
     fd6:	ba 17       	cp	r27, r26
     fd8:	62 07       	cpc	r22, r18
     fda:	73 07       	cpc	r23, r19
     fdc:	84 07       	cpc	r24, r20
     fde:	95 07       	cpc	r25, r21
     fe0:	20 f0       	brcs	.+8      	; 0xfea <__addsf3x+0x1c>
     fe2:	79 f4       	brne	.+30     	; 0x1002 <__addsf3x+0x34>
     fe4:	a6 f5       	brtc	.+104    	; 0x104e <__addsf3x+0x80>
     fe6:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_zero>
     fea:	0e f4       	brtc	.+2      	; 0xfee <__addsf3x+0x20>
     fec:	e0 95       	com	r30
     fee:	0b 2e       	mov	r0, r27
     ff0:	ba 2f       	mov	r27, r26
     ff2:	a0 2d       	mov	r26, r0
     ff4:	0b 01       	movw	r0, r22
     ff6:	b9 01       	movw	r22, r18
     ff8:	90 01       	movw	r18, r0
     ffa:	0c 01       	movw	r0, r24
     ffc:	ca 01       	movw	r24, r20
     ffe:	a0 01       	movw	r20, r0
    1000:	11 24       	eor	r1, r1
    1002:	ff 27       	eor	r31, r31
    1004:	59 1b       	sub	r21, r25
    1006:	99 f0       	breq	.+38     	; 0x102e <__addsf3x+0x60>
    1008:	59 3f       	cpi	r21, 0xF9	; 249
    100a:	50 f4       	brcc	.+20     	; 0x1020 <__addsf3x+0x52>
    100c:	50 3e       	cpi	r21, 0xE0	; 224
    100e:	68 f1       	brcs	.+90     	; 0x106a <__addsf3x+0x9c>
    1010:	1a 16       	cp	r1, r26
    1012:	f0 40       	sbci	r31, 0x00	; 0
    1014:	a2 2f       	mov	r26, r18
    1016:	23 2f       	mov	r18, r19
    1018:	34 2f       	mov	r19, r20
    101a:	44 27       	eor	r20, r20
    101c:	58 5f       	subi	r21, 0xF8	; 248
    101e:	f3 cf       	rjmp	.-26     	; 0x1006 <__addsf3x+0x38>
    1020:	46 95       	lsr	r20
    1022:	37 95       	ror	r19
    1024:	27 95       	ror	r18
    1026:	a7 95       	ror	r26
    1028:	f0 40       	sbci	r31, 0x00	; 0
    102a:	53 95       	inc	r21
    102c:	c9 f7       	brne	.-14     	; 0x1020 <__addsf3x+0x52>
    102e:	7e f4       	brtc	.+30     	; 0x104e <__addsf3x+0x80>
    1030:	1f 16       	cp	r1, r31
    1032:	ba 0b       	sbc	r27, r26
    1034:	62 0b       	sbc	r22, r18
    1036:	73 0b       	sbc	r23, r19
    1038:	84 0b       	sbc	r24, r20
    103a:	ba f0       	brmi	.+46     	; 0x106a <__addsf3x+0x9c>
    103c:	91 50       	subi	r25, 0x01	; 1
    103e:	a1 f0       	breq	.+40     	; 0x1068 <__addsf3x+0x9a>
    1040:	ff 0f       	add	r31, r31
    1042:	bb 1f       	adc	r27, r27
    1044:	66 1f       	adc	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	88 1f       	adc	r24, r24
    104a:	c2 f7       	brpl	.-16     	; 0x103c <__addsf3x+0x6e>
    104c:	0e c0       	rjmp	.+28     	; 0x106a <__addsf3x+0x9c>
    104e:	ba 0f       	add	r27, r26
    1050:	62 1f       	adc	r22, r18
    1052:	73 1f       	adc	r23, r19
    1054:	84 1f       	adc	r24, r20
    1056:	48 f4       	brcc	.+18     	; 0x106a <__addsf3x+0x9c>
    1058:	87 95       	ror	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	b7 95       	ror	r27
    1060:	f7 95       	ror	r31
    1062:	9e 3f       	cpi	r25, 0xFE	; 254
    1064:	08 f0       	brcs	.+2      	; 0x1068 <__addsf3x+0x9a>
    1066:	b0 cf       	rjmp	.-160    	; 0xfc8 <__addsf3+0x28>
    1068:	93 95       	inc	r25
    106a:	88 0f       	add	r24, r24
    106c:	08 f0       	brcs	.+2      	; 0x1070 <__addsf3x+0xa2>
    106e:	99 27       	eor	r25, r25
    1070:	ee 0f       	add	r30, r30
    1072:	97 95       	ror	r25
    1074:	87 95       	ror	r24
    1076:	08 95       	ret

00001078 <__divsf3>:
    1078:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__divsf3x>
    107c:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_round>
    1080:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_pscB>
    1084:	58 f0       	brcs	.+22     	; 0x109c <__divsf3+0x24>
    1086:	0e 94 ad 09 	call	0x135a	; 0x135a <__fp_pscA>
    108a:	40 f0       	brcs	.+16     	; 0x109c <__divsf3+0x24>
    108c:	29 f4       	brne	.+10     	; 0x1098 <__divsf3+0x20>
    108e:	5f 3f       	cpi	r21, 0xFF	; 255
    1090:	29 f0       	breq	.+10     	; 0x109c <__divsf3+0x24>
    1092:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    1096:	51 11       	cpse	r21, r1
    1098:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_szero>
    109c:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>

000010a0 <__divsf3x>:
    10a0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_split3>
    10a4:	68 f3       	brcs	.-38     	; 0x1080 <__divsf3+0x8>

000010a6 <__divsf3_pse>:
    10a6:	99 23       	and	r25, r25
    10a8:	b1 f3       	breq	.-20     	; 0x1096 <__divsf3+0x1e>
    10aa:	55 23       	and	r21, r21
    10ac:	91 f3       	breq	.-28     	; 0x1092 <__divsf3+0x1a>
    10ae:	95 1b       	sub	r25, r21
    10b0:	55 0b       	sbc	r21, r21
    10b2:	bb 27       	eor	r27, r27
    10b4:	aa 27       	eor	r26, r26
    10b6:	62 17       	cp	r22, r18
    10b8:	73 07       	cpc	r23, r19
    10ba:	84 07       	cpc	r24, r20
    10bc:	38 f0       	brcs	.+14     	; 0x10cc <__divsf3_pse+0x26>
    10be:	9f 5f       	subi	r25, 0xFF	; 255
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	22 0f       	add	r18, r18
    10c4:	33 1f       	adc	r19, r19
    10c6:	44 1f       	adc	r20, r20
    10c8:	aa 1f       	adc	r26, r26
    10ca:	a9 f3       	breq	.-22     	; 0x10b6 <__divsf3_pse+0x10>
    10cc:	35 d0       	rcall	.+106    	; 0x1138 <__divsf3_pse+0x92>
    10ce:	0e 2e       	mov	r0, r30
    10d0:	3a f0       	brmi	.+14     	; 0x10e0 <__divsf3_pse+0x3a>
    10d2:	e0 e8       	ldi	r30, 0x80	; 128
    10d4:	32 d0       	rcall	.+100    	; 0x113a <__divsf3_pse+0x94>
    10d6:	91 50       	subi	r25, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	e6 95       	lsr	r30
    10dc:	00 1c       	adc	r0, r0
    10de:	ca f7       	brpl	.-14     	; 0x10d2 <__divsf3_pse+0x2c>
    10e0:	2b d0       	rcall	.+86     	; 0x1138 <__divsf3_pse+0x92>
    10e2:	fe 2f       	mov	r31, r30
    10e4:	29 d0       	rcall	.+82     	; 0x1138 <__divsf3_pse+0x92>
    10e6:	66 0f       	add	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	bb 1f       	adc	r27, r27
    10ee:	26 17       	cp	r18, r22
    10f0:	37 07       	cpc	r19, r23
    10f2:	48 07       	cpc	r20, r24
    10f4:	ab 07       	cpc	r26, r27
    10f6:	b0 e8       	ldi	r27, 0x80	; 128
    10f8:	09 f0       	breq	.+2      	; 0x10fc <__divsf3_pse+0x56>
    10fa:	bb 0b       	sbc	r27, r27
    10fc:	80 2d       	mov	r24, r0
    10fe:	bf 01       	movw	r22, r30
    1100:	ff 27       	eor	r31, r31
    1102:	93 58       	subi	r25, 0x83	; 131
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	3a f0       	brmi	.+14     	; 0x1116 <__divsf3_pse+0x70>
    1108:	9e 3f       	cpi	r25, 0xFE	; 254
    110a:	51 05       	cpc	r21, r1
    110c:	78 f0       	brcs	.+30     	; 0x112c <__divsf3_pse+0x86>
    110e:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    1112:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_szero>
    1116:	5f 3f       	cpi	r21, 0xFF	; 255
    1118:	e4 f3       	brlt	.-8      	; 0x1112 <__divsf3_pse+0x6c>
    111a:	98 3e       	cpi	r25, 0xE8	; 232
    111c:	d4 f3       	brlt	.-12     	; 0x1112 <__divsf3_pse+0x6c>
    111e:	86 95       	lsr	r24
    1120:	77 95       	ror	r23
    1122:	67 95       	ror	r22
    1124:	b7 95       	ror	r27
    1126:	f7 95       	ror	r31
    1128:	9f 5f       	subi	r25, 0xFF	; 255
    112a:	c9 f7       	brne	.-14     	; 0x111e <__divsf3_pse+0x78>
    112c:	88 0f       	add	r24, r24
    112e:	91 1d       	adc	r25, r1
    1130:	96 95       	lsr	r25
    1132:	87 95       	ror	r24
    1134:	97 f9       	bld	r25, 7
    1136:	08 95       	ret
    1138:	e1 e0       	ldi	r30, 0x01	; 1
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	bb 1f       	adc	r27, r27
    1142:	62 17       	cp	r22, r18
    1144:	73 07       	cpc	r23, r19
    1146:	84 07       	cpc	r24, r20
    1148:	ba 07       	cpc	r27, r26
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__divsf3_pse+0xae>
    114c:	62 1b       	sub	r22, r18
    114e:	73 0b       	sbc	r23, r19
    1150:	84 0b       	sbc	r24, r20
    1152:	ba 0b       	sbc	r27, r26
    1154:	ee 1f       	adc	r30, r30
    1156:	88 f7       	brcc	.-30     	; 0x113a <__divsf3_pse+0x94>
    1158:	e0 95       	com	r30
    115a:	08 95       	ret

0000115c <__fixsfdi>:
    115c:	be e3       	ldi	r27, 0x3E	; 62
    115e:	04 d0       	rcall	.+8      	; 0x1168 <__fixunssfdi+0x2>
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__fixsfdi+0x8>
    1162:	90 e8       	ldi	r25, 0x80	; 128
    1164:	08 95       	ret

00001166 <__fixunssfdi>:
    1166:	bf e3       	ldi	r27, 0x3F	; 63
    1168:	22 27       	eor	r18, r18
    116a:	33 27       	eor	r19, r19
    116c:	a9 01       	movw	r20, r18
    116e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_splitA>
    1172:	60 f1       	brcs	.+88     	; 0x11cc <__fixunssfdi+0x66>
    1174:	9f 57       	subi	r25, 0x7F	; 127
    1176:	48 f1       	brcs	.+82     	; 0x11ca <__fixunssfdi+0x64>
    1178:	b9 17       	cp	r27, r25
    117a:	40 f1       	brcs	.+80     	; 0x11cc <__fixunssfdi+0x66>
    117c:	bf e3       	ldi	r27, 0x3F	; 63
    117e:	b9 1b       	sub	r27, r25
    1180:	99 27       	eor	r25, r25
    1182:	b8 50       	subi	r27, 0x08	; 8
    1184:	3a f4       	brpl	.+14     	; 0x1194 <__fixunssfdi+0x2e>
    1186:	66 0f       	add	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	b3 95       	inc	r27
    1190:	d2 f3       	brmi	.-12     	; 0x1186 <__fixunssfdi+0x20>
    1192:	16 c0       	rjmp	.+44     	; 0x11c0 <__fixunssfdi+0x5a>
    1194:	b8 50       	subi	r27, 0x08	; 8
    1196:	4a f0       	brmi	.+18     	; 0x11aa <__fixunssfdi+0x44>
    1198:	23 2f       	mov	r18, r19
    119a:	34 2f       	mov	r19, r20
    119c:	45 2f       	mov	r20, r21
    119e:	56 2f       	mov	r21, r22
    11a0:	67 2f       	mov	r22, r23
    11a2:	78 2f       	mov	r23, r24
    11a4:	88 27       	eor	r24, r24
    11a6:	b8 50       	subi	r27, 0x08	; 8
    11a8:	ba f7       	brpl	.-18     	; 0x1198 <__fixunssfdi+0x32>
    11aa:	b8 5f       	subi	r27, 0xF8	; 248
    11ac:	49 f0       	breq	.+18     	; 0x11c0 <__fixunssfdi+0x5a>
    11ae:	86 95       	lsr	r24
    11b0:	77 95       	ror	r23
    11b2:	67 95       	ror	r22
    11b4:	57 95       	ror	r21
    11b6:	47 95       	ror	r20
    11b8:	37 95       	ror	r19
    11ba:	27 95       	ror	r18
    11bc:	ba 95       	dec	r27
    11be:	b9 f7       	brne	.-18     	; 0x11ae <__fixunssfdi+0x48>
    11c0:	16 f4       	brtc	.+4      	; 0x11c6 <__fixunssfdi+0x60>
    11c2:	0e 94 9d 09 	call	0x133a	; 0x133a <__fp_negdi>
    11c6:	88 94       	clc
    11c8:	08 95       	ret
    11ca:	88 94       	clc
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	cb 01       	movw	r24, r22
    11d2:	08 95       	ret

000011d4 <__fixunssfsi>:
    11d4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_splitA>
    11d8:	88 f0       	brcs	.+34     	; 0x11fc <__fixunssfsi+0x28>
    11da:	9f 57       	subi	r25, 0x7F	; 127
    11dc:	98 f0       	brcs	.+38     	; 0x1204 <__fixunssfsi+0x30>
    11de:	b9 2f       	mov	r27, r25
    11e0:	99 27       	eor	r25, r25
    11e2:	b7 51       	subi	r27, 0x17	; 23
    11e4:	b0 f0       	brcs	.+44     	; 0x1212 <__fixunssfsi+0x3e>
    11e6:	e1 f0       	breq	.+56     	; 0x1220 <__fixunssfsi+0x4c>
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	1a f0       	brmi	.+6      	; 0x11f8 <__fixunssfsi+0x24>
    11f2:	ba 95       	dec	r27
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__fixunssfsi+0x14>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <__fixunssfsi+0x4c>
    11f8:	b1 30       	cpi	r27, 0x01	; 1
    11fa:	91 f0       	breq	.+36     	; 0x1220 <__fixunssfsi+0x4c>
    11fc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__fp_zero>
    1200:	b1 e0       	ldi	r27, 0x01	; 1
    1202:	08 95       	ret
    1204:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_zero>
    1208:	67 2f       	mov	r22, r23
    120a:	78 2f       	mov	r23, r24
    120c:	88 27       	eor	r24, r24
    120e:	b8 5f       	subi	r27, 0xF8	; 248
    1210:	39 f0       	breq	.+14     	; 0x1220 <__fixunssfsi+0x4c>
    1212:	b9 3f       	cpi	r27, 0xF9	; 249
    1214:	cc f3       	brlt	.-14     	; 0x1208 <__fixunssfsi+0x34>
    1216:	86 95       	lsr	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	b3 95       	inc	r27
    121e:	d9 f7       	brne	.-10     	; 0x1216 <__fixunssfsi+0x42>
    1220:	3e f4       	brtc	.+14     	; 0x1230 <__fixunssfsi+0x5c>
    1222:	90 95       	com	r25
    1224:	80 95       	com	r24
    1226:	70 95       	com	r23
    1228:	61 95       	neg	r22
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	08 95       	ret

00001232 <__floatunsisf>:
    1232:	e8 94       	clt
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <__floatsisf+0x12>

00001236 <__floatsisf>:
    1236:	97 fb       	bst	r25, 7
    1238:	3e f4       	brtc	.+14     	; 0x1248 <__floatsisf+0x12>
    123a:	90 95       	com	r25
    123c:	80 95       	com	r24
    123e:	70 95       	com	r23
    1240:	61 95       	neg	r22
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	8f 4f       	sbci	r24, 0xFF	; 255
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	99 23       	and	r25, r25
    124a:	a9 f0       	breq	.+42     	; 0x1276 <__floatsisf+0x40>
    124c:	f9 2f       	mov	r31, r25
    124e:	96 e9       	ldi	r25, 0x96	; 150
    1250:	bb 27       	eor	r27, r27
    1252:	93 95       	inc	r25
    1254:	f6 95       	lsr	r31
    1256:	87 95       	ror	r24
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	b7 95       	ror	r27
    125e:	f1 11       	cpse	r31, r1
    1260:	f8 cf       	rjmp	.-16     	; 0x1252 <__floatsisf+0x1c>
    1262:	fa f4       	brpl	.+62     	; 0x12a2 <__floatsisf+0x6c>
    1264:	bb 0f       	add	r27, r27
    1266:	11 f4       	brne	.+4      	; 0x126c <__floatsisf+0x36>
    1268:	60 ff       	sbrs	r22, 0
    126a:	1b c0       	rjmp	.+54     	; 0x12a2 <__floatsisf+0x6c>
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	16 c0       	rjmp	.+44     	; 0x12a2 <__floatsisf+0x6c>
    1276:	88 23       	and	r24, r24
    1278:	11 f0       	breq	.+4      	; 0x127e <__floatsisf+0x48>
    127a:	96 e9       	ldi	r25, 0x96	; 150
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <__floatsisf+0x6a>
    127e:	77 23       	and	r23, r23
    1280:	21 f0       	breq	.+8      	; 0x128a <__floatsisf+0x54>
    1282:	9e e8       	ldi	r25, 0x8E	; 142
    1284:	87 2f       	mov	r24, r23
    1286:	76 2f       	mov	r23, r22
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <__floatsisf+0x5e>
    128a:	66 23       	and	r22, r22
    128c:	71 f0       	breq	.+28     	; 0x12aa <__floatsisf+0x74>
    128e:	96 e8       	ldi	r25, 0x86	; 134
    1290:	86 2f       	mov	r24, r22
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	2a f0       	brmi	.+10     	; 0x12a2 <__floatsisf+0x6c>
    1298:	9a 95       	dec	r25
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	da f7       	brpl	.-10     	; 0x1298 <__floatsisf+0x62>
    12a2:	88 0f       	add	r24, r24
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret

000012ac <__floatundisf>:
    12ac:	e8 94       	clt

000012ae <__fp_di2sf>:
    12ae:	f9 2f       	mov	r31, r25
    12b0:	96 eb       	ldi	r25, 0xB6	; 182
    12b2:	ff 23       	and	r31, r31
    12b4:	81 f0       	breq	.+32     	; 0x12d6 <__fp_di2sf+0x28>
    12b6:	12 16       	cp	r1, r18
    12b8:	13 06       	cpc	r1, r19
    12ba:	14 06       	cpc	r1, r20
    12bc:	44 0b       	sbc	r20, r20
    12be:	93 95       	inc	r25
    12c0:	f6 95       	lsr	r31
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	57 95       	ror	r21
    12ca:	40 40       	sbci	r20, 0x00	; 0
    12cc:	ff 23       	and	r31, r31
    12ce:	b9 f7       	brne	.-18     	; 0x12be <__fp_di2sf+0x10>
    12d0:	1b c0       	rjmp	.+54     	; 0x1308 <__fp_di2sf+0x5a>
    12d2:	99 27       	eor	r25, r25
    12d4:	08 95       	ret
    12d6:	88 23       	and	r24, r24
    12d8:	51 f4       	brne	.+20     	; 0x12ee <__fp_di2sf+0x40>
    12da:	98 50       	subi	r25, 0x08	; 8
    12dc:	d2 f7       	brpl	.-12     	; 0x12d2 <__fp_di2sf+0x24>
    12de:	87 2b       	or	r24, r23
    12e0:	76 2f       	mov	r23, r22
    12e2:	65 2f       	mov	r22, r21
    12e4:	54 2f       	mov	r21, r20
    12e6:	43 2f       	mov	r20, r19
    12e8:	32 2f       	mov	r19, r18
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	b1 f3       	breq	.-20     	; 0x12da <__fp_di2sf+0x2c>
    12ee:	12 16       	cp	r1, r18
    12f0:	13 06       	cpc	r1, r19
    12f2:	14 06       	cpc	r1, r20
    12f4:	44 0b       	sbc	r20, r20
    12f6:	88 23       	and	r24, r24
    12f8:	3a f0       	brmi	.+14     	; 0x1308 <__fp_di2sf+0x5a>
    12fa:	9a 95       	dec	r25
    12fc:	44 0f       	add	r20, r20
    12fe:	55 1f       	adc	r21, r21
    1300:	66 1f       	adc	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	ca f7       	brpl	.-14     	; 0x12fa <__fp_di2sf+0x4c>
    1308:	55 23       	and	r21, r21
    130a:	4a f4       	brpl	.+18     	; 0x131e <__fp_di2sf+0x70>
    130c:	44 0f       	add	r20, r20
    130e:	55 1f       	adc	r21, r21
    1310:	11 f4       	brne	.+4      	; 0x1316 <__fp_di2sf+0x68>
    1312:	60 ff       	sbrs	r22, 0
    1314:	04 c0       	rjmp	.+8      	; 0x131e <__fp_di2sf+0x70>
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	88 0f       	add	r24, r24
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	97 f9       	bld	r25, 7
    1326:	08 95       	ret

00001328 <__fp_inf>:
    1328:	97 f9       	bld	r25, 7
    132a:	9f 67       	ori	r25, 0x7F	; 127
    132c:	80 e8       	ldi	r24, 0x80	; 128
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	08 95       	ret

00001334 <__fp_nan>:
    1334:	9f ef       	ldi	r25, 0xFF	; 255
    1336:	80 ec       	ldi	r24, 0xC0	; 192
    1338:	08 95       	ret

0000133a <__fp_negdi>:
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	60 95       	com	r22
    1342:	50 95       	com	r21
    1344:	40 95       	com	r20
    1346:	30 95       	com	r19
    1348:	21 95       	neg	r18
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	4f 4f       	sbci	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	6f 4f       	sbci	r22, 0xFF	; 255
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	08 95       	ret

0000135a <__fp_pscA>:
    135a:	00 24       	eor	r0, r0
    135c:	0a 94       	dec	r0
    135e:	16 16       	cp	r1, r22
    1360:	17 06       	cpc	r1, r23
    1362:	18 06       	cpc	r1, r24
    1364:	09 06       	cpc	r0, r25
    1366:	08 95       	ret

00001368 <__fp_pscB>:
    1368:	00 24       	eor	r0, r0
    136a:	0a 94       	dec	r0
    136c:	12 16       	cp	r1, r18
    136e:	13 06       	cpc	r1, r19
    1370:	14 06       	cpc	r1, r20
    1372:	05 06       	cpc	r0, r21
    1374:	08 95       	ret

00001376 <__fp_round>:
    1376:	09 2e       	mov	r0, r25
    1378:	03 94       	inc	r0
    137a:	00 0c       	add	r0, r0
    137c:	11 f4       	brne	.+4      	; 0x1382 <__fp_round+0xc>
    137e:	88 23       	and	r24, r24
    1380:	52 f0       	brmi	.+20     	; 0x1396 <__fp_round+0x20>
    1382:	bb 0f       	add	r27, r27
    1384:	40 f4       	brcc	.+16     	; 0x1396 <__fp_round+0x20>
    1386:	bf 2b       	or	r27, r31
    1388:	11 f4       	brne	.+4      	; 0x138e <__fp_round+0x18>
    138a:	60 ff       	sbrs	r22, 0
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <__fp_round+0x20>
    138e:	6f 5f       	subi	r22, 0xFF	; 255
    1390:	7f 4f       	sbci	r23, 0xFF	; 255
    1392:	8f 4f       	sbci	r24, 0xFF	; 255
    1394:	9f 4f       	sbci	r25, 0xFF	; 255
    1396:	08 95       	ret

00001398 <__fp_split3>:
    1398:	57 fd       	sbrc	r21, 7
    139a:	90 58       	subi	r25, 0x80	; 128
    139c:	44 0f       	add	r20, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	59 f0       	breq	.+22     	; 0x13b8 <__fp_splitA+0x10>
    13a2:	5f 3f       	cpi	r21, 0xFF	; 255
    13a4:	71 f0       	breq	.+28     	; 0x13c2 <__fp_splitA+0x1a>
    13a6:	47 95       	ror	r20

000013a8 <__fp_splitA>:
    13a8:	88 0f       	add	r24, r24
    13aa:	97 fb       	bst	r25, 7
    13ac:	99 1f       	adc	r25, r25
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <__fp_splitA+0x20>
    13b0:	9f 3f       	cpi	r25, 0xFF	; 255
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <__fp_splitA+0x2a>
    13b4:	87 95       	ror	r24
    13b6:	08 95       	ret
    13b8:	12 16       	cp	r1, r18
    13ba:	13 06       	cpc	r1, r19
    13bc:	14 06       	cpc	r1, r20
    13be:	55 1f       	adc	r21, r21
    13c0:	f2 cf       	rjmp	.-28     	; 0x13a6 <__fp_split3+0xe>
    13c2:	46 95       	lsr	r20
    13c4:	f1 df       	rcall	.-30     	; 0x13a8 <__fp_splitA>
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <__fp_splitA+0x30>
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	18 06       	cpc	r1, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	f1 cf       	rjmp	.-30     	; 0x13b4 <__fp_splitA+0xc>
    13d2:	86 95       	lsr	r24
    13d4:	71 05       	cpc	r23, r1
    13d6:	61 05       	cpc	r22, r1
    13d8:	08 94       	sec
    13da:	08 95       	ret

000013dc <__fp_zero>:
    13dc:	e8 94       	clt

000013de <__fp_szero>:
    13de:	bb 27       	eor	r27, r27
    13e0:	66 27       	eor	r22, r22
    13e2:	77 27       	eor	r23, r23
    13e4:	cb 01       	movw	r24, r22
    13e6:	97 f9       	bld	r25, 7
    13e8:	08 95       	ret

000013ea <__mulsf3>:
    13ea:	0e 94 08 0a 	call	0x1410	; 0x1410 <__mulsf3x>
    13ee:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__fp_round>
    13f2:	0e 94 ad 09 	call	0x135a	; 0x135a <__fp_pscA>
    13f6:	38 f0       	brcs	.+14     	; 0x1406 <__mulsf3+0x1c>
    13f8:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_pscB>
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <__mulsf3+0x1c>
    13fe:	95 23       	and	r25, r21
    1400:	11 f0       	breq	.+4      	; 0x1406 <__mulsf3+0x1c>
    1402:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    1406:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_nan>
    140a:	11 24       	eor	r1, r1
    140c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_szero>

00001410 <__mulsf3x>:
    1410:	0e 94 cc 09 	call	0x1398	; 0x1398 <__fp_split3>
    1414:	70 f3       	brcs	.-36     	; 0x13f2 <__mulsf3+0x8>

00001416 <__mulsf3_pse>:
    1416:	95 9f       	mul	r25, r21
    1418:	c1 f3       	breq	.-16     	; 0x140a <__mulsf3+0x20>
    141a:	95 0f       	add	r25, r21
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	55 1f       	adc	r21, r21
    1420:	62 9f       	mul	r22, r18
    1422:	f0 01       	movw	r30, r0
    1424:	72 9f       	mul	r23, r18
    1426:	bb 27       	eor	r27, r27
    1428:	f0 0d       	add	r31, r0
    142a:	b1 1d       	adc	r27, r1
    142c:	63 9f       	mul	r22, r19
    142e:	aa 27       	eor	r26, r26
    1430:	f0 0d       	add	r31, r0
    1432:	b1 1d       	adc	r27, r1
    1434:	aa 1f       	adc	r26, r26
    1436:	64 9f       	mul	r22, r20
    1438:	66 27       	eor	r22, r22
    143a:	b0 0d       	add	r27, r0
    143c:	a1 1d       	adc	r26, r1
    143e:	66 1f       	adc	r22, r22
    1440:	82 9f       	mul	r24, r18
    1442:	22 27       	eor	r18, r18
    1444:	b0 0d       	add	r27, r0
    1446:	a1 1d       	adc	r26, r1
    1448:	62 1f       	adc	r22, r18
    144a:	73 9f       	mul	r23, r19
    144c:	b0 0d       	add	r27, r0
    144e:	a1 1d       	adc	r26, r1
    1450:	62 1f       	adc	r22, r18
    1452:	83 9f       	mul	r24, r19
    1454:	a0 0d       	add	r26, r0
    1456:	61 1d       	adc	r22, r1
    1458:	22 1f       	adc	r18, r18
    145a:	74 9f       	mul	r23, r20
    145c:	33 27       	eor	r19, r19
    145e:	a0 0d       	add	r26, r0
    1460:	61 1d       	adc	r22, r1
    1462:	23 1f       	adc	r18, r19
    1464:	84 9f       	mul	r24, r20
    1466:	60 0d       	add	r22, r0
    1468:	21 1d       	adc	r18, r1
    146a:	82 2f       	mov	r24, r18
    146c:	76 2f       	mov	r23, r22
    146e:	6a 2f       	mov	r22, r26
    1470:	11 24       	eor	r1, r1
    1472:	9f 57       	subi	r25, 0x7F	; 127
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	9a f0       	brmi	.+38     	; 0x149e <__mulsf3_pse+0x88>
    1478:	f1 f0       	breq	.+60     	; 0x14b6 <__mulsf3_pse+0xa0>
    147a:	88 23       	and	r24, r24
    147c:	4a f0       	brmi	.+18     	; 0x1490 <__mulsf3_pse+0x7a>
    147e:	ee 0f       	add	r30, r30
    1480:	ff 1f       	adc	r31, r31
    1482:	bb 1f       	adc	r27, r27
    1484:	66 1f       	adc	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	91 50       	subi	r25, 0x01	; 1
    148c:	50 40       	sbci	r21, 0x00	; 0
    148e:	a9 f7       	brne	.-22     	; 0x147a <__mulsf3_pse+0x64>
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	51 05       	cpc	r21, r1
    1494:	80 f0       	brcs	.+32     	; 0x14b6 <__mulsf3_pse+0xa0>
    1496:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_inf>
    149a:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__fp_szero>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	e4 f3       	brlt	.-8      	; 0x149a <__mulsf3_pse+0x84>
    14a2:	98 3e       	cpi	r25, 0xE8	; 232
    14a4:	d4 f3       	brlt	.-12     	; 0x149a <__mulsf3_pse+0x84>
    14a6:	86 95       	lsr	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	e7 95       	ror	r30
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
    14b4:	c1 f7       	brne	.-16     	; 0x14a6 <__mulsf3_pse+0x90>
    14b6:	fe 2b       	or	r31, r30
    14b8:	88 0f       	add	r24, r24
    14ba:	91 1d       	adc	r25, r1
    14bc:	96 95       	lsr	r25
    14be:	87 95       	ror	r24
    14c0:	97 f9       	bld	r25, 7
    14c2:	08 95       	ret

000014c4 <__adddi3_s8>:
    14c4:	00 24       	eor	r0, r0
    14c6:	a7 fd       	sbrc	r26, 7
    14c8:	00 94       	com	r0
    14ca:	2a 0f       	add	r18, r26
    14cc:	30 1d       	adc	r19, r0
    14ce:	40 1d       	adc	r20, r0
    14d0:	50 1d       	adc	r21, r0
    14d2:	60 1d       	adc	r22, r0
    14d4:	70 1d       	adc	r23, r0
    14d6:	80 1d       	adc	r24, r0
    14d8:	90 1d       	adc	r25, r0
    14da:	08 95       	ret

000014dc <_exit>:
    14dc:	f8 94       	cli

000014de <__stop_program>:
    14de:	ff cf       	rjmp	.-2      	; 0x14de <__stop_program>
