
AWHUBADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00803e00  0000192d  000019e1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000001  0000992c  0000192c  000019e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000e8  00803e32  00803e32  00001a13  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001a13  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a44  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  00001a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000069fc  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000282a  00000000  00000000  0000872c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021f4  00000000  00000000  0000af56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000498  00000000  00000000  0000d14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000238d  00000000  00000000  0000d5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002012  00000000  00000000  0000f971  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d8  00000000  00000000  00011983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	43 c0       	rjmp	.+134    	; 0x8e <__vector_3>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__vector_7>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	ed e2       	ldi	r30, 0x2D	; 45
      48:	f9 e1       	ldi	r31, 0x19	; 25
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a2 33       	cpi	r26, 0x32	; 50
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2f e3       	ldi	r18, 0x3F	; 63
      58:	a2 e3       	ldi	r26, 0x32	; 50
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	aa 31       	cpi	r26, 0x1A	; 26
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	22 d0       	rcall	.+68     	; 0xac <main>
      68:	5f cc       	rjmp	.-1858   	; 0xfffff928 <__eeprom_end+0xff7ef928>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      6c:	85 d7       	rcall	.+3850   	; 0xf78 <system_init>
      6e:	08 95       	ret

00000070 <__vector_7>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_PIT_vect)
{
      70:	1f 92       	push	r1
      72:	0f 92       	push	r0
      74:	0f b6       	in	r0, 0x3f	; 63
      76:	0f 92       	push	r0
      78:	11 24       	eor	r1, r1
      7a:	8f 93       	push	r24
	/* Insert your PIT interrupt handling code here */

	/* The interrupt flag has to be cleared manually */
	RTC.PITINTFLAGS = RTC_PI_bm;
      7c:	81 e0       	ldi	r24, 0x01	; 1
      7e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <payloadBufferStartByte+0x7f6827>
}
      82:	8f 91       	pop	r24
      84:	0f 90       	pop	r0
      86:	0f be       	out	0x3f, r0	; 63
      88:	0f 90       	pop	r0
      8a:	1f 90       	pop	r1
      8c:	18 95       	reti

0000008e <__vector_3>:

ISR(PORTA_PORT_vect)
{
      8e:	1f 92       	push	r1
      90:	0f 92       	push	r0
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	0f 92       	push	r0
      96:	11 24       	eor	r1, r1
      98:	8f 93       	push	r24
	PORTA.INTFLAGS = PORT_INT_gm;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <payloadBufferStartByte+0x7f6add>
}
      a0:	8f 91       	pop	r24
      a2:	0f 90       	pop	r0
      a4:	0f be       	out	0x3f, r0	; 63
      a6:	0f 90       	pop	r0
      a8:	1f 90       	pop	r1
      aa:	18 95       	reti

000000ac <main>:
int8_t overSampleThresholdValue = 0;

#define SAMPLE_COUNT 128

int main(void)
{
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29
      b0:	cd b7       	in	r28, 0x3d	; 61
      b2:	de b7       	in	r29, 0x3e	; 62
      b4:	6f 97       	sbiw	r28, 0x1f	; 31
      b6:	cd bf       	out	0x3d, r28	; 61
      b8:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      ba:	d8 df       	rcall	.-80     	; 0x6c <atmel_start_init>
	
	uint8_t startupDelay = 200;
	
	bool lock = false;
      bc:	90 e0       	ldi	r25, 0x00	; 0
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
	
	uint8_t startupDelay = 200;
      be:	88 ec       	ldi	r24, 0xC8	; 200
	
	bool lock = false;
	while (startupDelay--)
      c0:	13 c0       	rjmp	.+38     	; 0xe8 <main+0x3c>
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
      c2:	8a b1       	in	r24, 0x0a	; 10
      c4:	80 61       	ori	r24, 0x10	; 16
      c6:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c8:	a7 ea       	ldi	r26, 0xA7	; 167
      ca:	b1 e6       	ldi	r27, 0x61	; 97
      cc:	11 97       	sbiw	r26, 0x01	; 1
      ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x20>
      d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x26>
      d2:	00 00       	nop
	{
		DATA_toggle_level();
		_delay_ms(20);
		if(CBT_get_level() == false && lock == false)
      d4:	13 99       	sbic	0x02, 3	; 2
      d6:	07 c0       	rjmp	.+14     	; 0xe6 <main+0x3a>
      d8:	91 11       	cpse	r25, r1
      da:	05 c0       	rjmp	.+10     	; 0xe6 <main+0x3a>
		{
			lock = true;
			FLASH_0_write_eeprom_byte(0, 100);
      dc:	64 e6       	ldi	r22, 0x64	; 100
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	b1 d7       	rcall	.+3938   	; 0x1046 <FLASH_0_write_eeprom_byte>
	{
		DATA_toggle_level();
		_delay_ms(20);
		if(CBT_get_level() == false && lock == false)
		{
			lock = true;
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	89 81       	ldd	r24, Y+1	; 0x01
	atmel_start_init();
	
	uint8_t startupDelay = 200;
	
	bool lock = false;
	while (startupDelay--)
      e8:	44 24       	eor	r4, r4
      ea:	4a 94       	dec	r4
      ec:	48 0e       	add	r4, r24
      ee:	49 82       	std	Y+1, r4	; 0x01
      f0:	81 11       	cpse	r24, r1
      f2:	e7 cf       	rjmp	.-50     	; 0xc2 <main+0x16>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
      f4:	89 b1       	in	r24, 0x09	; 9
      f6:	80 61       	ori	r24, 0x10	; 16
      f8:	89 b9       	out	0x09, r24	; 9
			FLASH_0_write_eeprom_byte(0, 100);
		}
	}
	DATA_set_level(true);
	
	batVar = FLASH_0_read_eeprom_byte(0);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	9f d7       	rcall	.+3902   	; 0x103e <FLASH_0_read_eeprom_byte>
     100:	89 83       	std	Y+1, r24	; 0x01
     102:	80 93 33 3e 	sts	0x3E33, r24	; 0x803e33 <batVar>
	BatteryLevelCounter *= batVar > 100 ? 1 : (((float)batVar) / 100.0f);  
     106:	20 91 06 3e 	lds	r18, 0x3E06	; 0x803e06 <BatteryLevelCounter>
     10a:	30 91 07 3e 	lds	r19, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x1>
     10e:	40 91 08 3e 	lds	r20, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x2>
     112:	50 91 09 3e 	lds	r21, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x3>
     116:	60 91 0a 3e 	lds	r22, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x4>
     11a:	70 91 0b 3e 	lds	r23, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x5>
     11e:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x6>
     122:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <BatteryLevelCounter+0x7>
     126:	b8 da       	rcall	.-2704   	; 0xfffff698 <__eeprom_end+0xff7ef698>
     128:	6b 01       	movw	r12, r22
     12a:	7c 01       	movw	r14, r24
     12c:	29 81       	ldd	r18, Y+1	; 0x01
     12e:	25 36       	cpi	r18, 0x65	; 101
     130:	58 f4       	brcc	.+22     	; 0x148 <main+0x9c>
     132:	62 2f       	mov	r22, r18
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	71 da       	rcall	.-2846   	; 0xfffff61e <__eeprom_end+0xff7ef61e>
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	48 ec       	ldi	r20, 0xC8	; 200
     142:	52 e4       	ldi	r21, 0x42	; 66
     144:	8f d9       	rcall	.-3298   	; 0xfffff464 <__eeprom_end+0xff7ef464>
     146:	04 c0       	rjmp	.+8      	; 0x150 <main+0xa4>
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	80 e8       	ldi	r24, 0x80	; 128
     14e:	9f e3       	ldi	r25, 0x3F	; 63
     150:	a7 01       	movw	r20, r14
     152:	96 01       	movw	r18, r12
     154:	40 db       	rcall	.-2432   	; 0xfffff7d6 <__eeprom_end+0xff7ef7d6>
     156:	fd d9       	rcall	.-3078   	; 0xfffff552 <__eeprom_end+0xff7ef552>
     158:	20 93 06 3e 	sts	0x3E06, r18	; 0x803e06 <BatteryLevelCounter>
     15c:	30 93 07 3e 	sts	0x3E07, r19	; 0x803e07 <BatteryLevelCounter+0x1>
     160:	40 93 08 3e 	sts	0x3E08, r20	; 0x803e08 <BatteryLevelCounter+0x2>
     164:	50 93 09 3e 	sts	0x3E09, r21	; 0x803e09 <BatteryLevelCounter+0x3>
     168:	60 93 0a 3e 	sts	0x3E0A, r22	; 0x803e0a <BatteryLevelCounter+0x4>
     16c:	70 93 0b 3e 	sts	0x3E0B, r23	; 0x803e0b <BatteryLevelCounter+0x5>
     170:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <BatteryLevelCounter+0x6>
     174:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <BatteryLevelCounter+0x7>
	
	TOUCH_GetSensorValue(0, false);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	08 d9       	rcall	.-3568   	; 0xfffff38e <__eeprom_end+0xff7ef38e>
	
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 3 : 1;
     17e:	15 99       	sbic	0x02, 5	; 2
     180:	05 c0       	rjmp	.+10     	; 0x18c <main+0xe0>
     182:	35 99       	sbic	0x06, 5	; 6
     184:	06 c0       	rjmp	.+12     	; 0x192 <main+0xe6>
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	05 c0       	rjmp	.+10     	; 0x196 <main+0xea>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <main+0xea>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	40 91 00 3e 	lds	r20, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     19a:	50 91 01 3e 	lds	r21, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     19e:	48 9f       	mul	r20, r24
     1a0:	90 01       	movw	r18, r0
     1a2:	49 9f       	mul	r20, r25
     1a4:	30 0d       	add	r19, r0
     1a6:	58 9f       	mul	r21, r24
     1a8:	30 0d       	add	r19, r0
     1aa:	11 24       	eor	r1, r1
     1ac:	20 93 00 3e 	sts	0x3E00, r18	; 0x803e00 <__DATA_REGION_ORIGIN__>
     1b0:	30 93 01 3e 	sts	0x3E01, r19	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 1 : -1;
     1b4:	15 99       	sbic	0x02, 5	; 2
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <main+0x114>
     1b8:	35 99       	sbic	0x06, 5	; 6
     1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <main+0x118>
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	03 c0       	rjmp	.+6      	; 0x1c6 <main+0x11a>
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <main+0x11a>
     1c4:	8f ef       	ldi	r24, 0xFF	; 255
     1c6:	80 93 32 3e 	sts	0x3E32, r24	; 0x803e32 <__data_end>
	QTOUCHADC_REFERANCE_FILTER_P1.FilterValue = QTOUCHADC_REFERANCE_FILTER_P2.FilterValue *= !PSD1_get_level() && !PSD2_get_level() ? 2 : 1;
     1ca:	15 99       	sbic	0x02, 5	; 2
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <main+0x12a>
     1ce:	35 99       	sbic	0x06, 5	; 6
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <main+0x12e>
     1d2:	92 e0       	ldi	r25, 0x02	; 2
     1d4:	03 c0       	rjmp	.+6      	; 0x1dc <main+0x130>
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <main+0x130>
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	ee e0       	ldi	r30, 0x0E	; 14
     1de:	fe e3       	ldi	r31, 0x3E	; 62
     1e0:	80 85       	ldd	r24, Z+8	; 0x08
     1e2:	89 9f       	mul	r24, r25
     1e4:	80 2d       	mov	r24, r0
     1e6:	11 24       	eor	r1, r1
     1e8:	80 87       	std	Z+8, r24	; 0x08
     1ea:	80 93 1f 3e 	sts	0x3E1F, r24	; 0x803e1f <QTOUCHADC_REFERANCE_FILTER_P1+0x8>
	uint8_t refPConst = !PSD1_get_level() && !PSD2_get_level() ? 45 : 15;
     1ee:	15 99       	sbic	0x02, 5	; 2
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <main+0x150>
     1f2:	35 99       	sbic	0x06, 5	; 6
     1f4:	06 c0       	rjmp	.+12     	; 0x202 <__DATA_REGION_LENGTH__+0x2>
     1f6:	3d e2       	ldi	r19, 0x2D	; 45
     1f8:	39 83       	std	Y+1, r19	; 0x01
     1fa:	05 c0       	rjmp	.+10     	; 0x206 <__DATA_REGION_LENGTH__+0x6>
     1fc:	4f e0       	ldi	r20, 0x0F	; 15
     1fe:	49 83       	std	Y+1, r20	; 0x01
     200:	02 c0       	rjmp	.+4      	; 0x206 <__DATA_REGION_LENGTH__+0x6>
     202:	8f e0       	ldi	r24, 0x0F	; 15
     204:	89 83       	std	Y+1, r24	; 0x01
	
	int64_t T_refP1 = 0, T_refP2 = 0;
	int64_t T_refP1_F = 0, T_refP2_F = 0;
	
	uint8_t firstWhileLoop = 50;
     206:	0f 2e       	mov	r0, r31
     208:	f2 e3       	ldi	r31, 0x32	; 50
     20a:	2f 2e       	mov	r2, r31
     20c:	f0 2d       	mov	r31, r0
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 1 : -1;
	QTOUCHADC_REFERANCE_FILTER_P1.FilterValue = QTOUCHADC_REFERANCE_FILTER_P2.FilterValue *= !PSD1_get_level() && !PSD2_get_level() ? 2 : 1;
	uint8_t refPConst = !PSD1_get_level() && !PSD2_get_level() ? 45 : 15;
	
	int64_t T_refP1 = 0, T_refP2 = 0;
	int64_t T_refP1_F = 0, T_refP2_F = 0;
     20e:	1e 8a       	std	Y+22, r1	; 0x16
     210:	1f 8a       	std	Y+23, r1	; 0x17
     212:	18 8e       	std	Y+24, r1	; 0x18
     214:	19 8e       	std	Y+25, r1	; 0x19
     216:	1a 8e       	std	Y+26, r1	; 0x1a
     218:	1b 8e       	std	Y+27, r1	; 0x1b
     21a:	1c 8e       	std	Y+28, r1	; 0x1c
     21c:	1d 8e       	std	Y+29, r1	; 0x1d
     21e:	1e 86       	std	Y+14, r1	; 0x0e
     220:	1f 86       	std	Y+15, r1	; 0x0f
     222:	18 8a       	std	Y+16, r1	; 0x10
     224:	19 8a       	std	Y+17, r1	; 0x11
     226:	1a 8a       	std	Y+18, r1	; 0x12
     228:	1b 8a       	std	Y+19, r1	; 0x13
     22a:	1c 8a       	std	Y+20, r1	; 0x14
     22c:	1d 8a       	std	Y+21, r1	; 0x15
	negativeThresholdValue *= !PSD1_get_level() && !PSD2_get_level() ? 3 : 1;
	overSampleThresholdValue = !PSD1_get_level() && !PSD2_get_level() ? 1 : -1;
	QTOUCHADC_REFERANCE_FILTER_P1.FilterValue = QTOUCHADC_REFERANCE_FILTER_P2.FilterValue *= !PSD1_get_level() && !PSD2_get_level() ? 2 : 1;
	uint8_t refPConst = !PSD1_get_level() && !PSD2_get_level() ? 45 : 15;
	
	int64_t T_refP1 = 0, T_refP2 = 0;
     22e:	1e 82       	std	Y+6, r1	; 0x06
     230:	1f 82       	std	Y+7, r1	; 0x07
     232:	18 86       	std	Y+8, r1	; 0x08
     234:	19 86       	std	Y+9, r1	; 0x09
     236:	1a 86       	std	Y+10, r1	; 0x0a
     238:	1b 86       	std	Y+11, r1	; 0x0b
     23a:	1c 86       	std	Y+12, r1	; 0x0c
     23c:	1d 86       	std	Y+13, r1	; 0x0d
     23e:	1d 82       	std	Y+5, r1	; 0x05
     240:	31 2c       	mov	r3, r1
     242:	41 2c       	mov	r4, r1
     244:	61 2c       	mov	r6, r1
     246:	71 2c       	mov	r7, r1
     248:	81 2c       	mov	r8, r1
     24a:	91 2c       	mov	r9, r1
     24c:	1e 8e       	std	Y+30, r1	; 0x1e
     24e:	a1 2c       	mov	r10, r1
     250:	af 8e       	std	Y+31, r10	; 0x1f
	int64_t T_refP1_F = 0, T_refP2_F = 0;
	
	uint8_t firstWhileLoop = 50;
	while (--firstWhileLoop)
     252:	7d c1       	rjmp	.+762    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
	{
		for (uint8_t j = 0; j < 4; j++)
		{
			whileLoopCycle = SAMPLE_COUNT;
     254:	80 e8       	ldi	r24, 0x80	; 128
     256:	80 93 35 3e 	sts	0x3E35, r24	; 0x803e35 <whileLoopCycle>
			while(whileLoopCycle--)
     25a:	2e c0       	rjmp	.+92     	; 0x2b8 <__DATA_REGION_LENGTH__+0xb8>
			{
				ref1 += TOUCH_GetSensorValue(0, false);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	96 d8       	rcall	.-3796   	; 0xfffff38e <__eeprom_end+0xff7ef38e>
     262:	40 91 43 3e 	lds	r20, 0x3E43	; 0x803e43 <ref1>
     266:	50 91 44 3e 	lds	r21, 0x3E44	; 0x803e44 <ref1+0x1>
     26a:	60 91 45 3e 	lds	r22, 0x3E45	; 0x803e45 <ref1+0x2>
     26e:	70 91 46 3e 	lds	r23, 0x3E46	; 0x803e46 <ref1+0x3>
     272:	48 0f       	add	r20, r24
     274:	59 1f       	adc	r21, r25
     276:	61 1d       	adc	r22, r1
     278:	71 1d       	adc	r23, r1
     27a:	40 93 43 3e 	sts	0x3E43, r20	; 0x803e43 <ref1>
     27e:	50 93 44 3e 	sts	0x3E44, r21	; 0x803e44 <ref1+0x1>
     282:	60 93 45 3e 	sts	0x3E45, r22	; 0x803e45 <ref1+0x2>
     286:	70 93 46 3e 	sts	0x3E46, r23	; 0x803e46 <ref1+0x3>
				ref2 += TOUCH_GetSensorValue(0, true);
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	7f d8       	rcall	.-3842   	; 0xfffff38e <__eeprom_end+0xff7ef38e>
     290:	40 91 3f 3e 	lds	r20, 0x3E3F	; 0x803e3f <ref2>
     294:	50 91 40 3e 	lds	r21, 0x3E40	; 0x803e40 <ref2+0x1>
     298:	60 91 41 3e 	lds	r22, 0x3E41	; 0x803e41 <ref2+0x2>
     29c:	70 91 42 3e 	lds	r23, 0x3E42	; 0x803e42 <ref2+0x3>
     2a0:	48 0f       	add	r20, r24
     2a2:	59 1f       	adc	r21, r25
     2a4:	61 1d       	adc	r22, r1
     2a6:	71 1d       	adc	r23, r1
     2a8:	40 93 3f 3e 	sts	0x3E3F, r20	; 0x803e3f <ref2>
     2ac:	50 93 40 3e 	sts	0x3E40, r21	; 0x803e40 <ref2+0x1>
     2b0:	60 93 41 3e 	sts	0x3E41, r22	; 0x803e41 <ref2+0x2>
     2b4:	70 93 42 3e 	sts	0x3E42, r23	; 0x803e42 <ref2+0x3>
	while (--firstWhileLoop)
	{
		for (uint8_t j = 0; j < 4; j++)
		{
			whileLoopCycle = SAMPLE_COUNT;
			while(whileLoopCycle--)
     2b8:	80 91 35 3e 	lds	r24, 0x3E35	; 0x803e35 <whileLoopCycle>
     2bc:	9f ef       	ldi	r25, 0xFF	; 255
     2be:	98 0f       	add	r25, r24
     2c0:	90 93 35 3e 	sts	0x3E35, r25	; 0x803e35 <whileLoopCycle>
     2c4:	81 11       	cpse	r24, r1
     2c6:	ca cf       	rjmp	.-108    	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
			{
				ref1 += TOUCH_GetSensorValue(0, false);
				ref2 += TOUCH_GetSensorValue(0, true);
			}
			ref1 >>= (2 + overSampleThresholdValue);
     2c8:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <__data_end>
     2cc:	08 2e       	mov	r0, r24
     2ce:	00 0c       	add	r0, r0
     2d0:	99 0b       	sbc	r25, r25
     2d2:	02 96       	adiw	r24, 0x02	; 2
     2d4:	40 91 43 3e 	lds	r20, 0x3E43	; 0x803e43 <ref1>
     2d8:	50 91 44 3e 	lds	r21, 0x3E44	; 0x803e44 <ref1+0x1>
     2dc:	60 91 45 3e 	lds	r22, 0x3E45	; 0x803e45 <ref1+0x2>
     2e0:	70 91 46 3e 	lds	r23, 0x3E46	; 0x803e46 <ref1+0x3>
     2e4:	8a 01       	movw	r16, r20
     2e6:	9b 01       	movw	r18, r22
     2e8:	08 2e       	mov	r0, r24
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <__DATA_REGION_LENGTH__+0xf4>
     2ec:	35 95       	asr	r19
     2ee:	27 95       	ror	r18
     2f0:	17 95       	ror	r17
     2f2:	07 95       	ror	r16
     2f4:	0a 94       	dec	r0
     2f6:	d2 f7       	brpl	.-12     	; 0x2ec <__DATA_REGION_LENGTH__+0xec>
			ref2 >>= (2 + overSampleThresholdValue);
     2f8:	40 91 3f 3e 	lds	r20, 0x3E3F	; 0x803e3f <ref2>
     2fc:	50 91 40 3e 	lds	r21, 0x3E40	; 0x803e40 <ref2+0x1>
     300:	60 91 41 3e 	lds	r22, 0x3E41	; 0x803e41 <ref2+0x2>
     304:	70 91 42 3e 	lds	r23, 0x3E42	; 0x803e42 <ref2+0x3>
     308:	5a 01       	movw	r10, r20
     30a:	6b 01       	movw	r12, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__DATA_REGION_LENGTH__+0x116>
     30e:	d5 94       	asr	r13
     310:	c7 94       	ror	r12
     312:	b7 94       	ror	r11
     314:	a7 94       	ror	r10
     316:	8a 95       	dec	r24
     318:	d2 f7       	brpl	.-12     	; 0x30e <__DATA_REGION_LENGTH__+0x10e>
		
			//refP1 = refP1 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP1;
			T_refP1 += (int64_t)(ref1 - ref2);
     31a:	78 01       	movw	r14, r16
     31c:	89 01       	movw	r16, r18
     31e:	ea 18       	sub	r14, r10
     320:	fb 08       	sbc	r15, r11
     322:	0c 09       	sbc	r16, r12
     324:	1d 09       	sbc	r17, r13
     326:	d8 01       	movw	r26, r16
     328:	c7 01       	movw	r24, r14
     32a:	bb 0f       	add	r27, r27
     32c:	88 0b       	sbc	r24, r24
     32e:	98 2f       	mov	r25, r24
     330:	dc 01       	movw	r26, r24
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	9a 83       	std	Y+2, r25	; 0x02
     336:	ab 83       	std	Y+3, r26	; 0x03
     338:	bc 83       	std	Y+4, r27	; 0x04
     33a:	2d 81       	ldd	r18, Y+5	; 0x05
     33c:	33 2d       	mov	r19, r3
     33e:	44 2d       	mov	r20, r4
     340:	56 2d       	mov	r21, r6
     342:	67 2d       	mov	r22, r7
     344:	78 2d       	mov	r23, r8
     346:	89 2d       	mov	r24, r9
     348:	9f 8d       	ldd	r25, Y+31	; 0x1f
     34a:	ae 2c       	mov	r10, r14
     34c:	bf 2c       	mov	r11, r15
     34e:	c0 2e       	mov	r12, r16
     350:	d1 2e       	mov	r13, r17
     352:	e9 80       	ldd	r14, Y+1	; 0x01
     354:	fe 2c       	mov	r15, r14
     356:	0e 2d       	mov	r16, r14
     358:	1e 2d       	mov	r17, r14
     35a:	c8 da       	rcall	.-2672   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     35c:	2d 83       	std	Y+5, r18	; 0x05
     35e:	33 2e       	mov	r3, r19
     360:	44 2e       	mov	r4, r20
     362:	65 2e       	mov	r6, r21
     364:	76 2e       	mov	r7, r22
     366:	87 2e       	mov	r8, r23
     368:	98 2e       	mov	r9, r24
     36a:	9f 8f       	std	Y+31, r25	; 0x1f
			ref1 = ref2 = 0;
     36c:	10 92 3f 3e 	sts	0x3E3F, r1	; 0x803e3f <ref2>
     370:	10 92 40 3e 	sts	0x3E40, r1	; 0x803e40 <ref2+0x1>
     374:	10 92 41 3e 	sts	0x3E41, r1	; 0x803e41 <ref2+0x2>
     378:	10 92 42 3e 	sts	0x3E42, r1	; 0x803e42 <ref2+0x3>
     37c:	10 92 43 3e 	sts	0x3E43, r1	; 0x803e43 <ref1>
     380:	10 92 44 3e 	sts	0x3E44, r1	; 0x803e44 <ref1+0x1>
     384:	10 92 45 3e 	sts	0x3E45, r1	; 0x803e45 <ref1+0x2>
     388:	10 92 46 3e 	sts	0x3E46, r1	; 0x803e46 <ref1+0x3>
		
			whileLoopCycle = SAMPLE_COUNT;
     38c:	80 e8       	ldi	r24, 0x80	; 128
     38e:	80 93 35 3e 	sts	0x3E35, r24	; 0x803e35 <whileLoopCycle>
			while(whileLoopCycle--)
     392:	2e c0       	rjmp	.+92     	; 0x3f0 <__DATA_REGION_LENGTH__+0x1f0>
			{
				ref1 += TOUCH_GetSensorValue(1, false);
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	fa d7       	rcall	.+4084   	; 0x138e <TOUCH_GetSensorValue>
     39a:	40 91 43 3e 	lds	r20, 0x3E43	; 0x803e43 <ref1>
     39e:	50 91 44 3e 	lds	r21, 0x3E44	; 0x803e44 <ref1+0x1>
     3a2:	60 91 45 3e 	lds	r22, 0x3E45	; 0x803e45 <ref1+0x2>
     3a6:	70 91 46 3e 	lds	r23, 0x3E46	; 0x803e46 <ref1+0x3>
     3aa:	48 0f       	add	r20, r24
     3ac:	59 1f       	adc	r21, r25
     3ae:	61 1d       	adc	r22, r1
     3b0:	71 1d       	adc	r23, r1
     3b2:	40 93 43 3e 	sts	0x3E43, r20	; 0x803e43 <ref1>
     3b6:	50 93 44 3e 	sts	0x3E44, r21	; 0x803e44 <ref1+0x1>
     3ba:	60 93 45 3e 	sts	0x3E45, r22	; 0x803e45 <ref1+0x2>
     3be:	70 93 46 3e 	sts	0x3E46, r23	; 0x803e46 <ref1+0x3>
				ref2 += TOUCH_GetSensorValue(1, true);
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	e3 d7       	rcall	.+4038   	; 0x138e <TOUCH_GetSensorValue>
     3c8:	40 91 3f 3e 	lds	r20, 0x3E3F	; 0x803e3f <ref2>
     3cc:	50 91 40 3e 	lds	r21, 0x3E40	; 0x803e40 <ref2+0x1>
     3d0:	60 91 41 3e 	lds	r22, 0x3E41	; 0x803e41 <ref2+0x2>
     3d4:	70 91 42 3e 	lds	r23, 0x3E42	; 0x803e42 <ref2+0x3>
     3d8:	48 0f       	add	r20, r24
     3da:	59 1f       	adc	r21, r25
     3dc:	61 1d       	adc	r22, r1
     3de:	71 1d       	adc	r23, r1
     3e0:	40 93 3f 3e 	sts	0x3E3F, r20	; 0x803e3f <ref2>
     3e4:	50 93 40 3e 	sts	0x3E40, r21	; 0x803e40 <ref2+0x1>
     3e8:	60 93 41 3e 	sts	0x3E41, r22	; 0x803e41 <ref2+0x2>
     3ec:	70 93 42 3e 	sts	0x3E42, r23	; 0x803e42 <ref2+0x3>
			//refP1 = refP1 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP1;
			T_refP1 += (int64_t)(ref1 - ref2);
			ref1 = ref2 = 0;
		
			whileLoopCycle = SAMPLE_COUNT;
			while(whileLoopCycle--)
     3f0:	80 91 35 3e 	lds	r24, 0x3E35	; 0x803e35 <whileLoopCycle>
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	98 0f       	add	r25, r24
     3f8:	90 93 35 3e 	sts	0x3E35, r25	; 0x803e35 <whileLoopCycle>
     3fc:	81 11       	cpse	r24, r1
     3fe:	ca cf       	rjmp	.-108    	; 0x394 <__DATA_REGION_LENGTH__+0x194>
			{
				ref1 += TOUCH_GetSensorValue(1, false);
				ref2 += TOUCH_GetSensorValue(1, true);
			}
			ref1 >>= (2 + overSampleThresholdValue);
     400:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <__data_end>
     404:	08 2e       	mov	r0, r24
     406:	00 0c       	add	r0, r0
     408:	99 0b       	sbc	r25, r25
     40a:	02 96       	adiw	r24, 0x02	; 2
     40c:	40 91 43 3e 	lds	r20, 0x3E43	; 0x803e43 <ref1>
     410:	50 91 44 3e 	lds	r21, 0x3E44	; 0x803e44 <ref1+0x1>
     414:	60 91 45 3e 	lds	r22, 0x3E45	; 0x803e45 <ref1+0x2>
     418:	70 91 46 3e 	lds	r23, 0x3E46	; 0x803e46 <ref1+0x3>
     41c:	8a 01       	movw	r16, r20
     41e:	9b 01       	movw	r18, r22
     420:	08 2e       	mov	r0, r24
     422:	04 c0       	rjmp	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     424:	35 95       	asr	r19
     426:	27 95       	ror	r18
     428:	17 95       	ror	r17
     42a:	07 95       	ror	r16
     42c:	0a 94       	dec	r0
     42e:	d2 f7       	brpl	.-12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			ref2 >>= (2 + overSampleThresholdValue);
     430:	40 91 3f 3e 	lds	r20, 0x3E3F	; 0x803e3f <ref2>
     434:	50 91 40 3e 	lds	r21, 0x3E40	; 0x803e40 <ref2+0x1>
     438:	60 91 41 3e 	lds	r22, 0x3E41	; 0x803e41 <ref2+0x2>
     43c:	70 91 42 3e 	lds	r23, 0x3E42	; 0x803e42 <ref2+0x3>
     440:	6a 01       	movw	r12, r20
     442:	7b 01       	movw	r14, r22
     444:	04 c0       	rjmp	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     446:	f5 94       	asr	r15
     448:	e7 94       	ror	r14
     44a:	d7 94       	ror	r13
     44c:	c7 94       	ror	r12
     44e:	8a 95       	dec	r24
     450:	d2 f7       	brpl	.-12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     452:	d7 01       	movw	r26, r14
     454:	c6 01       	movw	r24, r12
		
			//refP2 = refP2 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP2;
			T_refP2 += (int64_t)(ref1 - ref2);
     456:	78 01       	movw	r14, r16
     458:	89 01       	movw	r16, r18
     45a:	e8 1a       	sub	r14, r24
     45c:	f9 0a       	sbc	r15, r25
     45e:	0a 0b       	sbc	r16, r26
     460:	1b 0b       	sbc	r17, r27
     462:	d8 01       	movw	r26, r16
     464:	c7 01       	movw	r24, r14
     466:	bb 0f       	add	r27, r27
     468:	88 0b       	sbc	r24, r24
     46a:	98 2f       	mov	r25, r24
     46c:	dc 01       	movw	r26, r24
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	ab 83       	std	Y+3, r26	; 0x03
     474:	bc 83       	std	Y+4, r27	; 0x04
     476:	2e 81       	ldd	r18, Y+6	; 0x06
     478:	3f 81       	ldd	r19, Y+7	; 0x07
     47a:	48 85       	ldd	r20, Y+8	; 0x08
     47c:	59 85       	ldd	r21, Y+9	; 0x09
     47e:	6a 85       	ldd	r22, Y+10	; 0x0a
     480:	7b 85       	ldd	r23, Y+11	; 0x0b
     482:	8c 85       	ldd	r24, Y+12	; 0x0c
     484:	9d 85       	ldd	r25, Y+13	; 0x0d
     486:	ae 2c       	mov	r10, r14
     488:	bf 2c       	mov	r11, r15
     48a:	c0 2e       	mov	r12, r16
     48c:	d1 2e       	mov	r13, r17
     48e:	e9 80       	ldd	r14, Y+1	; 0x01
     490:	fe 2c       	mov	r15, r14
     492:	0e 2d       	mov	r16, r14
     494:	1e 2d       	mov	r17, r14
     496:	2a da       	rcall	.-2988   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
     498:	2e 83       	std	Y+6, r18	; 0x06
     49a:	3f 83       	std	Y+7, r19	; 0x07
     49c:	48 87       	std	Y+8, r20	; 0x08
     49e:	59 87       	std	Y+9, r21	; 0x09
     4a0:	6a 87       	std	Y+10, r22	; 0x0a
     4a2:	7b 87       	std	Y+11, r23	; 0x0b
     4a4:	8c 87       	std	Y+12, r24	; 0x0c
     4a6:	9d 87       	std	Y+13, r25	; 0x0d
			ref1 = ref2 = 0;
     4a8:	10 92 3f 3e 	sts	0x3E3F, r1	; 0x803e3f <ref2>
     4ac:	10 92 40 3e 	sts	0x3E40, r1	; 0x803e40 <ref2+0x1>
     4b0:	10 92 41 3e 	sts	0x3E41, r1	; 0x803e41 <ref2+0x2>
     4b4:	10 92 42 3e 	sts	0x3E42, r1	; 0x803e42 <ref2+0x3>
     4b8:	10 92 43 3e 	sts	0x3E43, r1	; 0x803e43 <ref1>
     4bc:	10 92 44 3e 	sts	0x3E44, r1	; 0x803e44 <ref1+0x1>
     4c0:	10 92 45 3e 	sts	0x3E45, r1	; 0x803e45 <ref1+0x2>
     4c4:	10 92 46 3e 	sts	0x3E46, r1	; 0x803e46 <ref1+0x3>
	int64_t T_refP1_F = 0, T_refP2_F = 0;
	
	uint8_t firstWhileLoop = 50;
	while (--firstWhileLoop)
	{
		for (uint8_t j = 0; j < 4; j++)
     4c8:	53 94       	inc	r5
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4cc:	51 2c       	mov	r5, r1
     4ce:	99 81       	ldd	r25, Y+1	; 0x01
     4d0:	9e 8f       	std	Y+30, r25	; 0x1e
     4d2:	b3 e0       	ldi	r27, 0x03	; 3
     4d4:	b5 15       	cp	r27, r5
     4d6:	08 f0       	brcs	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	bd ce       	rjmp	.-646    	; 0x254 <__DATA_REGION_LENGTH__+0x54>
     4da:	5e 8c       	ldd	r5, Y+30	; 0x1e
     4dc:	59 82       	std	Y+1, r5	; 0x01
     4de:	5f 8c       	ldd	r5, Y+31	; 0x1f
		
			//refP2 = refP2 < (int16_t)(ref1 - ref2) ? (int16_t)(ref1 - ref2) : refP2;
			T_refP2 += (int64_t)(ref1 - ref2);
			ref1 = ref2 = 0;
		}
		T_refP1_F = T_refP1_F < T_refP1 ? T_refP1 : T_refP1_F;
     4e0:	2e 85       	ldd	r18, Y+14	; 0x0e
     4e2:	3f 85       	ldd	r19, Y+15	; 0x0f
     4e4:	48 89       	ldd	r20, Y+16	; 0x10
     4e6:	59 89       	ldd	r21, Y+17	; 0x11
     4e8:	6a 89       	ldd	r22, Y+18	; 0x12
     4ea:	7b 89       	ldd	r23, Y+19	; 0x13
     4ec:	8c 89       	ldd	r24, Y+20	; 0x14
     4ee:	9d 89       	ldd	r25, Y+21	; 0x15
     4f0:	ad 80       	ldd	r10, Y+5	; 0x05
     4f2:	b3 2c       	mov	r11, r3
     4f4:	c4 2c       	mov	r12, r4
     4f6:	d6 2c       	mov	r13, r6
     4f8:	e7 2c       	mov	r14, r7
     4fa:	f8 2c       	mov	r15, r8
     4fc:	09 2d       	mov	r16, r9
     4fe:	15 2d       	mov	r17, r5
     500:	0a da       	rcall	.-3052   	; 0xfffff916 <__eeprom_end+0xff7ef916>
     502:	44 f4       	brge	.+16     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     504:	ae 86       	std	Y+14, r10	; 0x0e
     506:	3f 86       	std	Y+15, r3	; 0x0f
     508:	48 8a       	std	Y+16, r4	; 0x10
     50a:	69 8a       	std	Y+17, r6	; 0x11
     50c:	7a 8a       	std	Y+18, r7	; 0x12
     50e:	8b 8a       	std	Y+19, r8	; 0x13
     510:	9c 8a       	std	Y+20, r9	; 0x14
     512:	5d 8a       	std	Y+21, r5	; 0x15
		T_refP2_F = T_refP2_F < T_refP2 ? T_refP2 : T_refP2_F;
     514:	2e 89       	ldd	r18, Y+22	; 0x16
     516:	3f 89       	ldd	r19, Y+23	; 0x17
     518:	48 8d       	ldd	r20, Y+24	; 0x18
     51a:	59 8d       	ldd	r21, Y+25	; 0x19
     51c:	6a 8d       	ldd	r22, Y+26	; 0x1a
     51e:	7b 8d       	ldd	r23, Y+27	; 0x1b
     520:	8c 8d       	ldd	r24, Y+28	; 0x1c
     522:	9d 8d       	ldd	r25, Y+29	; 0x1d
     524:	ae 80       	ldd	r10, Y+6	; 0x06
     526:	bf 80       	ldd	r11, Y+7	; 0x07
     528:	c8 84       	ldd	r12, Y+8	; 0x08
     52a:	d9 84       	ldd	r13, Y+9	; 0x09
     52c:	ea 84       	ldd	r14, Y+10	; 0x0a
     52e:	fb 84       	ldd	r15, Y+11	; 0x0b
     530:	0c 85       	ldd	r16, Y+12	; 0x0c
     532:	1d 85       	ldd	r17, Y+13	; 0x0d
     534:	f0 d9       	rcall	.-3104   	; 0xfffff916 <__eeprom_end+0xff7ef916>
     536:	44 f4       	brge	.+16     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     538:	ae 8a       	std	Y+22, r10	; 0x16
     53a:	bf 8a       	std	Y+23, r11	; 0x17
     53c:	c8 8e       	std	Y+24, r12	; 0x18
     53e:	d9 8e       	std	Y+25, r13	; 0x19
     540:	ea 8e       	std	Y+26, r14	; 0x1a
     542:	fb 8e       	std	Y+27, r15	; 0x1b
     544:	0c 8f       	std	Y+28, r16	; 0x1c
     546:	1d 8f       	std	Y+29, r17	; 0x1d
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTC_toggle_pin_level(const uint8_t pin)
{
	VPORTC.IN |= 1 << pin;
     548:	8a b1       	in	r24, 0x0a	; 10
     54a:	80 61       	ori	r24, 0x10	; 16
     54c:	8a b9       	out	0x0a, r24	; 10
	
	int64_t T_refP1 = 0, T_refP2 = 0;
	int64_t T_refP1_F = 0, T_refP2_F = 0;
	
	uint8_t firstWhileLoop = 50;
	while (--firstWhileLoop)
     54e:	2a 94       	dec	r2
     550:	21 10       	cpse	r2, r1
     552:	bc cf       	rjmp	.-136    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		T_refP1_F = T_refP1_F < T_refP1 ? T_refP1 : T_refP1_F;
		T_refP2_F = T_refP2_F < T_refP2 ? T_refP2 : T_refP2_F;
		DATA_toggle_level();
	}
	
	refP1 = (T_refP1_F >> 1) + refPConst;
     554:	2e 85       	ldd	r18, Y+14	; 0x0e
     556:	3f 85       	ldd	r19, Y+15	; 0x0f
     558:	48 89       	ldd	r20, Y+16	; 0x10
     55a:	59 89       	ldd	r21, Y+17	; 0x11
     55c:	6a 89       	ldd	r22, Y+18	; 0x12
     55e:	7b 89       	ldd	r23, Y+19	; 0x13
     560:	8c 89       	ldd	r24, Y+20	; 0x14
     562:	9d 89       	ldd	r25, Y+21	; 0x15
     564:	01 e0       	ldi	r16, 0x01	; 1
     566:	a4 d9       	rcall	.-3256   	; 0xfffff8b0 <__eeprom_end+0xff7ef8b0>
     568:	42 2e       	mov	r4, r18
     56a:	53 2e       	mov	r5, r19
     56c:	64 2e       	mov	r6, r20
     56e:	75 2e       	mov	r7, r21
     570:	29 81       	ldd	r18, Y+1	; 0x01
     572:	c2 2e       	mov	r12, r18
     574:	d1 2c       	mov	r13, r1
     576:	e1 2c       	mov	r14, r1
     578:	f1 2c       	mov	r15, r1
     57a:	d7 01       	movw	r26, r14
     57c:	c6 01       	movw	r24, r12
     57e:	84 0d       	add	r24, r4
     580:	95 1d       	adc	r25, r5
     582:	a6 1d       	adc	r26, r6
     584:	b7 1d       	adc	r27, r7
     586:	80 93 3b 3e 	sts	0x3E3B, r24	; 0x803e3b <refP1>
     58a:	90 93 3c 3e 	sts	0x3E3C, r25	; 0x803e3c <refP1+0x1>
     58e:	a0 93 3d 3e 	sts	0x3E3D, r26	; 0x803e3d <refP1+0x2>
     592:	b0 93 3e 3e 	sts	0x3E3E, r27	; 0x803e3e <refP1+0x3>
	refP2 = (T_refP2_F >> 1) + refPConst;
     596:	2e 89       	ldd	r18, Y+22	; 0x16
     598:	3f 89       	ldd	r19, Y+23	; 0x17
     59a:	48 8d       	ldd	r20, Y+24	; 0x18
     59c:	59 8d       	ldd	r21, Y+25	; 0x19
     59e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     5a0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     5a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5a6:	84 d9       	rcall	.-3320   	; 0xfffff8b0 <__eeprom_end+0xff7ef8b0>
     5a8:	42 2e       	mov	r4, r18
     5aa:	53 2e       	mov	r5, r19
     5ac:	64 2e       	mov	r6, r20
     5ae:	75 2e       	mov	r7, r21
     5b0:	c4 0c       	add	r12, r4
     5b2:	d5 1c       	adc	r13, r5
     5b4:	e6 1c       	adc	r14, r6
     5b6:	f7 1c       	adc	r15, r7
     5b8:	c0 92 37 3e 	sts	0x3E37, r12	; 0x803e37 <refP2>
     5bc:	d0 92 38 3e 	sts	0x3E38, r13	; 0x803e38 <refP2+0x1>
     5c0:	e0 92 39 3e 	sts	0x3E39, r14	; 0x803e39 <refP2+0x2>
     5c4:	f0 92 3a 3e 	sts	0x3E3A, r15	; 0x803e3a <refP2+0x3>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     5c8:	89 b1       	in	r24, 0x09	; 9
     5ca:	8f 7e       	andi	r24, 0xEF	; 239
     5cc:	89 b9       	out	0x09, r24	; 9
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     5ce:	e3 e1       	ldi	r30, 0x13	; 19
     5d0:	f4 e0       	ldi	r31, 0x04	; 4
     5d2:	80 81       	ld	r24, Z
     5d4:	88 7f       	andi	r24, 0xF8	; 248
     5d6:	81 60       	ori	r24, 0x01	; 1
     5d8:	80 83       	st	Z, r24
	DATA_set_level(false);
	
	CBT_set_isc(PORT_ISC_BOTHEDGES_gc);
	
	
	payloadBuffer[payloadBufferStartByte + 0] = SIGROW_SERNUM7;
     5da:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <payloadBufferStartByte+0x7f77de>
     5de:	e1 e2       	ldi	r30, 0x21	; 33
     5e0:	fe e3       	ldi	r31, 0x3E	; 62
     5e2:	86 83       	std	Z+6, r24	; 0x06
	payloadBuffer[payloadBufferStartByte + 1] = SIGROW_SERNUM8;
     5e4:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <payloadBufferStartByte+0x7f77df>
     5e8:	87 83       	std	Z+7, r24	; 0x07
	payloadBuffer[payloadBufferStartByte + 2] = SIGROW_SERNUM9;
     5ea:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <payloadBufferStartByte+0x7f77e0>
     5ee:	80 87       	std	Z+8, r24	; 0x08
	SX1243Init(&payloadBuffer[0], sizeof(payloadBuffer), payloadBufferStartByte);
     5f0:	46 e0       	ldi	r20, 0x06	; 6
     5f2:	60 e1       	ldi	r22, 0x10	; 16
     5f4:	cf 01       	movw	r24, r30
     5f6:	0d d6       	rcall	.+3098   	; 0x1212 <SX1243Init>

	/* Replace with your application code */
	while (1) 
	{
		BatteryLevelCounter -= BAT_ADC_CONSTANT;
     5f8:	20 91 06 3e 	lds	r18, 0x3E06	; 0x803e06 <BatteryLevelCounter>
     5fc:	30 91 07 3e 	lds	r19, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x1>
     600:	40 91 08 3e 	lds	r20, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x2>
     604:	50 91 09 3e 	lds	r21, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x3>
     608:	60 91 0a 3e 	lds	r22, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x4>
     60c:	70 91 0b 3e 	lds	r23, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x5>
     610:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x6>
     614:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <BatteryLevelCounter+0x7>
     618:	ad ef       	ldi	r26, 0xFD	; 253
     61a:	71 d9       	rcall	.-3358   	; 0xfffff8fe <__eeprom_end+0xff7ef8fe>
     61c:	20 93 06 3e 	sts	0x3E06, r18	; 0x803e06 <BatteryLevelCounter>
     620:	30 93 07 3e 	sts	0x3E07, r19	; 0x803e07 <BatteryLevelCounter+0x1>
     624:	40 93 08 3e 	sts	0x3E08, r20	; 0x803e08 <BatteryLevelCounter+0x2>
     628:	50 93 09 3e 	sts	0x3E09, r21	; 0x803e09 <BatteryLevelCounter+0x3>
     62c:	60 93 0a 3e 	sts	0x3E0A, r22	; 0x803e0a <BatteryLevelCounter+0x4>
     630:	70 93 0b 3e 	sts	0x3E0B, r23	; 0x803e0b <BatteryLevelCounter+0x5>
     634:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <BatteryLevelCounter+0x6>
     638:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <BatteryLevelCounter+0x7>
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     63c:	44 e1       	ldi	r20, 0x14	; 20
     63e:	54 e0       	ldi	r21, 0x04	; 4
     640:	da 01       	movw	r26, r20
     642:	8c 91       	ld	r24, X
     644:	88 60       	ori	r24, 0x08	; 8
     646:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     648:	24 e3       	ldi	r18, 0x34	; 52
     64a:	34 e0       	ldi	r19, 0x04	; 4
     64c:	f9 01       	movw	r30, r18
     64e:	80 81       	ld	r24, Z
     650:	88 60       	ori	r24, 0x08	; 8
     652:	80 83       	st	Z, r24
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     654:	a5 e1       	ldi	r26, 0x15	; 21
     656:	b4 e0       	ldi	r27, 0x04	; 4
     658:	8c 91       	ld	r24, X
     65a:	88 60       	ori	r24, 0x08	; 8
     65c:	8c 93       	st	X, r24
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     65e:	65 e3       	ldi	r22, 0x35	; 53
     660:	74 e0       	ldi	r23, 0x04	; 4
     662:	fb 01       	movw	r30, r22
     664:	80 81       	ld	r24, Z
     666:	88 60       	ori	r24, 0x08	; 8
     668:	80 83       	st	Z, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     66a:	92 b1       	in	r25, 0x02	; 2
		SB1_set_pull_mode(PORT_PULL_UP);
		SB2_set_pull_mode(PORT_PULL_UP);
		PSD1_set_pull_mode(PORT_PULL_UP);
		PSD2_set_pull_mode(PORT_PULL_UP);
		
		uint8_t In_SB1  = !SB1_get_level();
     66c:	e9 2f       	mov	r30, r25
     66e:	e2 95       	swap	r30
     670:	ef 70       	andi	r30, 0x0F	; 15
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	e8 27       	eor	r30, r24
     676:	e1 70       	andi	r30, 0x01	; 1
     678:	3e 2e       	mov	r3, r30
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     67a:	e6 b1       	in	r30, 0x06	; 6
		uint8_t In_SB2  = !SB2_get_level();
     67c:	e2 95       	swap	r30
     67e:	ef 70       	andi	r30, 0x0F	; 15
     680:	e8 27       	eor	r30, r24
     682:	e1 70       	andi	r30, 0x01	; 1
     684:	2e 2e       	mov	r2, r30
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
     686:	02 b1       	in	r16, 0x02	; 2
		uint8_t	In_PSD1 = !PSD1_get_level();
     688:	02 95       	swap	r16
     68a:	06 95       	lsr	r16
     68c:	07 70       	andi	r16, 0x07	; 7
     68e:	08 27       	eor	r16, r24
     690:	01 70       	andi	r16, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
     692:	16 b1       	in	r17, 0x06	; 6
		uint8_t In_PSD2 = !PSD2_get_level();
     694:	12 95       	swap	r17
     696:	16 95       	lsr	r17
     698:	17 70       	andi	r17, 0x07	; 7
     69a:	18 27       	eor	r17, r24
     69c:	11 70       	andi	r17, 0x01	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     69e:	fa 01       	movw	r30, r20
     6a0:	80 81       	ld	r24, Z
     6a2:	87 7f       	andi	r24, 0xF7	; 247
     6a4:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     6a6:	f9 01       	movw	r30, r18
     6a8:	80 81       	ld	r24, Z
     6aa:	87 7f       	andi	r24, 0xF7	; 247
     6ac:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     6ae:	8c 91       	ld	r24, X
     6b0:	87 7f       	andi	r24, 0xF7	; 247
     6b2:	8c 93       	st	X, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     6b4:	db 01       	movw	r26, r22
     6b6:	8c 91       	ld	r24, X
     6b8:	87 7f       	andi	r24, 0xF7	; 247
     6ba:	8c 93       	st	X, r24
		SB2_set_pull_mode(PORT_PULL_OFF);
		PSD1_set_pull_mode(PORT_PULL_OFF);
		PSD2_set_pull_mode(PORT_PULL_OFF);
		
		//ADC ENABLE
		ADC_0_enable();
     6bc:	f0 d3       	rcall	.+2016   	; 0xe9e <ADC_0_enable>
		TOUCH_GetSensorValue(0, false);
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	65 d6       	rcall	.+3274   	; 0x138e <TOUCH_GetSensorValue>
		TOUCH_GetSensorValue(1, true);
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	62 d6       	rcall	.+3268   	; 0x138e <TOUCH_GetSensorValue>
		
		whileLoopCycle = SAMPLE_COUNT;
     6ca:	80 e8       	ldi	r24, 0x80	; 128
     6cc:	80 93 35 3e 	sts	0x3E35, r24	; 0x803e35 <whileLoopCycle>
		while(whileLoopCycle--)
     6d0:	2e c0       	rjmp	.+92     	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
		{
			adc1 += TOUCH_GetSensorValue(0, false);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	5b d6       	rcall	.+3254   	; 0x138e <TOUCH_GetSensorValue>
     6d8:	40 91 4b 3e 	lds	r20, 0x3E4B	; 0x803e4b <adc1>
     6dc:	50 91 4c 3e 	lds	r21, 0x3E4C	; 0x803e4c <adc1+0x1>
     6e0:	60 91 4d 3e 	lds	r22, 0x3E4D	; 0x803e4d <adc1+0x2>
     6e4:	70 91 4e 3e 	lds	r23, 0x3E4E	; 0x803e4e <adc1+0x3>
     6e8:	48 0f       	add	r20, r24
     6ea:	59 1f       	adc	r21, r25
     6ec:	61 1d       	adc	r22, r1
     6ee:	71 1d       	adc	r23, r1
     6f0:	40 93 4b 3e 	sts	0x3E4B, r20	; 0x803e4b <adc1>
     6f4:	50 93 4c 3e 	sts	0x3E4C, r21	; 0x803e4c <adc1+0x1>
     6f8:	60 93 4d 3e 	sts	0x3E4D, r22	; 0x803e4d <adc1+0x2>
     6fc:	70 93 4e 3e 	sts	0x3E4E, r23	; 0x803e4e <adc1+0x3>
			adc2 += TOUCH_GetSensorValue(0, true);
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	44 d6       	rcall	.+3208   	; 0x138e <TOUCH_GetSensorValue>
     706:	40 91 47 3e 	lds	r20, 0x3E47	; 0x803e47 <adc2>
     70a:	50 91 48 3e 	lds	r21, 0x3E48	; 0x803e48 <adc2+0x1>
     70e:	60 91 49 3e 	lds	r22, 0x3E49	; 0x803e49 <adc2+0x2>
     712:	70 91 4a 3e 	lds	r23, 0x3E4A	; 0x803e4a <adc2+0x3>
     716:	48 0f       	add	r20, r24
     718:	59 1f       	adc	r21, r25
     71a:	61 1d       	adc	r22, r1
     71c:	71 1d       	adc	r23, r1
     71e:	40 93 47 3e 	sts	0x3E47, r20	; 0x803e47 <adc2>
     722:	50 93 48 3e 	sts	0x3E48, r21	; 0x803e48 <adc2+0x1>
     726:	60 93 49 3e 	sts	0x3E49, r22	; 0x803e49 <adc2+0x2>
     72a:	70 93 4a 3e 	sts	0x3E4A, r23	; 0x803e4a <adc2+0x3>
		ADC_0_enable();
		TOUCH_GetSensorValue(0, false);
		TOUCH_GetSensorValue(1, true);
		
		whileLoopCycle = SAMPLE_COUNT;
		while(whileLoopCycle--)
     72e:	80 91 35 3e 	lds	r24, 0x3E35	; 0x803e35 <whileLoopCycle>
     732:	9f ef       	ldi	r25, 0xFF	; 255
     734:	98 0f       	add	r25, r24
     736:	90 93 35 3e 	sts	0x3E35, r25	; 0x803e35 <whileLoopCycle>
     73a:	81 11       	cpse	r24, r1
     73c:	ca cf       	rjmp	.-108    	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
		{
			adc1 += TOUCH_GetSensorValue(0, false);
			adc2 += TOUCH_GetSensorValue(0, true);
		}
		adc1 >>= (2 + overSampleThresholdValue);
     73e:	20 91 32 3e 	lds	r18, 0x3E32	; 0x803e32 <__data_end>
     742:	02 2e       	mov	r0, r18
     744:	00 0c       	add	r0, r0
     746:	33 0b       	sbc	r19, r19
     748:	2e 5f       	subi	r18, 0xFE	; 254
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	40 91 4b 3e 	lds	r20, 0x3E4B	; 0x803e4b <adc1>
     750:	50 91 4c 3e 	lds	r21, 0x3E4C	; 0x803e4c <adc1+0x1>
     754:	60 91 4d 3e 	lds	r22, 0x3E4D	; 0x803e4d <adc1+0x2>
     758:	70 91 4e 3e 	lds	r23, 0x3E4E	; 0x803e4e <adc1+0x3>
     75c:	02 2e       	mov	r0, r18
     75e:	04 c0       	rjmp	.+8      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
     760:	75 95       	asr	r23
     762:	67 95       	ror	r22
     764:	57 95       	ror	r21
     766:	47 95       	ror	r20
     768:	0a 94       	dec	r0
     76a:	d2 f7       	brpl	.-12     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
		adc2 >>= (2 + overSampleThresholdValue);
     76c:	c0 90 47 3e 	lds	r12, 0x3E47	; 0x803e47 <adc2>
     770:	d0 90 48 3e 	lds	r13, 0x3E48	; 0x803e48 <adc2+0x1>
     774:	e0 90 49 3e 	lds	r14, 0x3E49	; 0x803e49 <adc2+0x2>
     778:	f0 90 4a 3e 	lds	r15, 0x3E4A	; 0x803e4a <adc2+0x3>
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     77e:	f5 94       	asr	r15
     780:	e7 94       	ror	r14
     782:	d7 94       	ror	r13
     784:	c7 94       	ror	r12
     786:	2a 95       	dec	r18
     788:	d2 f7       	brpl	.-12     	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
		
		//rawTotalValue = (int32_t)(adc1 - adc2);
		rawAdc[0][rawAdcCount] = (int32_t)(adc1 - adc2);
     78a:	e0 91 36 3e 	lds	r30, 0x3E36	; 0x803e36 <rawAdcCount>
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	4c 19       	sub	r20, r12
     792:	5d 09       	sbc	r21, r13
     794:	6e 09       	sbc	r22, r14
     796:	7f 09       	sbc	r23, r15
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e5 5a       	subi	r30, 0xA5	; 165
     7a2:	f1 4c       	sbci	r31, 0xC1	; 193
     7a4:	40 83       	st	Z, r20
     7a6:	51 83       	std	Z+1, r21	; 0x01
     7a8:	62 83       	std	Z+2, r22	; 0x02
     7aa:	73 83       	std	Z+3, r23	; 0x03
		
		for (uint8_t j = 0; j < 4; j++)
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	21 c0       	rjmp	.+66     	; 0x7f2 <__LOCK_REGION_LENGTH__+0x3f2>
		{
			rawTotal += rawAdc[0][j];
     7b0:	e9 2f       	mov	r30, r25
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	e5 5a       	subi	r30, 0xA5	; 165
     7be:	f1 4c       	sbci	r31, 0xC1	; 193
     7c0:	40 81       	ld	r20, Z
     7c2:	51 81       	ldd	r21, Z+1	; 0x01
     7c4:	62 81       	ldd	r22, Z+2	; 0x02
     7c6:	73 81       	ldd	r23, Z+3	; 0x03
     7c8:	c0 90 57 3e 	lds	r12, 0x3E57	; 0x803e57 <rawTotal>
     7cc:	d0 90 58 3e 	lds	r13, 0x3E58	; 0x803e58 <rawTotal+0x1>
     7d0:	e0 90 59 3e 	lds	r14, 0x3E59	; 0x803e59 <rawTotal+0x2>
     7d4:	f0 90 5a 3e 	lds	r15, 0x3E5A	; 0x803e5a <rawTotal+0x3>
     7d8:	4c 0d       	add	r20, r12
     7da:	5d 1d       	adc	r21, r13
     7dc:	6e 1d       	adc	r22, r14
     7de:	7f 1d       	adc	r23, r15
     7e0:	40 93 57 3e 	sts	0x3E57, r20	; 0x803e57 <rawTotal>
     7e4:	50 93 58 3e 	sts	0x3E58, r21	; 0x803e58 <rawTotal+0x1>
     7e8:	60 93 59 3e 	sts	0x3E59, r22	; 0x803e59 <rawTotal+0x2>
     7ec:	70 93 5a 3e 	sts	0x3E5A, r23	; 0x803e5a <rawTotal+0x3>
		adc2 >>= (2 + overSampleThresholdValue);
		
		//rawTotalValue = (int32_t)(adc1 - adc2);
		rawAdc[0][rawAdcCount] = (int32_t)(adc1 - adc2);
		
		for (uint8_t j = 0; j < 4; j++)
     7f0:	9f 5f       	subi	r25, 0xFF	; 255
     7f2:	94 30       	cpi	r25, 0x04	; 4
     7f4:	e8 f2       	brcs	.-70     	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
		{
			rawTotal += rawAdc[0][j];
		}
		rawTotalValue = (int32_t)(rawTotal >> 1);
     7f6:	40 91 57 3e 	lds	r20, 0x3E57	; 0x803e57 <rawTotal>
     7fa:	50 91 58 3e 	lds	r21, 0x3E58	; 0x803e58 <rawTotal+0x1>
     7fe:	60 91 59 3e 	lds	r22, 0x3E59	; 0x803e59 <rawTotal+0x2>
     802:	70 91 5a 3e 	lds	r23, 0x3E5A	; 0x803e5a <rawTotal+0x3>
     806:	75 95       	asr	r23
     808:	67 95       	ror	r22
     80a:	57 95       	ror	r21
     80c:	47 95       	ror	r20
     80e:	40 93 53 3e 	sts	0x3E53, r20	; 0x803e53 <rawTotalValue>
     812:	50 93 54 3e 	sts	0x3E54, r21	; 0x803e54 <rawTotalValue+0x1>
     816:	60 93 55 3e 	sts	0x3E55, r22	; 0x803e55 <rawTotalValue+0x2>
     81a:	70 93 56 3e 	sts	0x3E56, r23	; 0x803e56 <rawTotalValue+0x3>
		
		QTOUCHADC_REFERANCE_FILTER_P1.Enable = (rawTotalValue - refP1) > 0;
     81e:	c0 90 3b 3e 	lds	r12, 0x3E3B	; 0x803e3b <refP1>
     822:	d0 90 3c 3e 	lds	r13, 0x3E3C	; 0x803e3c <refP1+0x1>
     826:	e0 90 3d 3e 	lds	r14, 0x3E3D	; 0x803e3d <refP1+0x2>
     82a:	f0 90 3e 3e 	lds	r15, 0x3E3E	; 0x803e3e <refP1+0x3>
     82e:	4a 01       	movw	r8, r20
     830:	5b 01       	movw	r10, r22
     832:	8c 18       	sub	r8, r12
     834:	9d 08       	sbc	r9, r13
     836:	ae 08       	sbc	r10, r14
     838:	bf 08       	sbc	r11, r15
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	18 14       	cp	r1, r8
     83e:	19 04       	cpc	r1, r9
     840:	1a 04       	cpc	r1, r10
     842:	1b 04       	cpc	r1, r11
     844:	0c f0       	brlt	.+2      	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <QTOUCHADC_REFERANCE_FILTER_P1>
		QTOUCHADC_REFERANCE_FILTER_P1.Counter = QTOUCHADC_REFERANCE_FILTER_P1.Enable == false ? 0 : QTOUCHADC_REFERANCE_FILTER_P1.Counter;
     84c:	91 11       	cpse	r25, r1
     84e:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <QTOUCHADC_REFERANCE_FILTER_P1+0x1>
     852:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <QTOUCHADC_REFERANCE_FILTER_P1+0x1>
		
		if(QTOUCHADC_REFERANCE_FILTER_P1.Enable)
     856:	99 23       	and	r25, r25
     858:	09 f4       	brne	.+2      	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
     85a:	4a c0       	rjmp	.+148    	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
		{
			QTOUCHADC_REFERANCE_FILTER_P1.MaxValue = QTOUCHADC_REFERANCE_FILTER_P1.Counter == 0 ? rawTotalValue : QTOUCHADC_REFERANCE_FILTER_P1.MaxValue < rawTotalValue ? rawTotalValue : QTOUCHADC_REFERANCE_FILTER_P1.MaxValue;
     85c:	88 23       	and	r24, r24
     85e:	91 f0       	breq	.+36     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     860:	40 90 19 3e 	lds	r4, 0x3E19	; 0x803e19 <QTOUCHADC_REFERANCE_FILTER_P1+0x2>
     864:	50 90 1a 3e 	lds	r5, 0x3E1A	; 0x803e1a <QTOUCHADC_REFERANCE_FILTER_P1+0x3>
     868:	60 90 1b 3e 	lds	r6, 0x3E1B	; 0x803e1b <QTOUCHADC_REFERANCE_FILTER_P1+0x4>
     86c:	70 90 1c 3e 	lds	r7, 0x3E1C	; 0x803e1c <QTOUCHADC_REFERANCE_FILTER_P1+0x5>
     870:	4a 01       	movw	r8, r20
     872:	5b 01       	movw	r10, r22
     874:	44 15       	cp	r20, r4
     876:	55 05       	cpc	r21, r5
     878:	66 05       	cpc	r22, r6
     87a:	77 05       	cpc	r23, r7
     87c:	2c f4       	brge	.+10     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     87e:	53 01       	movw	r10, r6
     880:	42 01       	movw	r8, r4
     882:	02 c0       	rjmp	.+4      	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     884:	4a 01       	movw	r8, r20
     886:	5b 01       	movw	r10, r22
     888:	e7 e1       	ldi	r30, 0x17	; 23
     88a:	fe e3       	ldi	r31, 0x3E	; 62
     88c:	82 82       	std	Z+2, r8	; 0x02
     88e:	93 82       	std	Z+3, r9	; 0x03
     890:	a4 82       	std	Z+4, r10	; 0x04
     892:	b5 82       	std	Z+5, r11	; 0x05
			QTOUCHADC_REFERANCE_FILTER_P1.Counter += QTOUCHADC_REFERANCE_FILTER_P1.Counter < QTOUCHADC_REFERANCE_FILTER_P1.CounterLimit ? 1 : -QTOUCHADC_REFERANCE_FILTER_P1.Counter;
     894:	97 81       	ldd	r25, Z+7	; 0x07
     896:	89 17       	cp	r24, r25
     898:	18 f0       	brcs	.+6      	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
     89a:	98 2f       	mov	r25, r24
     89c:	91 95       	neg	r25
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	89 0f       	add	r24, r25
     8a4:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <QTOUCHADC_REFERANCE_FILTER_P1+0x1>
			if (QTOUCHADC_REFERANCE_FILTER_P1.Counter == 0 || QTOUCHADC_REFERANCE_FILTER_P1.MaxValue <= ((int32_t)(QTOUCHADC_REFERANCE_FILTER_P1.FilterValue / 4) + refP1))
     8a8:	88 23       	and	r24, r24
     8aa:	79 f0       	breq	.+30     	; 0x8ca <__LOCK_REGION_LENGTH__+0x4ca>
     8ac:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <QTOUCHADC_REFERANCE_FILTER_P1+0x8>
     8b0:	86 95       	lsr	r24
     8b2:	86 95       	lsr	r24
     8b4:	26 01       	movw	r4, r12
     8b6:	37 01       	movw	r6, r14
     8b8:	48 0e       	add	r4, r24
     8ba:	51 1c       	adc	r5, r1
     8bc:	61 1c       	adc	r6, r1
     8be:	71 1c       	adc	r7, r1
     8c0:	48 14       	cp	r4, r8
     8c2:	59 04       	cpc	r5, r9
     8c4:	6a 04       	cpc	r6, r10
     8c6:	7b 04       	cpc	r7, r11
     8c8:	9c f0       	brlt	.+38     	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
			{
				if(QTOUCHADC_REFERANCE_FILTER_P1.MaxValue <= (QTOUCHADC_REFERANCE_FILTER_P1.FilterValue + refP1))
     8ca:	80 91 1f 3e 	lds	r24, 0x3E1F	; 0x803e1f <QTOUCHADC_REFERANCE_FILTER_P1+0x8>
     8ce:	c8 0e       	add	r12, r24
     8d0:	d1 1c       	adc	r13, r1
     8d2:	e1 1c       	adc	r14, r1
     8d4:	f1 1c       	adc	r15, r1
     8d6:	c8 14       	cp	r12, r8
     8d8:	d9 04       	cpc	r13, r9
     8da:	ea 04       	cpc	r14, r10
     8dc:	fb 04       	cpc	r15, r11
     8de:	44 f0       	brlt	.+16     	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
				{
					refP1 = QTOUCHADC_REFERANCE_FILTER_P1.MaxValue;
     8e0:	80 92 3b 3e 	sts	0x3E3B, r8	; 0x803e3b <refP1>
     8e4:	90 92 3c 3e 	sts	0x3E3C, r9	; 0x803e3c <refP1+0x1>
     8e8:	a0 92 3d 3e 	sts	0x3E3D, r10	; 0x803e3d <refP1+0x2>
     8ec:	b0 92 3e 3e 	sts	0x3E3E, r11	; 0x803e3e <refP1+0x3>
					//refP2 = refP1;
				}
			}
		}
		
		prox1CurrentValue = rawTotalValue - refP1;
     8f0:	80 91 3b 3e 	lds	r24, 0x3E3B	; 0x803e3b <refP1>
     8f4:	90 91 3c 3e 	lds	r25, 0x3E3C	; 0x803e3c <refP1+0x1>
     8f8:	3a 01       	movw	r6, r20
     8fa:	68 1a       	sub	r6, r24
     8fc:	79 0a       	sbc	r7, r25
     8fe:	c3 01       	movw	r24, r6
		
		if(prox1CurrentValue < negativeThresholdValue)
     900:	20 91 00 3e 	lds	r18, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     904:	30 91 01 3e 	lds	r19, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     908:	62 16       	cp	r6, r18
     90a:	73 06       	cpc	r7, r19
     90c:	44 f4       	brge	.+16     	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
		{
			refP1 = rawTotalValue;
     90e:	40 93 3b 3e 	sts	0x3E3B, r20	; 0x803e3b <refP1>
     912:	50 93 3c 3e 	sts	0x3E3C, r21	; 0x803e3c <refP1+0x1>
     916:	60 93 3d 3e 	sts	0x3E3D, r22	; 0x803e3d <refP1+0x2>
     91a:	70 93 3e 3e 	sts	0x3E3E, r23	; 0x803e3e <refP1+0x3>
		}
		
		rawTotal = 0;
     91e:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <rawTotal>
     922:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <rawTotal+0x1>
     926:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <rawTotal+0x2>
     92a:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <rawTotal+0x3>
		adc1 = adc2 = 0;
     92e:	10 92 47 3e 	sts	0x3E47, r1	; 0x803e47 <adc2>
     932:	10 92 48 3e 	sts	0x3E48, r1	; 0x803e48 <adc2+0x1>
     936:	10 92 49 3e 	sts	0x3E49, r1	; 0x803e49 <adc2+0x2>
     93a:	10 92 4a 3e 	sts	0x3E4A, r1	; 0x803e4a <adc2+0x3>
     93e:	10 92 4b 3e 	sts	0x3E4B, r1	; 0x803e4b <adc1>
     942:	10 92 4c 3e 	sts	0x3E4C, r1	; 0x803e4c <adc1+0x1>
     946:	10 92 4d 3e 	sts	0x3E4D, r1	; 0x803e4d <adc1+0x2>
     94a:	10 92 4e 3e 	sts	0x3E4E, r1	; 0x803e4e <adc1+0x3>
		prox1CurrentValue = prox1CurrentValue < 0 ? 0 : prox1CurrentValue;
     94e:	99 23       	and	r25, r25
     950:	14 f4       	brge	.+4      	; 0x956 <__LOCK_REGION_LENGTH__+0x556>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	80 93 7b 3e 	sts	0x3E7B, r24	; 0x803e7b <prox1CurrentValue>
     95a:	90 93 7c 3e 	sts	0x3E7C, r25	; 0x803e7c <prox1CurrentValue+0x1>
		prox1CounterBase[1] = (uint8_t)(((uint16_t)prox1CurrentValue >> 8) & 0x00FF);
     95e:	e1 e5       	ldi	r30, 0x51	; 81
     960:	fe e3       	ldi	r31, 0x3E	; 62
     962:	91 83       	std	Z+1, r25	; 0x01
		prox1CounterBase[0] = (uint8_t)(((uint16_t)prox1CurrentValue >> 0) & 0x00FF);
     964:	80 83       	st	Z, r24
			
			
		whileLoopCycle = SAMPLE_COUNT;
     966:	80 e8       	ldi	r24, 0x80	; 128
     968:	80 93 35 3e 	sts	0x3E35, r24	; 0x803e35 <whileLoopCycle>
		while(whileLoopCycle--)
     96c:	2e c0       	rjmp	.+92     	; 0x9ca <__LOCK_REGION_LENGTH__+0x5ca>
		{
			adc1 += TOUCH_GetSensorValue(1, false);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0d d5       	rcall	.+2586   	; 0x138e <TOUCH_GetSensorValue>
     974:	40 91 4b 3e 	lds	r20, 0x3E4B	; 0x803e4b <adc1>
     978:	50 91 4c 3e 	lds	r21, 0x3E4C	; 0x803e4c <adc1+0x1>
     97c:	60 91 4d 3e 	lds	r22, 0x3E4D	; 0x803e4d <adc1+0x2>
     980:	70 91 4e 3e 	lds	r23, 0x3E4E	; 0x803e4e <adc1+0x3>
     984:	48 0f       	add	r20, r24
     986:	59 1f       	adc	r21, r25
     988:	61 1d       	adc	r22, r1
     98a:	71 1d       	adc	r23, r1
     98c:	40 93 4b 3e 	sts	0x3E4B, r20	; 0x803e4b <adc1>
     990:	50 93 4c 3e 	sts	0x3E4C, r21	; 0x803e4c <adc1+0x1>
     994:	60 93 4d 3e 	sts	0x3E4D, r22	; 0x803e4d <adc1+0x2>
     998:	70 93 4e 3e 	sts	0x3E4E, r23	; 0x803e4e <adc1+0x3>
			adc2 += TOUCH_GetSensorValue(1, true);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	f6 d4       	rcall	.+2540   	; 0x138e <TOUCH_GetSensorValue>
     9a2:	40 91 47 3e 	lds	r20, 0x3E47	; 0x803e47 <adc2>
     9a6:	50 91 48 3e 	lds	r21, 0x3E48	; 0x803e48 <adc2+0x1>
     9aa:	60 91 49 3e 	lds	r22, 0x3E49	; 0x803e49 <adc2+0x2>
     9ae:	70 91 4a 3e 	lds	r23, 0x3E4A	; 0x803e4a <adc2+0x3>
     9b2:	48 0f       	add	r20, r24
     9b4:	59 1f       	adc	r21, r25
     9b6:	61 1d       	adc	r22, r1
     9b8:	71 1d       	adc	r23, r1
     9ba:	40 93 47 3e 	sts	0x3E47, r20	; 0x803e47 <adc2>
     9be:	50 93 48 3e 	sts	0x3E48, r21	; 0x803e48 <adc2+0x1>
     9c2:	60 93 49 3e 	sts	0x3E49, r22	; 0x803e49 <adc2+0x2>
     9c6:	70 93 4a 3e 	sts	0x3E4A, r23	; 0x803e4a <adc2+0x3>
		prox1CounterBase[1] = (uint8_t)(((uint16_t)prox1CurrentValue >> 8) & 0x00FF);
		prox1CounterBase[0] = (uint8_t)(((uint16_t)prox1CurrentValue >> 0) & 0x00FF);
			
			
		whileLoopCycle = SAMPLE_COUNT;
		while(whileLoopCycle--)
     9ca:	f0 90 35 3e 	lds	r15, 0x3E35	; 0x803e35 <whileLoopCycle>
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	8f 0d       	add	r24, r15
     9d2:	80 93 35 3e 	sts	0x3E35, r24	; 0x803e35 <whileLoopCycle>
     9d6:	f1 10       	cpse	r15, r1
     9d8:	ca cf       	rjmp	.-108    	; 0x96e <__LOCK_REGION_LENGTH__+0x56e>
		{
			adc1 += TOUCH_GetSensorValue(1, false);
			adc2 += TOUCH_GetSensorValue(1, true);
		}
		//ADC DISABLE
		ADC_0_disable();
     9da:	67 d2       	rcall	.+1230   	; 0xeaa <ADC_0_disable>
		adc1 >>= (2 + overSampleThresholdValue);
     9dc:	80 91 32 3e 	lds	r24, 0x3E32	; 0x803e32 <__data_end>
     9e0:	08 2e       	mov	r0, r24
     9e2:	00 0c       	add	r0, r0
     9e4:	99 0b       	sbc	r25, r25
     9e6:	02 96       	adiw	r24, 0x02	; 2
     9e8:	40 91 4b 3e 	lds	r20, 0x3E4B	; 0x803e4b <adc1>
     9ec:	50 91 4c 3e 	lds	r21, 0x3E4C	; 0x803e4c <adc1+0x1>
     9f0:	60 91 4d 3e 	lds	r22, 0x3E4D	; 0x803e4d <adc1+0x2>
     9f4:	70 91 4e 3e 	lds	r23, 0x3E4E	; 0x803e4e <adc1+0x3>
     9f8:	08 2e       	mov	r0, r24
     9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__LOCK_REGION_LENGTH__+0x604>
     9fc:	75 95       	asr	r23
     9fe:	67 95       	ror	r22
     a00:	57 95       	ror	r21
     a02:	47 95       	ror	r20
     a04:	0a 94       	dec	r0
     a06:	d2 f7       	brpl	.-12     	; 0x9fc <__LOCK_REGION_LENGTH__+0x5fc>
		adc2 >>= (2 + overSampleThresholdValue);
     a08:	80 90 47 3e 	lds	r8, 0x3E47	; 0x803e47 <adc2>
     a0c:	90 90 48 3e 	lds	r9, 0x3E48	; 0x803e48 <adc2+0x1>
     a10:	a0 90 49 3e 	lds	r10, 0x3E49	; 0x803e49 <adc2+0x2>
     a14:	b0 90 4a 3e 	lds	r11, 0x3E4A	; 0x803e4a <adc2+0x3>
     a18:	24 01       	movw	r4, r8
     a1a:	35 01       	movw	r6, r10
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__LOCK_REGION_LENGTH__+0x626>
     a1e:	75 94       	asr	r7
     a20:	67 94       	ror	r6
     a22:	57 94       	ror	r5
     a24:	47 94       	ror	r4
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__LOCK_REGION_LENGTH__+0x61e>
	 
		//rawTotalValue = (int32_t)(adc1 - adc2);
		rawAdc[1][rawAdcCount] = (int32_t)(adc1 - adc2);
     a2a:	20 91 36 3e 	lds	r18, 0x3E36	; 0x803e36 <rawAdcCount>
     a2e:	e2 2f       	mov	r30, r18
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	5a 01       	movw	r10, r20
     a34:	6b 01       	movw	r12, r22
     a36:	a4 18       	sub	r10, r4
     a38:	b5 08       	sbc	r11, r5
     a3a:	c6 08       	sbc	r12, r6
     a3c:	d7 08       	sbc	r13, r7
     a3e:	34 96       	adiw	r30, 0x04	; 4
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	e5 5a       	subi	r30, 0xA5	; 165
     a4a:	f1 4c       	sbci	r31, 0xC1	; 193
     a4c:	a0 82       	st	Z, r10
     a4e:	b1 82       	std	Z+1, r11	; 0x01
     a50:	c2 82       	std	Z+2, r12	; 0x02
     a52:	d3 82       	std	Z+3, r13	; 0x03
	
		for (uint8_t j = 0; j < 4; j++)
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	22 c0       	rjmp	.+68     	; 0xa9c <__LOCK_REGION_LENGTH__+0x69c>
		{
			rawTotal += rawAdc[1][j];
     a58:	e8 2f       	mov	r30, r24
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	34 96       	adiw	r30, 0x04	; 4
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	e5 5a       	subi	r30, 0xA5	; 165
     a68:	f1 4c       	sbci	r31, 0xC1	; 193
     a6a:	40 81       	ld	r20, Z
     a6c:	51 81       	ldd	r21, Z+1	; 0x01
     a6e:	62 81       	ldd	r22, Z+2	; 0x02
     a70:	73 81       	ldd	r23, Z+3	; 0x03
     a72:	80 90 57 3e 	lds	r8, 0x3E57	; 0x803e57 <rawTotal>
     a76:	90 90 58 3e 	lds	r9, 0x3E58	; 0x803e58 <rawTotal+0x1>
     a7a:	a0 90 59 3e 	lds	r10, 0x3E59	; 0x803e59 <rawTotal+0x2>
     a7e:	b0 90 5a 3e 	lds	r11, 0x3E5A	; 0x803e5a <rawTotal+0x3>
     a82:	48 0d       	add	r20, r8
     a84:	59 1d       	adc	r21, r9
     a86:	6a 1d       	adc	r22, r10
     a88:	7b 1d       	adc	r23, r11
     a8a:	40 93 57 3e 	sts	0x3E57, r20	; 0x803e57 <rawTotal>
     a8e:	50 93 58 3e 	sts	0x3E58, r21	; 0x803e58 <rawTotal+0x1>
     a92:	60 93 59 3e 	sts	0x3E59, r22	; 0x803e59 <rawTotal+0x2>
     a96:	70 93 5a 3e 	sts	0x3E5A, r23	; 0x803e5a <rawTotal+0x3>
		adc2 >>= (2 + overSampleThresholdValue);
	 
		//rawTotalValue = (int32_t)(adc1 - adc2);
		rawAdc[1][rawAdcCount] = (int32_t)(adc1 - adc2);
	
		for (uint8_t j = 0; j < 4; j++)
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	84 30       	cpi	r24, 0x04	; 4
     a9e:	e0 f2       	brcs	.-72     	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
		{
			rawTotal += rawAdc[1][j];
		}
		rawTotalValue = (int32_t)(rawTotal >> 1);
     aa0:	40 91 57 3e 	lds	r20, 0x3E57	; 0x803e57 <rawTotal>
     aa4:	50 91 58 3e 	lds	r21, 0x3E58	; 0x803e58 <rawTotal+0x1>
     aa8:	60 91 59 3e 	lds	r22, 0x3E59	; 0x803e59 <rawTotal+0x2>
     aac:	70 91 5a 3e 	lds	r23, 0x3E5A	; 0x803e5a <rawTotal+0x3>
     ab0:	75 95       	asr	r23
     ab2:	67 95       	ror	r22
     ab4:	57 95       	ror	r21
     ab6:	47 95       	ror	r20
     ab8:	40 93 53 3e 	sts	0x3E53, r20	; 0x803e53 <rawTotalValue>
     abc:	50 93 54 3e 	sts	0x3E54, r21	; 0x803e54 <rawTotalValue+0x1>
     ac0:	60 93 55 3e 	sts	0x3E55, r22	; 0x803e55 <rawTotalValue+0x2>
     ac4:	70 93 56 3e 	sts	0x3E56, r23	; 0x803e56 <rawTotalValue+0x3>
		
		QTOUCHADC_REFERANCE_FILTER_P2.Enable = (rawTotalValue - refP2) > 0;
     ac8:	80 90 37 3e 	lds	r8, 0x3E37	; 0x803e37 <refP2>
     acc:	90 90 38 3e 	lds	r9, 0x3E38	; 0x803e38 <refP2+0x1>
     ad0:	a0 90 39 3e 	lds	r10, 0x3E39	; 0x803e39 <refP2+0x2>
     ad4:	b0 90 3a 3e 	lds	r11, 0x3E3A	; 0x803e3a <refP2+0x3>
     ad8:	2a 01       	movw	r4, r20
     ada:	3b 01       	movw	r6, r22
     adc:	48 18       	sub	r4, r8
     ade:	59 08       	sbc	r5, r9
     ae0:	6a 08       	sbc	r6, r10
     ae2:	7b 08       	sbc	r7, r11
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	14 14       	cp	r1, r4
     ae8:	15 04       	cpc	r1, r5
     aea:	16 04       	cpc	r1, r6
     aec:	17 04       	cpc	r1, r7
     aee:	0c f0       	brlt	.+2      	; 0xaf2 <__LOCK_REGION_LENGTH__+0x6f2>
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <QTOUCHADC_REFERANCE_FILTER_P2>
		QTOUCHADC_REFERANCE_FILTER_P2.Counter = QTOUCHADC_REFERANCE_FILTER_P2.Enable == false ? 0 : QTOUCHADC_REFERANCE_FILTER_P2.Counter;
     af6:	81 11       	cpse	r24, r1
     af8:	f0 90 0f 3e 	lds	r15, 0x3E0F	; 0x803e0f <QTOUCHADC_REFERANCE_FILTER_P2+0x1>
     afc:	f0 92 0f 3e 	sts	0x3E0F, r15	; 0x803e0f <QTOUCHADC_REFERANCE_FILTER_P2+0x1>
		
		if(QTOUCHADC_REFERANCE_FILTER_P2.Enable)
     b00:	88 23       	and	r24, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <__LOCK_REGION_LENGTH__+0x706>
     b04:	4a c0       	rjmp	.+148    	; 0xb9a <__LOCK_REGION_LENGTH__+0x79a>
		{
			QTOUCHADC_REFERANCE_FILTER_P2.MaxValue = QTOUCHADC_REFERANCE_FILTER_P2.Counter == 0 ? rawTotalValue : QTOUCHADC_REFERANCE_FILTER_P2.MaxValue < rawTotalValue ? rawTotalValue : QTOUCHADC_REFERANCE_FILTER_P2.MaxValue;
     b06:	ff 20       	and	r15, r15
     b08:	91 f0       	breq	.+36     	; 0xb2e <__LOCK_REGION_LENGTH__+0x72e>
     b0a:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <QTOUCHADC_REFERANCE_FILTER_P2+0x2>
     b0e:	90 91 11 3e 	lds	r25, 0x3E11	; 0x803e11 <QTOUCHADC_REFERANCE_FILTER_P2+0x3>
     b12:	a0 91 12 3e 	lds	r26, 0x3E12	; 0x803e12 <QTOUCHADC_REFERANCE_FILTER_P2+0x4>
     b16:	b0 91 13 3e 	lds	r27, 0x3E13	; 0x803e13 <QTOUCHADC_REFERANCE_FILTER_P2+0x5>
     b1a:	2a 01       	movw	r4, r20
     b1c:	3b 01       	movw	r6, r22
     b1e:	48 17       	cp	r20, r24
     b20:	59 07       	cpc	r21, r25
     b22:	6a 07       	cpc	r22, r26
     b24:	7b 07       	cpc	r23, r27
     b26:	2c f4       	brge	.+10     	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     b28:	2c 01       	movw	r4, r24
     b2a:	3d 01       	movw	r6, r26
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     b2e:	2a 01       	movw	r4, r20
     b30:	3b 01       	movw	r6, r22
     b32:	ee e0       	ldi	r30, 0x0E	; 14
     b34:	fe e3       	ldi	r31, 0x3E	; 62
     b36:	42 82       	std	Z+2, r4	; 0x02
     b38:	53 82       	std	Z+3, r5	; 0x03
     b3a:	64 82       	std	Z+4, r6	; 0x04
     b3c:	75 82       	std	Z+5, r7	; 0x05
			QTOUCHADC_REFERANCE_FILTER_P2.Counter += QTOUCHADC_REFERANCE_FILTER_P2.Counter < QTOUCHADC_REFERANCE_FILTER_P2.CounterLimit ? 1 : -QTOUCHADC_REFERANCE_FILTER_P2.Counter;
     b3e:	87 81       	ldd	r24, Z+7	; 0x07
     b40:	f8 16       	cp	r15, r24
     b42:	18 f0       	brcs	.+6      	; 0xb4a <__LOCK_REGION_LENGTH__+0x74a>
     b44:	8f 2d       	mov	r24, r15
     b46:	81 95       	neg	r24
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <__LOCK_REGION_LENGTH__+0x74c>
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	f8 0e       	add	r15, r24
     b4e:	f0 92 0f 3e 	sts	0x3E0F, r15	; 0x803e0f <QTOUCHADC_REFERANCE_FILTER_P2+0x1>
			if (QTOUCHADC_REFERANCE_FILTER_P2.Counter == 0 || QTOUCHADC_REFERANCE_FILTER_P2.MaxValue <= ((int32_t)(QTOUCHADC_REFERANCE_FILTER_P2.FilterValue / 4) + refP2))
     b52:	ff 20       	and	r15, r15
     b54:	79 f0       	breq	.+30     	; 0xb74 <__LOCK_REGION_LENGTH__+0x774>
     b56:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <QTOUCHADC_REFERANCE_FILTER_P2+0x8>
     b5a:	86 95       	lsr	r24
     b5c:	86 95       	lsr	r24
     b5e:	75 01       	movw	r14, r10
     b60:	64 01       	movw	r12, r8
     b62:	c8 0e       	add	r12, r24
     b64:	d1 1c       	adc	r13, r1
     b66:	e1 1c       	adc	r14, r1
     b68:	f1 1c       	adc	r15, r1
     b6a:	c4 14       	cp	r12, r4
     b6c:	d5 04       	cpc	r13, r5
     b6e:	e6 04       	cpc	r14, r6
     b70:	f7 04       	cpc	r15, r7
     b72:	9c f0       	brlt	.+38     	; 0xb9a <__LOCK_REGION_LENGTH__+0x79a>
			{
				if(QTOUCHADC_REFERANCE_FILTER_P2.MaxValue <= (QTOUCHADC_REFERANCE_FILTER_P2.FilterValue + refP2))
     b74:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <QTOUCHADC_REFERANCE_FILTER_P2+0x8>
     b78:	88 0e       	add	r8, r24
     b7a:	91 1c       	adc	r9, r1
     b7c:	a1 1c       	adc	r10, r1
     b7e:	b1 1c       	adc	r11, r1
     b80:	84 14       	cp	r8, r4
     b82:	95 04       	cpc	r9, r5
     b84:	a6 04       	cpc	r10, r6
     b86:	b7 04       	cpc	r11, r7
     b88:	44 f0       	brlt	.+16     	; 0xb9a <__LOCK_REGION_LENGTH__+0x79a>
				{
					refP2 = QTOUCHADC_REFERANCE_FILTER_P2.MaxValue;
     b8a:	40 92 37 3e 	sts	0x3E37, r4	; 0x803e37 <refP2>
     b8e:	50 92 38 3e 	sts	0x3E38, r5	; 0x803e38 <refP2+0x1>
     b92:	60 92 39 3e 	sts	0x3E39, r6	; 0x803e39 <refP2+0x2>
     b96:	70 92 3a 3e 	sts	0x3E3A, r7	; 0x803e3a <refP2+0x3>
					//refP1 = refP2;
				}
			}
		}
		
		prox2CurrentValue = rawTotalValue - refP2;
     b9a:	80 91 37 3e 	lds	r24, 0x3E37	; 0x803e37 <refP2>
     b9e:	90 91 38 3e 	lds	r25, 0x3E38	; 0x803e38 <refP2+0x1>
     ba2:	7a 01       	movw	r14, r20
     ba4:	e8 1a       	sub	r14, r24
     ba6:	f9 0a       	sbc	r15, r25
     ba8:	c7 01       	movw	r24, r14
		if(prox2CurrentValue < negativeThresholdValue)
     baa:	e0 91 00 3e 	lds	r30, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     bae:	f0 91 01 3e 	lds	r31, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     bb2:	ee 16       	cp	r14, r30
     bb4:	ff 06       	cpc	r15, r31
     bb6:	44 f4       	brge	.+16     	; 0xbc8 <__LOCK_REGION_LENGTH__+0x7c8>
		{
			refP2 = rawTotalValue;
     bb8:	40 93 37 3e 	sts	0x3E37, r20	; 0x803e37 <refP2>
     bbc:	50 93 38 3e 	sts	0x3E38, r21	; 0x803e38 <refP2+0x1>
     bc0:	60 93 39 3e 	sts	0x3E39, r22	; 0x803e39 <refP2+0x2>
     bc4:	70 93 3a 3e 	sts	0x3E3A, r23	; 0x803e3a <refP2+0x3>
		}
		
		rawTotal = 0;
     bc8:	10 92 57 3e 	sts	0x3E57, r1	; 0x803e57 <rawTotal>
     bcc:	10 92 58 3e 	sts	0x3E58, r1	; 0x803e58 <rawTotal+0x1>
     bd0:	10 92 59 3e 	sts	0x3E59, r1	; 0x803e59 <rawTotal+0x2>
     bd4:	10 92 5a 3e 	sts	0x3E5A, r1	; 0x803e5a <rawTotal+0x3>
		adc1 = adc2 = 0;
     bd8:	10 92 47 3e 	sts	0x3E47, r1	; 0x803e47 <adc2>
     bdc:	10 92 48 3e 	sts	0x3E48, r1	; 0x803e48 <adc2+0x1>
     be0:	10 92 49 3e 	sts	0x3E49, r1	; 0x803e49 <adc2+0x2>
     be4:	10 92 4a 3e 	sts	0x3E4A, r1	; 0x803e4a <adc2+0x3>
     be8:	10 92 4b 3e 	sts	0x3E4B, r1	; 0x803e4b <adc1>
     bec:	10 92 4c 3e 	sts	0x3E4C, r1	; 0x803e4c <adc1+0x1>
     bf0:	10 92 4d 3e 	sts	0x3E4D, r1	; 0x803e4d <adc1+0x2>
     bf4:	10 92 4e 3e 	sts	0x3E4E, r1	; 0x803e4e <adc1+0x3>
		prox2CurrentValue = prox2CurrentValue < 0 ? 0 : prox2CurrentValue;
     bf8:	99 23       	and	r25, r25
     bfa:	14 f4       	brge	.+4      	; 0xc00 <__LOCK_REGION_LENGTH__+0x800>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	80 93 7d 3e 	sts	0x3E7D, r24	; 0x803e7d <prox2CurrentValue>
     c04:	90 93 7e 3e 	sts	0x3E7E, r25	; 0x803e7e <prox2CurrentValue+0x1>
		prox2CounterBase[1] = (uint8_t)(((uint16_t)prox2CurrentValue >> 8) & 0x00FF);
     c08:	ef e4       	ldi	r30, 0x4F	; 79
     c0a:	fe e3       	ldi	r31, 0x3E	; 62
     c0c:	91 83       	std	Z+1, r25	; 0x01
		prox2CounterBase[0] = (uint8_t)(((uint16_t)prox2CurrentValue >> 0) & 0x00FF);
     c0e:	80 83       	st	Z, r24
			
		
		rawAdcCount += rawAdcCount < 3 ? 1 : -rawAdcCount;
     c10:	23 30       	cpi	r18, 0x03	; 3
     c12:	18 f0       	brcs	.+6      	; 0xc1a <__LOCK_REGION_LENGTH__+0x81a>
     c14:	82 2f       	mov	r24, r18
     c16:	81 95       	neg	r24
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__LOCK_REGION_LENGTH__+0x81c>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	28 0f       	add	r18, r24
     c1e:	20 93 36 3e 	sts	0x3E36, r18	; 0x803e36 <rawAdcCount>
		
		if (BatteryLevelCalculateCounter > BAT_CALCULATE_REFRESH_CONSTANT)
     c22:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter>
     c26:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x1>
     c2a:	a0 91 04 3e 	lds	r26, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x2>
     c2e:	b0 91 05 3e 	lds	r27, 0x3E05	; 0x803e05 <BatteryLevelCalculateCounter+0x3>
     c32:	81 38       	cpi	r24, 0x81	; 129
     c34:	91 45       	sbci	r25, 0x51	; 81
     c36:	a1 40       	sbci	r26, 0x01	; 1
     c38:	b1 05       	cpc	r27, r1
     c3a:	48 f1       	brcs	.+82     	; 0xc8e <__LOCK_REGION_LENGTH__+0x88e>
		{
			batVar = (uint8_t)((((float)BatteryLevelCounter) / BAT_FULL_CAPACITY) * 100.0f);
     c3c:	20 91 06 3e 	lds	r18, 0x3E06	; 0x803e06 <BatteryLevelCounter>
     c40:	30 91 07 3e 	lds	r19, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x1>
     c44:	40 91 08 3e 	lds	r20, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x2>
     c48:	50 91 09 3e 	lds	r21, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x3>
     c4c:	60 91 0a 3e 	lds	r22, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x4>
     c50:	70 91 0b 3e 	lds	r23, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x5>
     c54:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x6>
     c58:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <BatteryLevelCounter+0x7>
     c5c:	1d d5       	rcall	.+2618   	; 0x1698 <__floatundisf>
     c5e:	2a ed       	ldi	r18, 0xDA	; 218
     c60:	38 ef       	ldi	r19, 0xF8	; 248
     c62:	4a e1       	ldi	r20, 0x1A	; 26
     c64:	5f e4       	ldi	r21, 0x4F	; 79
     c66:	fe d3       	rcall	.+2044   	; 0x1464 <__divsf3>
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	48 ec       	ldi	r20, 0xC8	; 200
     c6e:	52 e4       	ldi	r21, 0x42	; 66
     c70:	b2 d5       	rcall	.+2916   	; 0x17d6 <__mulsf3>
     c72:	a6 d4       	rcall	.+2380   	; 0x15c0 <__fixunssfsi>
     c74:	60 93 33 3e 	sts	0x3E33, r22	; 0x803e33 <batVar>
			FLASH_0_write_eeprom_byte(0, batVar);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	e4 d1       	rcall	.+968    	; 0x1046 <FLASH_0_write_eeprom_byte>
			BatteryLevelCalculateCounter = 0;
     c7e:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <BatteryLevelCalculateCounter>
     c82:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <BatteryLevelCalculateCounter+0x1>
     c86:	10 92 04 3e 	sts	0x3E04, r1	; 0x803e04 <BatteryLevelCalculateCounter+0x2>
     c8a:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <BatteryLevelCalculateCounter+0x3>
		}
		BatteryLevelCalculateCounter++;
     c8e:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <BatteryLevelCalculateCounter>
     c92:	90 91 03 3e 	lds	r25, 0x3E03	; 0x803e03 <BatteryLevelCalculateCounter+0x1>
     c96:	a0 91 04 3e 	lds	r26, 0x3E04	; 0x803e04 <BatteryLevelCalculateCounter+0x2>
     c9a:	b0 91 05 3e 	lds	r27, 0x3E05	; 0x803e05 <BatteryLevelCalculateCounter+0x3>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	a1 1d       	adc	r26, r1
     ca2:	b1 1d       	adc	r27, r1
     ca4:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <BatteryLevelCalculateCounter>
     ca8:	90 93 03 3e 	sts	0x3E03, r25	; 0x803e03 <BatteryLevelCalculateCounter+0x1>
     cac:	a0 93 04 3e 	sts	0x3E04, r26	; 0x803e04 <BatteryLevelCalculateCounter+0x2>
     cb0:	b0 93 05 3e 	sts	0x3E05, r27	; 0x803e05 <BatteryLevelCalculateCounter+0x3>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
     cb4:	80 91 33 3e 	lds	r24, 0x3E33	; 0x803e33 <batVar>
     cb8:	23 2d       	mov	r18, r3
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	48 2f       	mov	r20, r24
     cc2:	40 7f       	andi	r20, 0xF0	; 240
     cc4:	24 2b       	or	r18, r20
     cc6:	02 2b       	or	r16, r18
     cc8:	e0 e8       	ldi	r30, 0x80	; 128
     cca:	fe e3       	ldi	r31, 0x3E	; 62
     ccc:	00 83       	st	Z, r16
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
     cce:	90 e1       	ldi	r25, 0x10	; 16
     cd0:	89 9f       	mul	r24, r25
     cd2:	90 01       	movw	r18, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	82 2d       	mov	r24, r2
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	82 2b       	or	r24, r18
     ce0:	18 2b       	or	r17, r24
     ce2:	11 83       	std	Z+1, r17	; 0x01
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
     ce4:	80 91 2a 3e 	lds	r24, 0x3E2A	; 0x803e2a <payloadBuffer+0x9>
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7])				||	\
						(prox2CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 8] - 5)	||	\
     ce8:	08 13       	cpse	r16, r24
     cea:	32 c0       	rjmp	.+100    	; 0xd50 <__LOCK_REGION_LENGTH__+0x950>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
     cec:	80 91 2b 3e 	lds	r24, 0x3E2B	; 0x803e2b <payloadBuffer+0xa>
		BatteryLevelCalculateCounter++;
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
     cf0:	18 13       	cpse	r17, r24
     cf2:	30 c0       	rjmp	.+96     	; 0xd54 <__LOCK_REGION_LENGTH__+0x954>
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
     cf4:	90 91 52 3e 	lds	r25, 0x3E52	; 0x803e52 <prox1CounterBase+0x1>
     cf8:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <payloadBuffer+0xb>
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
     cfc:	98 13       	cpse	r25, r24
     cfe:	2c c0       	rjmp	.+88     	; 0xd58 <__LOCK_REGION_LENGTH__+0x958>
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
     d00:	20 91 51 3e 	lds	r18, 0x3E51	; 0x803e51 <prox1CounterBase>
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	80 91 2d 3e 	lds	r24, 0x3E2D	; 0x803e2d <payloadBuffer+0xc>
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	ac 01       	movw	r20, r24
     d0e:	45 50       	subi	r20, 0x05	; 5
     d10:	51 09       	sbc	r21, r1
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
     d12:	24 17       	cp	r18, r20
     d14:	35 07       	cpc	r19, r21
     d16:	14 f1       	brlt	.+68     	; 0xd5c <__LOCK_REGION_LENGTH__+0x95c>
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
     d18:	05 96       	adiw	r24, 0x05	; 5
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	04 f1       	brlt	.+64     	; 0xd60 <__LOCK_REGION_LENGTH__+0x960>
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7])				||	\
     d20:	90 91 50 3e 	lds	r25, 0x3E50	; 0x803e50 <prox2CounterBase+0x1>
     d24:	80 91 2e 3e 	lds	r24, 0x3E2E	; 0x803e2e <payloadBuffer+0xd>
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
     d28:	98 13       	cpse	r25, r24
     d2a:	1c c0       	rjmp	.+56     	; 0xd64 <__LOCK_REGION_LENGTH__+0x964>
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7])				||	\
						(prox2CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 8] - 5)	||	\
     d2c:	20 91 4f 3e 	lds	r18, 0x3E4F	; 0x803e4f <prox2CounterBase>
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	80 91 2f 3e 	lds	r24, 0x3E2F	; 0x803e2f <payloadBuffer+0xe>
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	ac 01       	movw	r20, r24
     d3a:	45 50       	subi	r20, 0x05	; 5
     d3c:	51 09       	sbc	r21, r1
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7])				||	\
     d3e:	24 17       	cp	r18, r20
     d40:	35 07       	cpc	r19, r21
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__LOCK_REGION_LENGTH__+0x968>
						(prox2CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 8] - 5)	||	\
						(prox2CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 8] + 5);
     d44:	05 96       	adiw	r24, 0x05	; 5
						(seatFlagStatus[1]	 != payloadBuffer[payloadBufferStartByte + 4])				||	\
						(prox1CounterBase[1] != payloadBuffer[payloadBufferStartByte + 5])				||	\
						(prox1CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 6] - 5)	||	\
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7])				||	\
						(prox2CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 8] - 5)	||	\
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	84 f4       	brge	.+32     	; 0xd6c <__LOCK_REGION_LENGTH__+0x96c>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0b c0       	rjmp	.+22     	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	07 c0       	rjmp	.+14     	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <__LOCK_REGION_LENGTH__+0x96e>
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	81 70       	andi	r24, 0x01	; 1
		BatteryLevelCalculateCounter++;
		
		seatFlagStatus[0] = ((batVar << 0) & 0xF0) | 0 << 2 | In_SB1 << 1 | In_PSD1;
		seatFlagStatus[1] = ((batVar << 4) & 0xF0) | 0 << 2 | In_SB2 << 1 | In_PSD2;
		
		isDataChanged = (seatFlagStatus[0]	 != payloadBuffer[payloadBufferStartByte + 3])				||	\
     d70:	80 93 34 3e 	sts	0x3E34, r24	; 0x803e34 <isDataChanged>
						(prox1CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 6] + 5)	||	\
						(prox2CounterBase[1] != payloadBuffer[payloadBufferStartByte + 7])				||	\
						(prox2CounterBase[0] < (int16_t)payloadBuffer[payloadBufferStartByte + 8] - 5)	||	\
						(prox2CounterBase[0] > (int16_t)payloadBuffer[payloadBufferStartByte + 8] + 5);
		
		repeatDataCounter = isDataChanged ? 20 : repeatDataCounter;
     d74:	81 11       	cpse	r24, r1
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <__LOCK_REGION_LENGTH__+0x97e>
     d78:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <repeatDataCounter>
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <__LOCK_REGION_LENGTH__+0x980>
     d7e:	84 e1       	ldi	r24, 0x14	; 20
     d80:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <repeatDataCounter>
		
		//if(repeatDataCounter)
		{
			payloadBuffer[payloadBufferStartByte + 3] = seatFlagStatus[0];
     d84:	00 93 2a 3e 	sts	0x3E2A, r16	; 0x803e2a <payloadBuffer+0x9>
			payloadBuffer[payloadBufferStartByte + 4] = seatFlagStatus[1];
     d88:	10 93 2b 3e 	sts	0x3E2B, r17	; 0x803e2b <payloadBuffer+0xa>
			payloadBuffer[payloadBufferStartByte + 5] = prox1CounterBase[1];
     d8c:	e1 e5       	ldi	r30, 0x51	; 81
     d8e:	fe e3       	ldi	r31, 0x3E	; 62
     d90:	81 81       	ldd	r24, Z+1	; 0x01
     d92:	80 93 2c 3e 	sts	0x3E2C, r24	; 0x803e2c <payloadBuffer+0xb>
			payloadBuffer[payloadBufferStartByte + 6] = prox1CounterBase[0];
     d96:	80 81       	ld	r24, Z
     d98:	80 93 2d 3e 	sts	0x3E2D, r24	; 0x803e2d <payloadBuffer+0xc>
			payloadBuffer[payloadBufferStartByte + 7] = prox2CounterBase[1];
     d9c:	ef e4       	ldi	r30, 0x4F	; 79
     d9e:	fe e3       	ldi	r31, 0x3E	; 62
     da0:	81 81       	ldd	r24, Z+1	; 0x01
     da2:	80 93 2e 3e 	sts	0x3E2E, r24	; 0x803e2e <payloadBuffer+0xd>
			payloadBuffer[payloadBufferStartByte + 8] = prox2CounterBase[0];
     da6:	80 81       	ld	r24, Z
     da8:	80 93 2f 3e 	sts	0x3E2F, r24	; 0x803e2f <payloadBuffer+0xe>
			payloadBuffer[payloadBufferStartByte + 9] = SX1243CRC8(&payloadBuffer[payloadBufferStartByte + 3]);
     dac:	8a e2       	ldi	r24, 0x2A	; 42
     dae:	9e e3       	ldi	r25, 0x3E	; 62
     db0:	7d d2       	rcall	.+1274   	; 0x12ac <SX1243CRC8>
     db2:	80 93 30 3e 	sts	0x3E30, r24	; 0x803e30 <payloadBuffer+0xf>
			
			if(SX1243Process() != SX_OK)
     db6:	8a d2       	rcall	.+1300   	; 0x12cc <SX1243Process>
     db8:	88 23       	and	r24, r24
     dba:	31 f0       	breq	.+12     	; 0xdc8 <__LOCK_REGION_LENGTH__+0x9c8>
			{
				repeatDataCounter++;
     dbc:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <repeatDataCounter>
     dc0:	8f 5f       	subi	r24, 0xFF	; 255
     dc2:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <repeatDataCounter>
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <__LOCK_REGION_LENGTH__+0x9d2>
			}
			else
				repeatDataCounter--;
     dc8:	80 91 20 3e 	lds	r24, 0x3E20	; 0x803e20 <repeatDataCounter>
     dcc:	81 50       	subi	r24, 0x01	; 1
     dce:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <repeatDataCounter>
			BatteryLevelCounter -= BAT_TRANSMIT_CONSTANT;
     dd2:	20 91 06 3e 	lds	r18, 0x3E06	; 0x803e06 <BatteryLevelCounter>
     dd6:	30 91 07 3e 	lds	r19, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x1>
     dda:	40 91 08 3e 	lds	r20, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x2>
     dde:	50 91 09 3e 	lds	r21, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x3>
     de2:	60 91 0a 3e 	lds	r22, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x4>
     de6:	70 91 0b 3e 	lds	r23, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x5>
     dea:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x6>
     dee:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <BatteryLevelCounter+0x7>
     df2:	a9 ef       	ldi	r26, 0xF9	; 249
     df4:	84 d5       	rcall	.+2824   	; 0x18fe <__adddi3_s8>
     df6:	20 93 06 3e 	sts	0x3E06, r18	; 0x803e06 <BatteryLevelCounter>
     dfa:	30 93 07 3e 	sts	0x3E07, r19	; 0x803e07 <BatteryLevelCounter+0x1>
     dfe:	40 93 08 3e 	sts	0x3E08, r20	; 0x803e08 <BatteryLevelCounter+0x2>
     e02:	50 93 09 3e 	sts	0x3E09, r21	; 0x803e09 <BatteryLevelCounter+0x3>
     e06:	60 93 0a 3e 	sts	0x3E0A, r22	; 0x803e0a <BatteryLevelCounter+0x4>
     e0a:	70 93 0b 3e 	sts	0x3E0B, r23	; 0x803e0b <BatteryLevelCounter+0x5>
     e0e:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <BatteryLevelCounter+0x6>
     e12:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <BatteryLevelCounter+0x7>
		//printf("adc1: %4d, adc2: %4d\r",adc1, adc2);
		//printf("P1: %4d, P2: %4d\r",prox1CurrentValue, prox2CurrentValue);
		
		//_delay_ms(5);
		
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     e16:	e0 e5       	ldi	r30, 0x50	; 80
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	89 7f       	andi	r24, 0xF9	; 249
     e1e:	84 60       	ori	r24, 0x04	; 4
     e20:	80 83       	st	Z, r24
		cli();
     e22:	f8 94       	cli
		
		sleep_enable();
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	80 83       	st	Z, r24
		sei();
     e2a:	78 94       	sei
		sleep_cpu();
     e2c:	88 95       	sleep
		sleep_disable();
     e2e:	80 81       	ld	r24, Z
     e30:	8e 7f       	andi	r24, 0xFE	; 254
     e32:	80 83       	st	Z, r24
		cli();
     e34:	f8 94       	cli
		BatteryLevelCounter -= BAT_SLEEP_CONSTANT;
     e36:	20 91 06 3e 	lds	r18, 0x3E06	; 0x803e06 <BatteryLevelCounter>
     e3a:	30 91 07 3e 	lds	r19, 0x3E07	; 0x803e07 <BatteryLevelCounter+0x1>
     e3e:	40 91 08 3e 	lds	r20, 0x3E08	; 0x803e08 <BatteryLevelCounter+0x2>
     e42:	50 91 09 3e 	lds	r21, 0x3E09	; 0x803e09 <BatteryLevelCounter+0x3>
     e46:	60 91 0a 3e 	lds	r22, 0x3E0A	; 0x803e0a <BatteryLevelCounter+0x4>
     e4a:	70 91 0b 3e 	lds	r23, 0x3E0B	; 0x803e0b <BatteryLevelCounter+0x5>
     e4e:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <BatteryLevelCounter+0x6>
     e52:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <BatteryLevelCounter+0x7>
     e56:	a9 ec       	ldi	r26, 0xC9	; 201
     e58:	52 d5       	rcall	.+2724   	; 0x18fe <__adddi3_s8>
     e5a:	20 93 06 3e 	sts	0x3E06, r18	; 0x803e06 <BatteryLevelCounter>
     e5e:	30 93 07 3e 	sts	0x3E07, r19	; 0x803e07 <BatteryLevelCounter+0x1>
     e62:	40 93 08 3e 	sts	0x3E08, r20	; 0x803e08 <BatteryLevelCounter+0x2>
     e66:	50 93 09 3e 	sts	0x3E09, r21	; 0x803e09 <BatteryLevelCounter+0x3>
     e6a:	60 93 0a 3e 	sts	0x3E0A, r22	; 0x803e0a <BatteryLevelCounter+0x4>
     e6e:	70 93 0b 3e 	sts	0x3E0B, r23	; 0x803e0b <BatteryLevelCounter+0x5>
     e72:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <BatteryLevelCounter+0x6>
     e76:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <BatteryLevelCounter+0x7>
		
		if(CBT_get_level() == false)
     e7a:	13 99       	sbic	0x02, 3	; 2
     e7c:	bd cb       	rjmp	.-2182   	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		{
			while(CBT_get_level() == false);
     e7e:	13 9b       	sbis	0x02, 3	; 2
     e80:	fe cf       	rjmp	.-4      	; 0xe7e <__LOCK_REGION_LENGTH__+0xa7e>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	68 ed       	ldi	r22, 0xD8	; 216
     e86:	81 e4       	ldi	r24, 0x41	; 65
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	f7 d0       	rcall	.+494    	; 0x107a <protected_write_io>
     e8c:	b5 cb       	rjmp	.-2198   	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>

00000e8e <ADC_0_init>:

	//ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV2_gc    /* CLK_PER divided by 128 */
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
     e90:	f6 e0       	ldi	r31, 0x06	; 6
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	82 83       	std	Z+2, r24	; 0x02

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_8BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret

00000e9e <ADC_0_enable>:
 *
 * \return Nothing
 */
void ADC_0_enable()
{
	ADC0.CTRLA |= ADC_ENABLE_bm;
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f6 e0       	ldi	r31, 0x06	; 6
     ea2:	80 81       	ld	r24, Z
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	80 83       	st	Z, r24
     ea8:	08 95       	ret

00000eaa <ADC_0_disable>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
     eaa:	e0 e0       	ldi	r30, 0x00	; 0
     eac:	f6 e0       	ldi	r31, 0x06	; 6
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	80 83       	st	Z, r24
     eb4:	08 95       	ret

00000eb6 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     eb6:	e0 e0       	ldi	r30, 0x00	; 0
     eb8:	f6 e0       	ldi	r31, 0x06	; 6
     eba:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 87       	std	Z+8, r24	; 0x08
     ec0:	08 95       	ret

00000ec2 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
     ec2:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <payloadBufferStartByte+0x7f6cdf>
}
     ec6:	81 70       	andi	r24, 0x01	; 1
     ec8:	08 95       	ret

00000eca <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
     eca:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <payloadBufferStartByte+0x7f6ce4>
     ece:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <payloadBufferStartByte+0x7f6ce5>
}
     ed2:	08 95       	ret

00000ed4 <ADC_0_get_conversion>:
 */
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
     ed4:	f0 df       	rcall	.-32     	; 0xeb6 <ADC_0_start_conversion>
	while (!ADC_0_is_conversion_done())
     ed6:	f5 df       	rcall	.-22     	; 0xec2 <ADC_0_is_conversion_done>
     ed8:	88 23       	and	r24, r24
     eda:	e9 f3       	breq	.-6      	; 0xed6 <ADC_0_get_conversion+0x2>
		;
	res = ADC_0_get_conversion_result();
     edc:	f6 df       	rcall	.-20     	; 0xeca <ADC_0_get_conversion_result>
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     ede:	e0 e0       	ldi	r30, 0x00	; 0
     ee0:	f6 e0       	ldi	r31, 0x06	; 6
     ee2:	23 85       	ldd	r18, Z+11	; 0x0b
     ee4:	21 60       	ori	r18, 0x01	; 1
     ee6:	23 87       	std	Z+11, r18	; 0x0b
	return res;
}
     ee8:	08 95       	ret

00000eea <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	08 95       	ret

00000eee <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     eee:	43 e0       	ldi	r20, 0x03	; 3
     ef0:	68 ed       	ldi	r22, 0xD8	; 216
     ef2:	81 e6       	ldi	r24, 0x61	; 97
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	c1 d0       	rcall	.+386    	; 0x107a <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret

00000efc <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     efc:	78 94       	sei

	return 0;
}
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret

00000f02 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f06:	e8 2f       	mov	r30, r24
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	e0 5f       	subi	r30, 0xF0	; 240
     f0c:	fb 4f       	sbci	r31, 0xFB	; 251
     f0e:	90 81       	ld	r25, Z
     f10:	98 60       	ori	r25, 0x08	; 8
     f12:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	b0 f3       	brcs	.-20     	; 0xf06 <mcu_init+0x4>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f1e:	e8 2f       	mov	r30, r24
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	e0 5d       	subi	r30, 0xD0	; 208
     f24:	fb 4f       	sbci	r31, 0xFB	; 251
     f26:	90 81       	ld	r25, Z
     f28:	98 60       	ori	r25, 0x08	; 8
     f2a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	88 30       	cpi	r24, 0x08	; 8
     f30:	b0 f3       	brcs	.-20     	; 0xf1e <mcu_init+0x1c>
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f36:	e8 2f       	mov	r30, r24
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	e0 5b       	subi	r30, 0xB0	; 176
     f3c:	fb 4f       	sbci	r31, 0xFB	; 251
     f3e:	90 81       	ld	r25, Z
     f40:	98 60       	ori	r25, 0x08	; 8
     f42:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	b0 f3       	brcs	.-20     	; 0xf36 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     f4a:	08 95       	ret

00000f4c <ADC_0_initialization>:
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     f4c:	e6 e1       	ldi	r30, 0x16	; 22
     f4e:	f4 e0       	ldi	r31, 0x04	; 4
     f50:	80 81       	ld	r24, Z
     f52:	88 7f       	andi	r24, 0xF8	; 248
     f54:	84 60       	ori	r24, 0x04	; 4
     f56:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     f58:	80 81       	ld	r24, Z
     f5a:	87 7f       	andi	r24, 0xF7	; 247
     f5c:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     f5e:	e0 e3       	ldi	r30, 0x30	; 48
     f60:	f4 e0       	ldi	r31, 0x04	; 4
     f62:	80 81       	ld	r24, Z
     f64:	88 7f       	andi	r24, 0xF8	; 248
     f66:	84 60       	ori	r24, 0x04	; 4
     f68:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     f6a:	80 81       	ld	r24, Z
     f6c:	87 7f       	andi	r24, 0xF7	; 247
     f6e:	80 83       	st	Z, r24
	// Disable digital input buffer
	SY_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	SY_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
     f70:	8e df       	rcall	.-228    	; 0xe8e <ADC_0_init>
     f72:	08 95       	ret

00000f74 <FLASH_0_initialization>:
}

/* Initialize registers */
void FLASH_0_initialization(void)
{
	FLASH_0_init();
     f74:	62 d0       	rcall	.+196    	; 0x103a <FLASH_0_init>
     f76:	08 95       	ret

00000f78 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     f78:	c4 df       	rcall	.-120    	; 0xf02 <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f7a:	80 b1       	in	r24, 0x00	; 0
     f7c:	87 7f       	andi	r24, 0xF7	; 247
     f7e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     f80:	e3 e1       	ldi	r30, 0x13	; 19
     f82:	f4 e0       	ldi	r31, 0x04	; 4
     f84:	80 81       	ld	r24, Z
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f8a:	80 b1       	in	r24, 0x00	; 0
     f8c:	8f 7e       	andi	r24, 0xEF	; 239
     f8e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     f90:	e4 e1       	ldi	r30, 0x14	; 20
     f92:	f4 e0       	ldi	r31, 0x04	; 4
     f94:	80 81       	ld	r24, Z
     f96:	88 60       	ori	r24, 0x08	; 8
     f98:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f9a:	80 b1       	in	r24, 0x00	; 0
     f9c:	8f 7d       	andi	r24, 0xDF	; 223
     f9e:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     fa0:	e5 e1       	ldi	r30, 0x15	; 21
     fa2:	f4 e0       	ldi	r31, 0x04	; 4
     fa4:	80 81       	ld	r24, Z
     fa6:	88 60       	ori	r24, 0x08	; 8
     fa8:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     faa:	81 b1       	in	r24, 0x01	; 1
     fac:	8f 77       	andi	r24, 0x7F	; 127
     fae:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     fb0:	80 b1       	in	r24, 0x00	; 0
     fb2:	80 68       	ori	r24, 0x80	; 128
     fb4:	80 b9       	out	0x00, r24	; 0
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     fb6:	84 b1       	in	r24, 0x04	; 4
     fb8:	8d 7f       	andi	r24, 0xFD	; 253
     fba:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     fbc:	e1 e3       	ldi	r30, 0x31	; 49
     fbe:	f4 e0       	ldi	r31, 0x04	; 4
     fc0:	80 81       	ld	r24, Z
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     fc6:	84 b1       	in	r24, 0x04	; 4
     fc8:	8f 7e       	andi	r24, 0xEF	; 239
     fca:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     fcc:	e4 e3       	ldi	r30, 0x34	; 52
     fce:	f4 e0       	ldi	r31, 0x04	; 4
     fd0:	80 81       	ld	r24, Z
     fd2:	88 60       	ori	r24, 0x08	; 8
     fd4:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     fd6:	84 b1       	in	r24, 0x04	; 4
     fd8:	8f 7d       	andi	r24, 0xDF	; 223
     fda:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     fdc:	e5 e3       	ldi	r30, 0x35	; 53
     fde:	f4 e0       	ldi	r31, 0x04	; 4
     fe0:	80 81       	ld	r24, Z
     fe2:	88 60       	ori	r24, 0x08	; 8
     fe4:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     fe6:	88 b1       	in	r24, 0x08	; 8
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     fec:	e1 e5       	ldi	r30, 0x51	; 81
     fee:	f4 e0       	ldi	r31, 0x04	; 4
     ff0:	80 81       	ld	r24, Z
     ff2:	88 60       	ori	r24, 0x08	; 8
     ff4:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     ff6:	88 b1       	in	r24, 0x08	; 8
     ff8:	8b 7f       	andi	r24, 0xFB	; 251
     ffa:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     ffc:	e2 e5       	ldi	r30, 0x52	; 82
     ffe:	f4 e0       	ldi	r31, 0x04	; 4
    1000:	80 81       	ld	r24, Z
    1002:	88 60       	ori	r24, 0x08	; 8
    1004:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1006:	89 b1       	in	r24, 0x09	; 9
    1008:	87 7f       	andi	r24, 0xF7	; 247
    100a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    100c:	88 b1       	in	r24, 0x08	; 8
    100e:	88 60       	ori	r24, 0x08	; 8
    1010:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1012:	89 b1       	in	r24, 0x09	; 9
    1014:	8f 7e       	andi	r24, 0xEF	; 239
    1016:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1018:	88 b1       	in	r24, 0x08	; 8
    101a:	80 61       	ori	r24, 0x10	; 16
    101c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    101e:	89 b1       	in	r24, 0x09	; 9
    1020:	8f 7d       	andi	r24, 0xDF	; 223
    1022:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1024:	88 b1       	in	r24, 0x08	; 8
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	NRESET_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
    102a:	61 df       	rcall	.-318    	; 0xeee <CLKCTRL_init>

	RTC_0_init();
    102c:	2a d0       	rcall	.+84     	; 0x1082 <RTC_0_init>

	ADC_0_initialization();
    102e:	8e df       	rcall	.-228    	; 0xf4c <ADC_0_initialization>

	FLASH_0_initialization();
    1030:	a1 df       	rcall	.-190    	; 0xf74 <FLASH_0_initialization>

	CPUINT_init();
    1032:	64 df       	rcall	.-312    	; 0xefc <CPUINT_init>

	SLPCTRL_init();
    1034:	3c d0       	rcall	.+120    	; 0x10ae <SLPCTRL_init>

	BOD_init();
    1036:	59 df       	rcall	.-334    	; 0xeea <BOD_init>
    1038:	08 95       	ret

0000103a <FLASH_0_init>:
	//		 | 0 << NVMCTRL_BOOTLOCK_bp; /* Boot Lock: disabled */

	// NVMCTRL.INTCTRL = 0 << NVMCTRL_EEREADY_bp; /* EEPROM Ready: disabled */

	return 0;
}
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	08 95       	ret

0000103e <FLASH_0_read_eeprom_byte>:
uint8_t FLASH_0_read_eeprom_byte(eeprom_adr_t eeprom_adr)
{

	// Read operation will be stalled by hardware if any write is in progress

	return *(uint8_t *)(EEPROM_START + eeprom_adr);
    103e:	9c 5e       	subi	r25, 0xEC	; 236
}
    1040:	fc 01       	movw	r30, r24
    1042:	80 81       	ld	r24, Z
    1044:	08 95       	ret

00001046 <FLASH_0_write_eeprom_byte>:
 * \param[in] data The byte to write
 *
 * \return Status of write operation
 */
nvmctrl_status_t FLASH_0_write_eeprom_byte(eeprom_adr_t eeprom_adr, uint8_t data)
{
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ec 01       	movw	r28, r24
    104e:	16 2f       	mov	r17, r22

	/* Wait for completion of previous write */
	while (NVMCTRL.STATUS & NVMCTRL_EEBUSY_bm)
    1050:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <payloadBufferStartByte+0x7f76d6>
    1054:	81 fd       	sbrc	r24, 1
    1056:	fc cf       	rjmp	.-8      	; 0x1050 <FLASH_0_write_eeprom_byte+0xa>
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_spm(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_SPM_gc, value);
    1058:	44 e0       	ldi	r20, 0x04	; 4
    105a:	6d e9       	ldi	r22, 0x9D	; 157
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	90 e1       	ldi	r25, 0x10	; 16
    1060:	0c d0       	rcall	.+24     	; 0x107a <protected_write_io>

	/* Clear page buffer */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEBUFCLR_gc);

	/* Write byte to page buffer */
	*(uint8_t *)(EEPROM_START + eeprom_adr) = data;
    1062:	dc 5e       	subi	r29, 0xEC	; 236
    1064:	18 83       	st	Y, r17
    1066:	43 e0       	ldi	r20, 0x03	; 3
    1068:	6d e9       	ldi	r22, 0x9D	; 157
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e1       	ldi	r25, 0x10	; 16
    106e:	05 d0       	rcall	.+10     	; 0x107a <protected_write_io>

	/* Erase byte and program it with desired value */
	ccp_write_spm((void *)&NVMCTRL.CTRLA, NVMCTRL_CMD_PAGEERASEWRITE_gc);

	return NVM_OK;
}
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	08 95       	ret

0000107a <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    107a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    107c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    107e:	40 83       	st	Z, r20
	ret                             // Return to caller
    1080:	08 95       	ret

00001082 <RTC_0_init>:
 * \return Initialization status.
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    1082:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <payloadBufferStartByte+0x7f6815>
    1086:	81 11       	cpse	r24, r1
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <RTC_0_init>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32768_gc /* 32768 */
    108a:	e0 e4       	ldi	r30, 0x40	; 64
    108c:	f1 e0       	ldi	r31, 0x01	; 1
    108e:	88 e7       	ldi	r24, 0x78	; 120
    1090:	80 83       	st	Z, r24
	            | 0 << RTC_RTCEN_bp       /* Enable: disabled */
	            | 0 << RTC_RUNSTDBY_bp;   /* Run In Standby: disabled */

	// RTC.PER = 0xffff; /* Period: 0xffff */

	RTC.CLKSEL = RTC_CLKSEL_INT1K_gc; /* 32KHz divided by 32 */
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	87 83       	std	Z+7, r24	; 0x07
	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.INTCTRL = 0 << RTC_CMP_bp /* Compare Match Interrupt enable: disabled */
	//		 | 0 << RTC_OVF_bp; /* Overflow Interrupt enable: disabled */

	while (RTC.PITSTATUS > 0) { /* Wait for all register to be synchronized */
    1096:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <payloadBufferStartByte+0x7f6825>
    109a:	81 11       	cpse	r24, r1
    109c:	fc cf       	rjmp	.-8      	; 0x1096 <RTC_0_init+0x14>
	}

	RTC.PITCTRLA = RTC_PERIOD_CYC256_gc /* RTC Clock Cycles 1024 */
    109e:	e0 e4       	ldi	r30, 0x40	; 64
    10a0:	f1 e0       	ldi	r31, 0x01	; 1
    10a2:	89 e3       	ldi	r24, 0x39	; 57
    10a4:	80 8b       	std	Z+16, r24	; 0x10
	               | 1 << RTC_PITEN_bp;   /* Enable: enabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret

000010ae <SLPCTRL_init>:
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{

	SLPCTRL.CTRLA = 1 << SLPCTRL_SEN_bp       /* Sleep enable: enabled */
    10ae:	85 e0       	ldi	r24, 0x05	; 5
    10b0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <payloadBufferStartByte+0x7f6724>
	                | SLPCTRL_SMODE_PDOWN_gc; /* Power-down Mode */

	return 0;
}
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	08 95       	ret

000010b8 <SpiOut>:
*
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
    10b8:	90 e8       	ldi	r25, 0x80	; 128
	while (bitMask > 0)
    10ba:	11 c0       	rjmp	.+34     	; 0x10de <SpiOut+0x26>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10bc:	29 b1       	in	r18, 0x09	; 9
    10be:	27 7f       	andi	r18, 0xF7	; 247
    10c0:	29 b9       	out	0x09, r18	; 9
	{
		CTRL_set_level(0);
		DATA_set_level( outData & bitMask );
    10c2:	29 2f       	mov	r18, r25
    10c4:	28 23       	and	r18, r24
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <SpiOut+0x18>
		VPORTC.OUT |= (1 << pin);
    10c8:	29 b1       	in	r18, 0x09	; 9
    10ca:	20 61       	ori	r18, 0x10	; 16
    10cc:	29 b9       	out	0x09, r18	; 9
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <SpiOut+0x1e>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10d0:	29 b1       	in	r18, 0x09	; 9
    10d2:	2f 7e       	andi	r18, 0xEF	; 239
    10d4:	29 b9       	out	0x09, r18	; 9
		bitMask >>= 1;
    10d6:	96 95       	lsr	r25
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    10d8:	29 b1       	in	r18, 0x09	; 9
    10da:	28 60       	ori	r18, 0x08	; 8
    10dc:	29 b9       	out	0x09, r18	; 9
* \retval None
*/
void SpiOut(U8 outData )
{
	U8 bitMask = 0x80;
	while (bitMask > 0)
    10de:	91 11       	cpse	r25, r1
    10e0:	ed cf       	rjmp	.-38     	; 0x10bc <SpiOut+0x4>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    10e2:	89 b1       	in	r24, 0x09	; 9
    10e4:	87 7f       	andi	r24, 0xF7	; 247
    10e6:	89 b9       	out	0x09, r24	; 9
    10e8:	08 95       	ret

000010ea <SX1243Write>:
	CTRL_set_level(0);
}


U8 SX1243Write(U8 instruction, U32 data)
{
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	6a 01       	movw	r12, r20
    10f4:	7b 01       	movw	r14, r22
	switch(instruction)
    10f6:	88 23       	and	r24, r24
    10f8:	19 f0       	breq	.+6      	; 0x1100 <SX1243Write+0x16>
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	21 f0       	breq	.+8      	; 0x1106 <SX1243Write+0x1c>
    10fe:	16 c0       	rjmp	.+44     	; 0x112c <SX1243Write+0x42>
	{
		case INSTRUCTION_CONFIG: // Config
		SpiOut(INST_WRITE_CFG);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	da df       	rcall	.-76     	; 0x10b8 <SpiOut>
		break;
    1104:	0a c0       	rjmp	.+20     	; 0x111a <SX1243Write+0x30>
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
    1106:	db 01       	movw	r26, r22
    1108:	ca 01       	movw	r24, r20
    110a:	88 27       	eor	r24, r24
    110c:	99 27       	eor	r25, r25
    110e:	a7 70       	andi	r26, 0x07	; 7
    1110:	bb 27       	eor	r27, r27
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	88 61       	ori	r24, 0x18	; 24
    1118:	cf df       	rcall	.-98     	; 0x10b8 <SpiOut>
		break;
		default:
		return SX_ERROR;
	}
	
	SpiOut((data >> 8) & 0xFF);
    111a:	8d 2d       	mov	r24, r13
    111c:	cd df       	rcall	.-102    	; 0x10b8 <SpiOut>
	SpiOut(data & 0xFF);
    111e:	8c 2d       	mov	r24, r12
    1120:	cb df       	rcall	.-106    	; 0x10b8 <SpiOut>
    1122:	89 b1       	in	r24, 0x09	; 9
    1124:	8f 7e       	andi	r24, 0xEF	; 239
    1126:	89 b9       	out	0x09, r24	; 9
	DATA_set_level(0);
	return SX_OK;
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	01 c0       	rjmp	.+2      	; 0x112e <SX1243Write+0x44>
		break;
		case INSTRUCTION_FREQUENCY: // Freq
		SpiOut((INST_WRITE_FREQ | (data & 0x070000)) >> 16);
		break;
		default:
		return SX_ERROR;
    112c:	81 e0       	ldi	r24, 0x01	; 1
	
	SpiOut((data >> 8) & 0xFF);
	SpiOut(data & 0xFF);
	DATA_set_level(0);
	return SX_OK;
}
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	08 95       	ret

00001138 <SX1243Reset>:
    1138:	89 b1       	in	r24, 0x09	; 9
    113a:	8f 7d       	andi	r24, 0xDF	; 223
    113c:	89 b9       	out	0x09, r24	; 9
    113e:	83 ed       	ldi	r24, 0xD3	; 211
    1140:	90 e3       	ldi	r25, 0x30	; 48
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <SX1243Reset+0xa>
    1146:	00 c0       	rjmp	.+0      	; 0x1148 <SX1243Reset+0x10>
    1148:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    114a:	89 b1       	in	r24, 0x09	; 9
    114c:	80 62       	ori	r24, 0x20	; 32
    114e:	89 b9       	out	0x09, r24	; 9
    1150:	08 95       	ret

00001152 <Sx1243ConvertBuffer>:
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	4a c0       	rjmp	.+148    	; 0x11ea <Sx1243ConvertBuffer+0x98>
	{
		fastBuf[j * 8 + 0] = TxParam.buffer[j] & 0x80;
    1156:	9c 01       	movw	r18, r24
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	22 0f       	add	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	22 0f       	add	r18, r18
    1162:	33 1f       	adc	r19, r19
    1164:	e0 91 15 3f 	lds	r30, 0x3F15	; 0x803f15 <TxParam+0x13>
    1168:	f0 91 16 3f 	lds	r31, 0x3F16	; 0x803f16 <TxParam+0x14>
    116c:	e8 0f       	add	r30, r24
    116e:	f9 1f       	adc	r31, r25
    1170:	40 81       	ld	r20, Z
    1172:	44 1f       	adc	r20, r20
    1174:	44 27       	eor	r20, r20
    1176:	44 1f       	adc	r20, r20
    1178:	d9 01       	movw	r26, r18
    117a:	ae 57       	subi	r26, 0x7E	; 126
    117c:	b1 4c       	sbci	r27, 0xC1	; 193
    117e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 1] = TxParam.buffer[j] & 0x40;
    1180:	40 81       	ld	r20, Z
    1182:	46 fb       	bst	r20, 6
    1184:	44 27       	eor	r20, r20
    1186:	40 f9       	bld	r20, 0
    1188:	d9 01       	movw	r26, r18
    118a:	ad 57       	subi	r26, 0x7D	; 125
    118c:	b1 4c       	sbci	r27, 0xC1	; 193
    118e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 2] = TxParam.buffer[j] & 0x20;
    1190:	40 81       	ld	r20, Z
    1192:	45 fb       	bst	r20, 5
    1194:	44 27       	eor	r20, r20
    1196:	40 f9       	bld	r20, 0
    1198:	d9 01       	movw	r26, r18
    119a:	ac 57       	subi	r26, 0x7C	; 124
    119c:	b1 4c       	sbci	r27, 0xC1	; 193
    119e:	4c 93       	st	X, r20
		fastBuf[j * 8 + 3] = TxParam.buffer[j] & 0x10;
    11a0:	40 81       	ld	r20, Z
    11a2:	42 95       	swap	r20
    11a4:	41 70       	andi	r20, 0x01	; 1
    11a6:	d9 01       	movw	r26, r18
    11a8:	ab 57       	subi	r26, 0x7B	; 123
    11aa:	b1 4c       	sbci	r27, 0xC1	; 193
    11ac:	4c 93       	st	X, r20
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
    11ae:	40 81       	ld	r20, Z
    11b0:	43 fb       	bst	r20, 3
    11b2:	44 27       	eor	r20, r20
    11b4:	40 f9       	bld	r20, 0
    11b6:	d9 01       	movw	r26, r18
    11b8:	aa 57       	subi	r26, 0x7A	; 122
    11ba:	b1 4c       	sbci	r27, 0xC1	; 193
    11bc:	4c 93       	st	X, r20
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
    11be:	40 81       	ld	r20, Z
    11c0:	42 fb       	bst	r20, 2
    11c2:	44 27       	eor	r20, r20
    11c4:	40 f9       	bld	r20, 0
    11c6:	d9 01       	movw	r26, r18
    11c8:	a9 57       	subi	r26, 0x79	; 121
    11ca:	b1 4c       	sbci	r27, 0xC1	; 193
    11cc:	4c 93       	st	X, r20
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
    11ce:	40 81       	ld	r20, Z
    11d0:	46 95       	lsr	r20
    11d2:	41 70       	andi	r20, 0x01	; 1
    11d4:	d9 01       	movw	r26, r18
    11d6:	a8 57       	subi	r26, 0x78	; 120
    11d8:	b1 4c       	sbci	r27, 0xC1	; 193
    11da:	4c 93       	st	X, r20
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
    11dc:	40 81       	ld	r20, Z
    11de:	41 70       	andi	r20, 0x01	; 1
    11e0:	f9 01       	movw	r30, r18
    11e2:	e7 57       	subi	r30, 0x77	; 119
    11e4:	f1 4c       	sbci	r31, 0xC1	; 193
    11e6:	40 83       	st	Z, r20
	return SX_OK;
}

void Sx1243ConvertBuffer(U8 startAddress)
{	
	for (U16 j = startAddress; j < TxParam.BufferSize; j++)
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	20 91 14 3f 	lds	r18, 0x3F14	; 0x803f14 <TxParam+0x12>
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	82 17       	cp	r24, r18
    11f2:	93 07       	cpc	r25, r19
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <Sx1243ConvertBuffer+0xa6>
    11f6:	af cf       	rjmp	.-162    	; 0x1156 <Sx1243ConvertBuffer+0x4>
		fastBuf[j * 8 + 4] = TxParam.buffer[j] & 0x08;
		fastBuf[j * 8 + 5] = TxParam.buffer[j] & 0x04;
		fastBuf[j * 8 + 6] = TxParam.buffer[j] & 0x02;
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}
    11f8:	08 95       	ret

000011fa <SX1243SetTxPacketBuffer>:
	NRESET_set_level(1);
}

U8 SX1243SetTxPacketBuffer(U8 *PayloadBuffer, U8 size)
{
	TxParam.buffer = PayloadBuffer;
    11fa:	e2 e0       	ldi	r30, 0x02	; 2
    11fc:	ff e3       	ldi	r31, 0x3F	; 63
    11fe:	83 8b       	std	Z+19, r24	; 0x13
    1200:	94 8b       	std	Z+20, r25	; 0x14
	TxParam.BufferSize = size;
    1202:	62 8b       	std	Z+18, r22	; 0x12
	fastBufSize = sizeof(fastBuf);
    1204:	80 e8       	ldi	r24, 0x80	; 128
    1206:	80 93 7f 3e 	sts	0x3E7F, r24	; 0x803e7f <fastBufSize>
	Sx1243ConvertBuffer(0);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	a2 df       	rcall	.-188    	; 0x1152 <Sx1243ConvertBuffer>
	return SX_OK;
}
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret

00001212 <SX1243Init>:
	DATA_set_level(0);
	return SX_OK;
}

U8 SX1243Init(U8 *PayloadBuffer, U8 size, U8 DataStartByte)
{
    1212:	ff 92       	push	r15
    1214:	0f 93       	push	r16
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	8c 01       	movw	r16, r24
    121e:	f6 2e       	mov	r15, r22
    1220:	c4 2f       	mov	r28, r20
	SX1243Reset();
    1222:	8a df       	rcall	.-236    	; 0x1138 <SX1243Reset>

	TxParam.Mode       = MODE_AUTOMATIC;
    1224:	e2 e0       	ldi	r30, 0x02	; 2
    1226:	ff e3       	ldi	r31, 0x3F	; 63
    1228:	10 8a       	std	Z+16, r1	; 0x10
    122a:	11 8a       	std	Z+17, r1	; 0x11
	TxParam.Modulation = MODULATION_FSK;
    122c:	16 86       	std	Z+14, r1	; 0x0e
    122e:	17 86       	std	Z+15, r1	; 0x0f
	TxParam.Band       = BAND_1;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e2       	ldi	r25, 0x20	; 32
    1234:	84 87       	std	Z+12, r24	; 0x0c
    1236:	95 87       	std	Z+13, r25	; 0x0d
	TxParam.FDev       = FDEV;
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	98 e0       	ldi	r25, 0x08	; 8
    123c:	82 87       	std	Z+10, r24	; 0x0a
    123e:	93 87       	std	Z+11, r25	; 0x0b
	TxParam.RfPower    = POWER_0DBM;
    1240:	10 86       	std	Z+8, r1	; 0x08
    1242:	11 86       	std	Z+9, r1	; 0x09
	TxParam.OffTimer   = TIMEOFF_2MS;
    1244:	16 82       	std	Z+6, r1	; 0x06
    1246:	17 82       	std	Z+7, r1	; 0x07
	TxParam.Reserved   = RESERVED;
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	84 83       	std	Z+4, r24	; 0x04
    124e:	95 83       	std	Z+5, r25	; 0x05
	TxParam.Freq	   = FRF;
    1250:	87 e2       	ldi	r24, 0x27	; 39
    1252:	96 e6       	ldi	r25, 0x66	; 102
    1254:	a4 e0       	ldi	r26, 0x04	; 4
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	80 83       	st	Z, r24
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	a2 83       	std	Z+2, r26	; 0x02
    125e:	b3 83       	std	Z+3, r27	; 0x03
	TxParam.Config	   = TxParam.Mode			| 
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	98 e2       	ldi	r25, 0x28	; 40
    1264:	85 8b       	std	Z+21, r24	; 0x15
    1266:	96 8b       	std	Z+22, r25	; 0x16
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
						 PayloadBuffer[DataStartByte + 0] ^ 
    1268:	4c 2f       	mov	r20, r28
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	d8 01       	movw	r26, r16
    126e:	a4 0f       	add	r26, r20
    1270:	b5 1f       	adc	r27, r21
    1272:	9c 91       	ld	r25, X
						 PayloadBuffer[DataStartByte + 1] ^ 
    1274:	9a 01       	movw	r18, r20
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	20 0f       	add	r18, r16
    127c:	31 1f       	adc	r19, r17
						 PayloadBuffer[DataStartByte + 2];
    127e:	4e 5f       	subi	r20, 0xFE	; 254
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	d8 01       	movw	r26, r16
    1284:	a4 0f       	add	r26, r20
    1286:	b5 1f       	adc	r27, r21
						 TxParam.Band			| 
						 TxParam.FDev			| 
						 TxParam.RfPower		| 
						 TxParam.OffTimer		| 
						 TxParam.Reserved;
	TxParam.CRC8Base   = 0xDB ^ 
    1288:	e9 01       	movw	r28, r18
    128a:	88 81       	ld	r24, Y
    128c:	89 27       	eor	r24, r25
    128e:	9c 91       	ld	r25, X
    1290:	89 27       	eor	r24, r25
    1292:	9b ed       	ldi	r25, 0xDB	; 219
    1294:	89 27       	eor	r24, r25
    1296:	87 8b       	std	Z+23, r24	; 0x17
						 PayloadBuffer[DataStartByte + 0] ^ 
						 PayloadBuffer[DataStartByte + 1] ^ 
						 PayloadBuffer[DataStartByte + 2];
	SX1243SetTxPacketBuffer(PayloadBuffer, size);
    1298:	6f 2d       	mov	r22, r15
    129a:	c8 01       	movw	r24, r16
    129c:	ae df       	rcall	.-164    	; 0x11fa <SX1243SetTxPacketBuffer>
	return SX_OK;
}
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	08 95       	ret

000012ac <SX1243CRC8>:
		fastBuf[j * 8 + 7] = TxParam.buffer[j] & 0x01;
	}
}

U8 SX1243CRC8(U8 *buffer)
{
    12ac:	fc 01       	movw	r30, r24
	return (uint8_t)(TxParam.CRC8Base ^ 
    12ae:	80 91 19 3f 	lds	r24, 0x3F19	; 0x803f19 <TxParam+0x17>
					 buffer[0]		  ^ 
    12b2:	50 81       	ld	r21, Z
					 buffer[1]		  ^ 
    12b4:	41 81       	ldd	r20, Z+1	; 0x01
					 buffer[2]		  ^ 
    12b6:	32 81       	ldd	r19, Z+2	; 0x02
					 buffer[3]		  ^ 
    12b8:	23 81       	ldd	r18, Z+3	; 0x03
					 buffer[4]		  ^ 
    12ba:	94 81       	ldd	r25, Z+4	; 0x04
					 buffer[5]);
    12bc:	65 81       	ldd	r22, Z+5	; 0x05
	}
}

U8 SX1243CRC8(U8 *buffer)
{
	return (uint8_t)(TxParam.CRC8Base ^ 
    12be:	85 27       	eor	r24, r21
    12c0:	84 27       	eor	r24, r20
    12c2:	83 27       	eor	r24, r19
    12c4:	82 27       	eor	r24, r18
    12c6:	89 27       	eor	r24, r25
					 buffer[1]		  ^ 
					 buffer[2]		  ^ 
					 buffer[3]		  ^ 
					 buffer[4]		  ^ 
					 buffer[5]);
}
    12c8:	86 27       	eor	r24, r22
    12ca:	08 95       	ret

000012cc <SX1243Process>:

U8 SX1243Process(void)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
	U8 state = SX_OK;
	U16 j = 0;

	TxParam.Config |= 0x8000;
    12d0:	c2 e0       	ldi	r28, 0x02	; 2
    12d2:	df e3       	ldi	r29, 0x3F	; 63
    12d4:	4d 89       	ldd	r20, Y+21	; 0x15
    12d6:	5e 89       	ldd	r21, Y+22	; 0x16
    12d8:	50 68       	ori	r21, 0x80	; 128
    12da:	4d 8b       	std	Y+21, r20	; 0x15
    12dc:	5e 8b       	std	Y+22, r21	; 0x16
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	02 df       	rcall	.-508    	; 0x10ea <SX1243Write>
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
    12e6:	48 81       	ld	r20, Y
    12e8:	59 81       	ldd	r21, Y+1	; 0x01
    12ea:	6a 81       	ldd	r22, Y+2	; 0x02
    12ec:	7b 81       	ldd	r23, Y+3	; 0x03
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	fc de       	rcall	.-520    	; 0x10ea <SX1243Write>
	TxParam.Config &= 0x7FFF;
    12f2:	8d 89       	ldd	r24, Y+21	; 0x15
    12f4:	9e 89       	ldd	r25, Y+22	; 0x16
    12f6:	9f 77       	andi	r25, 0x7F	; 127
    12f8:	8d 8b       	std	Y+21, r24	; 0x15
    12fa:	9e 8b       	std	Y+22, r25	; 0x16

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
    12fc:	80 91 2c 99 	lds	r24, 0x992C	; 0x80992c <__bss_end+0x5a12>
    1300:	8d 5f       	subi	r24, 0xFD	; 253
    1302:	27 df       	rcall	.-434    	; 0x1152 <Sx1243ConvertBuffer>
}

U8 SX1243Process(void)
{
	U8 state = SX_OK;
	U16 j = 0;
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <SX1243Process+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130a:	20 e1       	ldi	r18, 0x10	; 16
    130c:	2a 95       	dec	r18
    130e:	f1 f7       	brne	.-4      	; 0x130c <SX1243Process+0x40>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <SX1243Process+0x46>
	{
		_delay_us(10);
		j++;
    1312:	01 96       	adiw	r24, 0x01	; 1
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
	SX1243Write(INSTRUCTION_FREQUENCY, TxParam.Freq);
	TxParam.Config &= 0x7FFF;

	Sx1243ConvertBuffer(payloadBufferStartByte + 3);
	while(TX_READY_get_level() == 0 && j < TRANSMITTER_READY_TIMEOUT)
    1314:	52 99       	sbic	0x0a, 2	; 10
    1316:	03 c0       	rjmp	.+6      	; 0x131e <SX1243Process+0x52>
    1318:	8c 3d       	cpi	r24, 0xDC	; 220
    131a:	91 05       	cpc	r25, r1
    131c:	b0 f3       	brcs	.-20     	; 0x130a <SX1243Process+0x3e>
		_delay_us(10);
		j++;
	}
	
	
	if (j < TRANSMITTER_READY_TIMEOUT)
    131e:	8c 3d       	cpi	r24, 0xDC	; 220
    1320:	91 05       	cpc	r25, r1
    1322:	e8 f0       	brcs	.+58     	; 0x135e <SX1243Process+0x92>
    1324:	25 c0       	rjmp	.+74     	; 0x1370 <SX1243Process+0xa4>
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
		{
			DATA_set_level(fastBuf[j]);
    1326:	fc 01       	movw	r30, r24
    1328:	ee 57       	subi	r30, 0x7E	; 126
    132a:	f1 4c       	sbci	r31, 0xC1	; 193
    132c:	20 81       	ld	r18, Z
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    132e:	22 23       	and	r18, r18
    1330:	21 f0       	breq	.+8      	; 0x133a <SX1243Process+0x6e>
		VPORTC.OUT |= (1 << pin);
    1332:	29 b1       	in	r18, 0x09	; 9
    1334:	20 61       	ori	r18, 0x10	; 16
    1336:	29 b9       	out	0x09, r18	; 9
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <SX1243Process+0x74>
	} else {
		VPORTC.OUT &= ~(1 << pin);
    133a:	29 b1       	in	r18, 0x09	; 9
    133c:	2f 7e       	andi	r18, 0xEF	; 239
    133e:	29 b9       	out	0x09, r18	; 9
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	2a 95       	dec	r18
    1344:	f1 f7       	brne	.-4      	; 0x1342 <SX1243Process+0x76>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <SX1243Process+0x7c>
			_delay_us(6.4);
			if (!fastBuf[j])
    1348:	fc 01       	movw	r30, r24
    134a:	ee 57       	subi	r30, 0x7E	; 126
    134c:	f1 4c       	sbci	r31, 0xC1	; 193
    134e:	20 81       	ld	r18, Z
    1350:	21 11       	cpse	r18, r1
    1352:	03 c0       	rjmp	.+6      	; 0x135a <SX1243Process+0x8e>
			{
				_NOP();
    1354:	00 00       	nop
				_NOP();
    1356:	00 00       	nop
				_NOP();
    1358:	00 00       	nop
			}
			j++;
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <SX1243Process+0x96>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
	if (j < TRANSMITTER_READY_TIMEOUT)
	{
		j = 0;
		//FLASH_set_level(1);
		
		while (j < fastBufSize)
    1362:	20 91 7f 3e 	lds	r18, 0x3E7F	; 0x803e7f <fastBufSize>
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	82 17       	cp	r24, r18
    136a:	93 07       	cpc	r25, r19
    136c:	e0 f2       	brcs	.-72     	; 0x1326 <SX1243Process+0x5a>
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <SX1243Process+0xaa>
		
		//FLASH_set_level(0);
	}
	else
	{
		SX1243Reset();
    1370:	e3 de       	rcall	.-570    	; 0x1138 <SX1243Reset>
		return SX_ERROR;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <SX1243Process+0xbc>
	}
	
	SX1243Write(INSTRUCTION_CONFIG, TxParam.Config);
    1376:	40 91 17 3f 	lds	r20, 0x3F17	; 0x803f17 <TxParam+0x15>
    137a:	50 91 18 3f 	lds	r21, 0x3F18	; 0x803f18 <TxParam+0x16>
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	b2 de       	rcall	.-668    	; 0x10ea <SX1243Write>
		
	return state;
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <TOUCH_GetSensorValue>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    138e:	91 b1       	in	r25, 0x01	; 1
    1390:	9f 77       	andi	r25, 0x7F	; 127
    1392:	91 b9       	out	0x01, r25	; 1
uint16_t TOUCH_GetSensorValue(uint8_t touchPin, bool dir)
{
	uint16_t var = 0;
	SHIELD_set_level(false);
	
	switch (touchPin)
    1394:	88 23       	and	r24, r24
    1396:	19 f0       	breq	.+6      	; 0x139e <TOUCH_GetSensorValue+0x10>
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	89 f1       	breq	.+98     	; 0x13fe <TOUCH_GetSensorValue+0x70>
    139c:	60 c0       	rjmp	.+192    	; 0x145e <TOUCH_GetSensorValue+0xd0>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    139e:	66 23       	and	r22, r22
    13a0:	21 f0       	breq	.+8      	; 0x13aa <TOUCH_GetSensorValue+0x1c>
		VPORTB.OUT |= (1 << pin);
    13a2:	85 b1       	in	r24, 0x05	; 5
    13a4:	82 60       	ori	r24, 0x02	; 2
    13a6:	85 b9       	out	0x05, r24	; 5
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <TOUCH_GetSensorValue+0x22>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    13aa:	85 b1       	in	r24, 0x05	; 5
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    13b0:	84 b1       	in	r24, 0x04	; 4
    13b2:	82 60       	ori	r24, 0x02	; 2
    13b4:	84 b9       	out	0x04, r24	; 4
	{
		case 0:
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f6cda>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    13bc:	61 30       	cpi	r22, 0x01	; 1
    13be:	21 f0       	breq	.+8      	; 0x13c8 <TOUCH_GetSensorValue+0x3a>
		VPORTA.OUT |= (1 << pin);
    13c0:	81 b1       	in	r24, 0x01	; 1
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	81 b9       	out	0x01, r24	; 1
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <TOUCH_GetSensorValue+0x40>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    13c8:	81 b1       	in	r24, 0x01	; 1
    13ca:	8f 7b       	andi	r24, 0xBF	; 191
    13cc:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    13ce:	80 b1       	in	r24, 0x00	; 0
    13d0:	80 64       	ori	r24, 0x40	; 64
    13d2:	80 b9       	out	0x00, r24	; 0
    13d4:	85 e0       	ldi	r24, 0x05	; 5
    13d6:	8a 95       	dec	r24
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <TOUCH_GetSensorValue+0x48>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    13da:	80 b1       	in	r24, 0x00	; 0
    13dc:	8f 7b       	andi	r24, 0xBF	; 191
    13de:	80 b9       	out	0x00, r24	; 0
			//SX_set_pull_mode(PORT_PULL_OFF);
			
			//ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;			
			//_delay_us(TRANSFER_DELAY);
			
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN6_gc);
    13e0:	86 e0       	ldi	r24, 0x06	; 6
    13e2:	78 dd       	rcall	.-1296   	; 0xed4 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    13e4:	2a e0       	ldi	r18, 0x0A	; 10
    13e6:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f6cda>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    13ea:	25 b1       	in	r18, 0x05	; 5
    13ec:	22 60       	ori	r18, 0x02	; 2
    13ee:	25 b9       	out	0x05, r18	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    13f0:	21 b1       	in	r18, 0x01	; 1
    13f2:	20 64       	ori	r18, 0x40	; 64
    13f4:	21 b9       	out	0x01, r18	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    13f6:	20 b1       	in	r18, 0x00	; 0
    13f8:	20 64       	ori	r18, 0x40	; 64
    13fa:	20 b9       	out	0x00, r18	; 0
			//PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			//PARTNER_set_pull_mode(PORT_PULL_OFF);
			SX_set_level(true);
			SX_set_dir(PORT_DIR_OUT);
			
			return var;
    13fc:	08 95       	ret
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    13fe:	66 23       	and	r22, r22
    1400:	21 f0       	breq	.+8      	; 0x140a <TOUCH_GetSensorValue+0x7c>
		VPORTB.OUT |= (1 << pin);
    1402:	85 b1       	in	r24, 0x05	; 5
    1404:	82 60       	ori	r24, 0x02	; 2
    1406:	85 b9       	out	0x05, r24	; 5
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <TOUCH_GetSensorValue+0x82>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    140a:	85 b1       	in	r24, 0x05	; 5
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1410:	84 b1       	in	r24, 0x04	; 4
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	84 b9       	out	0x04, r24	; 4
		break;
		
		case 1:
			PARTNER_set_level(dir);
			PARTNER_set_dir(PORT_DIR_OUT);
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    1416:	8a e0       	ldi	r24, 0x0A	; 10
    1418:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <payloadBufferStartByte+0x7f6cda>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
    141c:	61 30       	cpi	r22, 0x01	; 1
    141e:	21 f0       	breq	.+8      	; 0x1428 <TOUCH_GetSensorValue+0x9a>
		VPORTB.OUT |= (1 << pin);
    1420:	85 b1       	in	r24, 0x05	; 5
    1422:	81 60       	ori	r24, 0x01	; 1
    1424:	85 b9       	out	0x05, r24	; 5
    1426:	03 c0       	rjmp	.+6      	; 0x142e <TOUCH_GetSensorValue+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1428:	85 b1       	in	r24, 0x05	; 5
    142a:	8e 7f       	andi	r24, 0xFE	; 254
    142c:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    142e:	84 b1       	in	r24, 0x04	; 4
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	84 b9       	out	0x04, r24	; 4
    1434:	85 e0       	ldi	r24, 0x05	; 5
    1436:	8a 95       	dec	r24
    1438:	f1 f7       	brne	.-4      	; 0x1436 <TOUCH_GetSensorValue+0xa8>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    143a:	84 b1       	in	r24, 0x04	; 4
    143c:	8e 7f       	andi	r24, 0xFE	; 254
    143e:	84 b9       	out	0x04, r24	; 4
			//SY_set_pull_mode(PORT_PULL_OFF);
		
			//ADC0.MUXPOS = ADC_MUXPOS_AIN11_gc;
			//_delay_us(TRANSFER_DELAY);
		
			var = ADC_0_get_conversion(ADC_MUXPOS_AIN11_gc);
    1440:	8b e0       	ldi	r24, 0x0B	; 11
    1442:	48 dd       	rcall	.-1392   	; 0xed4 <ADC_0_get_conversion>
			ADC0.MUXPOS = ADC_MUXPOS_AIN10_gc;
    1444:	2a e0       	ldi	r18, 0x0A	; 10
    1446:	20 93 06 06 	sts	0x0606, r18	; 0x800606 <payloadBufferStartByte+0x7f6cda>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    144a:	25 b1       	in	r18, 0x05	; 5
    144c:	22 60       	ori	r18, 0x02	; 2
    144e:	25 b9       	out	0x05, r18	; 5
    1450:	25 b1       	in	r18, 0x05	; 5
    1452:	21 60       	ori	r18, 0x01	; 1
    1454:	25 b9       	out	0x05, r18	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1456:	24 b1       	in	r18, 0x04	; 4
    1458:	21 60       	ori	r18, 0x01	; 1
    145a:	24 b9       	out	0x04, r18	; 4
			//PARTNER_set_isc(PORT_ISC_INPUT_DISABLE_gc);
			//PARTNER_set_pull_mode(PORT_PULL_OFF);
			SY_set_level(true);
			SY_set_dir(PORT_DIR_OUT);
			
			return var;
    145c:	08 95       	ret
		
		default:
		break;
	}
	
	return var;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
}
    1462:	08 95       	ret

00001464 <__divsf3>:
    1464:	0e 94 46 0a 	call	0x148c	; 0x148c <__divsf3x>
    1468:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_round>
    146c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fp_pscB>
    1470:	58 f0       	brcs	.+22     	; 0x1488 <__divsf3+0x24>
    1472:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_pscA>
    1476:	40 f0       	brcs	.+16     	; 0x1488 <__divsf3+0x24>
    1478:	29 f4       	brne	.+10     	; 0x1484 <__divsf3+0x20>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	29 f0       	breq	.+10     	; 0x1488 <__divsf3+0x24>
    147e:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__fp_inf>
    1482:	51 11       	cpse	r21, r1
    1484:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_szero>
    1488:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__fp_nan>

0000148c <__divsf3x>:
    148c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_split3>
    1490:	68 f3       	brcs	.-38     	; 0x146c <__divsf3+0x8>

00001492 <__divsf3_pse>:
    1492:	99 23       	and	r25, r25
    1494:	b1 f3       	breq	.-20     	; 0x1482 <__divsf3+0x1e>
    1496:	55 23       	and	r21, r21
    1498:	91 f3       	breq	.-28     	; 0x147e <__divsf3+0x1a>
    149a:	95 1b       	sub	r25, r21
    149c:	55 0b       	sbc	r21, r21
    149e:	bb 27       	eor	r27, r27
    14a0:	aa 27       	eor	r26, r26
    14a2:	62 17       	cp	r22, r18
    14a4:	73 07       	cpc	r23, r19
    14a6:	84 07       	cpc	r24, r20
    14a8:	38 f0       	brcs	.+14     	; 0x14b8 <__divsf3_pse+0x26>
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	44 1f       	adc	r20, r20
    14b4:	aa 1f       	adc	r26, r26
    14b6:	a9 f3       	breq	.-22     	; 0x14a2 <__divsf3_pse+0x10>
    14b8:	35 d0       	rcall	.+106    	; 0x1524 <__divsf3_pse+0x92>
    14ba:	0e 2e       	mov	r0, r30
    14bc:	3a f0       	brmi	.+14     	; 0x14cc <__divsf3_pse+0x3a>
    14be:	e0 e8       	ldi	r30, 0x80	; 128
    14c0:	32 d0       	rcall	.+100    	; 0x1526 <__divsf3_pse+0x94>
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	e6 95       	lsr	r30
    14c8:	00 1c       	adc	r0, r0
    14ca:	ca f7       	brpl	.-14     	; 0x14be <__divsf3_pse+0x2c>
    14cc:	2b d0       	rcall	.+86     	; 0x1524 <__divsf3_pse+0x92>
    14ce:	fe 2f       	mov	r31, r30
    14d0:	29 d0       	rcall	.+82     	; 0x1524 <__divsf3_pse+0x92>
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	bb 1f       	adc	r27, r27
    14da:	26 17       	cp	r18, r22
    14dc:	37 07       	cpc	r19, r23
    14de:	48 07       	cpc	r20, r24
    14e0:	ab 07       	cpc	r26, r27
    14e2:	b0 e8       	ldi	r27, 0x80	; 128
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__divsf3_pse+0x56>
    14e6:	bb 0b       	sbc	r27, r27
    14e8:	80 2d       	mov	r24, r0
    14ea:	bf 01       	movw	r22, r30
    14ec:	ff 27       	eor	r31, r31
    14ee:	93 58       	subi	r25, 0x83	; 131
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	3a f0       	brmi	.+14     	; 0x1502 <__divsf3_pse+0x70>
    14f4:	9e 3f       	cpi	r25, 0xFE	; 254
    14f6:	51 05       	cpc	r21, r1
    14f8:	78 f0       	brcs	.+30     	; 0x1518 <__divsf3_pse+0x86>
    14fa:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__fp_inf>
    14fe:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_szero>
    1502:	5f 3f       	cpi	r21, 0xFF	; 255
    1504:	e4 f3       	brlt	.-8      	; 0x14fe <__divsf3_pse+0x6c>
    1506:	98 3e       	cpi	r25, 0xE8	; 232
    1508:	d4 f3       	brlt	.-12     	; 0x14fe <__divsf3_pse+0x6c>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b7 95       	ror	r27
    1512:	f7 95       	ror	r31
    1514:	9f 5f       	subi	r25, 0xFF	; 255
    1516:	c9 f7       	brne	.-14     	; 0x150a <__divsf3_pse+0x78>
    1518:	88 0f       	add	r24, r24
    151a:	91 1d       	adc	r25, r1
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret
    1524:	e1 e0       	ldi	r30, 0x01	; 1
    1526:	66 0f       	add	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	bb 1f       	adc	r27, r27
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	ba 07       	cpc	r27, r26
    1536:	20 f0       	brcs	.+8      	; 0x1540 <__divsf3_pse+0xae>
    1538:	62 1b       	sub	r22, r18
    153a:	73 0b       	sbc	r23, r19
    153c:	84 0b       	sbc	r24, r20
    153e:	ba 0b       	sbc	r27, r26
    1540:	ee 1f       	adc	r30, r30
    1542:	88 f7       	brcc	.-30     	; 0x1526 <__divsf3_pse+0x94>
    1544:	e0 95       	com	r30
    1546:	08 95       	ret

00001548 <__fixsfdi>:
    1548:	be e3       	ldi	r27, 0x3E	; 62
    154a:	04 d0       	rcall	.+8      	; 0x1554 <__fixunssfdi+0x2>
    154c:	08 f4       	brcc	.+2      	; 0x1550 <__fixsfdi+0x8>
    154e:	90 e8       	ldi	r25, 0x80	; 128
    1550:	08 95       	ret

00001552 <__fixunssfdi>:
    1552:	bf e3       	ldi	r27, 0x3F	; 63
    1554:	22 27       	eor	r18, r18
    1556:	33 27       	eor	r19, r19
    1558:	a9 01       	movw	r20, r18
    155a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_splitA>
    155e:	60 f1       	brcs	.+88     	; 0x15b8 <__fixunssfdi+0x66>
    1560:	9f 57       	subi	r25, 0x7F	; 127
    1562:	48 f1       	brcs	.+82     	; 0x15b6 <__fixunssfdi+0x64>
    1564:	b9 17       	cp	r27, r25
    1566:	40 f1       	brcs	.+80     	; 0x15b8 <__fixunssfdi+0x66>
    1568:	bf e3       	ldi	r27, 0x3F	; 63
    156a:	b9 1b       	sub	r27, r25
    156c:	99 27       	eor	r25, r25
    156e:	b8 50       	subi	r27, 0x08	; 8
    1570:	3a f4       	brpl	.+14     	; 0x1580 <__fixunssfdi+0x2e>
    1572:	66 0f       	add	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	b3 95       	inc	r27
    157c:	d2 f3       	brmi	.-12     	; 0x1572 <__fixunssfdi+0x20>
    157e:	16 c0       	rjmp	.+44     	; 0x15ac <__fixunssfdi+0x5a>
    1580:	b8 50       	subi	r27, 0x08	; 8
    1582:	4a f0       	brmi	.+18     	; 0x1596 <__fixunssfdi+0x44>
    1584:	23 2f       	mov	r18, r19
    1586:	34 2f       	mov	r19, r20
    1588:	45 2f       	mov	r20, r21
    158a:	56 2f       	mov	r21, r22
    158c:	67 2f       	mov	r22, r23
    158e:	78 2f       	mov	r23, r24
    1590:	88 27       	eor	r24, r24
    1592:	b8 50       	subi	r27, 0x08	; 8
    1594:	ba f7       	brpl	.-18     	; 0x1584 <__fixunssfdi+0x32>
    1596:	b8 5f       	subi	r27, 0xF8	; 248
    1598:	49 f0       	breq	.+18     	; 0x15ac <__fixunssfdi+0x5a>
    159a:	86 95       	lsr	r24
    159c:	77 95       	ror	r23
    159e:	67 95       	ror	r22
    15a0:	57 95       	ror	r21
    15a2:	47 95       	ror	r20
    15a4:	37 95       	ror	r19
    15a6:	27 95       	ror	r18
    15a8:	ba 95       	dec	r27
    15aa:	b9 f7       	brne	.-18     	; 0x159a <__fixunssfdi+0x48>
    15ac:	16 f4       	brtc	.+4      	; 0x15b2 <__fixunssfdi+0x60>
    15ae:	0e 94 93 0b 	call	0x1726	; 0x1726 <__fp_negdi>
    15b2:	88 94       	clc
    15b4:	08 95       	ret
    15b6:	88 94       	clc
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	cb 01       	movw	r24, r22
    15be:	08 95       	ret

000015c0 <__fixunssfsi>:
    15c0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__fp_splitA>
    15c4:	88 f0       	brcs	.+34     	; 0x15e8 <__fixunssfsi+0x28>
    15c6:	9f 57       	subi	r25, 0x7F	; 127
    15c8:	98 f0       	brcs	.+38     	; 0x15f0 <__fixunssfsi+0x30>
    15ca:	b9 2f       	mov	r27, r25
    15cc:	99 27       	eor	r25, r25
    15ce:	b7 51       	subi	r27, 0x17	; 23
    15d0:	b0 f0       	brcs	.+44     	; 0x15fe <__fixunssfsi+0x3e>
    15d2:	e1 f0       	breq	.+56     	; 0x160c <__fixunssfsi+0x4c>
    15d4:	66 0f       	add	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	88 1f       	adc	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	1a f0       	brmi	.+6      	; 0x15e4 <__fixunssfsi+0x24>
    15de:	ba 95       	dec	r27
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__fixunssfsi+0x14>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <__fixunssfsi+0x4c>
    15e4:	b1 30       	cpi	r27, 0x01	; 1
    15e6:	91 f0       	breq	.+36     	; 0x160c <__fixunssfsi+0x4c>
    15e8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__fp_zero>
    15ec:	b1 e0       	ldi	r27, 0x01	; 1
    15ee:	08 95       	ret
    15f0:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__fp_zero>
    15f4:	67 2f       	mov	r22, r23
    15f6:	78 2f       	mov	r23, r24
    15f8:	88 27       	eor	r24, r24
    15fa:	b8 5f       	subi	r27, 0xF8	; 248
    15fc:	39 f0       	breq	.+14     	; 0x160c <__fixunssfsi+0x4c>
    15fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1600:	cc f3       	brlt	.-14     	; 0x15f4 <__fixunssfsi+0x34>
    1602:	86 95       	lsr	r24
    1604:	77 95       	ror	r23
    1606:	67 95       	ror	r22
    1608:	b3 95       	inc	r27
    160a:	d9 f7       	brne	.-10     	; 0x1602 <__fixunssfsi+0x42>
    160c:	3e f4       	brtc	.+14     	; 0x161c <__fixunssfsi+0x5c>
    160e:	90 95       	com	r25
    1610:	80 95       	com	r24
    1612:	70 95       	com	r23
    1614:	61 95       	neg	r22
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	8f 4f       	sbci	r24, 0xFF	; 255
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__floatunsisf>:
    161e:	e8 94       	clt
    1620:	09 c0       	rjmp	.+18     	; 0x1634 <__floatsisf+0x12>

00001622 <__floatsisf>:
    1622:	97 fb       	bst	r25, 7
    1624:	3e f4       	brtc	.+14     	; 0x1634 <__floatsisf+0x12>
    1626:	90 95       	com	r25
    1628:	80 95       	com	r24
    162a:	70 95       	com	r23
    162c:	61 95       	neg	r22
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	99 23       	and	r25, r25
    1636:	a9 f0       	breq	.+42     	; 0x1662 <__floatsisf+0x40>
    1638:	f9 2f       	mov	r31, r25
    163a:	96 e9       	ldi	r25, 0x96	; 150
    163c:	bb 27       	eor	r27, r27
    163e:	93 95       	inc	r25
    1640:	f6 95       	lsr	r31
    1642:	87 95       	ror	r24
    1644:	77 95       	ror	r23
    1646:	67 95       	ror	r22
    1648:	b7 95       	ror	r27
    164a:	f1 11       	cpse	r31, r1
    164c:	f8 cf       	rjmp	.-16     	; 0x163e <__floatsisf+0x1c>
    164e:	fa f4       	brpl	.+62     	; 0x168e <__floatsisf+0x6c>
    1650:	bb 0f       	add	r27, r27
    1652:	11 f4       	brne	.+4      	; 0x1658 <__floatsisf+0x36>
    1654:	60 ff       	sbrs	r22, 0
    1656:	1b c0       	rjmp	.+54     	; 0x168e <__floatsisf+0x6c>
    1658:	6f 5f       	subi	r22, 0xFF	; 255
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	8f 4f       	sbci	r24, 0xFF	; 255
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	16 c0       	rjmp	.+44     	; 0x168e <__floatsisf+0x6c>
    1662:	88 23       	and	r24, r24
    1664:	11 f0       	breq	.+4      	; 0x166a <__floatsisf+0x48>
    1666:	96 e9       	ldi	r25, 0x96	; 150
    1668:	11 c0       	rjmp	.+34     	; 0x168c <__floatsisf+0x6a>
    166a:	77 23       	and	r23, r23
    166c:	21 f0       	breq	.+8      	; 0x1676 <__floatsisf+0x54>
    166e:	9e e8       	ldi	r25, 0x8E	; 142
    1670:	87 2f       	mov	r24, r23
    1672:	76 2f       	mov	r23, r22
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <__floatsisf+0x5e>
    1676:	66 23       	and	r22, r22
    1678:	71 f0       	breq	.+28     	; 0x1696 <__floatsisf+0x74>
    167a:	96 e8       	ldi	r25, 0x86	; 134
    167c:	86 2f       	mov	r24, r22
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	2a f0       	brmi	.+10     	; 0x168e <__floatsisf+0x6c>
    1684:	9a 95       	dec	r25
    1686:	66 0f       	add	r22, r22
    1688:	77 1f       	adc	r23, r23
    168a:	88 1f       	adc	r24, r24
    168c:	da f7       	brpl	.-10     	; 0x1684 <__floatsisf+0x62>
    168e:	88 0f       	add	r24, r24
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret

00001698 <__floatundisf>:
    1698:	e8 94       	clt

0000169a <__fp_di2sf>:
    169a:	f9 2f       	mov	r31, r25
    169c:	96 eb       	ldi	r25, 0xB6	; 182
    169e:	ff 23       	and	r31, r31
    16a0:	81 f0       	breq	.+32     	; 0x16c2 <__fp_di2sf+0x28>
    16a2:	12 16       	cp	r1, r18
    16a4:	13 06       	cpc	r1, r19
    16a6:	14 06       	cpc	r1, r20
    16a8:	44 0b       	sbc	r20, r20
    16aa:	93 95       	inc	r25
    16ac:	f6 95       	lsr	r31
    16ae:	87 95       	ror	r24
    16b0:	77 95       	ror	r23
    16b2:	67 95       	ror	r22
    16b4:	57 95       	ror	r21
    16b6:	40 40       	sbci	r20, 0x00	; 0
    16b8:	ff 23       	and	r31, r31
    16ba:	b9 f7       	brne	.-18     	; 0x16aa <__fp_di2sf+0x10>
    16bc:	1b c0       	rjmp	.+54     	; 0x16f4 <__fp_di2sf+0x5a>
    16be:	99 27       	eor	r25, r25
    16c0:	08 95       	ret
    16c2:	88 23       	and	r24, r24
    16c4:	51 f4       	brne	.+20     	; 0x16da <__fp_di2sf+0x40>
    16c6:	98 50       	subi	r25, 0x08	; 8
    16c8:	d2 f7       	brpl	.-12     	; 0x16be <__fp_di2sf+0x24>
    16ca:	87 2b       	or	r24, r23
    16cc:	76 2f       	mov	r23, r22
    16ce:	65 2f       	mov	r22, r21
    16d0:	54 2f       	mov	r21, r20
    16d2:	43 2f       	mov	r20, r19
    16d4:	32 2f       	mov	r19, r18
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	b1 f3       	breq	.-20     	; 0x16c6 <__fp_di2sf+0x2c>
    16da:	12 16       	cp	r1, r18
    16dc:	13 06       	cpc	r1, r19
    16de:	14 06       	cpc	r1, r20
    16e0:	44 0b       	sbc	r20, r20
    16e2:	88 23       	and	r24, r24
    16e4:	3a f0       	brmi	.+14     	; 0x16f4 <__fp_di2sf+0x5a>
    16e6:	9a 95       	dec	r25
    16e8:	44 0f       	add	r20, r20
    16ea:	55 1f       	adc	r21, r21
    16ec:	66 1f       	adc	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	ca f7       	brpl	.-14     	; 0x16e6 <__fp_di2sf+0x4c>
    16f4:	55 23       	and	r21, r21
    16f6:	4a f4       	brpl	.+18     	; 0x170a <__fp_di2sf+0x70>
    16f8:	44 0f       	add	r20, r20
    16fa:	55 1f       	adc	r21, r21
    16fc:	11 f4       	brne	.+4      	; 0x1702 <__fp_di2sf+0x68>
    16fe:	60 ff       	sbrs	r22, 0
    1700:	04 c0       	rjmp	.+8      	; 0x170a <__fp_di2sf+0x70>
    1702:	6f 5f       	subi	r22, 0xFF	; 255
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	88 0f       	add	r24, r24
    170c:	96 95       	lsr	r25
    170e:	87 95       	ror	r24
    1710:	97 f9       	bld	r25, 7
    1712:	08 95       	ret

00001714 <__fp_inf>:
    1714:	97 f9       	bld	r25, 7
    1716:	9f 67       	ori	r25, 0x7F	; 127
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	08 95       	ret

00001720 <__fp_nan>:
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	80 ec       	ldi	r24, 0xC0	; 192
    1724:	08 95       	ret

00001726 <__fp_negdi>:
    1726:	90 95       	com	r25
    1728:	80 95       	com	r24
    172a:	70 95       	com	r23
    172c:	60 95       	com	r22
    172e:	50 95       	com	r21
    1730:	40 95       	com	r20
    1732:	30 95       	com	r19
    1734:	21 95       	neg	r18
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	4f 4f       	sbci	r20, 0xFF	; 255
    173a:	5f 4f       	sbci	r21, 0xFF	; 255
    173c:	6f 4f       	sbci	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	8f 4f       	sbci	r24, 0xFF	; 255
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	08 95       	ret

00001746 <__fp_pscA>:
    1746:	00 24       	eor	r0, r0
    1748:	0a 94       	dec	r0
    174a:	16 16       	cp	r1, r22
    174c:	17 06       	cpc	r1, r23
    174e:	18 06       	cpc	r1, r24
    1750:	09 06       	cpc	r0, r25
    1752:	08 95       	ret

00001754 <__fp_pscB>:
    1754:	00 24       	eor	r0, r0
    1756:	0a 94       	dec	r0
    1758:	12 16       	cp	r1, r18
    175a:	13 06       	cpc	r1, r19
    175c:	14 06       	cpc	r1, r20
    175e:	05 06       	cpc	r0, r21
    1760:	08 95       	ret

00001762 <__fp_round>:
    1762:	09 2e       	mov	r0, r25
    1764:	03 94       	inc	r0
    1766:	00 0c       	add	r0, r0
    1768:	11 f4       	brne	.+4      	; 0x176e <__fp_round+0xc>
    176a:	88 23       	and	r24, r24
    176c:	52 f0       	brmi	.+20     	; 0x1782 <__fp_round+0x20>
    176e:	bb 0f       	add	r27, r27
    1770:	40 f4       	brcc	.+16     	; 0x1782 <__fp_round+0x20>
    1772:	bf 2b       	or	r27, r31
    1774:	11 f4       	brne	.+4      	; 0x177a <__fp_round+0x18>
    1776:	60 ff       	sbrs	r22, 0
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <__fp_round+0x20>
    177a:	6f 5f       	subi	r22, 0xFF	; 255
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	08 95       	ret

00001784 <__fp_split3>:
    1784:	57 fd       	sbrc	r21, 7
    1786:	90 58       	subi	r25, 0x80	; 128
    1788:	44 0f       	add	r20, r20
    178a:	55 1f       	adc	r21, r21
    178c:	59 f0       	breq	.+22     	; 0x17a4 <__fp_splitA+0x10>
    178e:	5f 3f       	cpi	r21, 0xFF	; 255
    1790:	71 f0       	breq	.+28     	; 0x17ae <__fp_splitA+0x1a>
    1792:	47 95       	ror	r20

00001794 <__fp_splitA>:
    1794:	88 0f       	add	r24, r24
    1796:	97 fb       	bst	r25, 7
    1798:	99 1f       	adc	r25, r25
    179a:	61 f0       	breq	.+24     	; 0x17b4 <__fp_splitA+0x20>
    179c:	9f 3f       	cpi	r25, 0xFF	; 255
    179e:	79 f0       	breq	.+30     	; 0x17be <__fp_splitA+0x2a>
    17a0:	87 95       	ror	r24
    17a2:	08 95       	ret
    17a4:	12 16       	cp	r1, r18
    17a6:	13 06       	cpc	r1, r19
    17a8:	14 06       	cpc	r1, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	f2 cf       	rjmp	.-28     	; 0x1792 <__fp_split3+0xe>
    17ae:	46 95       	lsr	r20
    17b0:	f1 df       	rcall	.-30     	; 0x1794 <__fp_splitA>
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <__fp_splitA+0x30>
    17b4:	16 16       	cp	r1, r22
    17b6:	17 06       	cpc	r1, r23
    17b8:	18 06       	cpc	r1, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	f1 cf       	rjmp	.-30     	; 0x17a0 <__fp_splitA+0xc>
    17be:	86 95       	lsr	r24
    17c0:	71 05       	cpc	r23, r1
    17c2:	61 05       	cpc	r22, r1
    17c4:	08 94       	sec
    17c6:	08 95       	ret

000017c8 <__fp_zero>:
    17c8:	e8 94       	clt

000017ca <__fp_szero>:
    17ca:	bb 27       	eor	r27, r27
    17cc:	66 27       	eor	r22, r22
    17ce:	77 27       	eor	r23, r23
    17d0:	cb 01       	movw	r24, r22
    17d2:	97 f9       	bld	r25, 7
    17d4:	08 95       	ret

000017d6 <__mulsf3>:
    17d6:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__mulsf3x>
    17da:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_round>
    17de:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_pscA>
    17e2:	38 f0       	brcs	.+14     	; 0x17f2 <__mulsf3+0x1c>
    17e4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__fp_pscB>
    17e8:	20 f0       	brcs	.+8      	; 0x17f2 <__mulsf3+0x1c>
    17ea:	95 23       	and	r25, r21
    17ec:	11 f0       	breq	.+4      	; 0x17f2 <__mulsf3+0x1c>
    17ee:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__fp_inf>
    17f2:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__fp_nan>
    17f6:	11 24       	eor	r1, r1
    17f8:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_szero>

000017fc <__mulsf3x>:
    17fc:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_split3>
    1800:	70 f3       	brcs	.-36     	; 0x17de <__mulsf3+0x8>

00001802 <__mulsf3_pse>:
    1802:	95 9f       	mul	r25, r21
    1804:	c1 f3       	breq	.-16     	; 0x17f6 <__mulsf3+0x20>
    1806:	95 0f       	add	r25, r21
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	55 1f       	adc	r21, r21
    180c:	62 9f       	mul	r22, r18
    180e:	f0 01       	movw	r30, r0
    1810:	72 9f       	mul	r23, r18
    1812:	bb 27       	eor	r27, r27
    1814:	f0 0d       	add	r31, r0
    1816:	b1 1d       	adc	r27, r1
    1818:	63 9f       	mul	r22, r19
    181a:	aa 27       	eor	r26, r26
    181c:	f0 0d       	add	r31, r0
    181e:	b1 1d       	adc	r27, r1
    1820:	aa 1f       	adc	r26, r26
    1822:	64 9f       	mul	r22, r20
    1824:	66 27       	eor	r22, r22
    1826:	b0 0d       	add	r27, r0
    1828:	a1 1d       	adc	r26, r1
    182a:	66 1f       	adc	r22, r22
    182c:	82 9f       	mul	r24, r18
    182e:	22 27       	eor	r18, r18
    1830:	b0 0d       	add	r27, r0
    1832:	a1 1d       	adc	r26, r1
    1834:	62 1f       	adc	r22, r18
    1836:	73 9f       	mul	r23, r19
    1838:	b0 0d       	add	r27, r0
    183a:	a1 1d       	adc	r26, r1
    183c:	62 1f       	adc	r22, r18
    183e:	83 9f       	mul	r24, r19
    1840:	a0 0d       	add	r26, r0
    1842:	61 1d       	adc	r22, r1
    1844:	22 1f       	adc	r18, r18
    1846:	74 9f       	mul	r23, r20
    1848:	33 27       	eor	r19, r19
    184a:	a0 0d       	add	r26, r0
    184c:	61 1d       	adc	r22, r1
    184e:	23 1f       	adc	r18, r19
    1850:	84 9f       	mul	r24, r20
    1852:	60 0d       	add	r22, r0
    1854:	21 1d       	adc	r18, r1
    1856:	82 2f       	mov	r24, r18
    1858:	76 2f       	mov	r23, r22
    185a:	6a 2f       	mov	r22, r26
    185c:	11 24       	eor	r1, r1
    185e:	9f 57       	subi	r25, 0x7F	; 127
    1860:	50 40       	sbci	r21, 0x00	; 0
    1862:	9a f0       	brmi	.+38     	; 0x188a <__mulsf3_pse+0x88>
    1864:	f1 f0       	breq	.+60     	; 0x18a2 <__mulsf3_pse+0xa0>
    1866:	88 23       	and	r24, r24
    1868:	4a f0       	brmi	.+18     	; 0x187c <__mulsf3_pse+0x7a>
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	bb 1f       	adc	r27, r27
    1870:	66 1f       	adc	r22, r22
    1872:	77 1f       	adc	r23, r23
    1874:	88 1f       	adc	r24, r24
    1876:	91 50       	subi	r25, 0x01	; 1
    1878:	50 40       	sbci	r21, 0x00	; 0
    187a:	a9 f7       	brne	.-22     	; 0x1866 <__mulsf3_pse+0x64>
    187c:	9e 3f       	cpi	r25, 0xFE	; 254
    187e:	51 05       	cpc	r21, r1
    1880:	80 f0       	brcs	.+32     	; 0x18a2 <__mulsf3_pse+0xa0>
    1882:	0c 94 8a 0b 	jmp	0x1714	; 0x1714 <__fp_inf>
    1886:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_szero>
    188a:	5f 3f       	cpi	r21, 0xFF	; 255
    188c:	e4 f3       	brlt	.-8      	; 0x1886 <__mulsf3_pse+0x84>
    188e:	98 3e       	cpi	r25, 0xE8	; 232
    1890:	d4 f3       	brlt	.-12     	; 0x1886 <__mulsf3_pse+0x84>
    1892:	86 95       	lsr	r24
    1894:	77 95       	ror	r23
    1896:	67 95       	ror	r22
    1898:	b7 95       	ror	r27
    189a:	f7 95       	ror	r31
    189c:	e7 95       	ror	r30
    189e:	9f 5f       	subi	r25, 0xFF	; 255
    18a0:	c1 f7       	brne	.-16     	; 0x1892 <__mulsf3_pse+0x90>
    18a2:	fe 2b       	or	r31, r30
    18a4:	88 0f       	add	r24, r24
    18a6:	91 1d       	adc	r25, r1
    18a8:	96 95       	lsr	r25
    18aa:	87 95       	ror	r24
    18ac:	97 f9       	bld	r25, 7
    18ae:	08 95       	ret

000018b0 <__ashrdi3>:
    18b0:	97 fb       	bst	r25, 7
    18b2:	10 f8       	bld	r1, 0

000018b4 <__lshrdi3>:
    18b4:	16 94       	lsr	r1
    18b6:	00 08       	sbc	r0, r0
    18b8:	0f 93       	push	r16
    18ba:	08 30       	cpi	r16, 0x08	; 8
    18bc:	98 f0       	brcs	.+38     	; 0x18e4 <__lshrdi3+0x30>
    18be:	08 50       	subi	r16, 0x08	; 8
    18c0:	23 2f       	mov	r18, r19
    18c2:	34 2f       	mov	r19, r20
    18c4:	45 2f       	mov	r20, r21
    18c6:	56 2f       	mov	r21, r22
    18c8:	67 2f       	mov	r22, r23
    18ca:	78 2f       	mov	r23, r24
    18cc:	89 2f       	mov	r24, r25
    18ce:	90 2d       	mov	r25, r0
    18d0:	f4 cf       	rjmp	.-24     	; 0x18ba <__lshrdi3+0x6>
    18d2:	05 94       	asr	r0
    18d4:	97 95       	ror	r25
    18d6:	87 95       	ror	r24
    18d8:	77 95       	ror	r23
    18da:	67 95       	ror	r22
    18dc:	57 95       	ror	r21
    18de:	47 95       	ror	r20
    18e0:	37 95       	ror	r19
    18e2:	27 95       	ror	r18
    18e4:	0a 95       	dec	r16
    18e6:	aa f7       	brpl	.-22     	; 0x18d2 <__lshrdi3+0x1e>
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <__adddi3>:
    18ec:	2a 0d       	add	r18, r10
    18ee:	3b 1d       	adc	r19, r11
    18f0:	4c 1d       	adc	r20, r12
    18f2:	5d 1d       	adc	r21, r13
    18f4:	6e 1d       	adc	r22, r14
    18f6:	7f 1d       	adc	r23, r15
    18f8:	80 1f       	adc	r24, r16
    18fa:	91 1f       	adc	r25, r17
    18fc:	08 95       	ret

000018fe <__adddi3_s8>:
    18fe:	00 24       	eor	r0, r0
    1900:	a7 fd       	sbrc	r26, 7
    1902:	00 94       	com	r0
    1904:	2a 0f       	add	r18, r26
    1906:	30 1d       	adc	r19, r0
    1908:	40 1d       	adc	r20, r0
    190a:	50 1d       	adc	r21, r0
    190c:	60 1d       	adc	r22, r0
    190e:	70 1d       	adc	r23, r0
    1910:	80 1d       	adc	r24, r0
    1912:	90 1d       	adc	r25, r0
    1914:	08 95       	ret

00001916 <__cmpdi2>:
    1916:	2a 15       	cp	r18, r10
    1918:	3b 05       	cpc	r19, r11
    191a:	4c 05       	cpc	r20, r12
    191c:	5d 05       	cpc	r21, r13
    191e:	6e 05       	cpc	r22, r14
    1920:	7f 05       	cpc	r23, r15
    1922:	80 07       	cpc	r24, r16
    1924:	91 07       	cpc	r25, r17
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
